
#
# This file describes a data model to load into bubbly,
# also known as the bubbly schema. A database schema is 
# generated from bubbly schema by bubbly. In this specific
# case, the schema is a set of sometimes unrelated tables,
# which are then used by different Go tests and .bubbly scripts.
# It's more convenient to have everything in one place than
# to have to manage a multitude of individual schema files.
#

// #############################
// INTERNAL TABLES
// #############################

table "_schema" {
    // TODO: this should really be another table
    field "tables" {
        type = map(any)
    }
}

table "_resource" {
    // TODO: we should remove this and use a unique constraint on name & kind
    field "id" {
        type = string
        unique = true
    }
    field "name" { type = string }
    field "kind" { type = string }
    field "api_version" { type = string }
    field "spec" { type = string }
    // TODO: should the metadata be changed to something more meaningful?
    field "metadata" {
        type = object({
            labels: map(string),
        })
    }
}

table "_event" {
    field "status" { type = string }
    field "error" { type = string }
    field "time" { type = time }

    join "_resource" {}
}

// #############################
// BASE TYPES (project, repo, etc)
// #############################

table "project" {
    field "name" {
        unique = true
        type = string
    }
}

table "repo" {
    // id for a repo is difficult to define. For git repositories we are
    // following a similar pattern to golang where github.com/valocode/bubbly
    // would be the id of the bubbly repository.
    // This has the advantage of being human readable and extractable from the
    // git remotes (hopefully!)
    field "id" {
        type = string
        unique = true
    }
    // name is used for friendly names in case the id is undesirable as the
    // display name
    field "name" {
        type = string
    }

    table "branch" {
        // A branch is unique by the repo that it belongs to
        unique = true

        field "name" {
            type = string
            unique = true
        }
    }
    // A specific commit/version in a git repository
    table "commit" {
        // A commit is unique by the branch that it belongs to
        unique = true

        field "id" {
            type = string
            unique = true
        }
        field "tag" {
            type = string
        }
        // Would be really cool to store the time of a commit, and then we can
        // track how long it takes to do things, e.g. time to deploy
        field "time" {
            type = string
        }

        join "branch" {}
    }

    join "project" { }
}

table "artifact" {
    // The name of the artifact
    field "name" {
        type = string
    }
    // The sha256 of an artifact shall uniquely identify it
    field "sha256" {
        type = string
        unique = true
    }
    // A url, or path to a docker image. Should always start with a type, e.g.
    // https:// or docker:// or file://
    field "location" {
        type = string
    }
}

// #############################
// RELEASE
// #############################

// release has no unique constraints but can be identified through it's release items
table "release" {
    // TODO: what other fields should a release have?
    field "name" {
        type = string
        unique = true 
    }
    field "version" {
        type = string
        unique = true 
    }

    join "project" { unique = true }
}

table "subrelease" {
    join "release" {
        alias = "parent"
    }

    join "release" {}
}

table "release_commit" {
    join "release" {}
    join "commit" {}
}

// release_item is used to represent what we are releasing in a single release
// and can be of different types: git, artifact or release.
// Based on the type it should have a join to one of those tables
// table "release_item" {

//     // type should be one of git (commit), artifact or release
//     field "type" {
//         type = string
//     }

//     // Join to release. A release can have one or more release_items.
//     // A release_item can belong to only one release, because it can have
//     // criteria associated with it, which are specific to a release
//     join "release" { }

//     // Join to the different item tables with a one-to-one relationship.
//     // Only at most and at least one of these joins should exist, based on the
//     // "type" field
//     join "commit" {
//         single = true
//         unique = true
//     }
//     join "artifact" {
//         single = true
//         unique = true
//     }
//     // TODO: this is a problem because this creates a second join from release_item
//     // to release... It could be solved by adding an alias
//     // join "release" {
//     //     alias = "item_release"
//     //     single = true
//     //     unique = true
//     // }
// }

// release_entry is used to record/log an event performed on a release,
// such as running of unit tests, or the creation of an artifact.
// release_entry is created by running a criteria and should contain the output
// from the running of that event.
// It has no unique fields, as release_entries should be append-only
table "release_entry" {
    field "name" {
        type = string
    }
    // release_entry can be of different types, e.g. artifact, deploy, criteria
    field "type" {
        // required = true
        type = string
    }
    field "time" {
        // required = true
        type = string
    }

    join "criteria_result" { single = true }
    join "artifact" { single = true }
    join "deploy_env" { single = true }

    // Join to a release so that we can get all the entries for a release
    // (entry log)
    join "release" { }
}

table "criteria_result" {
    // Criteria specific
    field "result" {
        type = bool
    }
    // Criteria specific
    field "reason" {
        type = string
    }
}

table "deploy_env" {
    // staging, prod, whatever
    field "env" {
        type = string
    }
}

table "release_artifact" {
    field "name" {
        type = string
        unique = true
    }
    join "release" {
        unique = true
    }
    join "artifact" {}
}

table "release_stage" {
    field "name" {
        type = string
        unique = true
    }

    join "release" { 
        unique = true
    }
}

table "release_criteria" {
    field "name" {
        type = string
        unique = true
    }
    join "release_stage" { }
    // The result of evaluating the criteria creates a criteria result
    join "criteria_result" {}
    // A release_criteria is unique per release
    join "release" { unique = true }
}

// #############################
// CODE_ISSUE
// #############################

table "code_scan" {
    field "tool" {
        type = string
    }
    join "release" {}
}

table "code_issue" {
    field "id" {
        type = string
    }
    field "message" {
        type = string
    }
    field "severity" {
        type = string
    }
    field "type" {
        type = string
        // security, quality,
    }
    join "code_scan" {}
}

// #############################
// TEST_RUN
// #############################

table "test_run" {
    field "tool" {
        type = string
    }
    field "type" {
        type = string
    }
    field "name" {
        type = string
    }
    field "elapsed" {
        type = number
    }
    field "result" {
        type = bool
    }
    table "test_case" {
        field "name" {
            type = string
        }
        field "result" {
            type = bool
        }
        field "message" {
            type = string
        }
    }

    join "release" { }
}
