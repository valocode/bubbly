// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releaseentry"
	"github.com/valocode/bubbly/ent/testrun"
)

// TestRun is the model entity for the TestRun schema.
type TestRun struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Tool holds the value of the "tool" field.
	Tool string `json:"tool,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestRunQuery when eager-loading is set.
	Edges                  TestRunEdges `json:"edges"`
	release_entry_test_run *int
	test_run_release       *int
}

// TestRunEdges holds the relations/edges for other nodes in the graph.
type TestRunEdges struct {
	// Release holds the value of the release edge.
	Release *Release `json:"release,omitempty"`
	// Entry holds the value of the entry edge.
	Entry *ReleaseEntry `json:"entry,omitempty"`
	// Tests holds the value of the tests edge.
	Tests []*TestCase `json:"tests,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ReleaseOrErr returns the Release value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestRunEdges) ReleaseOrErr() (*Release, error) {
	if e.loadedTypes[0] {
		if e.Release == nil {
			// The edge release was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: release.Label}
		}
		return e.Release, nil
	}
	return nil, &NotLoadedError{edge: "release"}
}

// EntryOrErr returns the Entry value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestRunEdges) EntryOrErr() (*ReleaseEntry, error) {
	if e.loadedTypes[1] {
		if e.Entry == nil {
			// The edge entry was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: releaseentry.Label}
		}
		return e.Entry, nil
	}
	return nil, &NotLoadedError{edge: "entry"}
}

// TestsOrErr returns the Tests value or an error if the edge
// was not loaded in eager-loading.
func (e TestRunEdges) TestsOrErr() ([]*TestCase, error) {
	if e.loadedTypes[2] {
		return e.Tests, nil
	}
	return nil, &NotLoadedError{edge: "tests"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestRun) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case testrun.FieldID:
			values[i] = new(sql.NullInt64)
		case testrun.FieldTool:
			values[i] = new(sql.NullString)
		case testrun.ForeignKeys[0]: // release_entry_test_run
			values[i] = new(sql.NullInt64)
		case testrun.ForeignKeys[1]: // test_run_release
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TestRun", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestRun fields.
func (tr *TestRun) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testrun.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tr.ID = int(value.Int64)
		case testrun.FieldTool:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tool", values[i])
			} else if value.Valid {
				tr.Tool = value.String
			}
		case testrun.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field release_entry_test_run", value)
			} else if value.Valid {
				tr.release_entry_test_run = new(int)
				*tr.release_entry_test_run = int(value.Int64)
			}
		case testrun.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field test_run_release", value)
			} else if value.Valid {
				tr.test_run_release = new(int)
				*tr.test_run_release = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRelease queries the "release" edge of the TestRun entity.
func (tr *TestRun) QueryRelease() *ReleaseQuery {
	return (&TestRunClient{config: tr.config}).QueryRelease(tr)
}

// QueryEntry queries the "entry" edge of the TestRun entity.
func (tr *TestRun) QueryEntry() *ReleaseEntryQuery {
	return (&TestRunClient{config: tr.config}).QueryEntry(tr)
}

// QueryTests queries the "tests" edge of the TestRun entity.
func (tr *TestRun) QueryTests() *TestCaseQuery {
	return (&TestRunClient{config: tr.config}).QueryTests(tr)
}

// Update returns a builder for updating this TestRun.
// Note that you need to call TestRun.Unwrap() before calling this method if this TestRun
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TestRun) Update() *TestRunUpdateOne {
	return (&TestRunClient{config: tr.config}).UpdateOne(tr)
}

// Unwrap unwraps the TestRun entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tr *TestRun) Unwrap() *TestRun {
	tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestRun is not a transactional entity")
	}
	tr.config.driver = tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TestRun) String() string {
	var builder strings.Builder
	builder.WriteString("TestRun(")
	builder.WriteString(fmt.Sprintf("id=%v", tr.ID))
	builder.WriteString(", tool=")
	builder.WriteString(tr.Tool)
	builder.WriteByte(')')
	return builder.String()
}

// TestRuns is a parsable slice of TestRun.
type TestRuns []*TestRun

func (tr TestRuns) config(cfg config) {
	for _i := range tr {
		tr[_i].config = cfg
	}
}
