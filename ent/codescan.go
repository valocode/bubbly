// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/codescan"

	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releaseentry"
	schema "github.com/valocode/bubbly/ent/schema/types"
)

// CodeScan is the model entity for the CodeScan schema.
type CodeScan struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Tool holds the value of the "tool" field.
	Tool string `json:"tool,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata schema.Metadata `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CodeScanQuery when eager-loading is set.
	Edges                   CodeScanEdges `json:"edges"`
	code_scan_release       *int
	release_entry_code_scan *int
}

// CodeScanEdges holds the relations/edges for other nodes in the graph.
type CodeScanEdges struct {
	// Release holds the value of the release edge.
	Release *Release `json:"release,omitempty"`
	// Entry holds the value of the entry edge.
	Entry *ReleaseEntry `json:"entry,omitempty"`
	// Issues holds the value of the issues edge.
	Issues []*CodeIssue `json:"issues,omitempty"`
	// Vulnerabilities holds the value of the vulnerabilities edge.
	Vulnerabilities []*ReleaseVulnerability `json:"vulnerabilities,omitempty"`
	// Licenses holds the value of the licenses edge.
	Licenses []*ReleaseLicense `json:"licenses,omitempty"`
	// Components holds the value of the components edge.
	Components []*ReleaseComponent `json:"components,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// ReleaseOrErr returns the Release value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CodeScanEdges) ReleaseOrErr() (*Release, error) {
	if e.loadedTypes[0] {
		if e.Release == nil {
			// The edge release was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: release.Label}
		}
		return e.Release, nil
	}
	return nil, &NotLoadedError{edge: "release"}
}

// EntryOrErr returns the Entry value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CodeScanEdges) EntryOrErr() (*ReleaseEntry, error) {
	if e.loadedTypes[1] {
		if e.Entry == nil {
			// The edge entry was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: releaseentry.Label}
		}
		return e.Entry, nil
	}
	return nil, &NotLoadedError{edge: "entry"}
}

// IssuesOrErr returns the Issues value or an error if the edge
// was not loaded in eager-loading.
func (e CodeScanEdges) IssuesOrErr() ([]*CodeIssue, error) {
	if e.loadedTypes[2] {
		return e.Issues, nil
	}
	return nil, &NotLoadedError{edge: "issues"}
}

// VulnerabilitiesOrErr returns the Vulnerabilities value or an error if the edge
// was not loaded in eager-loading.
func (e CodeScanEdges) VulnerabilitiesOrErr() ([]*ReleaseVulnerability, error) {
	if e.loadedTypes[3] {
		return e.Vulnerabilities, nil
	}
	return nil, &NotLoadedError{edge: "vulnerabilities"}
}

// LicensesOrErr returns the Licenses value or an error if the edge
// was not loaded in eager-loading.
func (e CodeScanEdges) LicensesOrErr() ([]*ReleaseLicense, error) {
	if e.loadedTypes[4] {
		return e.Licenses, nil
	}
	return nil, &NotLoadedError{edge: "licenses"}
}

// ComponentsOrErr returns the Components value or an error if the edge
// was not loaded in eager-loading.
func (e CodeScanEdges) ComponentsOrErr() ([]*ReleaseComponent, error) {
	if e.loadedTypes[5] {
		return e.Components, nil
	}
	return nil, &NotLoadedError{edge: "components"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CodeScan) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case codescan.FieldMetadata:
			values[i] = new([]byte)
		case codescan.FieldID:
			values[i] = new(sql.NullInt64)
		case codescan.FieldTool:
			values[i] = new(sql.NullString)
		case codescan.FieldTime:
			values[i] = new(sql.NullTime)
		case codescan.ForeignKeys[0]: // code_scan_release
			values[i] = new(sql.NullInt64)
		case codescan.ForeignKeys[1]: // release_entry_code_scan
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CodeScan", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CodeScan fields.
func (cs *CodeScan) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case codescan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cs.ID = int(value.Int64)
		case codescan.FieldTool:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tool", values[i])
			} else if value.Valid {
				cs.Tool = value.String
			}
		case codescan.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				cs.Time = value.Time
			}
		case codescan.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cs.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case codescan.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field code_scan_release", value)
			} else if value.Valid {
				cs.code_scan_release = new(int)
				*cs.code_scan_release = int(value.Int64)
			}
		case codescan.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field release_entry_code_scan", value)
			} else if value.Valid {
				cs.release_entry_code_scan = new(int)
				*cs.release_entry_code_scan = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRelease queries the "release" edge of the CodeScan entity.
func (cs *CodeScan) QueryRelease() *ReleaseQuery {
	return (&CodeScanClient{config: cs.config}).QueryRelease(cs)
}

// QueryEntry queries the "entry" edge of the CodeScan entity.
func (cs *CodeScan) QueryEntry() *ReleaseEntryQuery {
	return (&CodeScanClient{config: cs.config}).QueryEntry(cs)
}

// QueryIssues queries the "issues" edge of the CodeScan entity.
func (cs *CodeScan) QueryIssues() *CodeIssueQuery {
	return (&CodeScanClient{config: cs.config}).QueryIssues(cs)
}

// QueryVulnerabilities queries the "vulnerabilities" edge of the CodeScan entity.
func (cs *CodeScan) QueryVulnerabilities() *ReleaseVulnerabilityQuery {
	return (&CodeScanClient{config: cs.config}).QueryVulnerabilities(cs)
}

// QueryLicenses queries the "licenses" edge of the CodeScan entity.
func (cs *CodeScan) QueryLicenses() *ReleaseLicenseQuery {
	return (&CodeScanClient{config: cs.config}).QueryLicenses(cs)
}

// QueryComponents queries the "components" edge of the CodeScan entity.
func (cs *CodeScan) QueryComponents() *ReleaseComponentQuery {
	return (&CodeScanClient{config: cs.config}).QueryComponents(cs)
}

// Update returns a builder for updating this CodeScan.
// Note that you need to call CodeScan.Unwrap() before calling this method if this CodeScan
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CodeScan) Update() *CodeScanUpdateOne {
	return (&CodeScanClient{config: cs.config}).UpdateOne(cs)
}

// Unwrap unwraps the CodeScan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CodeScan) Unwrap() *CodeScan {
	tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CodeScan is not a transactional entity")
	}
	cs.config.driver = tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CodeScan) String() string {
	var builder strings.Builder
	builder.WriteString("CodeScan(")
	builder.WriteString(fmt.Sprintf("id=%v", cs.ID))
	builder.WriteString(", tool=")
	builder.WriteString(cs.Tool)
	builder.WriteString(", time=")
	builder.WriteString(cs.Time.Format(time.ANSIC))
	builder.WriteString(", metadata=")
	builder.WriteString(fmt.Sprintf("%v", cs.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// CodeScans is a parsable slice of CodeScan.
type CodeScans []*CodeScan

func (cs CodeScans) config(cfg config) {
	for _i := range cs {
		cs[_i].config = cfg
	}
}
