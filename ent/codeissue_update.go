// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/codeissue"
	"github.com/valocode/bubbly/ent/codescan"
	"github.com/valocode/bubbly/ent/predicate"
	schema "github.com/valocode/bubbly/ent/schema/types"
)

// CodeIssueUpdate is the builder for updating CodeIssue entities.
type CodeIssueUpdate struct {
	config
	hooks    []Hook
	mutation *CodeIssueMutation
}

// Where appends a list predicates to the CodeIssueUpdate builder.
func (ciu *CodeIssueUpdate) Where(ps ...predicate.CodeIssue) *CodeIssueUpdate {
	ciu.mutation.Where(ps...)
	return ciu
}

// SetMetadata sets the "metadata" field.
func (ciu *CodeIssueUpdate) SetMetadata(s schema.Metadata) *CodeIssueUpdate {
	ciu.mutation.SetMetadata(s)
	return ciu
}

// ClearMetadata clears the value of the "metadata" field.
func (ciu *CodeIssueUpdate) ClearMetadata() *CodeIssueUpdate {
	ciu.mutation.ClearMetadata()
	return ciu
}

// SetScanID sets the "scan" edge to the CodeScan entity by ID.
func (ciu *CodeIssueUpdate) SetScanID(id int) *CodeIssueUpdate {
	ciu.mutation.SetScanID(id)
	return ciu
}

// SetScan sets the "scan" edge to the CodeScan entity.
func (ciu *CodeIssueUpdate) SetScan(c *CodeScan) *CodeIssueUpdate {
	return ciu.SetScanID(c.ID)
}

// Mutation returns the CodeIssueMutation object of the builder.
func (ciu *CodeIssueUpdate) Mutation() *CodeIssueMutation {
	return ciu.mutation
}

// ClearScan clears the "scan" edge to the CodeScan entity.
func (ciu *CodeIssueUpdate) ClearScan() *CodeIssueUpdate {
	ciu.mutation.ClearScan()
	return ciu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciu *CodeIssueUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ciu.hooks) == 0 {
		if err = ciu.check(); err != nil {
			return 0, err
		}
		affected, err = ciu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodeIssueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ciu.check(); err != nil {
				return 0, err
			}
			ciu.mutation = mutation
			affected, err = ciu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ciu.hooks) - 1; i >= 0; i-- {
			if ciu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ciu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ciu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *CodeIssueUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *CodeIssueUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *CodeIssueUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciu *CodeIssueUpdate) check() error {
	if _, ok := ciu.mutation.ScanID(); ciu.mutation.ScanCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"scan\"")
	}
	return nil
}

func (ciu *CodeIssueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   codeissue.Table,
			Columns: codeissue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codeissue.FieldID,
			},
		},
	}
	if ps := ciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: codeissue.FieldMetadata,
		})
	}
	if ciu.mutation.MetadataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: codeissue.FieldMetadata,
		})
	}
	if ciu.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codeissue.ScanTable,
			Columns: []string{codeissue.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codeissue.ScanTable,
			Columns: []string{codeissue.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codeissue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CodeIssueUpdateOne is the builder for updating a single CodeIssue entity.
type CodeIssueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CodeIssueMutation
}

// SetMetadata sets the "metadata" field.
func (ciuo *CodeIssueUpdateOne) SetMetadata(s schema.Metadata) *CodeIssueUpdateOne {
	ciuo.mutation.SetMetadata(s)
	return ciuo
}

// ClearMetadata clears the value of the "metadata" field.
func (ciuo *CodeIssueUpdateOne) ClearMetadata() *CodeIssueUpdateOne {
	ciuo.mutation.ClearMetadata()
	return ciuo
}

// SetScanID sets the "scan" edge to the CodeScan entity by ID.
func (ciuo *CodeIssueUpdateOne) SetScanID(id int) *CodeIssueUpdateOne {
	ciuo.mutation.SetScanID(id)
	return ciuo
}

// SetScan sets the "scan" edge to the CodeScan entity.
func (ciuo *CodeIssueUpdateOne) SetScan(c *CodeScan) *CodeIssueUpdateOne {
	return ciuo.SetScanID(c.ID)
}

// Mutation returns the CodeIssueMutation object of the builder.
func (ciuo *CodeIssueUpdateOne) Mutation() *CodeIssueMutation {
	return ciuo.mutation
}

// ClearScan clears the "scan" edge to the CodeScan entity.
func (ciuo *CodeIssueUpdateOne) ClearScan() *CodeIssueUpdateOne {
	ciuo.mutation.ClearScan()
	return ciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuo *CodeIssueUpdateOne) Select(field string, fields ...string) *CodeIssueUpdateOne {
	ciuo.fields = append([]string{field}, fields...)
	return ciuo
}

// Save executes the query and returns the updated CodeIssue entity.
func (ciuo *CodeIssueUpdateOne) Save(ctx context.Context) (*CodeIssue, error) {
	var (
		err  error
		node *CodeIssue
	)
	if len(ciuo.hooks) == 0 {
		if err = ciuo.check(); err != nil {
			return nil, err
		}
		node, err = ciuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodeIssueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ciuo.check(); err != nil {
				return nil, err
			}
			ciuo.mutation = mutation
			node, err = ciuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ciuo.hooks) - 1; i >= 0; i-- {
			if ciuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ciuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ciuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *CodeIssueUpdateOne) SaveX(ctx context.Context) *CodeIssue {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *CodeIssueUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *CodeIssueUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciuo *CodeIssueUpdateOne) check() error {
	if _, ok := ciuo.mutation.ScanID(); ciuo.mutation.ScanCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"scan\"")
	}
	return nil
}

func (ciuo *CodeIssueUpdateOne) sqlSave(ctx context.Context) (_node *CodeIssue, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   codeissue.Table,
			Columns: codeissue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codeissue.FieldID,
			},
		},
	}
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CodeIssue.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, codeissue.FieldID)
		for _, f := range fields {
			if !codeissue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != codeissue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciuo.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: codeissue.FieldMetadata,
		})
	}
	if ciuo.mutation.MetadataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: codeissue.FieldMetadata,
		})
	}
	if ciuo.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codeissue.ScanTable,
			Columns: []string{codeissue.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codeissue.ScanTable,
			Columns: []string{codeissue.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CodeIssue{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codeissue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
