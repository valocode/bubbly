// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/codescan"
	"github.com/valocode/bubbly/ent/license"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasecomponent"
	"github.com/valocode/bubbly/ent/releaselicense"
)

// ReleaseLicenseUpdate is the builder for updating ReleaseLicense entities.
type ReleaseLicenseUpdate struct {
	config
	hooks    []Hook
	mutation *ReleaseLicenseMutation
}

// Where appends a list predicates to the ReleaseLicenseUpdate builder.
func (rlu *ReleaseLicenseUpdate) Where(ps ...predicate.ReleaseLicense) *ReleaseLicenseUpdate {
	rlu.mutation.Where(ps...)
	return rlu
}

// SetLicenseID sets the "license" edge to the License entity by ID.
func (rlu *ReleaseLicenseUpdate) SetLicenseID(id int) *ReleaseLicenseUpdate {
	rlu.mutation.SetLicenseID(id)
	return rlu
}

// SetLicense sets the "license" edge to the License entity.
func (rlu *ReleaseLicenseUpdate) SetLicense(l *License) *ReleaseLicenseUpdate {
	return rlu.SetLicenseID(l.ID)
}

// SetComponentID sets the "component" edge to the ReleaseComponent entity by ID.
func (rlu *ReleaseLicenseUpdate) SetComponentID(id int) *ReleaseLicenseUpdate {
	rlu.mutation.SetComponentID(id)
	return rlu
}

// SetNillableComponentID sets the "component" edge to the ReleaseComponent entity by ID if the given value is not nil.
func (rlu *ReleaseLicenseUpdate) SetNillableComponentID(id *int) *ReleaseLicenseUpdate {
	if id != nil {
		rlu = rlu.SetComponentID(*id)
	}
	return rlu
}

// SetComponent sets the "component" edge to the ReleaseComponent entity.
func (rlu *ReleaseLicenseUpdate) SetComponent(r *ReleaseComponent) *ReleaseLicenseUpdate {
	return rlu.SetComponentID(r.ID)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (rlu *ReleaseLicenseUpdate) SetReleaseID(id int) *ReleaseLicenseUpdate {
	rlu.mutation.SetReleaseID(id)
	return rlu
}

// SetRelease sets the "release" edge to the Release entity.
func (rlu *ReleaseLicenseUpdate) SetRelease(r *Release) *ReleaseLicenseUpdate {
	return rlu.SetReleaseID(r.ID)
}

// AddScanIDs adds the "scans" edge to the CodeScan entity by IDs.
func (rlu *ReleaseLicenseUpdate) AddScanIDs(ids ...int) *ReleaseLicenseUpdate {
	rlu.mutation.AddScanIDs(ids...)
	return rlu
}

// AddScans adds the "scans" edges to the CodeScan entity.
func (rlu *ReleaseLicenseUpdate) AddScans(c ...*CodeScan) *ReleaseLicenseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rlu.AddScanIDs(ids...)
}

// Mutation returns the ReleaseLicenseMutation object of the builder.
func (rlu *ReleaseLicenseUpdate) Mutation() *ReleaseLicenseMutation {
	return rlu.mutation
}

// ClearLicense clears the "license" edge to the License entity.
func (rlu *ReleaseLicenseUpdate) ClearLicense() *ReleaseLicenseUpdate {
	rlu.mutation.ClearLicense()
	return rlu
}

// ClearComponent clears the "component" edge to the ReleaseComponent entity.
func (rlu *ReleaseLicenseUpdate) ClearComponent() *ReleaseLicenseUpdate {
	rlu.mutation.ClearComponent()
	return rlu
}

// ClearRelease clears the "release" edge to the Release entity.
func (rlu *ReleaseLicenseUpdate) ClearRelease() *ReleaseLicenseUpdate {
	rlu.mutation.ClearRelease()
	return rlu
}

// ClearScans clears all "scans" edges to the CodeScan entity.
func (rlu *ReleaseLicenseUpdate) ClearScans() *ReleaseLicenseUpdate {
	rlu.mutation.ClearScans()
	return rlu
}

// RemoveScanIDs removes the "scans" edge to CodeScan entities by IDs.
func (rlu *ReleaseLicenseUpdate) RemoveScanIDs(ids ...int) *ReleaseLicenseUpdate {
	rlu.mutation.RemoveScanIDs(ids...)
	return rlu
}

// RemoveScans removes "scans" edges to CodeScan entities.
func (rlu *ReleaseLicenseUpdate) RemoveScans(c ...*CodeScan) *ReleaseLicenseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rlu.RemoveScanIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rlu *ReleaseLicenseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rlu.hooks) == 0 {
		if err = rlu.check(); err != nil {
			return 0, err
		}
		affected, err = rlu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseLicenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rlu.check(); err != nil {
				return 0, err
			}
			rlu.mutation = mutation
			affected, err = rlu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rlu.hooks) - 1; i >= 0; i-- {
			if rlu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rlu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rlu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rlu *ReleaseLicenseUpdate) SaveX(ctx context.Context) int {
	affected, err := rlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rlu *ReleaseLicenseUpdate) Exec(ctx context.Context) error {
	_, err := rlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlu *ReleaseLicenseUpdate) ExecX(ctx context.Context) {
	if err := rlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rlu *ReleaseLicenseUpdate) check() error {
	if _, ok := rlu.mutation.LicenseID(); rlu.mutation.LicenseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"license\"")
	}
	if _, ok := rlu.mutation.ReleaseID(); rlu.mutation.ReleaseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"release\"")
	}
	return nil
}

func (rlu *ReleaseLicenseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releaselicense.Table,
			Columns: releaselicense.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releaselicense.FieldID,
			},
		},
	}
	if ps := rlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rlu.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaselicense.LicenseTable,
			Columns: []string{releaselicense.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: license.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rlu.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaselicense.LicenseTable,
			Columns: []string{releaselicense.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: license.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rlu.mutation.ComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaselicense.ComponentTable,
			Columns: []string{releaselicense.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasecomponent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rlu.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaselicense.ComponentTable,
			Columns: []string{releaselicense.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasecomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rlu.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaselicense.ReleaseTable,
			Columns: []string{releaselicense.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rlu.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaselicense.ReleaseTable,
			Columns: []string{releaselicense.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rlu.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releaselicense.ScansTable,
			Columns: releaselicense.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rlu.mutation.RemovedScansIDs(); len(nodes) > 0 && !rlu.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releaselicense.ScansTable,
			Columns: releaselicense.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rlu.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releaselicense.ScansTable,
			Columns: releaselicense.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releaselicense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ReleaseLicenseUpdateOne is the builder for updating a single ReleaseLicense entity.
type ReleaseLicenseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReleaseLicenseMutation
}

// SetLicenseID sets the "license" edge to the License entity by ID.
func (rluo *ReleaseLicenseUpdateOne) SetLicenseID(id int) *ReleaseLicenseUpdateOne {
	rluo.mutation.SetLicenseID(id)
	return rluo
}

// SetLicense sets the "license" edge to the License entity.
func (rluo *ReleaseLicenseUpdateOne) SetLicense(l *License) *ReleaseLicenseUpdateOne {
	return rluo.SetLicenseID(l.ID)
}

// SetComponentID sets the "component" edge to the ReleaseComponent entity by ID.
func (rluo *ReleaseLicenseUpdateOne) SetComponentID(id int) *ReleaseLicenseUpdateOne {
	rluo.mutation.SetComponentID(id)
	return rluo
}

// SetNillableComponentID sets the "component" edge to the ReleaseComponent entity by ID if the given value is not nil.
func (rluo *ReleaseLicenseUpdateOne) SetNillableComponentID(id *int) *ReleaseLicenseUpdateOne {
	if id != nil {
		rluo = rluo.SetComponentID(*id)
	}
	return rluo
}

// SetComponent sets the "component" edge to the ReleaseComponent entity.
func (rluo *ReleaseLicenseUpdateOne) SetComponent(r *ReleaseComponent) *ReleaseLicenseUpdateOne {
	return rluo.SetComponentID(r.ID)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (rluo *ReleaseLicenseUpdateOne) SetReleaseID(id int) *ReleaseLicenseUpdateOne {
	rluo.mutation.SetReleaseID(id)
	return rluo
}

// SetRelease sets the "release" edge to the Release entity.
func (rluo *ReleaseLicenseUpdateOne) SetRelease(r *Release) *ReleaseLicenseUpdateOne {
	return rluo.SetReleaseID(r.ID)
}

// AddScanIDs adds the "scans" edge to the CodeScan entity by IDs.
func (rluo *ReleaseLicenseUpdateOne) AddScanIDs(ids ...int) *ReleaseLicenseUpdateOne {
	rluo.mutation.AddScanIDs(ids...)
	return rluo
}

// AddScans adds the "scans" edges to the CodeScan entity.
func (rluo *ReleaseLicenseUpdateOne) AddScans(c ...*CodeScan) *ReleaseLicenseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rluo.AddScanIDs(ids...)
}

// Mutation returns the ReleaseLicenseMutation object of the builder.
func (rluo *ReleaseLicenseUpdateOne) Mutation() *ReleaseLicenseMutation {
	return rluo.mutation
}

// ClearLicense clears the "license" edge to the License entity.
func (rluo *ReleaseLicenseUpdateOne) ClearLicense() *ReleaseLicenseUpdateOne {
	rluo.mutation.ClearLicense()
	return rluo
}

// ClearComponent clears the "component" edge to the ReleaseComponent entity.
func (rluo *ReleaseLicenseUpdateOne) ClearComponent() *ReleaseLicenseUpdateOne {
	rluo.mutation.ClearComponent()
	return rluo
}

// ClearRelease clears the "release" edge to the Release entity.
func (rluo *ReleaseLicenseUpdateOne) ClearRelease() *ReleaseLicenseUpdateOne {
	rluo.mutation.ClearRelease()
	return rluo
}

// ClearScans clears all "scans" edges to the CodeScan entity.
func (rluo *ReleaseLicenseUpdateOne) ClearScans() *ReleaseLicenseUpdateOne {
	rluo.mutation.ClearScans()
	return rluo
}

// RemoveScanIDs removes the "scans" edge to CodeScan entities by IDs.
func (rluo *ReleaseLicenseUpdateOne) RemoveScanIDs(ids ...int) *ReleaseLicenseUpdateOne {
	rluo.mutation.RemoveScanIDs(ids...)
	return rluo
}

// RemoveScans removes "scans" edges to CodeScan entities.
func (rluo *ReleaseLicenseUpdateOne) RemoveScans(c ...*CodeScan) *ReleaseLicenseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rluo.RemoveScanIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rluo *ReleaseLicenseUpdateOne) Select(field string, fields ...string) *ReleaseLicenseUpdateOne {
	rluo.fields = append([]string{field}, fields...)
	return rluo
}

// Save executes the query and returns the updated ReleaseLicense entity.
func (rluo *ReleaseLicenseUpdateOne) Save(ctx context.Context) (*ReleaseLicense, error) {
	var (
		err  error
		node *ReleaseLicense
	)
	if len(rluo.hooks) == 0 {
		if err = rluo.check(); err != nil {
			return nil, err
		}
		node, err = rluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseLicenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rluo.check(); err != nil {
				return nil, err
			}
			rluo.mutation = mutation
			node, err = rluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rluo.hooks) - 1; i >= 0; i-- {
			if rluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rluo *ReleaseLicenseUpdateOne) SaveX(ctx context.Context) *ReleaseLicense {
	node, err := rluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rluo *ReleaseLicenseUpdateOne) Exec(ctx context.Context) error {
	_, err := rluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rluo *ReleaseLicenseUpdateOne) ExecX(ctx context.Context) {
	if err := rluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rluo *ReleaseLicenseUpdateOne) check() error {
	if _, ok := rluo.mutation.LicenseID(); rluo.mutation.LicenseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"license\"")
	}
	if _, ok := rluo.mutation.ReleaseID(); rluo.mutation.ReleaseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"release\"")
	}
	return nil
}

func (rluo *ReleaseLicenseUpdateOne) sqlSave(ctx context.Context) (_node *ReleaseLicense, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releaselicense.Table,
			Columns: releaselicense.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releaselicense.FieldID,
			},
		},
	}
	id, ok := rluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ReleaseLicense.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, releaselicense.FieldID)
		for _, f := range fields {
			if !releaselicense.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != releaselicense.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rluo.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaselicense.LicenseTable,
			Columns: []string{releaselicense.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: license.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rluo.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaselicense.LicenseTable,
			Columns: []string{releaselicense.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: license.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rluo.mutation.ComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaselicense.ComponentTable,
			Columns: []string{releaselicense.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasecomponent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rluo.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaselicense.ComponentTable,
			Columns: []string{releaselicense.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasecomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rluo.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaselicense.ReleaseTable,
			Columns: []string{releaselicense.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rluo.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaselicense.ReleaseTable,
			Columns: []string{releaselicense.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rluo.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releaselicense.ScansTable,
			Columns: releaselicense.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rluo.mutation.RemovedScansIDs(); len(nodes) > 0 && !rluo.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releaselicense.ScansTable,
			Columns: releaselicense.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rluo.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releaselicense.ScansTable,
			Columns: releaselicense.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReleaseLicense{config: rluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releaselicense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
