// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/cve"
)

// CVE is the model entity for the CVE schema.
type CVE struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CveID holds the value of the "cve_id" field.
	CveID string `json:"cve_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// SeverityScore holds the value of the "severity_score" field.
	SeverityScore float64 `json:"severity_score,omitempty"`
	// Severity holds the value of the "severity" field.
	Severity cve.Severity `json:"severity,omitempty"`
	// PublishedData holds the value of the "published_data" field.
	PublishedData time.Time `json:"published_data,omitempty"`
	// ModifiedData holds the value of the "modified_data" field.
	ModifiedData time.Time `json:"modified_data,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CVEQuery when eager-loading is set.
	Edges CVEEdges `json:"edges"`
}

// CVEEdges holds the relations/edges for other nodes in the graph.
type CVEEdges struct {
	// Components holds the value of the components edge.
	Components []*Component `json:"components,omitempty"`
	// Vulnerabilities holds the value of the vulnerabilities edge.
	Vulnerabilities []*Vulnerability `json:"vulnerabilities,omitempty"`
	// Rules holds the value of the rules edge.
	Rules []*CVERule `json:"rules,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ComponentsOrErr returns the Components value or an error if the edge
// was not loaded in eager-loading.
func (e CVEEdges) ComponentsOrErr() ([]*Component, error) {
	if e.loadedTypes[0] {
		return e.Components, nil
	}
	return nil, &NotLoadedError{edge: "components"}
}

// VulnerabilitiesOrErr returns the Vulnerabilities value or an error if the edge
// was not loaded in eager-loading.
func (e CVEEdges) VulnerabilitiesOrErr() ([]*Vulnerability, error) {
	if e.loadedTypes[1] {
		return e.Vulnerabilities, nil
	}
	return nil, &NotLoadedError{edge: "vulnerabilities"}
}

// RulesOrErr returns the Rules value or an error if the edge
// was not loaded in eager-loading.
func (e CVEEdges) RulesOrErr() ([]*CVERule, error) {
	if e.loadedTypes[2] {
		return e.Rules, nil
	}
	return nil, &NotLoadedError{edge: "rules"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CVE) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cve.FieldSeverityScore:
			values[i] = new(sql.NullFloat64)
		case cve.FieldID:
			values[i] = new(sql.NullInt64)
		case cve.FieldCveID, cve.FieldDescription, cve.FieldSeverity:
			values[i] = new(sql.NullString)
		case cve.FieldPublishedData, cve.FieldModifiedData:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CVE", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CVE fields.
func (c *CVE) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cve.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case cve.FieldCveID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cve_id", values[i])
			} else if value.Valid {
				c.CveID = value.String
			}
		case cve.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case cve.FieldSeverityScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field severity_score", values[i])
			} else if value.Valid {
				c.SeverityScore = value.Float64
			}
		case cve.FieldSeverity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field severity", values[i])
			} else if value.Valid {
				c.Severity = cve.Severity(value.String)
			}
		case cve.FieldPublishedData:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_data", values[i])
			} else if value.Valid {
				c.PublishedData = value.Time
			}
		case cve.FieldModifiedData:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified_data", values[i])
			} else if value.Valid {
				c.ModifiedData = value.Time
			}
		}
	}
	return nil
}

// QueryComponents queries the "components" edge of the CVE entity.
func (c *CVE) QueryComponents() *ComponentQuery {
	return (&CVEClient{config: c.config}).QueryComponents(c)
}

// QueryVulnerabilities queries the "vulnerabilities" edge of the CVE entity.
func (c *CVE) QueryVulnerabilities() *VulnerabilityQuery {
	return (&CVEClient{config: c.config}).QueryVulnerabilities(c)
}

// QueryRules queries the "rules" edge of the CVE entity.
func (c *CVE) QueryRules() *CVERuleQuery {
	return (&CVEClient{config: c.config}).QueryRules(c)
}

// Update returns a builder for updating this CVE.
// Note that you need to call CVE.Unwrap() before calling this method if this CVE
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *CVE) Update() *CVEUpdateOne {
	return (&CVEClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the CVE entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *CVE) Unwrap() *CVE {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: CVE is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *CVE) String() string {
	var builder strings.Builder
	builder.WriteString("CVE(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", cve_id=")
	builder.WriteString(c.CveID)
	builder.WriteString(", description=")
	builder.WriteString(c.Description)
	builder.WriteString(", severity_score=")
	builder.WriteString(fmt.Sprintf("%v", c.SeverityScore))
	builder.WriteString(", severity=")
	builder.WriteString(fmt.Sprintf("%v", c.Severity))
	builder.WriteString(", published_data=")
	builder.WriteString(c.PublishedData.Format(time.ANSIC))
	builder.WriteString(", modified_data=")
	builder.WriteString(c.ModifiedData.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CVEs is a parsable slice of CVE.
type CVEs []*CVE

func (c CVEs) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
