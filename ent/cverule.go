// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/cve"
	"github.com/valocode/bubbly/ent/cverule"
)

// CVERule is the model entity for the CVERule schema.
type CVERule struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CVERuleQuery when eager-loading is set.
	Edges        CVERuleEdges `json:"edges"`
	cve_rule_cve *int
}

// CVERuleEdges holds the relations/edges for other nodes in the graph.
type CVERuleEdges struct {
	// Cve holds the value of the cve edge.
	Cve *CVE `json:"cve,omitempty"`
	// Project holds the value of the project edge.
	Project []*Project `json:"project,omitempty"`
	// Repo holds the value of the repo edge.
	Repo []*Repo `json:"repo,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CveOrErr returns the Cve value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CVERuleEdges) CveOrErr() (*CVE, error) {
	if e.loadedTypes[0] {
		if e.Cve == nil {
			// The edge cve was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cve.Label}
		}
		return e.Cve, nil
	}
	return nil, &NotLoadedError{edge: "cve"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading.
func (e CVERuleEdges) ProjectOrErr() ([]*Project, error) {
	if e.loadedTypes[1] {
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// RepoOrErr returns the Repo value or an error if the edge
// was not loaded in eager-loading.
func (e CVERuleEdges) RepoOrErr() ([]*Repo, error) {
	if e.loadedTypes[2] {
		return e.Repo, nil
	}
	return nil, &NotLoadedError{edge: "repo"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CVERule) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cverule.FieldID:
			values[i] = new(sql.NullInt64)
		case cverule.FieldName:
			values[i] = new(sql.NullString)
		case cverule.ForeignKeys[0]: // cve_rule_cve
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CVERule", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CVERule fields.
func (cr *CVERule) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cverule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cr.ID = int(value.Int64)
		case cverule.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cr.Name = value.String
			}
		case cverule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field cve_rule_cve", value)
			} else if value.Valid {
				cr.cve_rule_cve = new(int)
				*cr.cve_rule_cve = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCve queries the "cve" edge of the CVERule entity.
func (cr *CVERule) QueryCve() *CVEQuery {
	return (&CVERuleClient{config: cr.config}).QueryCve(cr)
}

// QueryProject queries the "project" edge of the CVERule entity.
func (cr *CVERule) QueryProject() *ProjectQuery {
	return (&CVERuleClient{config: cr.config}).QueryProject(cr)
}

// QueryRepo queries the "repo" edge of the CVERule entity.
func (cr *CVERule) QueryRepo() *RepoQuery {
	return (&CVERuleClient{config: cr.config}).QueryRepo(cr)
}

// Update returns a builder for updating this CVERule.
// Note that you need to call CVERule.Unwrap() before calling this method if this CVERule
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *CVERule) Update() *CVERuleUpdateOne {
	return (&CVERuleClient{config: cr.config}).UpdateOne(cr)
}

// Unwrap unwraps the CVERule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *CVERule) Unwrap() *CVERule {
	tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CVERule is not a transactional entity")
	}
	cr.config.driver = tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *CVERule) String() string {
	var builder strings.Builder
	builder.WriteString("CVERule(")
	builder.WriteString(fmt.Sprintf("id=%v", cr.ID))
	builder.WriteString(", name=")
	builder.WriteString(cr.Name)
	builder.WriteByte(')')
	return builder.String()
}

// CVERules is a parsable slice of CVERule.
type CVERules []*CVERule

func (cr CVERules) config(cfg config) {
	for _i := range cr {
		cr[_i].config = cfg
	}
}
