// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releaseentry"
	"github.com/valocode/bubbly/ent/testcase"
	"github.com/valocode/bubbly/ent/testrun"
)

// TestRunUpdate is the builder for updating TestRun entities.
type TestRunUpdate struct {
	config
	hooks    []Hook
	mutation *TestRunMutation
}

// Where appends a list predicates to the TestRunUpdate builder.
func (tru *TestRunUpdate) Where(ps ...predicate.TestRun) *TestRunUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (tru *TestRunUpdate) SetReleaseID(id int) *TestRunUpdate {
	tru.mutation.SetReleaseID(id)
	return tru
}

// SetRelease sets the "release" edge to the Release entity.
func (tru *TestRunUpdate) SetRelease(r *Release) *TestRunUpdate {
	return tru.SetReleaseID(r.ID)
}

// SetEntryID sets the "entry" edge to the ReleaseEntry entity by ID.
func (tru *TestRunUpdate) SetEntryID(id int) *TestRunUpdate {
	tru.mutation.SetEntryID(id)
	return tru
}

// SetNillableEntryID sets the "entry" edge to the ReleaseEntry entity by ID if the given value is not nil.
func (tru *TestRunUpdate) SetNillableEntryID(id *int) *TestRunUpdate {
	if id != nil {
		tru = tru.SetEntryID(*id)
	}
	return tru
}

// SetEntry sets the "entry" edge to the ReleaseEntry entity.
func (tru *TestRunUpdate) SetEntry(r *ReleaseEntry) *TestRunUpdate {
	return tru.SetEntryID(r.ID)
}

// AddTestIDs adds the "tests" edge to the TestCase entity by IDs.
func (tru *TestRunUpdate) AddTestIDs(ids ...int) *TestRunUpdate {
	tru.mutation.AddTestIDs(ids...)
	return tru
}

// AddTests adds the "tests" edges to the TestCase entity.
func (tru *TestRunUpdate) AddTests(t ...*TestCase) *TestRunUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tru.AddTestIDs(ids...)
}

// Mutation returns the TestRunMutation object of the builder.
func (tru *TestRunUpdate) Mutation() *TestRunMutation {
	return tru.mutation
}

// ClearRelease clears the "release" edge to the Release entity.
func (tru *TestRunUpdate) ClearRelease() *TestRunUpdate {
	tru.mutation.ClearRelease()
	return tru
}

// ClearEntry clears the "entry" edge to the ReleaseEntry entity.
func (tru *TestRunUpdate) ClearEntry() *TestRunUpdate {
	tru.mutation.ClearEntry()
	return tru
}

// ClearTests clears all "tests" edges to the TestCase entity.
func (tru *TestRunUpdate) ClearTests() *TestRunUpdate {
	tru.mutation.ClearTests()
	return tru
}

// RemoveTestIDs removes the "tests" edge to TestCase entities by IDs.
func (tru *TestRunUpdate) RemoveTestIDs(ids ...int) *TestRunUpdate {
	tru.mutation.RemoveTestIDs(ids...)
	return tru
}

// RemoveTests removes "tests" edges to TestCase entities.
func (tru *TestRunUpdate) RemoveTests(t ...*TestCase) *TestRunUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tru.RemoveTestIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TestRunUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tru.hooks) == 0 {
		if err = tru.check(); err != nil {
			return 0, err
		}
		affected, err = tru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestRunMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tru.check(); err != nil {
				return 0, err
			}
			tru.mutation = mutation
			affected, err = tru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tru.hooks) - 1; i >= 0; i-- {
			if tru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TestRunUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TestRunUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TestRunUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tru *TestRunUpdate) check() error {
	if _, ok := tru.mutation.ReleaseID(); tru.mutation.ReleaseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"release\"")
	}
	return nil
}

func (tru *TestRunUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   testrun.Table,
			Columns: testrun.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: testrun.FieldID,
			},
		},
	}
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tru.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testrun.ReleaseTable,
			Columns: []string{testrun.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testrun.ReleaseTable,
			Columns: []string{testrun.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tru.mutation.EntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   testrun.EntryTable,
			Columns: []string{testrun.EntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaseentry.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.EntryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   testrun.EntryTable,
			Columns: []string{testrun.EntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaseentry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tru.mutation.TestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   testrun.TestsTable,
			Columns: []string{testrun.TestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testcase.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.RemovedTestsIDs(); len(nodes) > 0 && !tru.mutation.TestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   testrun.TestsTable,
			Columns: []string{testrun.TestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testcase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.TestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   testrun.TestsTable,
			Columns: []string{testrun.TestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testcase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testrun.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TestRunUpdateOne is the builder for updating a single TestRun entity.
type TestRunUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestRunMutation
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (truo *TestRunUpdateOne) SetReleaseID(id int) *TestRunUpdateOne {
	truo.mutation.SetReleaseID(id)
	return truo
}

// SetRelease sets the "release" edge to the Release entity.
func (truo *TestRunUpdateOne) SetRelease(r *Release) *TestRunUpdateOne {
	return truo.SetReleaseID(r.ID)
}

// SetEntryID sets the "entry" edge to the ReleaseEntry entity by ID.
func (truo *TestRunUpdateOne) SetEntryID(id int) *TestRunUpdateOne {
	truo.mutation.SetEntryID(id)
	return truo
}

// SetNillableEntryID sets the "entry" edge to the ReleaseEntry entity by ID if the given value is not nil.
func (truo *TestRunUpdateOne) SetNillableEntryID(id *int) *TestRunUpdateOne {
	if id != nil {
		truo = truo.SetEntryID(*id)
	}
	return truo
}

// SetEntry sets the "entry" edge to the ReleaseEntry entity.
func (truo *TestRunUpdateOne) SetEntry(r *ReleaseEntry) *TestRunUpdateOne {
	return truo.SetEntryID(r.ID)
}

// AddTestIDs adds the "tests" edge to the TestCase entity by IDs.
func (truo *TestRunUpdateOne) AddTestIDs(ids ...int) *TestRunUpdateOne {
	truo.mutation.AddTestIDs(ids...)
	return truo
}

// AddTests adds the "tests" edges to the TestCase entity.
func (truo *TestRunUpdateOne) AddTests(t ...*TestCase) *TestRunUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return truo.AddTestIDs(ids...)
}

// Mutation returns the TestRunMutation object of the builder.
func (truo *TestRunUpdateOne) Mutation() *TestRunMutation {
	return truo.mutation
}

// ClearRelease clears the "release" edge to the Release entity.
func (truo *TestRunUpdateOne) ClearRelease() *TestRunUpdateOne {
	truo.mutation.ClearRelease()
	return truo
}

// ClearEntry clears the "entry" edge to the ReleaseEntry entity.
func (truo *TestRunUpdateOne) ClearEntry() *TestRunUpdateOne {
	truo.mutation.ClearEntry()
	return truo
}

// ClearTests clears all "tests" edges to the TestCase entity.
func (truo *TestRunUpdateOne) ClearTests() *TestRunUpdateOne {
	truo.mutation.ClearTests()
	return truo
}

// RemoveTestIDs removes the "tests" edge to TestCase entities by IDs.
func (truo *TestRunUpdateOne) RemoveTestIDs(ids ...int) *TestRunUpdateOne {
	truo.mutation.RemoveTestIDs(ids...)
	return truo
}

// RemoveTests removes "tests" edges to TestCase entities.
func (truo *TestRunUpdateOne) RemoveTests(t ...*TestCase) *TestRunUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return truo.RemoveTestIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TestRunUpdateOne) Select(field string, fields ...string) *TestRunUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TestRun entity.
func (truo *TestRunUpdateOne) Save(ctx context.Context) (*TestRun, error) {
	var (
		err  error
		node *TestRun
	)
	if len(truo.hooks) == 0 {
		if err = truo.check(); err != nil {
			return nil, err
		}
		node, err = truo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestRunMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = truo.check(); err != nil {
				return nil, err
			}
			truo.mutation = mutation
			node, err = truo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(truo.hooks) - 1; i >= 0; i-- {
			if truo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = truo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, truo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TestRunUpdateOne) SaveX(ctx context.Context) *TestRun {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TestRunUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TestRunUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (truo *TestRunUpdateOne) check() error {
	if _, ok := truo.mutation.ReleaseID(); truo.mutation.ReleaseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"release\"")
	}
	return nil
}

func (truo *TestRunUpdateOne) sqlSave(ctx context.Context) (_node *TestRun, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   testrun.Table,
			Columns: testrun.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: testrun.FieldID,
			},
		},
	}
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TestRun.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testrun.FieldID)
		for _, f := range fields {
			if !testrun.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testrun.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if truo.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testrun.ReleaseTable,
			Columns: []string{testrun.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testrun.ReleaseTable,
			Columns: []string{testrun.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if truo.mutation.EntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   testrun.EntryTable,
			Columns: []string{testrun.EntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaseentry.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.EntryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   testrun.EntryTable,
			Columns: []string{testrun.EntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaseentry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if truo.mutation.TestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   testrun.TestsTable,
			Columns: []string{testrun.TestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testcase.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.RemovedTestsIDs(); len(nodes) > 0 && !truo.mutation.TestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   testrun.TestsTable,
			Columns: []string{testrun.TestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testcase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.TestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   testrun.TestsTable,
			Columns: []string{testrun.TestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testcase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestRun{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testrun.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
