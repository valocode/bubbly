// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/organization"
	"github.com/valocode/bubbly/ent/releasepolicy"
)

// ReleasePolicy is the model entity for the ReleasePolicy schema.
type ReleasePolicy struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Module holds the value of the "module" field.
	// module stores the rego module defining the violation rules
	Module string `json:"module,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReleasePolicyQuery when eager-loading is set.
	Edges                ReleasePolicyEdges `json:"edges"`
	release_policy_owner *int
}

// ReleasePolicyEdges holds the relations/edges for other nodes in the graph.
type ReleasePolicyEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Violations holds the value of the violations edge.
	Violations []*ReleasePolicyViolation `json:"violations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReleasePolicyEdges) OwnerOrErr() (*Organization, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: organization.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ViolationsOrErr returns the Violations value or an error if the edge
// was not loaded in eager-loading.
func (e ReleasePolicyEdges) ViolationsOrErr() ([]*ReleasePolicyViolation, error) {
	if e.loadedTypes[1] {
		return e.Violations, nil
	}
	return nil, &NotLoadedError{edge: "violations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReleasePolicy) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case releasepolicy.FieldID:
			values[i] = new(sql.NullInt64)
		case releasepolicy.FieldName, releasepolicy.FieldModule:
			values[i] = new(sql.NullString)
		case releasepolicy.ForeignKeys[0]: // release_policy_owner
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ReleasePolicy", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReleasePolicy fields.
func (rp *ReleasePolicy) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case releasepolicy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rp.ID = int(value.Int64)
		case releasepolicy.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rp.Name = value.String
			}
		case releasepolicy.FieldModule:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module", values[i])
			} else if value.Valid {
				rp.Module = value.String
			}
		case releasepolicy.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field release_policy_owner", value)
			} else if value.Valid {
				rp.release_policy_owner = new(int)
				*rp.release_policy_owner = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the ReleasePolicy entity.
func (rp *ReleasePolicy) QueryOwner() *OrganizationQuery {
	return (&ReleasePolicyClient{config: rp.config}).QueryOwner(rp)
}

// QueryViolations queries the "violations" edge of the ReleasePolicy entity.
func (rp *ReleasePolicy) QueryViolations() *ReleasePolicyViolationQuery {
	return (&ReleasePolicyClient{config: rp.config}).QueryViolations(rp)
}

// Update returns a builder for updating this ReleasePolicy.
// Note that you need to call ReleasePolicy.Unwrap() before calling this method if this ReleasePolicy
// was returned from a transaction, and the transaction was committed or rolled back.
func (rp *ReleasePolicy) Update() *ReleasePolicyUpdateOne {
	return (&ReleasePolicyClient{config: rp.config}).UpdateOne(rp)
}

// Unwrap unwraps the ReleasePolicy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rp *ReleasePolicy) Unwrap() *ReleasePolicy {
	tx, ok := rp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReleasePolicy is not a transactional entity")
	}
	rp.config.driver = tx.drv
	return rp
}

// String implements the fmt.Stringer.
func (rp *ReleasePolicy) String() string {
	var builder strings.Builder
	builder.WriteString("ReleasePolicy(")
	builder.WriteString(fmt.Sprintf("id=%v", rp.ID))
	builder.WriteString(", name=")
	builder.WriteString(rp.Name)
	builder.WriteString(", module=")
	builder.WriteString(rp.Module)
	builder.WriteByte(')')
	return builder.String()
}

// ReleasePolicies is a parsable slice of ReleasePolicy.
type ReleasePolicies []*ReleasePolicy

func (rp ReleasePolicies) config(cfg config) {
	for _i := range rp {
		rp[_i].config = cfg
	}
}
