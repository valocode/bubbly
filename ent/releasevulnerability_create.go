// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/codescan"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasecomponent"
	"github.com/valocode/bubbly/ent/releasevulnerability"
	"github.com/valocode/bubbly/ent/vulnerability"
	"github.com/valocode/bubbly/ent/vulnerabilityreview"
)

// ReleaseVulnerabilityCreate is the builder for creating a ReleaseVulnerability entity.
type ReleaseVulnerabilityCreate struct {
	config
	mutation *ReleaseVulnerabilityMutation
	hooks    []Hook
}

// SetVulnerabilityID sets the "vulnerability" edge to the Vulnerability entity by ID.
func (rvc *ReleaseVulnerabilityCreate) SetVulnerabilityID(id int) *ReleaseVulnerabilityCreate {
	rvc.mutation.SetVulnerabilityID(id)
	return rvc
}

// SetVulnerability sets the "vulnerability" edge to the Vulnerability entity.
func (rvc *ReleaseVulnerabilityCreate) SetVulnerability(v *Vulnerability) *ReleaseVulnerabilityCreate {
	return rvc.SetVulnerabilityID(v.ID)
}

// SetComponentID sets the "component" edge to the ReleaseComponent entity by ID.
func (rvc *ReleaseVulnerabilityCreate) SetComponentID(id int) *ReleaseVulnerabilityCreate {
	rvc.mutation.SetComponentID(id)
	return rvc
}

// SetNillableComponentID sets the "component" edge to the ReleaseComponent entity by ID if the given value is not nil.
func (rvc *ReleaseVulnerabilityCreate) SetNillableComponentID(id *int) *ReleaseVulnerabilityCreate {
	if id != nil {
		rvc = rvc.SetComponentID(*id)
	}
	return rvc
}

// SetComponent sets the "component" edge to the ReleaseComponent entity.
func (rvc *ReleaseVulnerabilityCreate) SetComponent(r *ReleaseComponent) *ReleaseVulnerabilityCreate {
	return rvc.SetComponentID(r.ID)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (rvc *ReleaseVulnerabilityCreate) SetReleaseID(id int) *ReleaseVulnerabilityCreate {
	rvc.mutation.SetReleaseID(id)
	return rvc
}

// SetRelease sets the "release" edge to the Release entity.
func (rvc *ReleaseVulnerabilityCreate) SetRelease(r *Release) *ReleaseVulnerabilityCreate {
	return rvc.SetReleaseID(r.ID)
}

// AddReviewIDs adds the "reviews" edge to the VulnerabilityReview entity by IDs.
func (rvc *ReleaseVulnerabilityCreate) AddReviewIDs(ids ...int) *ReleaseVulnerabilityCreate {
	rvc.mutation.AddReviewIDs(ids...)
	return rvc
}

// AddReviews adds the "reviews" edges to the VulnerabilityReview entity.
func (rvc *ReleaseVulnerabilityCreate) AddReviews(v ...*VulnerabilityReview) *ReleaseVulnerabilityCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return rvc.AddReviewIDs(ids...)
}

// SetScanID sets the "scan" edge to the CodeScan entity by ID.
func (rvc *ReleaseVulnerabilityCreate) SetScanID(id int) *ReleaseVulnerabilityCreate {
	rvc.mutation.SetScanID(id)
	return rvc
}

// SetNillableScanID sets the "scan" edge to the CodeScan entity by ID if the given value is not nil.
func (rvc *ReleaseVulnerabilityCreate) SetNillableScanID(id *int) *ReleaseVulnerabilityCreate {
	if id != nil {
		rvc = rvc.SetScanID(*id)
	}
	return rvc
}

// SetScan sets the "scan" edge to the CodeScan entity.
func (rvc *ReleaseVulnerabilityCreate) SetScan(c *CodeScan) *ReleaseVulnerabilityCreate {
	return rvc.SetScanID(c.ID)
}

// Mutation returns the ReleaseVulnerabilityMutation object of the builder.
func (rvc *ReleaseVulnerabilityCreate) Mutation() *ReleaseVulnerabilityMutation {
	return rvc.mutation
}

// Save creates the ReleaseVulnerability in the database.
func (rvc *ReleaseVulnerabilityCreate) Save(ctx context.Context) (*ReleaseVulnerability, error) {
	var (
		err  error
		node *ReleaseVulnerability
	)
	if len(rvc.hooks) == 0 {
		if err = rvc.check(); err != nil {
			return nil, err
		}
		node, err = rvc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseVulnerabilityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rvc.check(); err != nil {
				return nil, err
			}
			rvc.mutation = mutation
			if node, err = rvc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rvc.hooks) - 1; i >= 0; i-- {
			if rvc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rvc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rvc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rvc *ReleaseVulnerabilityCreate) SaveX(ctx context.Context) *ReleaseVulnerability {
	v, err := rvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rvc *ReleaseVulnerabilityCreate) Exec(ctx context.Context) error {
	_, err := rvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rvc *ReleaseVulnerabilityCreate) ExecX(ctx context.Context) {
	if err := rvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rvc *ReleaseVulnerabilityCreate) check() error {
	if _, ok := rvc.mutation.VulnerabilityID(); !ok {
		return &ValidationError{Name: "vulnerability", err: errors.New("ent: missing required edge \"vulnerability\"")}
	}
	if _, ok := rvc.mutation.ReleaseID(); !ok {
		return &ValidationError{Name: "release", err: errors.New("ent: missing required edge \"release\"")}
	}
	return nil
}

func (rvc *ReleaseVulnerabilityCreate) sqlSave(ctx context.Context) (*ReleaseVulnerability, error) {
	_node, _spec := rvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rvc *ReleaseVulnerabilityCreate) createSpec() (*ReleaseVulnerability, *sqlgraph.CreateSpec) {
	var (
		_node = &ReleaseVulnerability{config: rvc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: releasevulnerability.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releasevulnerability.FieldID,
			},
		}
	)
	if nodes := rvc.mutation.VulnerabilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasevulnerability.VulnerabilityTable,
			Columns: []string{releasevulnerability.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.release_vulnerability_vulnerability = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rvc.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasevulnerability.ComponentTable,
			Columns: []string{releasevulnerability.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasecomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.release_vulnerability_component = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rvc.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasevulnerability.ReleaseTable,
			Columns: []string{releasevulnerability.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.release_vulnerability_release = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rvc.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ReviewsTable,
			Columns: releasevulnerability.ReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rvc.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasevulnerability.ScanTable,
			Columns: []string{releasevulnerability.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.release_vulnerability_scan = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReleaseVulnerabilityCreateBulk is the builder for creating many ReleaseVulnerability entities in bulk.
type ReleaseVulnerabilityCreateBulk struct {
	config
	builders []*ReleaseVulnerabilityCreate
}

// Save creates the ReleaseVulnerability entities in the database.
func (rvcb *ReleaseVulnerabilityCreateBulk) Save(ctx context.Context) ([]*ReleaseVulnerability, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rvcb.builders))
	nodes := make([]*ReleaseVulnerability, len(rvcb.builders))
	mutators := make([]Mutator, len(rvcb.builders))
	for i := range rvcb.builders {
		func(i int, root context.Context) {
			builder := rvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReleaseVulnerabilityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rvcb *ReleaseVulnerabilityCreateBulk) SaveX(ctx context.Context) []*ReleaseVulnerability {
	v, err := rvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rvcb *ReleaseVulnerabilityCreateBulk) Exec(ctx context.Context) error {
	_, err := rvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rvcb *ReleaseVulnerabilityCreateBulk) ExecX(ctx context.Context) {
	if err := rvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
