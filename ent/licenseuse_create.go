// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/license"
	"github.com/valocode/bubbly/ent/licenseuse"
)

// LicenseUseCreate is the builder for creating a LicenseUse entity.
type LicenseUseCreate struct {
	config
	mutation *LicenseUseMutation
	hooks    []Hook
}

// SetLicenseID sets the "license" edge to the License entity by ID.
func (luc *LicenseUseCreate) SetLicenseID(id int) *LicenseUseCreate {
	luc.mutation.SetLicenseID(id)
	return luc
}

// SetLicense sets the "license" edge to the License entity.
func (luc *LicenseUseCreate) SetLicense(l *License) *LicenseUseCreate {
	return luc.SetLicenseID(l.ID)
}

// Mutation returns the LicenseUseMutation object of the builder.
func (luc *LicenseUseCreate) Mutation() *LicenseUseMutation {
	return luc.mutation
}

// Save creates the LicenseUse in the database.
func (luc *LicenseUseCreate) Save(ctx context.Context) (*LicenseUse, error) {
	var (
		err  error
		node *LicenseUse
	)
	if len(luc.hooks) == 0 {
		if err = luc.check(); err != nil {
			return nil, err
		}
		node, err = luc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LicenseUseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = luc.check(); err != nil {
				return nil, err
			}
			luc.mutation = mutation
			if node, err = luc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(luc.hooks) - 1; i >= 0; i-- {
			if luc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = luc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (luc *LicenseUseCreate) SaveX(ctx context.Context) *LicenseUse {
	v, err := luc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (luc *LicenseUseCreate) Exec(ctx context.Context) error {
	_, err := luc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luc *LicenseUseCreate) ExecX(ctx context.Context) {
	if err := luc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luc *LicenseUseCreate) check() error {
	if _, ok := luc.mutation.LicenseID(); !ok {
		return &ValidationError{Name: "license", err: errors.New("ent: missing required edge \"license\"")}
	}
	return nil
}

func (luc *LicenseUseCreate) sqlSave(ctx context.Context) (*LicenseUse, error) {
	_node, _spec := luc.createSpec()
	if err := sqlgraph.CreateNode(ctx, luc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (luc *LicenseUseCreate) createSpec() (*LicenseUse, *sqlgraph.CreateSpec) {
	var (
		_node = &LicenseUse{config: luc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: licenseuse.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: licenseuse.FieldID,
			},
		}
	)
	if nodes := luc.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   licenseuse.LicenseTable,
			Columns: []string{licenseuse.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: license.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.license_use_license = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LicenseUseCreateBulk is the builder for creating many LicenseUse entities in bulk.
type LicenseUseCreateBulk struct {
	config
	builders []*LicenseUseCreate
}

// Save creates the LicenseUse entities in the database.
func (lucb *LicenseUseCreateBulk) Save(ctx context.Context) ([]*LicenseUse, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lucb.builders))
	nodes := make([]*LicenseUse, len(lucb.builders))
	mutators := make([]Mutator, len(lucb.builders))
	for i := range lucb.builders {
		func(i int, root context.Context) {
			builder := lucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LicenseUseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lucb *LicenseUseCreateBulk) SaveX(ctx context.Context) []*LicenseUse {
	v, err := lucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lucb *LicenseUseCreateBulk) Exec(ctx context.Context) error {
	_, err := lucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lucb *LicenseUseCreateBulk) ExecX(ctx context.Context) {
	if err := lucb.Exec(ctx); err != nil {
		panic(err)
	}
}
