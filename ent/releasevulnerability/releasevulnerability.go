// Code generated by entc, DO NOT EDIT.

package releasevulnerability

const (
	// Label holds the string label denoting the releasevulnerability type in the database.
	Label = "release_vulnerability"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeVulnerability holds the string denoting the vulnerability edge name in mutations.
	EdgeVulnerability = "vulnerability"
	// EdgeComponent holds the string denoting the component edge name in mutations.
	EdgeComponent = "component"
	// EdgeRelease holds the string denoting the release edge name in mutations.
	EdgeRelease = "release"
	// EdgeReviews holds the string denoting the reviews edge name in mutations.
	EdgeReviews = "reviews"
	// EdgeScan holds the string denoting the scan edge name in mutations.
	EdgeScan = "scan"
	// Table holds the table name of the releasevulnerability in the database.
	Table = "release_vulnerability"
	// VulnerabilityTable is the table that holds the vulnerability relation/edge.
	VulnerabilityTable = "release_vulnerability"
	// VulnerabilityInverseTable is the table name for the Vulnerability entity.
	// It exists in this package in order to avoid circular dependency with the "vulnerability" package.
	VulnerabilityInverseTable = "vulnerability"
	// VulnerabilityColumn is the table column denoting the vulnerability relation/edge.
	VulnerabilityColumn = "release_vulnerability_vulnerability"
	// ComponentTable is the table that holds the component relation/edge.
	ComponentTable = "release_vulnerability"
	// ComponentInverseTable is the table name for the ReleaseComponent entity.
	// It exists in this package in order to avoid circular dependency with the "releasecomponent" package.
	ComponentInverseTable = "release_component"
	// ComponentColumn is the table column denoting the component relation/edge.
	ComponentColumn = "release_vulnerability_component"
	// ReleaseTable is the table that holds the release relation/edge.
	ReleaseTable = "release_vulnerability"
	// ReleaseInverseTable is the table name for the Release entity.
	// It exists in this package in order to avoid circular dependency with the "release" package.
	ReleaseInverseTable = "release"
	// ReleaseColumn is the table column denoting the release relation/edge.
	ReleaseColumn = "release_vulnerability_release"
	// ReviewsTable is the table that holds the reviews relation/edge. The primary key declared below.
	ReviewsTable = "release_vulnerability_reviews"
	// ReviewsInverseTable is the table name for the VulnerabilityReview entity.
	// It exists in this package in order to avoid circular dependency with the "vulnerabilityreview" package.
	ReviewsInverseTable = "vulnerability_review"
	// ScanTable is the table that holds the scan relation/edge.
	ScanTable = "release_vulnerability"
	// ScanInverseTable is the table name for the CodeScan entity.
	// It exists in this package in order to avoid circular dependency with the "codescan" package.
	ScanInverseTable = "code_scan"
	// ScanColumn is the table column denoting the scan relation/edge.
	ScanColumn = "release_vulnerability_scan"
)

// Columns holds all SQL columns for releasevulnerability fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "release_vulnerability"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"release_vulnerability_vulnerability",
	"release_vulnerability_component",
	"release_vulnerability_release",
	"release_vulnerability_scan",
}

var (
	// ReviewsPrimaryKey and ReviewsColumn2 are the table columns denoting the
	// primary key for the reviews relation (M2M).
	ReviewsPrimaryKey = []string{"release_vulnerability_id", "vulnerability_review_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
