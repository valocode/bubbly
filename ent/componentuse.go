// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/component"
	"github.com/valocode/bubbly/ent/componentuse"
	"github.com/valocode/bubbly/ent/release"
)

// ComponentUse is the model entity for the ComponentUse schema.
type ComponentUse struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ComponentUseQuery when eager-loading is set.
	Edges                   ComponentUseEdges `json:"edges"`
	component_use_release   *int
	component_use_component *int
}

// ComponentUseEdges holds the relations/edges for other nodes in the graph.
type ComponentUseEdges struct {
	// Release holds the value of the release edge.
	Release *Release `json:"release,omitempty"`
	// Scans holds the value of the scans edge.
	Scans []*CodeScan `json:"scans,omitempty"`
	// Component holds the value of the component edge.
	Component *Component `json:"component,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ReleaseOrErr returns the Release value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ComponentUseEdges) ReleaseOrErr() (*Release, error) {
	if e.loadedTypes[0] {
		if e.Release == nil {
			// The edge release was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: release.Label}
		}
		return e.Release, nil
	}
	return nil, &NotLoadedError{edge: "release"}
}

// ScansOrErr returns the Scans value or an error if the edge
// was not loaded in eager-loading.
func (e ComponentUseEdges) ScansOrErr() ([]*CodeScan, error) {
	if e.loadedTypes[1] {
		return e.Scans, nil
	}
	return nil, &NotLoadedError{edge: "scans"}
}

// ComponentOrErr returns the Component value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ComponentUseEdges) ComponentOrErr() (*Component, error) {
	if e.loadedTypes[2] {
		if e.Component == nil {
			// The edge component was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: component.Label}
		}
		return e.Component, nil
	}
	return nil, &NotLoadedError{edge: "component"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ComponentUse) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case componentuse.FieldID:
			values[i] = new(sql.NullInt64)
		case componentuse.ForeignKeys[0]: // component_use_release
			values[i] = new(sql.NullInt64)
		case componentuse.ForeignKeys[1]: // component_use_component
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ComponentUse", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ComponentUse fields.
func (cu *ComponentUse) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case componentuse.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cu.ID = int(value.Int64)
		case componentuse.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field component_use_release", value)
			} else if value.Valid {
				cu.component_use_release = new(int)
				*cu.component_use_release = int(value.Int64)
			}
		case componentuse.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field component_use_component", value)
			} else if value.Valid {
				cu.component_use_component = new(int)
				*cu.component_use_component = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRelease queries the "release" edge of the ComponentUse entity.
func (cu *ComponentUse) QueryRelease() *ReleaseQuery {
	return (&ComponentUseClient{config: cu.config}).QueryRelease(cu)
}

// QueryScans queries the "scans" edge of the ComponentUse entity.
func (cu *ComponentUse) QueryScans() *CodeScanQuery {
	return (&ComponentUseClient{config: cu.config}).QueryScans(cu)
}

// QueryComponent queries the "component" edge of the ComponentUse entity.
func (cu *ComponentUse) QueryComponent() *ComponentQuery {
	return (&ComponentUseClient{config: cu.config}).QueryComponent(cu)
}

// Update returns a builder for updating this ComponentUse.
// Note that you need to call ComponentUse.Unwrap() before calling this method if this ComponentUse
// was returned from a transaction, and the transaction was committed or rolled back.
func (cu *ComponentUse) Update() *ComponentUseUpdateOne {
	return (&ComponentUseClient{config: cu.config}).UpdateOne(cu)
}

// Unwrap unwraps the ComponentUse entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cu *ComponentUse) Unwrap() *ComponentUse {
	tx, ok := cu.config.driver.(*txDriver)
	if !ok {
		panic("ent: ComponentUse is not a transactional entity")
	}
	cu.config.driver = tx.drv
	return cu
}

// String implements the fmt.Stringer.
func (cu *ComponentUse) String() string {
	var builder strings.Builder
	builder.WriteString("ComponentUse(")
	builder.WriteString(fmt.Sprintf("id=%v", cu.ID))
	builder.WriteByte(')')
	return builder.String()
}

// ComponentUses is a parsable slice of ComponentUse.
type ComponentUses []*ComponentUse

func (cu ComponentUses) config(cfg config) {
	for _i := range cu {
		cu[_i].config = cfg
	}
}
