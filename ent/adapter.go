// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/adapter"
)

// Adapter is the model entity for the Adapter schema.
type Adapter struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Tag holds the value of the "tag" field.
	Tag string `json:"tag,omitempty"`
	// Type holds the value of the "type" field.
	Type adapter.Type `json:"type,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation json.RawMessage `json:"operation,omitempty"`
	// ResultsType holds the value of the "results_type" field.
	ResultsType adapter.ResultsType `json:"results_type,omitempty"`
	// Results holds the value of the "results" field.
	Results []byte `json:"results,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Adapter) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case adapter.FieldOperation, adapter.FieldResults:
			values[i] = new([]byte)
		case adapter.FieldID:
			values[i] = new(sql.NullInt64)
		case adapter.FieldName, adapter.FieldTag, adapter.FieldType, adapter.FieldResultsType:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Adapter", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Adapter fields.
func (a *Adapter) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adapter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case adapter.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case adapter.FieldTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[i])
			} else if value.Valid {
				a.Tag = value.String
			}
		case adapter.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = adapter.Type(value.String)
			}
		case adapter.FieldOperation:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Operation); err != nil {
					return fmt.Errorf("unmarshal field operation: %w", err)
				}
			}
		case adapter.FieldResultsType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field results_type", values[i])
			} else if value.Valid {
				a.ResultsType = adapter.ResultsType(value.String)
			}
		case adapter.FieldResults:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field results", values[i])
			} else if value != nil {
				a.Results = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Adapter.
// Note that you need to call Adapter.Unwrap() before calling this method if this Adapter
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Adapter) Update() *AdapterUpdateOne {
	return (&AdapterClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Adapter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Adapter) Unwrap() *Adapter {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Adapter is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Adapter) String() string {
	var builder strings.Builder
	builder.WriteString("Adapter(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", name=")
	builder.WriteString(a.Name)
	builder.WriteString(", tag=")
	builder.WriteString(a.Tag)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", a.Type))
	builder.WriteString(", operation=")
	builder.WriteString(fmt.Sprintf("%v", a.Operation))
	builder.WriteString(", results_type=")
	builder.WriteString(fmt.Sprintf("%v", a.ResultsType))
	builder.WriteString(", results=")
	builder.WriteString(fmt.Sprintf("%v", a.Results))
	builder.WriteByte(')')
	return builder.String()
}

// Adapters is a parsable slice of Adapter.
type Adapters []*Adapter

func (a Adapters) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
