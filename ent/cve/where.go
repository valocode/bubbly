// Code generated by entc, DO NOT EDIT.

package cve

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/valocode/bubbly/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CveID applies equality check predicate on the "cve_id" field. It's identical to CveIDEQ.
func CveID(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCveID), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// SeverityScore applies equality check predicate on the "severity_score" field. It's identical to SeverityScoreEQ.
func SeverityScore(v float64) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeverityScore), v))
	})
}

// PublishedData applies equality check predicate on the "published_data" field. It's identical to PublishedDataEQ.
func PublishedData(v time.Time) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublishedData), v))
	})
}

// ModifiedData applies equality check predicate on the "modified_data" field. It's identical to ModifiedDataEQ.
func ModifiedData(v time.Time) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModifiedData), v))
	})
}

// CveIDEQ applies the EQ predicate on the "cve_id" field.
func CveIDEQ(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCveID), v))
	})
}

// CveIDNEQ applies the NEQ predicate on the "cve_id" field.
func CveIDNEQ(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCveID), v))
	})
}

// CveIDIn applies the In predicate on the "cve_id" field.
func CveIDIn(vs ...string) predicate.CVE {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CVE(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCveID), v...))
	})
}

// CveIDNotIn applies the NotIn predicate on the "cve_id" field.
func CveIDNotIn(vs ...string) predicate.CVE {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CVE(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCveID), v...))
	})
}

// CveIDGT applies the GT predicate on the "cve_id" field.
func CveIDGT(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCveID), v))
	})
}

// CveIDGTE applies the GTE predicate on the "cve_id" field.
func CveIDGTE(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCveID), v))
	})
}

// CveIDLT applies the LT predicate on the "cve_id" field.
func CveIDLT(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCveID), v))
	})
}

// CveIDLTE applies the LTE predicate on the "cve_id" field.
func CveIDLTE(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCveID), v))
	})
}

// CveIDContains applies the Contains predicate on the "cve_id" field.
func CveIDContains(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCveID), v))
	})
}

// CveIDHasPrefix applies the HasPrefix predicate on the "cve_id" field.
func CveIDHasPrefix(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCveID), v))
	})
}

// CveIDHasSuffix applies the HasSuffix predicate on the "cve_id" field.
func CveIDHasSuffix(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCveID), v))
	})
}

// CveIDEqualFold applies the EqualFold predicate on the "cve_id" field.
func CveIDEqualFold(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCveID), v))
	})
}

// CveIDContainsFold applies the ContainsFold predicate on the "cve_id" field.
func CveIDContainsFold(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCveID), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.CVE {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CVE(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.CVE {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CVE(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// SeverityScoreEQ applies the EQ predicate on the "severity_score" field.
func SeverityScoreEQ(v float64) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeverityScore), v))
	})
}

// SeverityScoreNEQ applies the NEQ predicate on the "severity_score" field.
func SeverityScoreNEQ(v float64) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSeverityScore), v))
	})
}

// SeverityScoreIn applies the In predicate on the "severity_score" field.
func SeverityScoreIn(vs ...float64) predicate.CVE {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CVE(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSeverityScore), v...))
	})
}

// SeverityScoreNotIn applies the NotIn predicate on the "severity_score" field.
func SeverityScoreNotIn(vs ...float64) predicate.CVE {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CVE(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSeverityScore), v...))
	})
}

// SeverityScoreGT applies the GT predicate on the "severity_score" field.
func SeverityScoreGT(v float64) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSeverityScore), v))
	})
}

// SeverityScoreGTE applies the GTE predicate on the "severity_score" field.
func SeverityScoreGTE(v float64) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSeverityScore), v))
	})
}

// SeverityScoreLT applies the LT predicate on the "severity_score" field.
func SeverityScoreLT(v float64) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSeverityScore), v))
	})
}

// SeverityScoreLTE applies the LTE predicate on the "severity_score" field.
func SeverityScoreLTE(v float64) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSeverityScore), v))
	})
}

// SeverityEQ applies the EQ predicate on the "severity" field.
func SeverityEQ(v Severity) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeverity), v))
	})
}

// SeverityNEQ applies the NEQ predicate on the "severity" field.
func SeverityNEQ(v Severity) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSeverity), v))
	})
}

// SeverityIn applies the In predicate on the "severity" field.
func SeverityIn(vs ...Severity) predicate.CVE {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CVE(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSeverity), v...))
	})
}

// SeverityNotIn applies the NotIn predicate on the "severity" field.
func SeverityNotIn(vs ...Severity) predicate.CVE {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CVE(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSeverity), v...))
	})
}

// PublishedDataEQ applies the EQ predicate on the "published_data" field.
func PublishedDataEQ(v time.Time) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublishedData), v))
	})
}

// PublishedDataNEQ applies the NEQ predicate on the "published_data" field.
func PublishedDataNEQ(v time.Time) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPublishedData), v))
	})
}

// PublishedDataIn applies the In predicate on the "published_data" field.
func PublishedDataIn(vs ...time.Time) predicate.CVE {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CVE(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPublishedData), v...))
	})
}

// PublishedDataNotIn applies the NotIn predicate on the "published_data" field.
func PublishedDataNotIn(vs ...time.Time) predicate.CVE {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CVE(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPublishedData), v...))
	})
}

// PublishedDataGT applies the GT predicate on the "published_data" field.
func PublishedDataGT(v time.Time) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPublishedData), v))
	})
}

// PublishedDataGTE applies the GTE predicate on the "published_data" field.
func PublishedDataGTE(v time.Time) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPublishedData), v))
	})
}

// PublishedDataLT applies the LT predicate on the "published_data" field.
func PublishedDataLT(v time.Time) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPublishedData), v))
	})
}

// PublishedDataLTE applies the LTE predicate on the "published_data" field.
func PublishedDataLTE(v time.Time) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPublishedData), v))
	})
}

// PublishedDataIsNil applies the IsNil predicate on the "published_data" field.
func PublishedDataIsNil() predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPublishedData)))
	})
}

// PublishedDataNotNil applies the NotNil predicate on the "published_data" field.
func PublishedDataNotNil() predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPublishedData)))
	})
}

// ModifiedDataEQ applies the EQ predicate on the "modified_data" field.
func ModifiedDataEQ(v time.Time) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModifiedData), v))
	})
}

// ModifiedDataNEQ applies the NEQ predicate on the "modified_data" field.
func ModifiedDataNEQ(v time.Time) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModifiedData), v))
	})
}

// ModifiedDataIn applies the In predicate on the "modified_data" field.
func ModifiedDataIn(vs ...time.Time) predicate.CVE {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CVE(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldModifiedData), v...))
	})
}

// ModifiedDataNotIn applies the NotIn predicate on the "modified_data" field.
func ModifiedDataNotIn(vs ...time.Time) predicate.CVE {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CVE(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldModifiedData), v...))
	})
}

// ModifiedDataGT applies the GT predicate on the "modified_data" field.
func ModifiedDataGT(v time.Time) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModifiedData), v))
	})
}

// ModifiedDataGTE applies the GTE predicate on the "modified_data" field.
func ModifiedDataGTE(v time.Time) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModifiedData), v))
	})
}

// ModifiedDataLT applies the LT predicate on the "modified_data" field.
func ModifiedDataLT(v time.Time) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModifiedData), v))
	})
}

// ModifiedDataLTE applies the LTE predicate on the "modified_data" field.
func ModifiedDataLTE(v time.Time) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModifiedData), v))
	})
}

// ModifiedDataIsNil applies the IsNil predicate on the "modified_data" field.
func ModifiedDataIsNil() predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldModifiedData)))
	})
}

// ModifiedDataNotNil applies the NotNil predicate on the "modified_data" field.
func ModifiedDataNotNil() predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldModifiedData)))
	})
}

// HasFound applies the HasEdge predicate on the "found" edge.
func HasFound() predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FoundTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, FoundTable, FoundColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFoundWith applies the HasEdge predicate on the "found" edge with a given conditions (other predicates).
func HasFoundWith(preds ...predicate.Vulnerability) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FoundInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, FoundTable, FoundColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRules applies the HasEdge predicate on the "rules" edge.
func HasRules() predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RulesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, RulesTable, RulesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRulesWith applies the HasEdge predicate on the "rules" edge with a given conditions (other predicates).
func HasRulesWith(preds ...predicate.CVERule) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RulesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, RulesTable, RulesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CVE) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CVE) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CVE) predicate.CVE {
	return predicate.CVE(func(s *sql.Selector) {
		p(s.Not())
	})
}
