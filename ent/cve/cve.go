// Code generated by entc, DO NOT EDIT.

package cve

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the cve type in the database.
	Label = "cve"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCveID holds the string denoting the cve_id field in the database.
	FieldCveID = "cve_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSeverityScore holds the string denoting the severity_score field in the database.
	FieldSeverityScore = "severity_score"
	// FieldSeverity holds the string denoting the severity field in the database.
	FieldSeverity = "severity"
	// FieldPublishedData holds the string denoting the published_data field in the database.
	FieldPublishedData = "published_data"
	// FieldModifiedData holds the string denoting the modified_data field in the database.
	FieldModifiedData = "modified_data"
	// EdgeFound holds the string denoting the found edge name in mutations.
	EdgeFound = "found"
	// EdgeRules holds the string denoting the rules edge name in mutations.
	EdgeRules = "rules"
	// Table holds the table name of the cve in the database.
	Table = "cve"
	// FoundTable is the table the holds the found relation/edge.
	FoundTable = "vulnerability"
	// FoundInverseTable is the table name for the Vulnerability entity.
	// It exists in this package in order to avoid circular dependency with the "vulnerability" package.
	FoundInverseTable = "vulnerability"
	// FoundColumn is the table column denoting the found relation/edge.
	FoundColumn = "vulnerability_cve"
	// RulesTable is the table the holds the rules relation/edge.
	RulesTable = "cve_rule"
	// RulesInverseTable is the table name for the CVERule entity.
	// It exists in this package in order to avoid circular dependency with the "cverule" package.
	RulesInverseTable = "cve_rule"
	// RulesColumn is the table column denoting the rules relation/edge.
	RulesColumn = "cve_rule_cve"
)

// Columns holds all SQL columns for cve fields.
var Columns = []string{
	FieldID,
	FieldCveID,
	FieldDescription,
	FieldSeverityScore,
	FieldSeverity,
	FieldPublishedData,
	FieldModifiedData,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/valocode/bubbly/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// CveIDValidator is a validator for the "cve_id" field. It is called by the builders before save.
	CveIDValidator func(string) error
	// DefaultSeverityScore holds the default value on creation for the "severity_score" field.
	DefaultSeverityScore float64
)

// Severity defines the type for the "severity" enum field.
type Severity string

// SeverityNone is the default value of the Severity enum.
const DefaultSeverity = SeverityNone

// Severity values.
const (
	SeverityNone     Severity = "None"
	SeverityLow      Severity = "Low"
	SeverityMedium   Severity = "Medium"
	SeverityHigh     Severity = "High"
	SeverityCritical Severity = "Critical"
)

func (s Severity) String() string {
	return string(s)
}

// SeverityValidator is a validator for the "severity" field enum values. It is called by the builders before save.
func SeverityValidator(s Severity) error {
	switch s {
	case SeverityNone, SeverityLow, SeverityMedium, SeverityHigh, SeverityCritical:
		return nil
	default:
		return fmt.Errorf("cve: invalid enum value for severity field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (s Severity) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(s.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (s *Severity) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*s = Severity(str)
	if err := SeverityValidator(*s); err != nil {
		return fmt.Errorf("%s is not a valid Severity", str)
	}
	return nil
}
