// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/spdxlicense"
)

// SPDXLicense is the model entity for the SPDXLicense schema.
type SPDXLicense struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LicenseID holds the value of the "license_id" field.
	LicenseID string `json:"license_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Reference holds the value of the "reference" field.
	Reference string `json:"reference,omitempty"`
	// DetailsURL holds the value of the "details_url" field.
	DetailsURL string `json:"details_url,omitempty"`
	// IsOsiApproved holds the value of the "is_osi_approved" field.
	IsOsiApproved bool `json:"is_osi_approved,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SPDXLicense) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case spdxlicense.FieldIsOsiApproved:
			values[i] = new(sql.NullBool)
		case spdxlicense.FieldID:
			values[i] = new(sql.NullInt64)
		case spdxlicense.FieldLicenseID, spdxlicense.FieldName, spdxlicense.FieldReference, spdxlicense.FieldDetailsURL:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SPDXLicense", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SPDXLicense fields.
func (sl *SPDXLicense) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spdxlicense.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sl.ID = int(value.Int64)
		case spdxlicense.FieldLicenseID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field license_id", values[i])
			} else if value.Valid {
				sl.LicenseID = value.String
			}
		case spdxlicense.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sl.Name = value.String
			}
		case spdxlicense.FieldReference:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference", values[i])
			} else if value.Valid {
				sl.Reference = value.String
			}
		case spdxlicense.FieldDetailsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field details_url", values[i])
			} else if value.Valid {
				sl.DetailsURL = value.String
			}
		case spdxlicense.FieldIsOsiApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_osi_approved", values[i])
			} else if value.Valid {
				sl.IsOsiApproved = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SPDXLicense.
// Note that you need to call SPDXLicense.Unwrap() before calling this method if this SPDXLicense
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *SPDXLicense) Update() *SPDXLicenseUpdateOne {
	return (&SPDXLicenseClient{config: sl.config}).UpdateOne(sl)
}

// Unwrap unwraps the SPDXLicense entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *SPDXLicense) Unwrap() *SPDXLicense {
	tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: SPDXLicense is not a transactional entity")
	}
	sl.config.driver = tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *SPDXLicense) String() string {
	var builder strings.Builder
	builder.WriteString("SPDXLicense(")
	builder.WriteString(fmt.Sprintf("id=%v", sl.ID))
	builder.WriteString(", license_id=")
	builder.WriteString(sl.LicenseID)
	builder.WriteString(", name=")
	builder.WriteString(sl.Name)
	builder.WriteString(", reference=")
	builder.WriteString(sl.Reference)
	builder.WriteString(", details_url=")
	builder.WriteString(sl.DetailsURL)
	builder.WriteString(", is_osi_approved=")
	builder.WriteString(fmt.Sprintf("%v", sl.IsOsiApproved))
	builder.WriteByte(')')
	return builder.String()
}

// SPDXLicenses is a parsable slice of SPDXLicense.
type SPDXLicenses []*SPDXLicense

func (sl SPDXLicenses) config(cfg config) {
	for _i := range sl {
		sl[_i].config = cfg
	}
}
