// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/organization"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/releasepolicy"
	"github.com/valocode/bubbly/ent/releasepolicyviolation"
)

// ReleasePolicyUpdate is the builder for updating ReleasePolicy entities.
type ReleasePolicyUpdate struct {
	config
	hooks    []Hook
	mutation *ReleasePolicyMutation
}

// Where appends a list predicates to the ReleasePolicyUpdate builder.
func (rpu *ReleasePolicyUpdate) Where(ps ...predicate.ReleasePolicy) *ReleasePolicyUpdate {
	rpu.mutation.Where(ps...)
	return rpu
}

// SetName sets the "name" field.
func (rpu *ReleasePolicyUpdate) SetName(s string) *ReleasePolicyUpdate {
	rpu.mutation.SetName(s)
	return rpu
}

// SetModule sets the "module" field.
func (rpu *ReleasePolicyUpdate) SetModule(s string) *ReleasePolicyUpdate {
	rpu.mutation.SetModule(s)
	return rpu
}

// SetOwnerID sets the "owner" edge to the Organization entity by ID.
func (rpu *ReleasePolicyUpdate) SetOwnerID(id int) *ReleasePolicyUpdate {
	rpu.mutation.SetOwnerID(id)
	return rpu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (rpu *ReleasePolicyUpdate) SetOwner(o *Organization) *ReleasePolicyUpdate {
	return rpu.SetOwnerID(o.ID)
}

// AddViolationIDs adds the "violations" edge to the ReleasePolicyViolation entity by IDs.
func (rpu *ReleasePolicyUpdate) AddViolationIDs(ids ...int) *ReleasePolicyUpdate {
	rpu.mutation.AddViolationIDs(ids...)
	return rpu
}

// AddViolations adds the "violations" edges to the ReleasePolicyViolation entity.
func (rpu *ReleasePolicyUpdate) AddViolations(r ...*ReleasePolicyViolation) *ReleasePolicyUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpu.AddViolationIDs(ids...)
}

// Mutation returns the ReleasePolicyMutation object of the builder.
func (rpu *ReleasePolicyUpdate) Mutation() *ReleasePolicyMutation {
	return rpu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (rpu *ReleasePolicyUpdate) ClearOwner() *ReleasePolicyUpdate {
	rpu.mutation.ClearOwner()
	return rpu
}

// ClearViolations clears all "violations" edges to the ReleasePolicyViolation entity.
func (rpu *ReleasePolicyUpdate) ClearViolations() *ReleasePolicyUpdate {
	rpu.mutation.ClearViolations()
	return rpu
}

// RemoveViolationIDs removes the "violations" edge to ReleasePolicyViolation entities by IDs.
func (rpu *ReleasePolicyUpdate) RemoveViolationIDs(ids ...int) *ReleasePolicyUpdate {
	rpu.mutation.RemoveViolationIDs(ids...)
	return rpu
}

// RemoveViolations removes "violations" edges to ReleasePolicyViolation entities.
func (rpu *ReleasePolicyUpdate) RemoveViolations(r ...*ReleasePolicyViolation) *ReleasePolicyUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpu.RemoveViolationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpu *ReleasePolicyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rpu.hooks) == 0 {
		if err = rpu.check(); err != nil {
			return 0, err
		}
		affected, err = rpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleasePolicyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rpu.check(); err != nil {
				return 0, err
			}
			rpu.mutation = mutation
			affected, err = rpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rpu.hooks) - 1; i >= 0; i-- {
			if rpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *ReleasePolicyUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *ReleasePolicyUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *ReleasePolicyUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpu *ReleasePolicyUpdate) check() error {
	if v, ok := rpu.mutation.Name(); ok {
		if err := releasepolicy.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := rpu.mutation.Module(); ok {
		if err := releasepolicy.ModuleValidator(v); err != nil {
			return &ValidationError{Name: "module", err: fmt.Errorf("ent: validator failed for field \"module\": %w", err)}
		}
	}
	if _, ok := rpu.mutation.OwnerID(); rpu.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (rpu *ReleasePolicyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releasepolicy.Table,
			Columns: releasepolicy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releasepolicy.FieldID,
			},
		},
	}
	if ps := rpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: releasepolicy.FieldName,
		})
	}
	if value, ok := rpu.mutation.Module(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: releasepolicy.FieldModule,
		})
	}
	if rpu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasepolicy.OwnerTable,
			Columns: []string{releasepolicy.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasepolicy.OwnerTable,
			Columns: []string{releasepolicy.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.ViolationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasepolicy.ViolationsTable,
			Columns: []string{releasepolicy.ViolationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasepolicyviolation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.RemovedViolationsIDs(); len(nodes) > 0 && !rpu.mutation.ViolationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasepolicy.ViolationsTable,
			Columns: []string{releasepolicy.ViolationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasepolicyviolation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.ViolationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasepolicy.ViolationsTable,
			Columns: []string{releasepolicy.ViolationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasepolicyviolation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releasepolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ReleasePolicyUpdateOne is the builder for updating a single ReleasePolicy entity.
type ReleasePolicyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReleasePolicyMutation
}

// SetName sets the "name" field.
func (rpuo *ReleasePolicyUpdateOne) SetName(s string) *ReleasePolicyUpdateOne {
	rpuo.mutation.SetName(s)
	return rpuo
}

// SetModule sets the "module" field.
func (rpuo *ReleasePolicyUpdateOne) SetModule(s string) *ReleasePolicyUpdateOne {
	rpuo.mutation.SetModule(s)
	return rpuo
}

// SetOwnerID sets the "owner" edge to the Organization entity by ID.
func (rpuo *ReleasePolicyUpdateOne) SetOwnerID(id int) *ReleasePolicyUpdateOne {
	rpuo.mutation.SetOwnerID(id)
	return rpuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (rpuo *ReleasePolicyUpdateOne) SetOwner(o *Organization) *ReleasePolicyUpdateOne {
	return rpuo.SetOwnerID(o.ID)
}

// AddViolationIDs adds the "violations" edge to the ReleasePolicyViolation entity by IDs.
func (rpuo *ReleasePolicyUpdateOne) AddViolationIDs(ids ...int) *ReleasePolicyUpdateOne {
	rpuo.mutation.AddViolationIDs(ids...)
	return rpuo
}

// AddViolations adds the "violations" edges to the ReleasePolicyViolation entity.
func (rpuo *ReleasePolicyUpdateOne) AddViolations(r ...*ReleasePolicyViolation) *ReleasePolicyUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpuo.AddViolationIDs(ids...)
}

// Mutation returns the ReleasePolicyMutation object of the builder.
func (rpuo *ReleasePolicyUpdateOne) Mutation() *ReleasePolicyMutation {
	return rpuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (rpuo *ReleasePolicyUpdateOne) ClearOwner() *ReleasePolicyUpdateOne {
	rpuo.mutation.ClearOwner()
	return rpuo
}

// ClearViolations clears all "violations" edges to the ReleasePolicyViolation entity.
func (rpuo *ReleasePolicyUpdateOne) ClearViolations() *ReleasePolicyUpdateOne {
	rpuo.mutation.ClearViolations()
	return rpuo
}

// RemoveViolationIDs removes the "violations" edge to ReleasePolicyViolation entities by IDs.
func (rpuo *ReleasePolicyUpdateOne) RemoveViolationIDs(ids ...int) *ReleasePolicyUpdateOne {
	rpuo.mutation.RemoveViolationIDs(ids...)
	return rpuo
}

// RemoveViolations removes "violations" edges to ReleasePolicyViolation entities.
func (rpuo *ReleasePolicyUpdateOne) RemoveViolations(r ...*ReleasePolicyViolation) *ReleasePolicyUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpuo.RemoveViolationIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpuo *ReleasePolicyUpdateOne) Select(field string, fields ...string) *ReleasePolicyUpdateOne {
	rpuo.fields = append([]string{field}, fields...)
	return rpuo
}

// Save executes the query and returns the updated ReleasePolicy entity.
func (rpuo *ReleasePolicyUpdateOne) Save(ctx context.Context) (*ReleasePolicy, error) {
	var (
		err  error
		node *ReleasePolicy
	)
	if len(rpuo.hooks) == 0 {
		if err = rpuo.check(); err != nil {
			return nil, err
		}
		node, err = rpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleasePolicyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rpuo.check(); err != nil {
				return nil, err
			}
			rpuo.mutation = mutation
			node, err = rpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rpuo.hooks) - 1; i >= 0; i-- {
			if rpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *ReleasePolicyUpdateOne) SaveX(ctx context.Context) *ReleasePolicy {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *ReleasePolicyUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *ReleasePolicyUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpuo *ReleasePolicyUpdateOne) check() error {
	if v, ok := rpuo.mutation.Name(); ok {
		if err := releasepolicy.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := rpuo.mutation.Module(); ok {
		if err := releasepolicy.ModuleValidator(v); err != nil {
			return &ValidationError{Name: "module", err: fmt.Errorf("ent: validator failed for field \"module\": %w", err)}
		}
	}
	if _, ok := rpuo.mutation.OwnerID(); rpuo.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (rpuo *ReleasePolicyUpdateOne) sqlSave(ctx context.Context) (_node *ReleasePolicy, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releasepolicy.Table,
			Columns: releasepolicy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releasepolicy.FieldID,
			},
		},
	}
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ReleasePolicy.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, releasepolicy.FieldID)
		for _, f := range fields {
			if !releasepolicy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != releasepolicy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: releasepolicy.FieldName,
		})
	}
	if value, ok := rpuo.mutation.Module(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: releasepolicy.FieldModule,
		})
	}
	if rpuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasepolicy.OwnerTable,
			Columns: []string{releasepolicy.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasepolicy.OwnerTable,
			Columns: []string{releasepolicy.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.ViolationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasepolicy.ViolationsTable,
			Columns: []string{releasepolicy.ViolationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasepolicyviolation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.RemovedViolationsIDs(); len(nodes) > 0 && !rpuo.mutation.ViolationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasepolicy.ViolationsTable,
			Columns: []string{releasepolicy.ViolationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasepolicyviolation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.ViolationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasepolicy.ViolationsTable,
			Columns: []string{releasepolicy.ViolationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasepolicyviolation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReleasePolicy{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releasepolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
