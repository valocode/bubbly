// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasepolicy"
	"github.com/valocode/bubbly/ent/releasepolicyviolation"
)

// ReleasePolicyViolationCreate is the builder for creating a ReleasePolicyViolation entity.
type ReleasePolicyViolationCreate struct {
	config
	mutation *ReleasePolicyViolationMutation
	hooks    []Hook
}

// SetMessage sets the "message" field.
func (rpvc *ReleasePolicyViolationCreate) SetMessage(s string) *ReleasePolicyViolationCreate {
	rpvc.mutation.SetMessage(s)
	return rpvc
}

// SetSeverity sets the "severity" field.
func (rpvc *ReleasePolicyViolationCreate) SetSeverity(r releasepolicyviolation.Severity) *ReleasePolicyViolationCreate {
	rpvc.mutation.SetSeverity(r)
	return rpvc
}

// SetPolicyID sets the "policy" edge to the ReleasePolicy entity by ID.
func (rpvc *ReleasePolicyViolationCreate) SetPolicyID(id int) *ReleasePolicyViolationCreate {
	rpvc.mutation.SetPolicyID(id)
	return rpvc
}

// SetPolicy sets the "policy" edge to the ReleasePolicy entity.
func (rpvc *ReleasePolicyViolationCreate) SetPolicy(r *ReleasePolicy) *ReleasePolicyViolationCreate {
	return rpvc.SetPolicyID(r.ID)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (rpvc *ReleasePolicyViolationCreate) SetReleaseID(id int) *ReleasePolicyViolationCreate {
	rpvc.mutation.SetReleaseID(id)
	return rpvc
}

// SetRelease sets the "release" edge to the Release entity.
func (rpvc *ReleasePolicyViolationCreate) SetRelease(r *Release) *ReleasePolicyViolationCreate {
	return rpvc.SetReleaseID(r.ID)
}

// Mutation returns the ReleasePolicyViolationMutation object of the builder.
func (rpvc *ReleasePolicyViolationCreate) Mutation() *ReleasePolicyViolationMutation {
	return rpvc.mutation
}

// Save creates the ReleasePolicyViolation in the database.
func (rpvc *ReleasePolicyViolationCreate) Save(ctx context.Context) (*ReleasePolicyViolation, error) {
	var (
		err  error
		node *ReleasePolicyViolation
	)
	if len(rpvc.hooks) == 0 {
		if err = rpvc.check(); err != nil {
			return nil, err
		}
		node, err = rpvc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleasePolicyViolationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rpvc.check(); err != nil {
				return nil, err
			}
			rpvc.mutation = mutation
			if node, err = rpvc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rpvc.hooks) - 1; i >= 0; i-- {
			if rpvc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rpvc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rpvc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rpvc *ReleasePolicyViolationCreate) SaveX(ctx context.Context) *ReleasePolicyViolation {
	v, err := rpvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpvc *ReleasePolicyViolationCreate) Exec(ctx context.Context) error {
	_, err := rpvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpvc *ReleasePolicyViolationCreate) ExecX(ctx context.Context) {
	if err := rpvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpvc *ReleasePolicyViolationCreate) check() error {
	if _, ok := rpvc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "message"`)}
	}
	if v, ok := rpvc.mutation.Message(); ok {
		if err := releasepolicyviolation.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "message": %w`, err)}
		}
	}
	if _, ok := rpvc.mutation.Severity(); !ok {
		return &ValidationError{Name: "severity", err: errors.New(`ent: missing required field "severity"`)}
	}
	if v, ok := rpvc.mutation.Severity(); ok {
		if err := releasepolicyviolation.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`ent: validator failed for field "severity": %w`, err)}
		}
	}
	if _, ok := rpvc.mutation.PolicyID(); !ok {
		return &ValidationError{Name: "policy", err: errors.New("ent: missing required edge \"policy\"")}
	}
	if _, ok := rpvc.mutation.ReleaseID(); !ok {
		return &ValidationError{Name: "release", err: errors.New("ent: missing required edge \"release\"")}
	}
	return nil
}

func (rpvc *ReleasePolicyViolationCreate) sqlSave(ctx context.Context) (*ReleasePolicyViolation, error) {
	_node, _spec := rpvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rpvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rpvc *ReleasePolicyViolationCreate) createSpec() (*ReleasePolicyViolation, *sqlgraph.CreateSpec) {
	var (
		_node = &ReleasePolicyViolation{config: rpvc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: releasepolicyviolation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releasepolicyviolation.FieldID,
			},
		}
	)
	if value, ok := rpvc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: releasepolicyviolation.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := rpvc.mutation.Severity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: releasepolicyviolation.FieldSeverity,
		})
		_node.Severity = value
	}
	if nodes := rpvc.mutation.PolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasepolicyviolation.PolicyTable,
			Columns: []string{releasepolicyviolation.PolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasepolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.release_policy_violation_policy = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpvc.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasepolicyviolation.ReleaseTable,
			Columns: []string{releasepolicyviolation.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.release_policy_violation_release = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReleasePolicyViolationCreateBulk is the builder for creating many ReleasePolicyViolation entities in bulk.
type ReleasePolicyViolationCreateBulk struct {
	config
	builders []*ReleasePolicyViolationCreate
}

// Save creates the ReleasePolicyViolation entities in the database.
func (rpvcb *ReleasePolicyViolationCreateBulk) Save(ctx context.Context) ([]*ReleasePolicyViolation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rpvcb.builders))
	nodes := make([]*ReleasePolicyViolation, len(rpvcb.builders))
	mutators := make([]Mutator, len(rpvcb.builders))
	for i := range rpvcb.builders {
		func(i int, root context.Context) {
			builder := rpvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReleasePolicyViolationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rpvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rpvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rpvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rpvcb *ReleasePolicyViolationCreateBulk) SaveX(ctx context.Context) []*ReleasePolicyViolation {
	v, err := rpvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpvcb *ReleasePolicyViolationCreateBulk) Exec(ctx context.Context) error {
	_, err := rpvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpvcb *ReleasePolicyViolationCreateBulk) ExecX(ctx context.Context) {
	if err := rpvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
