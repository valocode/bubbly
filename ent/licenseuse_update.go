// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/license"
	"github.com/valocode/bubbly/ent/licenseuse"
	"github.com/valocode/bubbly/ent/predicate"
)

// LicenseUseUpdate is the builder for updating LicenseUse entities.
type LicenseUseUpdate struct {
	config
	hooks    []Hook
	mutation *LicenseUseMutation
}

// Where appends a list predicates to the LicenseUseUpdate builder.
func (luu *LicenseUseUpdate) Where(ps ...predicate.LicenseUse) *LicenseUseUpdate {
	luu.mutation.Where(ps...)
	return luu
}

// SetLicenseID sets the "license" edge to the License entity by ID.
func (luu *LicenseUseUpdate) SetLicenseID(id int) *LicenseUseUpdate {
	luu.mutation.SetLicenseID(id)
	return luu
}

// SetLicense sets the "license" edge to the License entity.
func (luu *LicenseUseUpdate) SetLicense(l *License) *LicenseUseUpdate {
	return luu.SetLicenseID(l.ID)
}

// Mutation returns the LicenseUseMutation object of the builder.
func (luu *LicenseUseUpdate) Mutation() *LicenseUseMutation {
	return luu.mutation
}

// ClearLicense clears the "license" edge to the License entity.
func (luu *LicenseUseUpdate) ClearLicense() *LicenseUseUpdate {
	luu.mutation.ClearLicense()
	return luu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (luu *LicenseUseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(luu.hooks) == 0 {
		if err = luu.check(); err != nil {
			return 0, err
		}
		affected, err = luu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LicenseUseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = luu.check(); err != nil {
				return 0, err
			}
			luu.mutation = mutation
			affected, err = luu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(luu.hooks) - 1; i >= 0; i-- {
			if luu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = luu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (luu *LicenseUseUpdate) SaveX(ctx context.Context) int {
	affected, err := luu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (luu *LicenseUseUpdate) Exec(ctx context.Context) error {
	_, err := luu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luu *LicenseUseUpdate) ExecX(ctx context.Context) {
	if err := luu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luu *LicenseUseUpdate) check() error {
	if _, ok := luu.mutation.LicenseID(); luu.mutation.LicenseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"license\"")
	}
	return nil
}

func (luu *LicenseUseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   licenseuse.Table,
			Columns: licenseuse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: licenseuse.FieldID,
			},
		},
	}
	if ps := luu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if luu.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   licenseuse.LicenseTable,
			Columns: []string{licenseuse.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: license.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luu.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   licenseuse.LicenseTable,
			Columns: []string{licenseuse.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: license.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, luu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{licenseuse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LicenseUseUpdateOne is the builder for updating a single LicenseUse entity.
type LicenseUseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LicenseUseMutation
}

// SetLicenseID sets the "license" edge to the License entity by ID.
func (luuo *LicenseUseUpdateOne) SetLicenseID(id int) *LicenseUseUpdateOne {
	luuo.mutation.SetLicenseID(id)
	return luuo
}

// SetLicense sets the "license" edge to the License entity.
func (luuo *LicenseUseUpdateOne) SetLicense(l *License) *LicenseUseUpdateOne {
	return luuo.SetLicenseID(l.ID)
}

// Mutation returns the LicenseUseMutation object of the builder.
func (luuo *LicenseUseUpdateOne) Mutation() *LicenseUseMutation {
	return luuo.mutation
}

// ClearLicense clears the "license" edge to the License entity.
func (luuo *LicenseUseUpdateOne) ClearLicense() *LicenseUseUpdateOne {
	luuo.mutation.ClearLicense()
	return luuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luuo *LicenseUseUpdateOne) Select(field string, fields ...string) *LicenseUseUpdateOne {
	luuo.fields = append([]string{field}, fields...)
	return luuo
}

// Save executes the query and returns the updated LicenseUse entity.
func (luuo *LicenseUseUpdateOne) Save(ctx context.Context) (*LicenseUse, error) {
	var (
		err  error
		node *LicenseUse
	)
	if len(luuo.hooks) == 0 {
		if err = luuo.check(); err != nil {
			return nil, err
		}
		node, err = luuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LicenseUseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = luuo.check(); err != nil {
				return nil, err
			}
			luuo.mutation = mutation
			node, err = luuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luuo.hooks) - 1; i >= 0; i-- {
			if luuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = luuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luuo *LicenseUseUpdateOne) SaveX(ctx context.Context) *LicenseUse {
	node, err := luuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luuo *LicenseUseUpdateOne) Exec(ctx context.Context) error {
	_, err := luuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luuo *LicenseUseUpdateOne) ExecX(ctx context.Context) {
	if err := luuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luuo *LicenseUseUpdateOne) check() error {
	if _, ok := luuo.mutation.LicenseID(); luuo.mutation.LicenseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"license\"")
	}
	return nil
}

func (luuo *LicenseUseUpdateOne) sqlSave(ctx context.Context) (_node *LicenseUse, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   licenseuse.Table,
			Columns: licenseuse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: licenseuse.FieldID,
			},
		},
	}
	id, ok := luuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing LicenseUse.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := luuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, licenseuse.FieldID)
		for _, f := range fields {
			if !licenseuse.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != licenseuse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if luuo.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   licenseuse.LicenseTable,
			Columns: []string{licenseuse.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: license.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luuo.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   licenseuse.LicenseTable,
			Columns: []string{licenseuse.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: license.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LicenseUse{config: luuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{licenseuse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
