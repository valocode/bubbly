// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/codescan"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasecomponent"
	"github.com/valocode/bubbly/ent/releasevulnerability"
	"github.com/valocode/bubbly/ent/vulnerability"
	"github.com/valocode/bubbly/ent/vulnerabilityreview"
)

// ReleaseVulnerabilityQuery is the builder for querying ReleaseVulnerability entities.
type ReleaseVulnerabilityQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ReleaseVulnerability
	// eager-loading edges.
	withVulnerability *VulnerabilityQuery
	withComponents    *ReleaseComponentQuery
	withRelease       *ReleaseQuery
	withReviews       *VulnerabilityReviewQuery
	withScans         *CodeScanQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ReleaseVulnerabilityQuery builder.
func (rvq *ReleaseVulnerabilityQuery) Where(ps ...predicate.ReleaseVulnerability) *ReleaseVulnerabilityQuery {
	rvq.predicates = append(rvq.predicates, ps...)
	return rvq
}

// Limit adds a limit step to the query.
func (rvq *ReleaseVulnerabilityQuery) Limit(limit int) *ReleaseVulnerabilityQuery {
	rvq.limit = &limit
	return rvq
}

// Offset adds an offset step to the query.
func (rvq *ReleaseVulnerabilityQuery) Offset(offset int) *ReleaseVulnerabilityQuery {
	rvq.offset = &offset
	return rvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rvq *ReleaseVulnerabilityQuery) Unique(unique bool) *ReleaseVulnerabilityQuery {
	rvq.unique = &unique
	return rvq
}

// Order adds an order step to the query.
func (rvq *ReleaseVulnerabilityQuery) Order(o ...OrderFunc) *ReleaseVulnerabilityQuery {
	rvq.order = append(rvq.order, o...)
	return rvq
}

// QueryVulnerability chains the current query on the "vulnerability" edge.
func (rvq *ReleaseVulnerabilityQuery) QueryVulnerability() *VulnerabilityQuery {
	query := &VulnerabilityQuery{config: rvq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(releasevulnerability.Table, releasevulnerability.FieldID, selector),
			sqlgraph.To(vulnerability.Table, vulnerability.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, releasevulnerability.VulnerabilityTable, releasevulnerability.VulnerabilityColumn),
		)
		fromU = sqlgraph.SetNeighbors(rvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryComponents chains the current query on the "components" edge.
func (rvq *ReleaseVulnerabilityQuery) QueryComponents() *ReleaseComponentQuery {
	query := &ReleaseComponentQuery{config: rvq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(releasevulnerability.Table, releasevulnerability.FieldID, selector),
			sqlgraph.To(releasecomponent.Table, releasecomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, releasevulnerability.ComponentsTable, releasevulnerability.ComponentsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRelease chains the current query on the "release" edge.
func (rvq *ReleaseVulnerabilityQuery) QueryRelease() *ReleaseQuery {
	query := &ReleaseQuery{config: rvq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(releasevulnerability.Table, releasevulnerability.FieldID, selector),
			sqlgraph.To(release.Table, release.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, releasevulnerability.ReleaseTable, releasevulnerability.ReleaseColumn),
		)
		fromU = sqlgraph.SetNeighbors(rvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReviews chains the current query on the "reviews" edge.
func (rvq *ReleaseVulnerabilityQuery) QueryReviews() *VulnerabilityReviewQuery {
	query := &VulnerabilityReviewQuery{config: rvq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(releasevulnerability.Table, releasevulnerability.FieldID, selector),
			sqlgraph.To(vulnerabilityreview.Table, vulnerabilityreview.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, releasevulnerability.ReviewsTable, releasevulnerability.ReviewsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScans chains the current query on the "scans" edge.
func (rvq *ReleaseVulnerabilityQuery) QueryScans() *CodeScanQuery {
	query := &CodeScanQuery{config: rvq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(releasevulnerability.Table, releasevulnerability.FieldID, selector),
			sqlgraph.To(codescan.Table, codescan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, releasevulnerability.ScansTable, releasevulnerability.ScansPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ReleaseVulnerability entity from the query.
// Returns a *NotFoundError when no ReleaseVulnerability was found.
func (rvq *ReleaseVulnerabilityQuery) First(ctx context.Context) (*ReleaseVulnerability, error) {
	nodes, err := rvq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{releasevulnerability.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rvq *ReleaseVulnerabilityQuery) FirstX(ctx context.Context) *ReleaseVulnerability {
	node, err := rvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ReleaseVulnerability ID from the query.
// Returns a *NotFoundError when no ReleaseVulnerability ID was found.
func (rvq *ReleaseVulnerabilityQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rvq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{releasevulnerability.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rvq *ReleaseVulnerabilityQuery) FirstIDX(ctx context.Context) int {
	id, err := rvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ReleaseVulnerability entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ReleaseVulnerability entity is not found.
// Returns a *NotFoundError when no ReleaseVulnerability entities are found.
func (rvq *ReleaseVulnerabilityQuery) Only(ctx context.Context) (*ReleaseVulnerability, error) {
	nodes, err := rvq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{releasevulnerability.Label}
	default:
		return nil, &NotSingularError{releasevulnerability.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rvq *ReleaseVulnerabilityQuery) OnlyX(ctx context.Context) *ReleaseVulnerability {
	node, err := rvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ReleaseVulnerability ID in the query.
// Returns a *NotSingularError when exactly one ReleaseVulnerability ID is not found.
// Returns a *NotFoundError when no entities are found.
func (rvq *ReleaseVulnerabilityQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rvq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{releasevulnerability.Label}
	default:
		err = &NotSingularError{releasevulnerability.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rvq *ReleaseVulnerabilityQuery) OnlyIDX(ctx context.Context) int {
	id, err := rvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ReleaseVulnerabilities.
func (rvq *ReleaseVulnerabilityQuery) All(ctx context.Context) ([]*ReleaseVulnerability, error) {
	if err := rvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rvq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rvq *ReleaseVulnerabilityQuery) AllX(ctx context.Context) []*ReleaseVulnerability {
	nodes, err := rvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ReleaseVulnerability IDs.
func (rvq *ReleaseVulnerabilityQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rvq.Select(releasevulnerability.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rvq *ReleaseVulnerabilityQuery) IDsX(ctx context.Context) []int {
	ids, err := rvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rvq *ReleaseVulnerabilityQuery) Count(ctx context.Context) (int, error) {
	if err := rvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rvq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rvq *ReleaseVulnerabilityQuery) CountX(ctx context.Context) int {
	count, err := rvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rvq *ReleaseVulnerabilityQuery) Exist(ctx context.Context) (bool, error) {
	if err := rvq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rvq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rvq *ReleaseVulnerabilityQuery) ExistX(ctx context.Context) bool {
	exist, err := rvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ReleaseVulnerabilityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rvq *ReleaseVulnerabilityQuery) Clone() *ReleaseVulnerabilityQuery {
	if rvq == nil {
		return nil
	}
	return &ReleaseVulnerabilityQuery{
		config:            rvq.config,
		limit:             rvq.limit,
		offset:            rvq.offset,
		order:             append([]OrderFunc{}, rvq.order...),
		predicates:        append([]predicate.ReleaseVulnerability{}, rvq.predicates...),
		withVulnerability: rvq.withVulnerability.Clone(),
		withComponents:    rvq.withComponents.Clone(),
		withRelease:       rvq.withRelease.Clone(),
		withReviews:       rvq.withReviews.Clone(),
		withScans:         rvq.withScans.Clone(),
		// clone intermediate query.
		sql:  rvq.sql.Clone(),
		path: rvq.path,
	}
}

// WithVulnerability tells the query-builder to eager-load the nodes that are connected to
// the "vulnerability" edge. The optional arguments are used to configure the query builder of the edge.
func (rvq *ReleaseVulnerabilityQuery) WithVulnerability(opts ...func(*VulnerabilityQuery)) *ReleaseVulnerabilityQuery {
	query := &VulnerabilityQuery{config: rvq.config}
	for _, opt := range opts {
		opt(query)
	}
	rvq.withVulnerability = query
	return rvq
}

// WithComponents tells the query-builder to eager-load the nodes that are connected to
// the "components" edge. The optional arguments are used to configure the query builder of the edge.
func (rvq *ReleaseVulnerabilityQuery) WithComponents(opts ...func(*ReleaseComponentQuery)) *ReleaseVulnerabilityQuery {
	query := &ReleaseComponentQuery{config: rvq.config}
	for _, opt := range opts {
		opt(query)
	}
	rvq.withComponents = query
	return rvq
}

// WithRelease tells the query-builder to eager-load the nodes that are connected to
// the "release" edge. The optional arguments are used to configure the query builder of the edge.
func (rvq *ReleaseVulnerabilityQuery) WithRelease(opts ...func(*ReleaseQuery)) *ReleaseVulnerabilityQuery {
	query := &ReleaseQuery{config: rvq.config}
	for _, opt := range opts {
		opt(query)
	}
	rvq.withRelease = query
	return rvq
}

// WithReviews tells the query-builder to eager-load the nodes that are connected to
// the "reviews" edge. The optional arguments are used to configure the query builder of the edge.
func (rvq *ReleaseVulnerabilityQuery) WithReviews(opts ...func(*VulnerabilityReviewQuery)) *ReleaseVulnerabilityQuery {
	query := &VulnerabilityReviewQuery{config: rvq.config}
	for _, opt := range opts {
		opt(query)
	}
	rvq.withReviews = query
	return rvq
}

// WithScans tells the query-builder to eager-load the nodes that are connected to
// the "scans" edge. The optional arguments are used to configure the query builder of the edge.
func (rvq *ReleaseVulnerabilityQuery) WithScans(opts ...func(*CodeScanQuery)) *ReleaseVulnerabilityQuery {
	query := &CodeScanQuery{config: rvq.config}
	for _, opt := range opts {
		opt(query)
	}
	rvq.withScans = query
	return rvq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (rvq *ReleaseVulnerabilityQuery) GroupBy(field string, fields ...string) *ReleaseVulnerabilityGroupBy {
	group := &ReleaseVulnerabilityGroupBy{config: rvq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rvq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (rvq *ReleaseVulnerabilityQuery) Select(fields ...string) *ReleaseVulnerabilitySelect {
	rvq.fields = append(rvq.fields, fields...)
	return &ReleaseVulnerabilitySelect{ReleaseVulnerabilityQuery: rvq}
}

func (rvq *ReleaseVulnerabilityQuery) prepareQuery(ctx context.Context) error {
	for _, f := range rvq.fields {
		if !releasevulnerability.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rvq.path != nil {
		prev, err := rvq.path(ctx)
		if err != nil {
			return err
		}
		rvq.sql = prev
	}
	return nil
}

func (rvq *ReleaseVulnerabilityQuery) sqlAll(ctx context.Context) ([]*ReleaseVulnerability, error) {
	var (
		nodes       = []*ReleaseVulnerability{}
		withFKs     = rvq.withFKs
		_spec       = rvq.querySpec()
		loadedTypes = [5]bool{
			rvq.withVulnerability != nil,
			rvq.withComponents != nil,
			rvq.withRelease != nil,
			rvq.withReviews != nil,
			rvq.withScans != nil,
		}
	)
	if rvq.withVulnerability != nil || rvq.withRelease != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, releasevulnerability.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ReleaseVulnerability{config: rvq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, rvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rvq.withVulnerability; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ReleaseVulnerability)
		for i := range nodes {
			if nodes[i].release_vulnerability_vulnerability == nil {
				continue
			}
			fk := *nodes[i].release_vulnerability_vulnerability
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(vulnerability.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "release_vulnerability_vulnerability" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Vulnerability = n
			}
		}
	}

	if query := rvq.withComponents; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*ReleaseVulnerability, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Components = []*ReleaseComponent{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*ReleaseVulnerability)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   releasevulnerability.ComponentsTable,
				Columns: releasevulnerability.ComponentsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(releasevulnerability.ComponentsPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, rvq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "components": %w`, err)
		}
		query.Where(releasecomponent.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "components" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Components = append(nodes[i].Edges.Components, n)
			}
		}
	}

	if query := rvq.withRelease; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ReleaseVulnerability)
		for i := range nodes {
			if nodes[i].release_vulnerability_release == nil {
				continue
			}
			fk := *nodes[i].release_vulnerability_release
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(release.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "release_vulnerability_release" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Release = n
			}
		}
	}

	if query := rvq.withReviews; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*ReleaseVulnerability, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Reviews = []*VulnerabilityReview{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*ReleaseVulnerability)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   releasevulnerability.ReviewsTable,
				Columns: releasevulnerability.ReviewsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(releasevulnerability.ReviewsPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, rvq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "reviews": %w`, err)
		}
		query.Where(vulnerabilityreview.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "reviews" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Reviews = append(nodes[i].Edges.Reviews, n)
			}
		}
	}

	if query := rvq.withScans; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*ReleaseVulnerability, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Scans = []*CodeScan{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*ReleaseVulnerability)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   releasevulnerability.ScansTable,
				Columns: releasevulnerability.ScansPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(releasevulnerability.ScansPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, rvq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "scans": %w`, err)
		}
		query.Where(codescan.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "scans" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Scans = append(nodes[i].Edges.Scans, n)
			}
		}
	}

	return nodes, nil
}

func (rvq *ReleaseVulnerabilityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rvq.querySpec()
	return sqlgraph.CountNodes(ctx, rvq.driver, _spec)
}

func (rvq *ReleaseVulnerabilityQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rvq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (rvq *ReleaseVulnerabilityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releasevulnerability.Table,
			Columns: releasevulnerability.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releasevulnerability.FieldID,
			},
		},
		From:   rvq.sql,
		Unique: true,
	}
	if unique := rvq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := rvq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, releasevulnerability.FieldID)
		for i := range fields {
			if fields[i] != releasevulnerability.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rvq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rvq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rvq *ReleaseVulnerabilityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rvq.driver.Dialect())
	t1 := builder.Table(releasevulnerability.Table)
	columns := rvq.fields
	if len(columns) == 0 {
		columns = releasevulnerability.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rvq.sql != nil {
		selector = rvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range rvq.predicates {
		p(selector)
	}
	for _, p := range rvq.order {
		p(selector)
	}
	if offset := rvq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rvq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ReleaseVulnerabilityGroupBy is the group-by builder for ReleaseVulnerability entities.
type ReleaseVulnerabilityGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rvgb *ReleaseVulnerabilityGroupBy) Aggregate(fns ...AggregateFunc) *ReleaseVulnerabilityGroupBy {
	rvgb.fns = append(rvgb.fns, fns...)
	return rvgb
}

// Scan applies the group-by query and scans the result into the given value.
func (rvgb *ReleaseVulnerabilityGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rvgb.path(ctx)
	if err != nil {
		return err
	}
	rvgb.sql = query
	return rvgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rvgb *ReleaseVulnerabilityGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rvgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (rvgb *ReleaseVulnerabilityGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rvgb.fields) > 1 {
		return nil, errors.New("ent: ReleaseVulnerabilityGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rvgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rvgb *ReleaseVulnerabilityGroupBy) StringsX(ctx context.Context) []string {
	v, err := rvgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rvgb *ReleaseVulnerabilityGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rvgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{releasevulnerability.Label}
	default:
		err = fmt.Errorf("ent: ReleaseVulnerabilityGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rvgb *ReleaseVulnerabilityGroupBy) StringX(ctx context.Context) string {
	v, err := rvgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (rvgb *ReleaseVulnerabilityGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rvgb.fields) > 1 {
		return nil, errors.New("ent: ReleaseVulnerabilityGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rvgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rvgb *ReleaseVulnerabilityGroupBy) IntsX(ctx context.Context) []int {
	v, err := rvgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rvgb *ReleaseVulnerabilityGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rvgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{releasevulnerability.Label}
	default:
		err = fmt.Errorf("ent: ReleaseVulnerabilityGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rvgb *ReleaseVulnerabilityGroupBy) IntX(ctx context.Context) int {
	v, err := rvgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (rvgb *ReleaseVulnerabilityGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rvgb.fields) > 1 {
		return nil, errors.New("ent: ReleaseVulnerabilityGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rvgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rvgb *ReleaseVulnerabilityGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rvgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rvgb *ReleaseVulnerabilityGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rvgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{releasevulnerability.Label}
	default:
		err = fmt.Errorf("ent: ReleaseVulnerabilityGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rvgb *ReleaseVulnerabilityGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rvgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (rvgb *ReleaseVulnerabilityGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rvgb.fields) > 1 {
		return nil, errors.New("ent: ReleaseVulnerabilityGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rvgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rvgb *ReleaseVulnerabilityGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rvgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rvgb *ReleaseVulnerabilityGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rvgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{releasevulnerability.Label}
	default:
		err = fmt.Errorf("ent: ReleaseVulnerabilityGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rvgb *ReleaseVulnerabilityGroupBy) BoolX(ctx context.Context) bool {
	v, err := rvgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rvgb *ReleaseVulnerabilityGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rvgb.fields {
		if !releasevulnerability.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rvgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rvgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rvgb *ReleaseVulnerabilityGroupBy) sqlQuery() *sql.Selector {
	selector := rvgb.sql.Select()
	aggregation := make([]string, 0, len(rvgb.fns))
	for _, fn := range rvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(rvgb.fields)+len(rvgb.fns))
		for _, f := range rvgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(rvgb.fields...)...)
}

// ReleaseVulnerabilitySelect is the builder for selecting fields of ReleaseVulnerability entities.
type ReleaseVulnerabilitySelect struct {
	*ReleaseVulnerabilityQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (rvs *ReleaseVulnerabilitySelect) Scan(ctx context.Context, v interface{}) error {
	if err := rvs.prepareQuery(ctx); err != nil {
		return err
	}
	rvs.sql = rvs.ReleaseVulnerabilityQuery.sqlQuery(ctx)
	return rvs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rvs *ReleaseVulnerabilitySelect) ScanX(ctx context.Context, v interface{}) {
	if err := rvs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (rvs *ReleaseVulnerabilitySelect) Strings(ctx context.Context) ([]string, error) {
	if len(rvs.fields) > 1 {
		return nil, errors.New("ent: ReleaseVulnerabilitySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rvs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rvs *ReleaseVulnerabilitySelect) StringsX(ctx context.Context) []string {
	v, err := rvs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (rvs *ReleaseVulnerabilitySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rvs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{releasevulnerability.Label}
	default:
		err = fmt.Errorf("ent: ReleaseVulnerabilitySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rvs *ReleaseVulnerabilitySelect) StringX(ctx context.Context) string {
	v, err := rvs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (rvs *ReleaseVulnerabilitySelect) Ints(ctx context.Context) ([]int, error) {
	if len(rvs.fields) > 1 {
		return nil, errors.New("ent: ReleaseVulnerabilitySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rvs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rvs *ReleaseVulnerabilitySelect) IntsX(ctx context.Context) []int {
	v, err := rvs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (rvs *ReleaseVulnerabilitySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rvs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{releasevulnerability.Label}
	default:
		err = fmt.Errorf("ent: ReleaseVulnerabilitySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rvs *ReleaseVulnerabilitySelect) IntX(ctx context.Context) int {
	v, err := rvs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (rvs *ReleaseVulnerabilitySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rvs.fields) > 1 {
		return nil, errors.New("ent: ReleaseVulnerabilitySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rvs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rvs *ReleaseVulnerabilitySelect) Float64sX(ctx context.Context) []float64 {
	v, err := rvs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (rvs *ReleaseVulnerabilitySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rvs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{releasevulnerability.Label}
	default:
		err = fmt.Errorf("ent: ReleaseVulnerabilitySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rvs *ReleaseVulnerabilitySelect) Float64X(ctx context.Context) float64 {
	v, err := rvs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (rvs *ReleaseVulnerabilitySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rvs.fields) > 1 {
		return nil, errors.New("ent: ReleaseVulnerabilitySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rvs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rvs *ReleaseVulnerabilitySelect) BoolsX(ctx context.Context) []bool {
	v, err := rvs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (rvs *ReleaseVulnerabilitySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rvs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{releasevulnerability.Label}
	default:
		err = fmt.Errorf("ent: ReleaseVulnerabilitySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rvs *ReleaseVulnerabilitySelect) BoolX(ctx context.Context) bool {
	v, err := rvs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rvs *ReleaseVulnerabilitySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := rvs.sql.Query()
	if err := rvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
