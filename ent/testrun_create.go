// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/testrun"

	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releaseentry"
	schema "github.com/valocode/bubbly/ent/schema/types"
	"github.com/valocode/bubbly/ent/testcase"
)

// TestRunCreate is the builder for creating a TestRun entity.
type TestRunCreate struct {
	config
	mutation *TestRunMutation
	hooks    []Hook
}

// SetTool sets the "tool" field.
func (trc *TestRunCreate) SetTool(s string) *TestRunCreate {
	trc.mutation.SetTool(s)
	return trc
}

// SetTime sets the "time" field.
func (trc *TestRunCreate) SetTime(t time.Time) *TestRunCreate {
	trc.mutation.SetTime(t)
	return trc
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (trc *TestRunCreate) SetNillableTime(t *time.Time) *TestRunCreate {
	if t != nil {
		trc.SetTime(*t)
	}
	return trc
}

// SetMetadata sets the "metadata" field.
func (trc *TestRunCreate) SetMetadata(s schema.Metadata) *TestRunCreate {
	trc.mutation.SetMetadata(s)
	return trc
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (trc *TestRunCreate) SetReleaseID(id int) *TestRunCreate {
	trc.mutation.SetReleaseID(id)
	return trc
}

// SetRelease sets the "release" edge to the Release entity.
func (trc *TestRunCreate) SetRelease(r *Release) *TestRunCreate {
	return trc.SetReleaseID(r.ID)
}

// SetEntryID sets the "entry" edge to the ReleaseEntry entity by ID.
func (trc *TestRunCreate) SetEntryID(id int) *TestRunCreate {
	trc.mutation.SetEntryID(id)
	return trc
}

// SetNillableEntryID sets the "entry" edge to the ReleaseEntry entity by ID if the given value is not nil.
func (trc *TestRunCreate) SetNillableEntryID(id *int) *TestRunCreate {
	if id != nil {
		trc = trc.SetEntryID(*id)
	}
	return trc
}

// SetEntry sets the "entry" edge to the ReleaseEntry entity.
func (trc *TestRunCreate) SetEntry(r *ReleaseEntry) *TestRunCreate {
	return trc.SetEntryID(r.ID)
}

// AddTestIDs adds the "tests" edge to the TestCase entity by IDs.
func (trc *TestRunCreate) AddTestIDs(ids ...int) *TestRunCreate {
	trc.mutation.AddTestIDs(ids...)
	return trc
}

// AddTests adds the "tests" edges to the TestCase entity.
func (trc *TestRunCreate) AddTests(t ...*TestCase) *TestRunCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return trc.AddTestIDs(ids...)
}

// Mutation returns the TestRunMutation object of the builder.
func (trc *TestRunCreate) Mutation() *TestRunMutation {
	return trc.mutation
}

// Save creates the TestRun in the database.
func (trc *TestRunCreate) Save(ctx context.Context) (*TestRun, error) {
	var (
		err  error
		node *TestRun
	)
	if err := trc.defaults(); err != nil {
		return nil, err
	}
	if len(trc.hooks) == 0 {
		if err = trc.check(); err != nil {
			return nil, err
		}
		node, err = trc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestRunMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = trc.check(); err != nil {
				return nil, err
			}
			trc.mutation = mutation
			if node, err = trc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(trc.hooks) - 1; i >= 0; i-- {
			if trc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = trc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, trc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TestRunCreate) SaveX(ctx context.Context) *TestRun {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trc *TestRunCreate) Exec(ctx context.Context) error {
	_, err := trc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trc *TestRunCreate) ExecX(ctx context.Context) {
	if err := trc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (trc *TestRunCreate) defaults() error {
	if _, ok := trc.mutation.Time(); !ok {
		if testrun.DefaultTime == nil {
			return fmt.Errorf("ent: uninitialized testrun.DefaultTime (forgotten import ent/runtime?)")
		}
		v := testrun.DefaultTime()
		trc.mutation.SetTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (trc *TestRunCreate) check() error {
	if _, ok := trc.mutation.Tool(); !ok {
		return &ValidationError{Name: "tool", err: errors.New(`ent: missing required field "tool"`)}
	}
	if v, ok := trc.mutation.Tool(); ok {
		if err := testrun.ToolValidator(v); err != nil {
			return &ValidationError{Name: "tool", err: fmt.Errorf(`ent: validator failed for field "tool": %w`, err)}
		}
	}
	if _, ok := trc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "time"`)}
	}
	if _, ok := trc.mutation.ReleaseID(); !ok {
		return &ValidationError{Name: "release", err: errors.New("ent: missing required edge \"release\"")}
	}
	return nil
}

func (trc *TestRunCreate) sqlSave(ctx context.Context) (*TestRun, error) {
	_node, _spec := trc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (trc *TestRunCreate) createSpec() (*TestRun, *sqlgraph.CreateSpec) {
	var (
		_node = &TestRun{config: trc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: testrun.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: testrun.FieldID,
			},
		}
	)
	if value, ok := trc.mutation.Tool(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testrun.FieldTool,
		})
		_node.Tool = value
	}
	if value, ok := trc.mutation.Time(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: testrun.FieldTime,
		})
		_node.Time = value
	}
	if value, ok := trc.mutation.Metadata(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: testrun.FieldMetadata,
		})
		_node.Metadata = value
	}
	if nodes := trc.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testrun.ReleaseTable,
			Columns: []string{testrun.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.test_run_release = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.mutation.EntryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   testrun.EntryTable,
			Columns: []string{testrun.EntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaseentry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.release_entry_test_run = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.mutation.TestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   testrun.TestsTable,
			Columns: []string{testrun.TestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testcase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TestRunCreateBulk is the builder for creating many TestRun entities in bulk.
type TestRunCreateBulk struct {
	config
	builders []*TestRunCreate
}

// Save creates the TestRun entities in the database.
func (trcb *TestRunCreateBulk) Save(ctx context.Context) ([]*TestRun, error) {
	specs := make([]*sqlgraph.CreateSpec, len(trcb.builders))
	nodes := make([]*TestRun, len(trcb.builders))
	mutators := make([]Mutator, len(trcb.builders))
	for i := range trcb.builders {
		func(i int, root context.Context) {
			builder := trcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestRunMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, trcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, trcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, trcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (trcb *TestRunCreateBulk) SaveX(ctx context.Context) []*TestRun {
	v, err := trcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trcb *TestRunCreateBulk) Exec(ctx context.Context) error {
	_, err := trcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trcb *TestRunCreateBulk) ExecX(ctx context.Context) {
	if err := trcb.Exec(ctx); err != nil {
		panic(err)
	}
}
