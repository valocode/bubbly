// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/licensescan"
	"github.com/valocode/bubbly/ent/licenseusage"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releaseentry"
)

// LicenseScanQuery is the builder for querying LicenseScan entities.
type LicenseScanQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.LicenseScan
	// eager-loading edges.
	withRelease  *ReleaseQuery
	withEntry    *ReleaseEntryQuery
	withLicenses *LicenseUsageQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LicenseScanQuery builder.
func (lsq *LicenseScanQuery) Where(ps ...predicate.LicenseScan) *LicenseScanQuery {
	lsq.predicates = append(lsq.predicates, ps...)
	return lsq
}

// Limit adds a limit step to the query.
func (lsq *LicenseScanQuery) Limit(limit int) *LicenseScanQuery {
	lsq.limit = &limit
	return lsq
}

// Offset adds an offset step to the query.
func (lsq *LicenseScanQuery) Offset(offset int) *LicenseScanQuery {
	lsq.offset = &offset
	return lsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lsq *LicenseScanQuery) Unique(unique bool) *LicenseScanQuery {
	lsq.unique = &unique
	return lsq
}

// Order adds an order step to the query.
func (lsq *LicenseScanQuery) Order(o ...OrderFunc) *LicenseScanQuery {
	lsq.order = append(lsq.order, o...)
	return lsq
}

// QueryRelease chains the current query on the "release" edge.
func (lsq *LicenseScanQuery) QueryRelease() *ReleaseQuery {
	query := &ReleaseQuery{config: lsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(licensescan.Table, licensescan.FieldID, selector),
			sqlgraph.To(release.Table, release.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, licensescan.ReleaseTable, licensescan.ReleaseColumn),
		)
		fromU = sqlgraph.SetNeighbors(lsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEntry chains the current query on the "entry" edge.
func (lsq *LicenseScanQuery) QueryEntry() *ReleaseEntryQuery {
	query := &ReleaseEntryQuery{config: lsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(licensescan.Table, licensescan.FieldID, selector),
			sqlgraph.To(releaseentry.Table, releaseentry.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, licensescan.EntryTable, licensescan.EntryColumn),
		)
		fromU = sqlgraph.SetNeighbors(lsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLicenses chains the current query on the "licenses" edge.
func (lsq *LicenseScanQuery) QueryLicenses() *LicenseUsageQuery {
	query := &LicenseUsageQuery{config: lsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(licensescan.Table, licensescan.FieldID, selector),
			sqlgraph.To(licenseusage.Table, licenseusage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, licensescan.LicensesTable, licensescan.LicensesColumn),
		)
		fromU = sqlgraph.SetNeighbors(lsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LicenseScan entity from the query.
// Returns a *NotFoundError when no LicenseScan was found.
func (lsq *LicenseScanQuery) First(ctx context.Context) (*LicenseScan, error) {
	nodes, err := lsq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{licensescan.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lsq *LicenseScanQuery) FirstX(ctx context.Context) *LicenseScan {
	node, err := lsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LicenseScan ID from the query.
// Returns a *NotFoundError when no LicenseScan ID was found.
func (lsq *LicenseScanQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = lsq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{licensescan.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lsq *LicenseScanQuery) FirstIDX(ctx context.Context) int {
	id, err := lsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LicenseScan entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one LicenseScan entity is not found.
// Returns a *NotFoundError when no LicenseScan entities are found.
func (lsq *LicenseScanQuery) Only(ctx context.Context) (*LicenseScan, error) {
	nodes, err := lsq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{licensescan.Label}
	default:
		return nil, &NotSingularError{licensescan.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lsq *LicenseScanQuery) OnlyX(ctx context.Context) *LicenseScan {
	node, err := lsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LicenseScan ID in the query.
// Returns a *NotSingularError when exactly one LicenseScan ID is not found.
// Returns a *NotFoundError when no entities are found.
func (lsq *LicenseScanQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = lsq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{licensescan.Label}
	default:
		err = &NotSingularError{licensescan.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lsq *LicenseScanQuery) OnlyIDX(ctx context.Context) int {
	id, err := lsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LicenseScans.
func (lsq *LicenseScanQuery) All(ctx context.Context) ([]*LicenseScan, error) {
	if err := lsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return lsq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (lsq *LicenseScanQuery) AllX(ctx context.Context) []*LicenseScan {
	nodes, err := lsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LicenseScan IDs.
func (lsq *LicenseScanQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := lsq.Select(licensescan.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lsq *LicenseScanQuery) IDsX(ctx context.Context) []int {
	ids, err := lsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lsq *LicenseScanQuery) Count(ctx context.Context) (int, error) {
	if err := lsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return lsq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (lsq *LicenseScanQuery) CountX(ctx context.Context) int {
	count, err := lsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lsq *LicenseScanQuery) Exist(ctx context.Context) (bool, error) {
	if err := lsq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return lsq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (lsq *LicenseScanQuery) ExistX(ctx context.Context) bool {
	exist, err := lsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LicenseScanQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lsq *LicenseScanQuery) Clone() *LicenseScanQuery {
	if lsq == nil {
		return nil
	}
	return &LicenseScanQuery{
		config:       lsq.config,
		limit:        lsq.limit,
		offset:       lsq.offset,
		order:        append([]OrderFunc{}, lsq.order...),
		predicates:   append([]predicate.LicenseScan{}, lsq.predicates...),
		withRelease:  lsq.withRelease.Clone(),
		withEntry:    lsq.withEntry.Clone(),
		withLicenses: lsq.withLicenses.Clone(),
		// clone intermediate query.
		sql:  lsq.sql.Clone(),
		path: lsq.path,
	}
}

// WithRelease tells the query-builder to eager-load the nodes that are connected to
// the "release" edge. The optional arguments are used to configure the query builder of the edge.
func (lsq *LicenseScanQuery) WithRelease(opts ...func(*ReleaseQuery)) *LicenseScanQuery {
	query := &ReleaseQuery{config: lsq.config}
	for _, opt := range opts {
		opt(query)
	}
	lsq.withRelease = query
	return lsq
}

// WithEntry tells the query-builder to eager-load the nodes that are connected to
// the "entry" edge. The optional arguments are used to configure the query builder of the edge.
func (lsq *LicenseScanQuery) WithEntry(opts ...func(*ReleaseEntryQuery)) *LicenseScanQuery {
	query := &ReleaseEntryQuery{config: lsq.config}
	for _, opt := range opts {
		opt(query)
	}
	lsq.withEntry = query
	return lsq
}

// WithLicenses tells the query-builder to eager-load the nodes that are connected to
// the "licenses" edge. The optional arguments are used to configure the query builder of the edge.
func (lsq *LicenseScanQuery) WithLicenses(opts ...func(*LicenseUsageQuery)) *LicenseScanQuery {
	query := &LicenseUsageQuery{config: lsq.config}
	for _, opt := range opts {
		opt(query)
	}
	lsq.withLicenses = query
	return lsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Tool string `json:"tool,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LicenseScan.Query().
//		GroupBy(licensescan.FieldTool).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (lsq *LicenseScanQuery) GroupBy(field string, fields ...string) *LicenseScanGroupBy {
	group := &LicenseScanGroupBy{config: lsq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := lsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return lsq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Tool string `json:"tool,omitempty"`
//	}
//
//	client.LicenseScan.Query().
//		Select(licensescan.FieldTool).
//		Scan(ctx, &v)
//
func (lsq *LicenseScanQuery) Select(field string, fields ...string) *LicenseScanSelect {
	lsq.fields = append([]string{field}, fields...)
	return &LicenseScanSelect{LicenseScanQuery: lsq}
}

func (lsq *LicenseScanQuery) prepareQuery(ctx context.Context) error {
	for _, f := range lsq.fields {
		if !licensescan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lsq.path != nil {
		prev, err := lsq.path(ctx)
		if err != nil {
			return err
		}
		lsq.sql = prev
	}
	return nil
}

func (lsq *LicenseScanQuery) sqlAll(ctx context.Context) ([]*LicenseScan, error) {
	var (
		nodes       = []*LicenseScan{}
		withFKs     = lsq.withFKs
		_spec       = lsq.querySpec()
		loadedTypes = [3]bool{
			lsq.withRelease != nil,
			lsq.withEntry != nil,
			lsq.withLicenses != nil,
		}
	)
	if lsq.withRelease != nil || lsq.withEntry != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, licensescan.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &LicenseScan{config: lsq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, lsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := lsq.withRelease; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*LicenseScan)
		for i := range nodes {
			if nodes[i].license_scan_release == nil {
				continue
			}
			fk := *nodes[i].license_scan_release
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(release.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "license_scan_release" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Release = n
			}
		}
	}

	if query := lsq.withEntry; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*LicenseScan)
		for i := range nodes {
			if nodes[i].release_entry_license_scan == nil {
				continue
			}
			fk := *nodes[i].release_entry_license_scan
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(releaseentry.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "release_entry_license_scan" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Entry = n
			}
		}
	}

	if query := lsq.withLicenses; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*LicenseScan)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Licenses = []*LicenseUsage{}
		}
		query.withFKs = true
		query.Where(predicate.LicenseUsage(func(s *sql.Selector) {
			s.Where(sql.InValues(licensescan.LicensesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.license_usage_scan
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "license_usage_scan" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "license_usage_scan" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Licenses = append(node.Edges.Licenses, n)
		}
	}

	return nodes, nil
}

func (lsq *LicenseScanQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lsq.querySpec()
	return sqlgraph.CountNodes(ctx, lsq.driver, _spec)
}

func (lsq *LicenseScanQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := lsq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (lsq *LicenseScanQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   licensescan.Table,
			Columns: licensescan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: licensescan.FieldID,
			},
		},
		From:   lsq.sql,
		Unique: true,
	}
	if unique := lsq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := lsq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, licensescan.FieldID)
		for i := range fields {
			if fields[i] != licensescan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := lsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lsq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lsq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lsq *LicenseScanQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lsq.driver.Dialect())
	t1 := builder.Table(licensescan.Table)
	columns := lsq.fields
	if len(columns) == 0 {
		columns = licensescan.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lsq.sql != nil {
		selector = lsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range lsq.predicates {
		p(selector)
	}
	for _, p := range lsq.order {
		p(selector)
	}
	if offset := lsq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lsq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LicenseScanGroupBy is the group-by builder for LicenseScan entities.
type LicenseScanGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lsgb *LicenseScanGroupBy) Aggregate(fns ...AggregateFunc) *LicenseScanGroupBy {
	lsgb.fns = append(lsgb.fns, fns...)
	return lsgb
}

// Scan applies the group-by query and scans the result into the given value.
func (lsgb *LicenseScanGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := lsgb.path(ctx)
	if err != nil {
		return err
	}
	lsgb.sql = query
	return lsgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (lsgb *LicenseScanGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := lsgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (lsgb *LicenseScanGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(lsgb.fields) > 1 {
		return nil, errors.New("ent: LicenseScanGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := lsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (lsgb *LicenseScanGroupBy) StringsX(ctx context.Context) []string {
	v, err := lsgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (lsgb *LicenseScanGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = lsgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{licensescan.Label}
	default:
		err = fmt.Errorf("ent: LicenseScanGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (lsgb *LicenseScanGroupBy) StringX(ctx context.Context) string {
	v, err := lsgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (lsgb *LicenseScanGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(lsgb.fields) > 1 {
		return nil, errors.New("ent: LicenseScanGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := lsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (lsgb *LicenseScanGroupBy) IntsX(ctx context.Context) []int {
	v, err := lsgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (lsgb *LicenseScanGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = lsgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{licensescan.Label}
	default:
		err = fmt.Errorf("ent: LicenseScanGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (lsgb *LicenseScanGroupBy) IntX(ctx context.Context) int {
	v, err := lsgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (lsgb *LicenseScanGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(lsgb.fields) > 1 {
		return nil, errors.New("ent: LicenseScanGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := lsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (lsgb *LicenseScanGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := lsgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (lsgb *LicenseScanGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = lsgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{licensescan.Label}
	default:
		err = fmt.Errorf("ent: LicenseScanGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (lsgb *LicenseScanGroupBy) Float64X(ctx context.Context) float64 {
	v, err := lsgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (lsgb *LicenseScanGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(lsgb.fields) > 1 {
		return nil, errors.New("ent: LicenseScanGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := lsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (lsgb *LicenseScanGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := lsgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (lsgb *LicenseScanGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = lsgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{licensescan.Label}
	default:
		err = fmt.Errorf("ent: LicenseScanGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (lsgb *LicenseScanGroupBy) BoolX(ctx context.Context) bool {
	v, err := lsgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (lsgb *LicenseScanGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range lsgb.fields {
		if !licensescan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := lsgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lsgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (lsgb *LicenseScanGroupBy) sqlQuery() *sql.Selector {
	selector := lsgb.sql.Select()
	aggregation := make([]string, 0, len(lsgb.fns))
	for _, fn := range lsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(lsgb.fields)+len(lsgb.fns))
		for _, f := range lsgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(lsgb.fields...)...)
}

// LicenseScanSelect is the builder for selecting fields of LicenseScan entities.
type LicenseScanSelect struct {
	*LicenseScanQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (lss *LicenseScanSelect) Scan(ctx context.Context, v interface{}) error {
	if err := lss.prepareQuery(ctx); err != nil {
		return err
	}
	lss.sql = lss.LicenseScanQuery.sqlQuery(ctx)
	return lss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (lss *LicenseScanSelect) ScanX(ctx context.Context, v interface{}) {
	if err := lss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (lss *LicenseScanSelect) Strings(ctx context.Context) ([]string, error) {
	if len(lss.fields) > 1 {
		return nil, errors.New("ent: LicenseScanSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := lss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (lss *LicenseScanSelect) StringsX(ctx context.Context) []string {
	v, err := lss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (lss *LicenseScanSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = lss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{licensescan.Label}
	default:
		err = fmt.Errorf("ent: LicenseScanSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (lss *LicenseScanSelect) StringX(ctx context.Context) string {
	v, err := lss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (lss *LicenseScanSelect) Ints(ctx context.Context) ([]int, error) {
	if len(lss.fields) > 1 {
		return nil, errors.New("ent: LicenseScanSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := lss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (lss *LicenseScanSelect) IntsX(ctx context.Context) []int {
	v, err := lss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (lss *LicenseScanSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = lss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{licensescan.Label}
	default:
		err = fmt.Errorf("ent: LicenseScanSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (lss *LicenseScanSelect) IntX(ctx context.Context) int {
	v, err := lss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (lss *LicenseScanSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(lss.fields) > 1 {
		return nil, errors.New("ent: LicenseScanSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := lss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (lss *LicenseScanSelect) Float64sX(ctx context.Context) []float64 {
	v, err := lss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (lss *LicenseScanSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = lss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{licensescan.Label}
	default:
		err = fmt.Errorf("ent: LicenseScanSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (lss *LicenseScanSelect) Float64X(ctx context.Context) float64 {
	v, err := lss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (lss *LicenseScanSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(lss.fields) > 1 {
		return nil, errors.New("ent: LicenseScanSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := lss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (lss *LicenseScanSelect) BoolsX(ctx context.Context) []bool {
	v, err := lss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (lss *LicenseScanSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = lss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{licensescan.Label}
	default:
		err = fmt.Errorf("ent: LicenseScanSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (lss *LicenseScanSelect) BoolX(ctx context.Context) bool {
	v, err := lss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (lss *LicenseScanSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := lss.sql.Query()
	if err := lss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
