// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/valocode/bubbly/ent/artifact"
	"github.com/valocode/bubbly/ent/codeissue"
	"github.com/valocode/bubbly/ent/event"
	"github.com/valocode/bubbly/ent/releaseentry"
	"github.com/valocode/bubbly/ent/releasepolicyviolation"
	"github.com/valocode/bubbly/ent/vulnerability"
	"github.com/valocode/bubbly/ent/vulnerabilityreview"

	schema "github.com/valocode/bubbly/ent/schema/types"
)

type AdapterModelCreate struct {
	Name   *string `json:"name,omitempty" validate:"required" mapstructure:"name"`
	Tag    *string `json:"tag,omitempty" validate:"required" mapstructure:"tag"`
	Module *string `json:"module,omitempty" validate:"required" mapstructure:"module"`
}

func NewAdapterModelCreate() *AdapterModelCreate {
	return &AdapterModelCreate{}
}

func (a *AdapterModelCreate) FromEnt(value *Adapter) *AdapterModelCreate {
	a.Name = &value.Name
	a.Tag = &value.Tag
	a.Module = &value.Module
	return a
}
func (a *AdapterModelCreate) SetName(value string) *AdapterModelCreate {
	a.Name = &value
	return a
}
func (a *AdapterModelCreate) SetTag(value string) *AdapterModelCreate {
	a.Tag = &value
	return a
}
func (a *AdapterModelCreate) SetModule(value string) *AdapterModelCreate {
	a.Module = &value
	return a
}

func (a *AdapterCreate) SetModelCreate(model *AdapterModelCreate) *AdapterCreate {
	a.mutation.SetModelCreate(model)
	return a
}

func (a *AdapterUpdateOne) SetModelCreate(model *AdapterModelCreate) *AdapterUpdateOne {
	a.mutation.SetModelCreate(model)
	return a
}

func (a *AdapterMutation) SetModelCreate(model *AdapterModelCreate) *AdapterMutation {
	if model.Name != nil {
		a.SetName(*model.Name)
	}
	if model.Tag != nil {
		a.SetTag(*model.Tag)
	}
	if model.Module != nil {
		a.SetModule(*model.Module)
	}
	return a
}

type AdapterModelRead struct {
	Name   *string `json:"name,omitempty" validate:"required" mapstructure:"name"`
	Tag    *string `json:"tag,omitempty" validate:"required" mapstructure:"tag"`
	Module *string `json:"module,omitempty" validate:"required" mapstructure:"module"`
	ID     *int    `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewAdapterModelRead() *AdapterModelRead {
	return &AdapterModelRead{}
}

func (a *AdapterModelRead) FromEnt(value *Adapter) *AdapterModelRead {
	a.Name = &value.Name
	a.Tag = &value.Tag
	a.Module = &value.Module
	a.ID = &value.ID
	return a
}

type AdapterModelUpdate struct {
	Name   *string `json:"name,omitempty"  mapstructure:"name"`
	Tag    *string `json:"tag,omitempty"  mapstructure:"tag"`
	Module *string `json:"module,omitempty"  mapstructure:"module"`
}

func NewAdapterModelUpdate() *AdapterModelUpdate {
	return &AdapterModelUpdate{}
}
func (a *AdapterModelUpdate) SetName(value string) *AdapterModelUpdate {
	a.Name = &value
	return a
}
func (a *AdapterModelUpdate) SetTag(value string) *AdapterModelUpdate {
	a.Tag = &value
	return a
}
func (a *AdapterModelUpdate) SetModule(value string) *AdapterModelUpdate {
	a.Module = &value
	return a
}

func (a *AdapterUpdateOne) SetModelUpdate(model *AdapterModelUpdate) *AdapterUpdateOne {
	a.mutation.SetModelUpdate(model)
	return a
}

func (a *AdapterMutation) SetModelUpdate(model *AdapterModelUpdate) *AdapterMutation {
	if model.Name != nil {
		a.SetName(*model.Name)
	}
	if model.Tag != nil {
		a.SetTag(*model.Tag)
	}
	if model.Module != nil {
		a.SetModule(*model.Module)
	}
	return a
}

type ArtifactModelCreate struct {
	Name     *string          `json:"name,omitempty" validate:"required" mapstructure:"name"`
	Sha256   *string          `json:"sha256,omitempty" validate:"required" mapstructure:"sha256"`
	Type     *artifact.Type   `json:"type,omitempty" validate:"required" mapstructure:"type"`
	Time     *time.Time       `json:"time,omitempty"  mapstructure:"time"`
	Metadata *schema.Metadata `json:"metadata,omitempty"  mapstructure:"metadata"`
}

func NewArtifactModelCreate() *ArtifactModelCreate {
	return &ArtifactModelCreate{}
}

func (a *ArtifactModelCreate) FromEnt(value *Artifact) *ArtifactModelCreate {
	a.Name = &value.Name
	a.Sha256 = &value.Sha256
	a.Type = &value.Type
	a.Time = &value.Time
	a.Metadata = &value.Metadata
	return a
}
func (a *ArtifactModelCreate) SetName(value string) *ArtifactModelCreate {
	a.Name = &value
	return a
}
func (a *ArtifactModelCreate) SetSha256(value string) *ArtifactModelCreate {
	a.Sha256 = &value
	return a
}
func (a *ArtifactModelCreate) SetType(value artifact.Type) *ArtifactModelCreate {
	a.Type = &value
	return a
}
func (a *ArtifactModelCreate) SetTime(value time.Time) *ArtifactModelCreate {
	a.Time = &value
	return a
}
func (a *ArtifactModelCreate) SetMetadata(value schema.Metadata) *ArtifactModelCreate {
	a.Metadata = &value
	return a
}

func (a *ArtifactCreate) SetModelCreate(model *ArtifactModelCreate) *ArtifactCreate {
	a.mutation.SetModelCreate(model)
	return a
}

func (a *ArtifactUpdateOne) SetModelCreate(model *ArtifactModelCreate) *ArtifactUpdateOne {
	a.mutation.SetModelCreate(model)
	return a
}

func (a *ArtifactMutation) SetModelCreate(model *ArtifactModelCreate) *ArtifactMutation {
	if model.Name != nil {
		a.SetName(*model.Name)
	}
	if model.Sha256 != nil {
		a.SetSha256(*model.Sha256)
	}
	if model.Type != nil {
		a.SetType(*model.Type)
	}
	if model.Time != nil {
		a.SetTime(*model.Time)
	}
	if model.Metadata != nil {
		a.SetMetadata(*model.Metadata)
	}
	return a
}

type ArtifactModelRead struct {
	Name     *string          `json:"name,omitempty" validate:"required" mapstructure:"name"`
	Sha256   *string          `json:"sha256,omitempty" validate:"required" mapstructure:"sha256"`
	Type     *artifact.Type   `json:"type,omitempty" validate:"required" mapstructure:"type"`
	Time     *time.Time       `json:"time,omitempty"  mapstructure:"time"`
	Metadata *schema.Metadata `json:"metadata,omitempty"  mapstructure:"metadata"`
	ID       *int             `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewArtifactModelRead() *ArtifactModelRead {
	return &ArtifactModelRead{}
}

func (a *ArtifactModelRead) FromEnt(value *Artifact) *ArtifactModelRead {
	a.Name = &value.Name
	a.Sha256 = &value.Sha256
	a.Type = &value.Type
	a.Time = &value.Time
	a.Metadata = &value.Metadata
	a.ID = &value.ID
	return a
}

type ArtifactModelUpdate struct {
	Name     *string          `json:"name,omitempty"  mapstructure:"name"`
	Sha256   *string          `json:"sha256,omitempty"  mapstructure:"sha256"`
	Type     *artifact.Type   `json:"type,omitempty"  mapstructure:"type"`
	Time     *time.Time       `json:"time,omitempty"  mapstructure:"time"`
	Metadata *schema.Metadata `json:"metadata,omitempty"  mapstructure:"metadata"`
}

func NewArtifactModelUpdate() *ArtifactModelUpdate {
	return &ArtifactModelUpdate{}
}
func (a *ArtifactModelUpdate) SetName(value string) *ArtifactModelUpdate {
	a.Name = &value
	return a
}
func (a *ArtifactModelUpdate) SetSha256(value string) *ArtifactModelUpdate {
	a.Sha256 = &value
	return a
}
func (a *ArtifactModelUpdate) SetType(value artifact.Type) *ArtifactModelUpdate {
	a.Type = &value
	return a
}
func (a *ArtifactModelUpdate) SetTime(value time.Time) *ArtifactModelUpdate {
	a.Time = &value
	return a
}
func (a *ArtifactModelUpdate) SetMetadata(value schema.Metadata) *ArtifactModelUpdate {
	a.Metadata = &value
	return a
}

func (a *ArtifactUpdateOne) SetModelUpdate(model *ArtifactModelUpdate) *ArtifactUpdateOne {
	a.mutation.SetModelUpdate(model)
	return a
}

func (a *ArtifactMutation) SetModelUpdate(model *ArtifactModelUpdate) *ArtifactMutation {
	if model.Name != nil {
		a.SetName(*model.Name)
	}
	if model.Sha256 != nil {
		a.SetSha256(*model.Sha256)
	}
	if model.Type != nil {
		a.SetType(*model.Type)
	}
	if model.Time != nil {
		a.SetTime(*model.Time)
	}
	if model.Metadata != nil {
		a.SetMetadata(*model.Metadata)
	}
	return a
}

type CodeIssueModelCreate struct {
	RuleID   *string             `json:"rule_id,omitempty" validate:"required" mapstructure:"rule_id"`
	Message  *string             `json:"message,omitempty" validate:"required" mapstructure:"message"`
	Severity *codeissue.Severity `json:"severity,omitempty" validate:"required" mapstructure:"severity"`
	Type     *codeissue.Type     `json:"type,omitempty" validate:"required" mapstructure:"type"`
	Metadata *schema.Metadata    `json:"metadata,omitempty"  mapstructure:"metadata"`
}

func NewCodeIssueModelCreate() *CodeIssueModelCreate {
	return &CodeIssueModelCreate{}
}

func (ci *CodeIssueModelCreate) FromEnt(value *CodeIssue) *CodeIssueModelCreate {
	ci.RuleID = &value.RuleID
	ci.Message = &value.Message
	ci.Severity = &value.Severity
	ci.Type = &value.Type
	ci.Metadata = &value.Metadata
	return ci
}
func (ci *CodeIssueModelCreate) SetRuleID(value string) *CodeIssueModelCreate {
	ci.RuleID = &value
	return ci
}
func (ci *CodeIssueModelCreate) SetMessage(value string) *CodeIssueModelCreate {
	ci.Message = &value
	return ci
}
func (ci *CodeIssueModelCreate) SetSeverity(value codeissue.Severity) *CodeIssueModelCreate {
	ci.Severity = &value
	return ci
}
func (ci *CodeIssueModelCreate) SetType(value codeissue.Type) *CodeIssueModelCreate {
	ci.Type = &value
	return ci
}
func (ci *CodeIssueModelCreate) SetMetadata(value schema.Metadata) *CodeIssueModelCreate {
	ci.Metadata = &value
	return ci
}

func (ci *CodeIssueCreate) SetModelCreate(model *CodeIssueModelCreate) *CodeIssueCreate {
	ci.mutation.SetModelCreate(model)
	return ci
}

func (ci *CodeIssueUpdateOne) SetModelCreate(model *CodeIssueModelCreate) *CodeIssueUpdateOne {
	ci.mutation.SetModelCreate(model)
	return ci
}

func (ci *CodeIssueMutation) SetModelCreate(model *CodeIssueModelCreate) *CodeIssueMutation {
	if model.RuleID != nil {
		ci.SetRuleID(*model.RuleID)
	}
	if model.Message != nil {
		ci.SetMessage(*model.Message)
	}
	if model.Severity != nil {
		ci.SetSeverity(*model.Severity)
	}
	if model.Type != nil {
		ci.SetType(*model.Type)
	}
	if model.Metadata != nil {
		ci.SetMetadata(*model.Metadata)
	}
	return ci
}

type CodeIssueModelRead struct {
	RuleID   *string             `json:"rule_id,omitempty" validate:"required" mapstructure:"rule_id"`
	Message  *string             `json:"message,omitempty" validate:"required" mapstructure:"message"`
	Severity *codeissue.Severity `json:"severity,omitempty" validate:"required" mapstructure:"severity"`
	Type     *codeissue.Type     `json:"type,omitempty" validate:"required" mapstructure:"type"`
	Metadata *schema.Metadata    `json:"metadata,omitempty"  mapstructure:"metadata"`
	ID       *int                `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewCodeIssueModelRead() *CodeIssueModelRead {
	return &CodeIssueModelRead{}
}

func (ci *CodeIssueModelRead) FromEnt(value *CodeIssue) *CodeIssueModelRead {
	ci.RuleID = &value.RuleID
	ci.Message = &value.Message
	ci.Severity = &value.Severity
	ci.Type = &value.Type
	ci.Metadata = &value.Metadata
	ci.ID = &value.ID
	return ci
}

type CodeIssueModelUpdate struct {
	RuleID   *string             `json:"rule_id,omitempty"  mapstructure:"rule_id"`
	Message  *string             `json:"message,omitempty"  mapstructure:"message"`
	Severity *codeissue.Severity `json:"severity,omitempty"  mapstructure:"severity"`
	Type     *codeissue.Type     `json:"type,omitempty"  mapstructure:"type"`
	Metadata *schema.Metadata    `json:"metadata,omitempty"  mapstructure:"metadata"`
}

func NewCodeIssueModelUpdate() *CodeIssueModelUpdate {
	return &CodeIssueModelUpdate{}
}
func (ci *CodeIssueModelUpdate) SetRuleID(value string) *CodeIssueModelUpdate {
	ci.RuleID = &value
	return ci
}
func (ci *CodeIssueModelUpdate) SetMessage(value string) *CodeIssueModelUpdate {
	ci.Message = &value
	return ci
}
func (ci *CodeIssueModelUpdate) SetSeverity(value codeissue.Severity) *CodeIssueModelUpdate {
	ci.Severity = &value
	return ci
}
func (ci *CodeIssueModelUpdate) SetType(value codeissue.Type) *CodeIssueModelUpdate {
	ci.Type = &value
	return ci
}
func (ci *CodeIssueModelUpdate) SetMetadata(value schema.Metadata) *CodeIssueModelUpdate {
	ci.Metadata = &value
	return ci
}

func (ci *CodeIssueUpdateOne) SetModelUpdate(model *CodeIssueModelUpdate) *CodeIssueUpdateOne {
	ci.mutation.SetModelUpdate(model)
	return ci
}

func (ci *CodeIssueMutation) SetModelUpdate(model *CodeIssueModelUpdate) *CodeIssueMutation {
	if model.RuleID != nil {
		ci.SetRuleID(*model.RuleID)
	}
	if model.Message != nil {
		ci.SetMessage(*model.Message)
	}
	if model.Severity != nil {
		ci.SetSeverity(*model.Severity)
	}
	if model.Type != nil {
		ci.SetType(*model.Type)
	}
	if model.Metadata != nil {
		ci.SetMetadata(*model.Metadata)
	}
	return ci
}

type CodeScanModelCreate struct {
	Tool     *string          `json:"tool,omitempty" validate:"required" mapstructure:"tool"`
	Time     *time.Time       `json:"time,omitempty"  mapstructure:"time"`
	Metadata *schema.Metadata `json:"metadata,omitempty"  mapstructure:"metadata"`
}

func NewCodeScanModelCreate() *CodeScanModelCreate {
	return &CodeScanModelCreate{}
}

func (cs *CodeScanModelCreate) FromEnt(value *CodeScan) *CodeScanModelCreate {
	cs.Tool = &value.Tool
	cs.Time = &value.Time
	cs.Metadata = &value.Metadata
	return cs
}
func (cs *CodeScanModelCreate) SetTool(value string) *CodeScanModelCreate {
	cs.Tool = &value
	return cs
}
func (cs *CodeScanModelCreate) SetTime(value time.Time) *CodeScanModelCreate {
	cs.Time = &value
	return cs
}
func (cs *CodeScanModelCreate) SetMetadata(value schema.Metadata) *CodeScanModelCreate {
	cs.Metadata = &value
	return cs
}

func (cs *CodeScanCreate) SetModelCreate(model *CodeScanModelCreate) *CodeScanCreate {
	cs.mutation.SetModelCreate(model)
	return cs
}

func (cs *CodeScanUpdateOne) SetModelCreate(model *CodeScanModelCreate) *CodeScanUpdateOne {
	cs.mutation.SetModelCreate(model)
	return cs
}

func (cs *CodeScanMutation) SetModelCreate(model *CodeScanModelCreate) *CodeScanMutation {
	if model.Tool != nil {
		cs.SetTool(*model.Tool)
	}
	if model.Time != nil {
		cs.SetTime(*model.Time)
	}
	if model.Metadata != nil {
		cs.SetMetadata(*model.Metadata)
	}
	return cs
}

type CodeScanModelRead struct {
	Tool     *string          `json:"tool,omitempty" validate:"required" mapstructure:"tool"`
	Time     *time.Time       `json:"time,omitempty"  mapstructure:"time"`
	Metadata *schema.Metadata `json:"metadata,omitempty"  mapstructure:"metadata"`
	ID       *int             `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewCodeScanModelRead() *CodeScanModelRead {
	return &CodeScanModelRead{}
}

func (cs *CodeScanModelRead) FromEnt(value *CodeScan) *CodeScanModelRead {
	cs.Tool = &value.Tool
	cs.Time = &value.Time
	cs.Metadata = &value.Metadata
	cs.ID = &value.ID
	return cs
}

type CodeScanModelUpdate struct {
	Tool     *string          `json:"tool,omitempty"  mapstructure:"tool"`
	Time     *time.Time       `json:"time,omitempty"  mapstructure:"time"`
	Metadata *schema.Metadata `json:"metadata,omitempty"  mapstructure:"metadata"`
}

func NewCodeScanModelUpdate() *CodeScanModelUpdate {
	return &CodeScanModelUpdate{}
}
func (cs *CodeScanModelUpdate) SetTool(value string) *CodeScanModelUpdate {
	cs.Tool = &value
	return cs
}
func (cs *CodeScanModelUpdate) SetTime(value time.Time) *CodeScanModelUpdate {
	cs.Time = &value
	return cs
}
func (cs *CodeScanModelUpdate) SetMetadata(value schema.Metadata) *CodeScanModelUpdate {
	cs.Metadata = &value
	return cs
}

func (cs *CodeScanUpdateOne) SetModelUpdate(model *CodeScanModelUpdate) *CodeScanUpdateOne {
	cs.mutation.SetModelUpdate(model)
	return cs
}

func (cs *CodeScanMutation) SetModelUpdate(model *CodeScanModelUpdate) *CodeScanMutation {
	if model.Tool != nil {
		cs.SetTool(*model.Tool)
	}
	if model.Time != nil {
		cs.SetTime(*model.Time)
	}
	if model.Metadata != nil {
		cs.SetMetadata(*model.Metadata)
	}
	return cs
}

type ComponentModelCreate struct {
	Scheme      *string          `json:"scheme,omitempty" validate:"required" mapstructure:"scheme"`
	Namespace   *string          `json:"namespace,omitempty"  mapstructure:"namespace"`
	Name        *string          `json:"name,omitempty" validate:"required" mapstructure:"name"`
	Version     *string          `json:"version,omitempty" validate:"required" mapstructure:"version"`
	Description *string          `json:"description,omitempty"  mapstructure:"description"`
	URL         *string          `json:"url,omitempty"  mapstructure:"url"`
	Metadata    *schema.Metadata `json:"metadata,omitempty"  mapstructure:"metadata"`
	Labels      *schema.Labels   `json:"labels,omitempty"  mapstructure:"labels"`
}

func NewComponentModelCreate() *ComponentModelCreate {
	return &ComponentModelCreate{}
}

func (c *ComponentModelCreate) FromEnt(value *Component) *ComponentModelCreate {
	c.Scheme = &value.Scheme
	c.Namespace = &value.Namespace
	c.Name = &value.Name
	c.Version = &value.Version
	c.Description = &value.Description
	c.URL = &value.URL
	c.Metadata = &value.Metadata
	c.Labels = &value.Labels
	return c
}
func (c *ComponentModelCreate) SetScheme(value string) *ComponentModelCreate {
	c.Scheme = &value
	return c
}
func (c *ComponentModelCreate) SetNamespace(value string) *ComponentModelCreate {
	c.Namespace = &value
	return c
}
func (c *ComponentModelCreate) SetName(value string) *ComponentModelCreate {
	c.Name = &value
	return c
}
func (c *ComponentModelCreate) SetVersion(value string) *ComponentModelCreate {
	c.Version = &value
	return c
}
func (c *ComponentModelCreate) SetDescription(value string) *ComponentModelCreate {
	c.Description = &value
	return c
}
func (c *ComponentModelCreate) SetURL(value string) *ComponentModelCreate {
	c.URL = &value
	return c
}
func (c *ComponentModelCreate) SetMetadata(value schema.Metadata) *ComponentModelCreate {
	c.Metadata = &value
	return c
}
func (c *ComponentModelCreate) SetLabels(value schema.Labels) *ComponentModelCreate {
	c.Labels = &value
	return c
}

func (c *ComponentCreate) SetModelCreate(model *ComponentModelCreate) *ComponentCreate {
	c.mutation.SetModelCreate(model)
	return c
}

func (c *ComponentUpdateOne) SetModelCreate(model *ComponentModelCreate) *ComponentUpdateOne {
	c.mutation.SetModelCreate(model)
	return c
}

func (c *ComponentMutation) SetModelCreate(model *ComponentModelCreate) *ComponentMutation {
	if model.Scheme != nil {
		c.SetScheme(*model.Scheme)
	}
	if model.Namespace != nil {
		c.SetNamespace(*model.Namespace)
	}
	if model.Name != nil {
		c.SetName(*model.Name)
	}
	if model.Version != nil {
		c.SetVersion(*model.Version)
	}
	if model.Description != nil {
		c.SetDescription(*model.Description)
	}
	if model.URL != nil {
		c.SetURL(*model.URL)
	}
	if model.Metadata != nil {
		c.SetMetadata(*model.Metadata)
	}
	if model.Labels != nil {
		c.SetLabels(*model.Labels)
	}
	return c
}

type ComponentModelRead struct {
	Scheme      *string          `json:"scheme,omitempty" validate:"required" mapstructure:"scheme"`
	Namespace   *string          `json:"namespace,omitempty"  mapstructure:"namespace"`
	Name        *string          `json:"name,omitempty" validate:"required" mapstructure:"name"`
	Version     *string          `json:"version,omitempty" validate:"required" mapstructure:"version"`
	Description *string          `json:"description,omitempty"  mapstructure:"description"`
	URL         *string          `json:"url,omitempty"  mapstructure:"url"`
	Metadata    *schema.Metadata `json:"metadata,omitempty"  mapstructure:"metadata"`
	Labels      *schema.Labels   `json:"labels,omitempty"  mapstructure:"labels"`
	ID          *int             `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewComponentModelRead() *ComponentModelRead {
	return &ComponentModelRead{}
}

func (c *ComponentModelRead) FromEnt(value *Component) *ComponentModelRead {
	c.Scheme = &value.Scheme
	c.Namespace = &value.Namespace
	c.Name = &value.Name
	c.Version = &value.Version
	c.Description = &value.Description
	c.URL = &value.URL
	c.Metadata = &value.Metadata
	c.Labels = &value.Labels
	c.ID = &value.ID
	return c
}

type ComponentModelUpdate struct {
	Scheme      *string          `json:"scheme,omitempty"  mapstructure:"scheme"`
	Namespace   *string          `json:"namespace,omitempty"  mapstructure:"namespace"`
	Name        *string          `json:"name,omitempty"  mapstructure:"name"`
	Version     *string          `json:"version,omitempty"  mapstructure:"version"`
	Description *string          `json:"description,omitempty"  mapstructure:"description"`
	URL         *string          `json:"url,omitempty"  mapstructure:"url"`
	Metadata    *schema.Metadata `json:"metadata,omitempty"  mapstructure:"metadata"`
	Labels      *schema.Labels   `json:"labels,omitempty"  mapstructure:"labels"`
}

func NewComponentModelUpdate() *ComponentModelUpdate {
	return &ComponentModelUpdate{}
}
func (c *ComponentModelUpdate) SetScheme(value string) *ComponentModelUpdate {
	c.Scheme = &value
	return c
}
func (c *ComponentModelUpdate) SetNamespace(value string) *ComponentModelUpdate {
	c.Namespace = &value
	return c
}
func (c *ComponentModelUpdate) SetName(value string) *ComponentModelUpdate {
	c.Name = &value
	return c
}
func (c *ComponentModelUpdate) SetVersion(value string) *ComponentModelUpdate {
	c.Version = &value
	return c
}
func (c *ComponentModelUpdate) SetDescription(value string) *ComponentModelUpdate {
	c.Description = &value
	return c
}
func (c *ComponentModelUpdate) SetURL(value string) *ComponentModelUpdate {
	c.URL = &value
	return c
}
func (c *ComponentModelUpdate) SetMetadata(value schema.Metadata) *ComponentModelUpdate {
	c.Metadata = &value
	return c
}
func (c *ComponentModelUpdate) SetLabels(value schema.Labels) *ComponentModelUpdate {
	c.Labels = &value
	return c
}

func (c *ComponentUpdateOne) SetModelUpdate(model *ComponentModelUpdate) *ComponentUpdateOne {
	c.mutation.SetModelUpdate(model)
	return c
}

func (c *ComponentMutation) SetModelUpdate(model *ComponentModelUpdate) *ComponentMutation {
	if model.Scheme != nil {
		c.SetScheme(*model.Scheme)
	}
	if model.Namespace != nil {
		c.SetNamespace(*model.Namespace)
	}
	if model.Name != nil {
		c.SetName(*model.Name)
	}
	if model.Version != nil {
		c.SetVersion(*model.Version)
	}
	if model.Description != nil {
		c.SetDescription(*model.Description)
	}
	if model.URL != nil {
		c.SetURL(*model.URL)
	}
	if model.Metadata != nil {
		c.SetMetadata(*model.Metadata)
	}
	if model.Labels != nil {
		c.SetLabels(*model.Labels)
	}
	return c
}

type EventModelCreate struct {
	Message *string       `json:"message,omitempty"  mapstructure:"message"`
	Status  *event.Status `json:"status,omitempty"  mapstructure:"status"`
	Type    *event.Type   `json:"type,omitempty" validate:"required" mapstructure:"type"`
	Time    *time.Time    `json:"time,omitempty"  mapstructure:"time"`
}

func NewEventModelCreate() *EventModelCreate {
	return &EventModelCreate{}
}

func (e *EventModelCreate) FromEnt(value *Event) *EventModelCreate {
	e.Message = &value.Message
	e.Status = &value.Status
	e.Type = &value.Type
	e.Time = &value.Time
	return e
}
func (e *EventModelCreate) SetMessage(value string) *EventModelCreate {
	e.Message = &value
	return e
}
func (e *EventModelCreate) SetStatus(value event.Status) *EventModelCreate {
	e.Status = &value
	return e
}
func (e *EventModelCreate) SetType(value event.Type) *EventModelCreate {
	e.Type = &value
	return e
}
func (e *EventModelCreate) SetTime(value time.Time) *EventModelCreate {
	e.Time = &value
	return e
}

func (e *EventCreate) SetModelCreate(model *EventModelCreate) *EventCreate {
	e.mutation.SetModelCreate(model)
	return e
}

func (e *EventUpdateOne) SetModelCreate(model *EventModelCreate) *EventUpdateOne {
	e.mutation.SetModelCreate(model)
	return e
}

func (e *EventMutation) SetModelCreate(model *EventModelCreate) *EventMutation {
	if model.Message != nil {
		e.SetMessage(*model.Message)
	}
	if model.Status != nil {
		e.SetStatus(*model.Status)
	}
	if model.Type != nil {
		e.SetType(*model.Type)
	}
	if model.Time != nil {
		e.SetTime(*model.Time)
	}
	return e
}

type EventModelRead struct {
	Message *string       `json:"message,omitempty"  mapstructure:"message"`
	Status  *event.Status `json:"status,omitempty"  mapstructure:"status"`
	Type    *event.Type   `json:"type,omitempty" validate:"required" mapstructure:"type"`
	Time    *time.Time    `json:"time,omitempty"  mapstructure:"time"`
	ID      *int          `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewEventModelRead() *EventModelRead {
	return &EventModelRead{}
}

func (e *EventModelRead) FromEnt(value *Event) *EventModelRead {
	e.Message = &value.Message
	e.Status = &value.Status
	e.Type = &value.Type
	e.Time = &value.Time
	e.ID = &value.ID
	return e
}

type EventModelUpdate struct {
	Message *string       `json:"message,omitempty"  mapstructure:"message"`
	Status  *event.Status `json:"status,omitempty"  mapstructure:"status"`
	Type    *event.Type   `json:"type,omitempty"  mapstructure:"type"`
	Time    *time.Time    `json:"time,omitempty"  mapstructure:"time"`
}

func NewEventModelUpdate() *EventModelUpdate {
	return &EventModelUpdate{}
}
func (e *EventModelUpdate) SetMessage(value string) *EventModelUpdate {
	e.Message = &value
	return e
}
func (e *EventModelUpdate) SetStatus(value event.Status) *EventModelUpdate {
	e.Status = &value
	return e
}
func (e *EventModelUpdate) SetType(value event.Type) *EventModelUpdate {
	e.Type = &value
	return e
}
func (e *EventModelUpdate) SetTime(value time.Time) *EventModelUpdate {
	e.Time = &value
	return e
}

func (e *EventUpdateOne) SetModelUpdate(model *EventModelUpdate) *EventUpdateOne {
	e.mutation.SetModelUpdate(model)
	return e
}

func (e *EventMutation) SetModelUpdate(model *EventModelUpdate) *EventMutation {
	if model.Message != nil {
		e.SetMessage(*model.Message)
	}
	if model.Status != nil {
		e.SetStatus(*model.Status)
	}
	if model.Type != nil {
		e.SetType(*model.Type)
	}
	if model.Time != nil {
		e.SetTime(*model.Time)
	}
	return e
}

type GitCommitModelCreate struct {
	Hash   *string    `json:"hash,omitempty" validate:"required" mapstructure:"hash"`
	Branch *string    `json:"branch,omitempty" validate:"required" mapstructure:"branch"`
	Tag    *string    `json:"tag,omitempty"  mapstructure:"tag"`
	Time   *time.Time `json:"time,omitempty" validate:"required" mapstructure:"time"`
}

func NewGitCommitModelCreate() *GitCommitModelCreate {
	return &GitCommitModelCreate{}
}

func (gc *GitCommitModelCreate) FromEnt(value *GitCommit) *GitCommitModelCreate {
	gc.Hash = &value.Hash
	gc.Branch = &value.Branch
	gc.Tag = &value.Tag
	gc.Time = &value.Time
	return gc
}
func (gc *GitCommitModelCreate) SetHash(value string) *GitCommitModelCreate {
	gc.Hash = &value
	return gc
}
func (gc *GitCommitModelCreate) SetBranch(value string) *GitCommitModelCreate {
	gc.Branch = &value
	return gc
}
func (gc *GitCommitModelCreate) SetTag(value string) *GitCommitModelCreate {
	gc.Tag = &value
	return gc
}
func (gc *GitCommitModelCreate) SetTime(value time.Time) *GitCommitModelCreate {
	gc.Time = &value
	return gc
}

func (gc *GitCommitCreate) SetModelCreate(model *GitCommitModelCreate) *GitCommitCreate {
	gc.mutation.SetModelCreate(model)
	return gc
}

func (gc *GitCommitUpdateOne) SetModelCreate(model *GitCommitModelCreate) *GitCommitUpdateOne {
	gc.mutation.SetModelCreate(model)
	return gc
}

func (gc *GitCommitMutation) SetModelCreate(model *GitCommitModelCreate) *GitCommitMutation {
	if model.Hash != nil {
		gc.SetHash(*model.Hash)
	}
	if model.Branch != nil {
		gc.SetBranch(*model.Branch)
	}
	if model.Tag != nil {
		gc.SetTag(*model.Tag)
	}
	if model.Time != nil {
		gc.SetTime(*model.Time)
	}
	return gc
}

type GitCommitModelRead struct {
	Hash   *string    `json:"hash,omitempty" validate:"required" mapstructure:"hash"`
	Branch *string    `json:"branch,omitempty" validate:"required" mapstructure:"branch"`
	Tag    *string    `json:"tag,omitempty"  mapstructure:"tag"`
	Time   *time.Time `json:"time,omitempty" validate:"required" mapstructure:"time"`
	ID     *int       `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewGitCommitModelRead() *GitCommitModelRead {
	return &GitCommitModelRead{}
}

func (gc *GitCommitModelRead) FromEnt(value *GitCommit) *GitCommitModelRead {
	gc.Hash = &value.Hash
	gc.Branch = &value.Branch
	gc.Tag = &value.Tag
	gc.Time = &value.Time
	gc.ID = &value.ID
	return gc
}

type GitCommitModelUpdate struct {
	Hash   *string    `json:"hash,omitempty"  mapstructure:"hash"`
	Branch *string    `json:"branch,omitempty"  mapstructure:"branch"`
	Tag    *string    `json:"tag,omitempty"  mapstructure:"tag"`
	Time   *time.Time `json:"time,omitempty"  mapstructure:"time"`
}

func NewGitCommitModelUpdate() *GitCommitModelUpdate {
	return &GitCommitModelUpdate{}
}
func (gc *GitCommitModelUpdate) SetHash(value string) *GitCommitModelUpdate {
	gc.Hash = &value
	return gc
}
func (gc *GitCommitModelUpdate) SetBranch(value string) *GitCommitModelUpdate {
	gc.Branch = &value
	return gc
}
func (gc *GitCommitModelUpdate) SetTag(value string) *GitCommitModelUpdate {
	gc.Tag = &value
	return gc
}
func (gc *GitCommitModelUpdate) SetTime(value time.Time) *GitCommitModelUpdate {
	gc.Time = &value
	return gc
}

func (gc *GitCommitUpdateOne) SetModelUpdate(model *GitCommitModelUpdate) *GitCommitUpdateOne {
	gc.mutation.SetModelUpdate(model)
	return gc
}

func (gc *GitCommitMutation) SetModelUpdate(model *GitCommitModelUpdate) *GitCommitMutation {
	if model.Hash != nil {
		gc.SetHash(*model.Hash)
	}
	if model.Branch != nil {
		gc.SetBranch(*model.Branch)
	}
	if model.Tag != nil {
		gc.SetTag(*model.Tag)
	}
	if model.Time != nil {
		gc.SetTime(*model.Time)
	}
	return gc
}

type LicenseModelCreate struct {
	LicenseID *string `json:"license_id,omitempty" validate:"required" mapstructure:"license_id"`
	Name      *string `json:"name,omitempty"  mapstructure:"name"`
}

func NewLicenseModelCreate() *LicenseModelCreate {
	return &LicenseModelCreate{}
}

func (l *LicenseModelCreate) FromEnt(value *License) *LicenseModelCreate {
	l.LicenseID = &value.LicenseID
	l.Name = &value.Name
	return l
}
func (l *LicenseModelCreate) SetLicenseID(value string) *LicenseModelCreate {
	l.LicenseID = &value
	return l
}
func (l *LicenseModelCreate) SetName(value string) *LicenseModelCreate {
	l.Name = &value
	return l
}

func (l *LicenseCreate) SetModelCreate(model *LicenseModelCreate) *LicenseCreate {
	l.mutation.SetModelCreate(model)
	return l
}

func (l *LicenseUpdateOne) SetModelCreate(model *LicenseModelCreate) *LicenseUpdateOne {
	l.mutation.SetModelCreate(model)
	return l
}

func (l *LicenseMutation) SetModelCreate(model *LicenseModelCreate) *LicenseMutation {
	if model.LicenseID != nil {
		l.SetLicenseID(*model.LicenseID)
	}
	if model.Name != nil {
		l.SetName(*model.Name)
	}
	return l
}

type LicenseModelRead struct {
	LicenseID *string `json:"license_id,omitempty" validate:"required" mapstructure:"license_id"`
	Name      *string `json:"name,omitempty"  mapstructure:"name"`
	ID        *int    `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewLicenseModelRead() *LicenseModelRead {
	return &LicenseModelRead{}
}

func (l *LicenseModelRead) FromEnt(value *License) *LicenseModelRead {
	l.LicenseID = &value.LicenseID
	l.Name = &value.Name
	l.ID = &value.ID
	return l
}

type LicenseModelUpdate struct {
	LicenseID *string `json:"license_id,omitempty"  mapstructure:"license_id"`
	Name      *string `json:"name,omitempty"  mapstructure:"name"`
}

func NewLicenseModelUpdate() *LicenseModelUpdate {
	return &LicenseModelUpdate{}
}
func (l *LicenseModelUpdate) SetLicenseID(value string) *LicenseModelUpdate {
	l.LicenseID = &value
	return l
}
func (l *LicenseModelUpdate) SetName(value string) *LicenseModelUpdate {
	l.Name = &value
	return l
}

func (l *LicenseUpdateOne) SetModelUpdate(model *LicenseModelUpdate) *LicenseUpdateOne {
	l.mutation.SetModelUpdate(model)
	return l
}

func (l *LicenseMutation) SetModelUpdate(model *LicenseModelUpdate) *LicenseMutation {
	if model.LicenseID != nil {
		l.SetLicenseID(*model.LicenseID)
	}
	if model.Name != nil {
		l.SetName(*model.Name)
	}
	return l
}

type OrganizationModelCreate struct {
	Name *string `json:"name,omitempty" validate:"required" mapstructure:"name"`
}

func NewOrganizationModelCreate() *OrganizationModelCreate {
	return &OrganizationModelCreate{}
}

func (o *OrganizationModelCreate) FromEnt(value *Organization) *OrganizationModelCreate {
	o.Name = &value.Name
	return o
}
func (o *OrganizationModelCreate) SetName(value string) *OrganizationModelCreate {
	o.Name = &value
	return o
}

func (o *OrganizationCreate) SetModelCreate(model *OrganizationModelCreate) *OrganizationCreate {
	o.mutation.SetModelCreate(model)
	return o
}

func (o *OrganizationUpdateOne) SetModelCreate(model *OrganizationModelCreate) *OrganizationUpdateOne {
	o.mutation.SetModelCreate(model)
	return o
}

func (o *OrganizationMutation) SetModelCreate(model *OrganizationModelCreate) *OrganizationMutation {
	if model.Name != nil {
		o.SetName(*model.Name)
	}
	return o
}

type OrganizationModelRead struct {
	Name *string `json:"name,omitempty" validate:"required" mapstructure:"name"`
	ID   *int    `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewOrganizationModelRead() *OrganizationModelRead {
	return &OrganizationModelRead{}
}

func (o *OrganizationModelRead) FromEnt(value *Organization) *OrganizationModelRead {
	o.Name = &value.Name
	o.ID = &value.ID
	return o
}

type OrganizationModelUpdate struct {
	Name *string `json:"name,omitempty"  mapstructure:"name"`
}

func NewOrganizationModelUpdate() *OrganizationModelUpdate {
	return &OrganizationModelUpdate{}
}
func (o *OrganizationModelUpdate) SetName(value string) *OrganizationModelUpdate {
	o.Name = &value
	return o
}

func (o *OrganizationUpdateOne) SetModelUpdate(model *OrganizationModelUpdate) *OrganizationUpdateOne {
	o.mutation.SetModelUpdate(model)
	return o
}

func (o *OrganizationMutation) SetModelUpdate(model *OrganizationModelUpdate) *OrganizationMutation {
	if model.Name != nil {
		o.SetName(*model.Name)
	}
	return o
}

type ProjectModelCreate struct {
	Name   *string        `json:"name,omitempty" validate:"required" mapstructure:"name"`
	Labels *schema.Labels `json:"labels,omitempty"  mapstructure:"labels"`
}

func NewProjectModelCreate() *ProjectModelCreate {
	return &ProjectModelCreate{}
}

func (pr *ProjectModelCreate) FromEnt(value *Project) *ProjectModelCreate {
	pr.Name = &value.Name
	pr.Labels = &value.Labels
	return pr
}
func (pr *ProjectModelCreate) SetName(value string) *ProjectModelCreate {
	pr.Name = &value
	return pr
}
func (pr *ProjectModelCreate) SetLabels(value schema.Labels) *ProjectModelCreate {
	pr.Labels = &value
	return pr
}

func (pr *ProjectCreate) SetModelCreate(model *ProjectModelCreate) *ProjectCreate {
	pr.mutation.SetModelCreate(model)
	return pr
}

func (pr *ProjectUpdateOne) SetModelCreate(model *ProjectModelCreate) *ProjectUpdateOne {
	pr.mutation.SetModelCreate(model)
	return pr
}

func (pr *ProjectMutation) SetModelCreate(model *ProjectModelCreate) *ProjectMutation {
	if model.Name != nil {
		pr.SetName(*model.Name)
	}
	if model.Labels != nil {
		pr.SetLabels(*model.Labels)
	}
	return pr
}

type ProjectModelRead struct {
	Name   *string        `json:"name,omitempty" validate:"required" mapstructure:"name"`
	Labels *schema.Labels `json:"labels,omitempty"  mapstructure:"labels"`
	ID     *int           `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewProjectModelRead() *ProjectModelRead {
	return &ProjectModelRead{}
}

func (pr *ProjectModelRead) FromEnt(value *Project) *ProjectModelRead {
	pr.Name = &value.Name
	pr.Labels = &value.Labels
	pr.ID = &value.ID
	return pr
}

type ProjectModelUpdate struct {
	Name   *string        `json:"name,omitempty"  mapstructure:"name"`
	Labels *schema.Labels `json:"labels,omitempty"  mapstructure:"labels"`
}

func NewProjectModelUpdate() *ProjectModelUpdate {
	return &ProjectModelUpdate{}
}
func (pr *ProjectModelUpdate) SetName(value string) *ProjectModelUpdate {
	pr.Name = &value
	return pr
}
func (pr *ProjectModelUpdate) SetLabels(value schema.Labels) *ProjectModelUpdate {
	pr.Labels = &value
	return pr
}

func (pr *ProjectUpdateOne) SetModelUpdate(model *ProjectModelUpdate) *ProjectUpdateOne {
	pr.mutation.SetModelUpdate(model)
	return pr
}

func (pr *ProjectMutation) SetModelUpdate(model *ProjectModelUpdate) *ProjectMutation {
	if model.Name != nil {
		pr.SetName(*model.Name)
	}
	if model.Labels != nil {
		pr.SetLabels(*model.Labels)
	}
	return pr
}

type ReleaseModelCreate struct {
	Name    *string        `json:"name,omitempty" validate:"required" mapstructure:"name"`
	Version *string        `json:"version,omitempty" validate:"required" mapstructure:"version"`
	Labels  *schema.Labels `json:"labels,omitempty"  mapstructure:"labels"`
}

func NewReleaseModelCreate() *ReleaseModelCreate {
	return &ReleaseModelCreate{}
}

func (r *ReleaseModelCreate) FromEnt(value *Release) *ReleaseModelCreate {
	r.Name = &value.Name
	r.Version = &value.Version
	r.Labels = &value.Labels
	return r
}
func (r *ReleaseModelCreate) SetName(value string) *ReleaseModelCreate {
	r.Name = &value
	return r
}
func (r *ReleaseModelCreate) SetVersion(value string) *ReleaseModelCreate {
	r.Version = &value
	return r
}
func (r *ReleaseModelCreate) SetLabels(value schema.Labels) *ReleaseModelCreate {
	r.Labels = &value
	return r
}

func (r *ReleaseCreate) SetModelCreate(model *ReleaseModelCreate) *ReleaseCreate {
	r.mutation.SetModelCreate(model)
	return r
}

func (r *ReleaseUpdateOne) SetModelCreate(model *ReleaseModelCreate) *ReleaseUpdateOne {
	r.mutation.SetModelCreate(model)
	return r
}

func (r *ReleaseMutation) SetModelCreate(model *ReleaseModelCreate) *ReleaseMutation {
	if model.Name != nil {
		r.SetName(*model.Name)
	}
	if model.Version != nil {
		r.SetVersion(*model.Version)
	}
	if model.Labels != nil {
		r.SetLabels(*model.Labels)
	}
	return r
}

type ReleaseModelRead struct {
	Name    *string        `json:"name,omitempty" validate:"required" mapstructure:"name"`
	Version *string        `json:"version,omitempty" validate:"required" mapstructure:"version"`
	Labels  *schema.Labels `json:"labels,omitempty"  mapstructure:"labels"`
	ID      *int           `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewReleaseModelRead() *ReleaseModelRead {
	return &ReleaseModelRead{}
}

func (r *ReleaseModelRead) FromEnt(value *Release) *ReleaseModelRead {
	r.Name = &value.Name
	r.Version = &value.Version
	r.Labels = &value.Labels
	r.ID = &value.ID
	return r
}

type ReleaseModelUpdate struct {
	Name    *string        `json:"name,omitempty"  mapstructure:"name"`
	Version *string        `json:"version,omitempty"  mapstructure:"version"`
	Labels  *schema.Labels `json:"labels,omitempty"  mapstructure:"labels"`
}

func NewReleaseModelUpdate() *ReleaseModelUpdate {
	return &ReleaseModelUpdate{}
}
func (r *ReleaseModelUpdate) SetName(value string) *ReleaseModelUpdate {
	r.Name = &value
	return r
}
func (r *ReleaseModelUpdate) SetVersion(value string) *ReleaseModelUpdate {
	r.Version = &value
	return r
}
func (r *ReleaseModelUpdate) SetLabels(value schema.Labels) *ReleaseModelUpdate {
	r.Labels = &value
	return r
}

func (r *ReleaseUpdateOne) SetModelUpdate(model *ReleaseModelUpdate) *ReleaseUpdateOne {
	r.mutation.SetModelUpdate(model)
	return r
}

func (r *ReleaseMutation) SetModelUpdate(model *ReleaseModelUpdate) *ReleaseMutation {
	if model.Name != nil {
		r.SetName(*model.Name)
	}
	if model.Version != nil {
		r.SetVersion(*model.Version)
	}
	if model.Labels != nil {
		r.SetLabels(*model.Labels)
	}
	return r
}

type ReleaseEntryModelCreate struct {
	Type *releaseentry.Type `json:"type,omitempty" validate:"required" mapstructure:"type"`
	Time *time.Time         `json:"time,omitempty"  mapstructure:"time"`
}

func NewReleaseEntryModelCreate() *ReleaseEntryModelCreate {
	return &ReleaseEntryModelCreate{}
}

func (re *ReleaseEntryModelCreate) FromEnt(value *ReleaseEntry) *ReleaseEntryModelCreate {
	re.Type = &value.Type
	re.Time = &value.Time
	return re
}
func (re *ReleaseEntryModelCreate) SetType(value releaseentry.Type) *ReleaseEntryModelCreate {
	re.Type = &value
	return re
}
func (re *ReleaseEntryModelCreate) SetTime(value time.Time) *ReleaseEntryModelCreate {
	re.Time = &value
	return re
}

func (re *ReleaseEntryCreate) SetModelCreate(model *ReleaseEntryModelCreate) *ReleaseEntryCreate {
	re.mutation.SetModelCreate(model)
	return re
}

func (re *ReleaseEntryUpdateOne) SetModelCreate(model *ReleaseEntryModelCreate) *ReleaseEntryUpdateOne {
	re.mutation.SetModelCreate(model)
	return re
}

func (re *ReleaseEntryMutation) SetModelCreate(model *ReleaseEntryModelCreate) *ReleaseEntryMutation {
	if model.Type != nil {
		re.SetType(*model.Type)
	}
	if model.Time != nil {
		re.SetTime(*model.Time)
	}
	return re
}

type ReleaseEntryModelRead struct {
	Type *releaseentry.Type `json:"type,omitempty" validate:"required" mapstructure:"type"`
	Time *time.Time         `json:"time,omitempty"  mapstructure:"time"`
	ID   *int               `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewReleaseEntryModelRead() *ReleaseEntryModelRead {
	return &ReleaseEntryModelRead{}
}

func (re *ReleaseEntryModelRead) FromEnt(value *ReleaseEntry) *ReleaseEntryModelRead {
	re.Type = &value.Type
	re.Time = &value.Time
	re.ID = &value.ID
	return re
}

type ReleaseEntryModelUpdate struct {
	Type *releaseentry.Type `json:"type,omitempty"  mapstructure:"type"`
	Time *time.Time         `json:"time,omitempty"  mapstructure:"time"`
}

func NewReleaseEntryModelUpdate() *ReleaseEntryModelUpdate {
	return &ReleaseEntryModelUpdate{}
}
func (re *ReleaseEntryModelUpdate) SetType(value releaseentry.Type) *ReleaseEntryModelUpdate {
	re.Type = &value
	return re
}
func (re *ReleaseEntryModelUpdate) SetTime(value time.Time) *ReleaseEntryModelUpdate {
	re.Time = &value
	return re
}

func (re *ReleaseEntryUpdateOne) SetModelUpdate(model *ReleaseEntryModelUpdate) *ReleaseEntryUpdateOne {
	re.mutation.SetModelUpdate(model)
	return re
}

func (re *ReleaseEntryMutation) SetModelUpdate(model *ReleaseEntryModelUpdate) *ReleaseEntryMutation {
	if model.Type != nil {
		re.SetType(*model.Type)
	}
	if model.Time != nil {
		re.SetTime(*model.Time)
	}
	return re
}

type ReleasePolicyModelCreate struct {
	Name   *string `json:"name,omitempty" validate:"required" mapstructure:"name"`
	Module *string `json:"module,omitempty" validate:"required" mapstructure:"module"`
}

func NewReleasePolicyModelCreate() *ReleasePolicyModelCreate {
	return &ReleasePolicyModelCreate{}
}

func (rp *ReleasePolicyModelCreate) FromEnt(value *ReleasePolicy) *ReleasePolicyModelCreate {
	rp.Name = &value.Name
	rp.Module = &value.Module
	return rp
}
func (rp *ReleasePolicyModelCreate) SetName(value string) *ReleasePolicyModelCreate {
	rp.Name = &value
	return rp
}
func (rp *ReleasePolicyModelCreate) SetModule(value string) *ReleasePolicyModelCreate {
	rp.Module = &value
	return rp
}

func (rp *ReleasePolicyCreate) SetModelCreate(model *ReleasePolicyModelCreate) *ReleasePolicyCreate {
	rp.mutation.SetModelCreate(model)
	return rp
}

func (rp *ReleasePolicyUpdateOne) SetModelCreate(model *ReleasePolicyModelCreate) *ReleasePolicyUpdateOne {
	rp.mutation.SetModelCreate(model)
	return rp
}

func (rp *ReleasePolicyMutation) SetModelCreate(model *ReleasePolicyModelCreate) *ReleasePolicyMutation {
	if model.Name != nil {
		rp.SetName(*model.Name)
	}
	if model.Module != nil {
		rp.SetModule(*model.Module)
	}
	return rp
}

type ReleasePolicyModelRead struct {
	Name   *string `json:"name,omitempty" validate:"required" mapstructure:"name"`
	Module *string `json:"module,omitempty" validate:"required" mapstructure:"module"`
	ID     *int    `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewReleasePolicyModelRead() *ReleasePolicyModelRead {
	return &ReleasePolicyModelRead{}
}

func (rp *ReleasePolicyModelRead) FromEnt(value *ReleasePolicy) *ReleasePolicyModelRead {
	rp.Name = &value.Name
	rp.Module = &value.Module
	rp.ID = &value.ID
	return rp
}

type ReleasePolicyModelUpdate struct {
	Name   *string `json:"name,omitempty"  mapstructure:"name"`
	Module *string `json:"module,omitempty"  mapstructure:"module"`
}

func NewReleasePolicyModelUpdate() *ReleasePolicyModelUpdate {
	return &ReleasePolicyModelUpdate{}
}
func (rp *ReleasePolicyModelUpdate) SetName(value string) *ReleasePolicyModelUpdate {
	rp.Name = &value
	return rp
}
func (rp *ReleasePolicyModelUpdate) SetModule(value string) *ReleasePolicyModelUpdate {
	rp.Module = &value
	return rp
}

func (rp *ReleasePolicyUpdateOne) SetModelUpdate(model *ReleasePolicyModelUpdate) *ReleasePolicyUpdateOne {
	rp.mutation.SetModelUpdate(model)
	return rp
}

func (rp *ReleasePolicyMutation) SetModelUpdate(model *ReleasePolicyModelUpdate) *ReleasePolicyMutation {
	if model.Name != nil {
		rp.SetName(*model.Name)
	}
	if model.Module != nil {
		rp.SetModule(*model.Module)
	}
	return rp
}

type ReleasePolicyViolationModelCreate struct {
	Message  *string                          `json:"message,omitempty" validate:"required" mapstructure:"message"`
	Type     *releasepolicyviolation.Type     `json:"type,omitempty" validate:"required" mapstructure:"type"`
	Severity *releasepolicyviolation.Severity `json:"severity,omitempty" validate:"required" mapstructure:"severity"`
}

func NewReleasePolicyViolationModelCreate() *ReleasePolicyViolationModelCreate {
	return &ReleasePolicyViolationModelCreate{}
}

func (rpv *ReleasePolicyViolationModelCreate) FromEnt(value *ReleasePolicyViolation) *ReleasePolicyViolationModelCreate {
	rpv.Message = &value.Message
	rpv.Type = &value.Type
	rpv.Severity = &value.Severity
	return rpv
}
func (rpv *ReleasePolicyViolationModelCreate) SetMessage(value string) *ReleasePolicyViolationModelCreate {
	rpv.Message = &value
	return rpv
}
func (rpv *ReleasePolicyViolationModelCreate) SetType(value releasepolicyviolation.Type) *ReleasePolicyViolationModelCreate {
	rpv.Type = &value
	return rpv
}
func (rpv *ReleasePolicyViolationModelCreate) SetSeverity(value releasepolicyviolation.Severity) *ReleasePolicyViolationModelCreate {
	rpv.Severity = &value
	return rpv
}

func (rpv *ReleasePolicyViolationCreate) SetModelCreate(model *ReleasePolicyViolationModelCreate) *ReleasePolicyViolationCreate {
	rpv.mutation.SetModelCreate(model)
	return rpv
}

func (rpv *ReleasePolicyViolationUpdateOne) SetModelCreate(model *ReleasePolicyViolationModelCreate) *ReleasePolicyViolationUpdateOne {
	rpv.mutation.SetModelCreate(model)
	return rpv
}

func (rpv *ReleasePolicyViolationMutation) SetModelCreate(model *ReleasePolicyViolationModelCreate) *ReleasePolicyViolationMutation {
	if model.Message != nil {
		rpv.SetMessage(*model.Message)
	}
	if model.Type != nil {
		rpv.SetType(*model.Type)
	}
	if model.Severity != nil {
		rpv.SetSeverity(*model.Severity)
	}
	return rpv
}

type ReleasePolicyViolationModelRead struct {
	Message  *string                          `json:"message,omitempty" validate:"required" mapstructure:"message"`
	Type     *releasepolicyviolation.Type     `json:"type,omitempty" validate:"required" mapstructure:"type"`
	Severity *releasepolicyviolation.Severity `json:"severity,omitempty" validate:"required" mapstructure:"severity"`
	ID       *int                             `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewReleasePolicyViolationModelRead() *ReleasePolicyViolationModelRead {
	return &ReleasePolicyViolationModelRead{}
}

func (rpv *ReleasePolicyViolationModelRead) FromEnt(value *ReleasePolicyViolation) *ReleasePolicyViolationModelRead {
	rpv.Message = &value.Message
	rpv.Type = &value.Type
	rpv.Severity = &value.Severity
	rpv.ID = &value.ID
	return rpv
}

type ReleasePolicyViolationModelUpdate struct {
	Message  *string                          `json:"message,omitempty"  mapstructure:"message"`
	Type     *releasepolicyviolation.Type     `json:"type,omitempty"  mapstructure:"type"`
	Severity *releasepolicyviolation.Severity `json:"severity,omitempty"  mapstructure:"severity"`
}

func NewReleasePolicyViolationModelUpdate() *ReleasePolicyViolationModelUpdate {
	return &ReleasePolicyViolationModelUpdate{}
}
func (rpv *ReleasePolicyViolationModelUpdate) SetMessage(value string) *ReleasePolicyViolationModelUpdate {
	rpv.Message = &value
	return rpv
}
func (rpv *ReleasePolicyViolationModelUpdate) SetType(value releasepolicyviolation.Type) *ReleasePolicyViolationModelUpdate {
	rpv.Type = &value
	return rpv
}
func (rpv *ReleasePolicyViolationModelUpdate) SetSeverity(value releasepolicyviolation.Severity) *ReleasePolicyViolationModelUpdate {
	rpv.Severity = &value
	return rpv
}

func (rpv *ReleasePolicyViolationUpdateOne) SetModelUpdate(model *ReleasePolicyViolationModelUpdate) *ReleasePolicyViolationUpdateOne {
	rpv.mutation.SetModelUpdate(model)
	return rpv
}

func (rpv *ReleasePolicyViolationMutation) SetModelUpdate(model *ReleasePolicyViolationModelUpdate) *ReleasePolicyViolationMutation {
	if model.Message != nil {
		rpv.SetMessage(*model.Message)
	}
	if model.Type != nil {
		rpv.SetType(*model.Type)
	}
	if model.Severity != nil {
		rpv.SetSeverity(*model.Severity)
	}
	return rpv
}

type RepositoryModelCreate struct {
	Name          *string        `json:"name,omitempty" validate:"required" mapstructure:"name"`
	DefaultBranch *string        `json:"default_branch,omitempty"  mapstructure:"default_branch"`
	Labels        *schema.Labels `json:"labels,omitempty"  mapstructure:"labels"`
}

func NewRepositoryModelCreate() *RepositoryModelCreate {
	return &RepositoryModelCreate{}
}

func (r *RepositoryModelCreate) FromEnt(value *Repository) *RepositoryModelCreate {
	r.Name = &value.Name
	r.DefaultBranch = &value.DefaultBranch
	r.Labels = &value.Labels
	return r
}
func (r *RepositoryModelCreate) SetName(value string) *RepositoryModelCreate {
	r.Name = &value
	return r
}
func (r *RepositoryModelCreate) SetDefaultBranch(value string) *RepositoryModelCreate {
	r.DefaultBranch = &value
	return r
}
func (r *RepositoryModelCreate) SetLabels(value schema.Labels) *RepositoryModelCreate {
	r.Labels = &value
	return r
}

func (r *RepositoryCreate) SetModelCreate(model *RepositoryModelCreate) *RepositoryCreate {
	r.mutation.SetModelCreate(model)
	return r
}

func (r *RepositoryUpdateOne) SetModelCreate(model *RepositoryModelCreate) *RepositoryUpdateOne {
	r.mutation.SetModelCreate(model)
	return r
}

func (r *RepositoryMutation) SetModelCreate(model *RepositoryModelCreate) *RepositoryMutation {
	if model.Name != nil {
		r.SetName(*model.Name)
	}
	if model.DefaultBranch != nil {
		r.SetDefaultBranch(*model.DefaultBranch)
	}
	if model.Labels != nil {
		r.SetLabels(*model.Labels)
	}
	return r
}

type RepositoryModelRead struct {
	Name          *string        `json:"name,omitempty" validate:"required" mapstructure:"name"`
	DefaultBranch *string        `json:"default_branch,omitempty"  mapstructure:"default_branch"`
	Labels        *schema.Labels `json:"labels,omitempty"  mapstructure:"labels"`
	ID            *int           `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewRepositoryModelRead() *RepositoryModelRead {
	return &RepositoryModelRead{}
}

func (r *RepositoryModelRead) FromEnt(value *Repository) *RepositoryModelRead {
	r.Name = &value.Name
	r.DefaultBranch = &value.DefaultBranch
	r.Labels = &value.Labels
	r.ID = &value.ID
	return r
}

type RepositoryModelUpdate struct {
	Name          *string        `json:"name,omitempty"  mapstructure:"name"`
	DefaultBranch *string        `json:"default_branch,omitempty"  mapstructure:"default_branch"`
	Labels        *schema.Labels `json:"labels,omitempty"  mapstructure:"labels"`
}

func NewRepositoryModelUpdate() *RepositoryModelUpdate {
	return &RepositoryModelUpdate{}
}
func (r *RepositoryModelUpdate) SetName(value string) *RepositoryModelUpdate {
	r.Name = &value
	return r
}
func (r *RepositoryModelUpdate) SetDefaultBranch(value string) *RepositoryModelUpdate {
	r.DefaultBranch = &value
	return r
}
func (r *RepositoryModelUpdate) SetLabels(value schema.Labels) *RepositoryModelUpdate {
	r.Labels = &value
	return r
}

func (r *RepositoryUpdateOne) SetModelUpdate(model *RepositoryModelUpdate) *RepositoryUpdateOne {
	r.mutation.SetModelUpdate(model)
	return r
}

func (r *RepositoryMutation) SetModelUpdate(model *RepositoryModelUpdate) *RepositoryMutation {
	if model.Name != nil {
		r.SetName(*model.Name)
	}
	if model.DefaultBranch != nil {
		r.SetDefaultBranch(*model.DefaultBranch)
	}
	if model.Labels != nil {
		r.SetLabels(*model.Labels)
	}
	return r
}

type SPDXLicenseModelCreate struct {
	LicenseID     *string `json:"license_id,omitempty" validate:"required" mapstructure:"license_id"`
	Name          *string `json:"name,omitempty" validate:"required" mapstructure:"name"`
	Reference     *string `json:"reference,omitempty"  mapstructure:"reference"`
	DetailsURL    *string `json:"details_url,omitempty"  mapstructure:"details_url"`
	IsOsiApproved *bool   `json:"is_osi_approved,omitempty"  mapstructure:"is_osi_approved"`
}

func NewSPDXLicenseModelCreate() *SPDXLicenseModelCreate {
	return &SPDXLicenseModelCreate{}
}

func (sl *SPDXLicenseModelCreate) FromEnt(value *SPDXLicense) *SPDXLicenseModelCreate {
	sl.LicenseID = &value.LicenseID
	sl.Name = &value.Name
	sl.Reference = &value.Reference
	sl.DetailsURL = &value.DetailsURL
	sl.IsOsiApproved = &value.IsOsiApproved
	return sl
}
func (sl *SPDXLicenseModelCreate) SetLicenseID(value string) *SPDXLicenseModelCreate {
	sl.LicenseID = &value
	return sl
}
func (sl *SPDXLicenseModelCreate) SetName(value string) *SPDXLicenseModelCreate {
	sl.Name = &value
	return sl
}
func (sl *SPDXLicenseModelCreate) SetReference(value string) *SPDXLicenseModelCreate {
	sl.Reference = &value
	return sl
}
func (sl *SPDXLicenseModelCreate) SetDetailsURL(value string) *SPDXLicenseModelCreate {
	sl.DetailsURL = &value
	return sl
}
func (sl *SPDXLicenseModelCreate) SetIsOsiApproved(value bool) *SPDXLicenseModelCreate {
	sl.IsOsiApproved = &value
	return sl
}

func (sl *SPDXLicenseCreate) SetModelCreate(model *SPDXLicenseModelCreate) *SPDXLicenseCreate {
	sl.mutation.SetModelCreate(model)
	return sl
}

func (sl *SPDXLicenseUpdateOne) SetModelCreate(model *SPDXLicenseModelCreate) *SPDXLicenseUpdateOne {
	sl.mutation.SetModelCreate(model)
	return sl
}

func (sl *SPDXLicenseMutation) SetModelCreate(model *SPDXLicenseModelCreate) *SPDXLicenseMutation {
	if model.LicenseID != nil {
		sl.SetLicenseID(*model.LicenseID)
	}
	if model.Name != nil {
		sl.SetName(*model.Name)
	}
	if model.Reference != nil {
		sl.SetReference(*model.Reference)
	}
	if model.DetailsURL != nil {
		sl.SetDetailsURL(*model.DetailsURL)
	}
	if model.IsOsiApproved != nil {
		sl.SetIsOsiApproved(*model.IsOsiApproved)
	}
	return sl
}

type SPDXLicenseModelRead struct {
	LicenseID     *string `json:"license_id,omitempty" validate:"required" mapstructure:"license_id"`
	Name          *string `json:"name,omitempty" validate:"required" mapstructure:"name"`
	Reference     *string `json:"reference,omitempty"  mapstructure:"reference"`
	DetailsURL    *string `json:"details_url,omitempty"  mapstructure:"details_url"`
	IsOsiApproved *bool   `json:"is_osi_approved,omitempty"  mapstructure:"is_osi_approved"`
	ID            *int    `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewSPDXLicenseModelRead() *SPDXLicenseModelRead {
	return &SPDXLicenseModelRead{}
}

func (sl *SPDXLicenseModelRead) FromEnt(value *SPDXLicense) *SPDXLicenseModelRead {
	sl.LicenseID = &value.LicenseID
	sl.Name = &value.Name
	sl.Reference = &value.Reference
	sl.DetailsURL = &value.DetailsURL
	sl.IsOsiApproved = &value.IsOsiApproved
	sl.ID = &value.ID
	return sl
}

type SPDXLicenseModelUpdate struct {
	LicenseID     *string `json:"license_id,omitempty"  mapstructure:"license_id"`
	Name          *string `json:"name,omitempty"  mapstructure:"name"`
	Reference     *string `json:"reference,omitempty"  mapstructure:"reference"`
	DetailsURL    *string `json:"details_url,omitempty"  mapstructure:"details_url"`
	IsOsiApproved *bool   `json:"is_osi_approved,omitempty"  mapstructure:"is_osi_approved"`
}

func NewSPDXLicenseModelUpdate() *SPDXLicenseModelUpdate {
	return &SPDXLicenseModelUpdate{}
}
func (sl *SPDXLicenseModelUpdate) SetLicenseID(value string) *SPDXLicenseModelUpdate {
	sl.LicenseID = &value
	return sl
}
func (sl *SPDXLicenseModelUpdate) SetName(value string) *SPDXLicenseModelUpdate {
	sl.Name = &value
	return sl
}
func (sl *SPDXLicenseModelUpdate) SetReference(value string) *SPDXLicenseModelUpdate {
	sl.Reference = &value
	return sl
}
func (sl *SPDXLicenseModelUpdate) SetDetailsURL(value string) *SPDXLicenseModelUpdate {
	sl.DetailsURL = &value
	return sl
}
func (sl *SPDXLicenseModelUpdate) SetIsOsiApproved(value bool) *SPDXLicenseModelUpdate {
	sl.IsOsiApproved = &value
	return sl
}

func (sl *SPDXLicenseUpdateOne) SetModelUpdate(model *SPDXLicenseModelUpdate) *SPDXLicenseUpdateOne {
	sl.mutation.SetModelUpdate(model)
	return sl
}

func (sl *SPDXLicenseMutation) SetModelUpdate(model *SPDXLicenseModelUpdate) *SPDXLicenseMutation {
	if model.LicenseID != nil {
		sl.SetLicenseID(*model.LicenseID)
	}
	if model.Name != nil {
		sl.SetName(*model.Name)
	}
	if model.Reference != nil {
		sl.SetReference(*model.Reference)
	}
	if model.DetailsURL != nil {
		sl.SetDetailsURL(*model.DetailsURL)
	}
	if model.IsOsiApproved != nil {
		sl.SetIsOsiApproved(*model.IsOsiApproved)
	}
	return sl
}

type TestCaseModelCreate struct {
	Name     *string          `json:"name,omitempty" validate:"required" mapstructure:"name"`
	Result   *bool            `json:"result,omitempty" validate:"required" mapstructure:"result"`
	Message  *string          `json:"message,omitempty" validate:"required" mapstructure:"message"`
	Elapsed  *float64         `json:"elapsed,omitempty"  mapstructure:"elapsed"`
	Metadata *schema.Metadata `json:"metadata,omitempty"  mapstructure:"metadata"`
}

func NewTestCaseModelCreate() *TestCaseModelCreate {
	return &TestCaseModelCreate{}
}

func (tc *TestCaseModelCreate) FromEnt(value *TestCase) *TestCaseModelCreate {
	tc.Name = &value.Name
	tc.Result = &value.Result
	tc.Message = &value.Message
	tc.Elapsed = &value.Elapsed
	tc.Metadata = &value.Metadata
	return tc
}
func (tc *TestCaseModelCreate) SetName(value string) *TestCaseModelCreate {
	tc.Name = &value
	return tc
}
func (tc *TestCaseModelCreate) SetResult(value bool) *TestCaseModelCreate {
	tc.Result = &value
	return tc
}
func (tc *TestCaseModelCreate) SetMessage(value string) *TestCaseModelCreate {
	tc.Message = &value
	return tc
}
func (tc *TestCaseModelCreate) SetElapsed(value float64) *TestCaseModelCreate {
	tc.Elapsed = &value
	return tc
}
func (tc *TestCaseModelCreate) SetMetadata(value schema.Metadata) *TestCaseModelCreate {
	tc.Metadata = &value
	return tc
}

func (tc *TestCaseCreate) SetModelCreate(model *TestCaseModelCreate) *TestCaseCreate {
	tc.mutation.SetModelCreate(model)
	return tc
}

func (tc *TestCaseUpdateOne) SetModelCreate(model *TestCaseModelCreate) *TestCaseUpdateOne {
	tc.mutation.SetModelCreate(model)
	return tc
}

func (tc *TestCaseMutation) SetModelCreate(model *TestCaseModelCreate) *TestCaseMutation {
	if model.Name != nil {
		tc.SetName(*model.Name)
	}
	if model.Result != nil {
		tc.SetResult(*model.Result)
	}
	if model.Message != nil {
		tc.SetMessage(*model.Message)
	}
	if model.Elapsed != nil {
		tc.SetElapsed(*model.Elapsed)
	}
	if model.Metadata != nil {
		tc.SetMetadata(*model.Metadata)
	}
	return tc
}

type TestCaseModelRead struct {
	Name     *string          `json:"name,omitempty" validate:"required" mapstructure:"name"`
	Result   *bool            `json:"result,omitempty" validate:"required" mapstructure:"result"`
	Message  *string          `json:"message,omitempty" validate:"required" mapstructure:"message"`
	Elapsed  *float64         `json:"elapsed,omitempty"  mapstructure:"elapsed"`
	Metadata *schema.Metadata `json:"metadata,omitempty"  mapstructure:"metadata"`
	ID       *int             `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewTestCaseModelRead() *TestCaseModelRead {
	return &TestCaseModelRead{}
}

func (tc *TestCaseModelRead) FromEnt(value *TestCase) *TestCaseModelRead {
	tc.Name = &value.Name
	tc.Result = &value.Result
	tc.Message = &value.Message
	tc.Elapsed = &value.Elapsed
	tc.Metadata = &value.Metadata
	tc.ID = &value.ID
	return tc
}

type TestCaseModelUpdate struct {
	Name     *string          `json:"name,omitempty"  mapstructure:"name"`
	Result   *bool            `json:"result,omitempty"  mapstructure:"result"`
	Message  *string          `json:"message,omitempty"  mapstructure:"message"`
	Elapsed  *float64         `json:"elapsed,omitempty"  mapstructure:"elapsed"`
	Metadata *schema.Metadata `json:"metadata,omitempty"  mapstructure:"metadata"`
}

func NewTestCaseModelUpdate() *TestCaseModelUpdate {
	return &TestCaseModelUpdate{}
}
func (tc *TestCaseModelUpdate) SetName(value string) *TestCaseModelUpdate {
	tc.Name = &value
	return tc
}
func (tc *TestCaseModelUpdate) SetResult(value bool) *TestCaseModelUpdate {
	tc.Result = &value
	return tc
}
func (tc *TestCaseModelUpdate) SetMessage(value string) *TestCaseModelUpdate {
	tc.Message = &value
	return tc
}
func (tc *TestCaseModelUpdate) SetElapsed(value float64) *TestCaseModelUpdate {
	tc.Elapsed = &value
	return tc
}
func (tc *TestCaseModelUpdate) SetMetadata(value schema.Metadata) *TestCaseModelUpdate {
	tc.Metadata = &value
	return tc
}

func (tc *TestCaseUpdateOne) SetModelUpdate(model *TestCaseModelUpdate) *TestCaseUpdateOne {
	tc.mutation.SetModelUpdate(model)
	return tc
}

func (tc *TestCaseMutation) SetModelUpdate(model *TestCaseModelUpdate) *TestCaseMutation {
	if model.Name != nil {
		tc.SetName(*model.Name)
	}
	if model.Result != nil {
		tc.SetResult(*model.Result)
	}
	if model.Message != nil {
		tc.SetMessage(*model.Message)
	}
	if model.Elapsed != nil {
		tc.SetElapsed(*model.Elapsed)
	}
	if model.Metadata != nil {
		tc.SetMetadata(*model.Metadata)
	}
	return tc
}

type TestRunModelCreate struct {
	Tool     *string          `json:"tool,omitempty" validate:"required" mapstructure:"tool"`
	Time     *time.Time       `json:"time,omitempty"  mapstructure:"time"`
	Metadata *schema.Metadata `json:"metadata,omitempty"  mapstructure:"metadata"`
}

func NewTestRunModelCreate() *TestRunModelCreate {
	return &TestRunModelCreate{}
}

func (tr *TestRunModelCreate) FromEnt(value *TestRun) *TestRunModelCreate {
	tr.Tool = &value.Tool
	tr.Time = &value.Time
	tr.Metadata = &value.Metadata
	return tr
}
func (tr *TestRunModelCreate) SetTool(value string) *TestRunModelCreate {
	tr.Tool = &value
	return tr
}
func (tr *TestRunModelCreate) SetTime(value time.Time) *TestRunModelCreate {
	tr.Time = &value
	return tr
}
func (tr *TestRunModelCreate) SetMetadata(value schema.Metadata) *TestRunModelCreate {
	tr.Metadata = &value
	return tr
}

func (tr *TestRunCreate) SetModelCreate(model *TestRunModelCreate) *TestRunCreate {
	tr.mutation.SetModelCreate(model)
	return tr
}

func (tr *TestRunUpdateOne) SetModelCreate(model *TestRunModelCreate) *TestRunUpdateOne {
	tr.mutation.SetModelCreate(model)
	return tr
}

func (tr *TestRunMutation) SetModelCreate(model *TestRunModelCreate) *TestRunMutation {
	if model.Tool != nil {
		tr.SetTool(*model.Tool)
	}
	if model.Time != nil {
		tr.SetTime(*model.Time)
	}
	if model.Metadata != nil {
		tr.SetMetadata(*model.Metadata)
	}
	return tr
}

type TestRunModelRead struct {
	Tool     *string          `json:"tool,omitempty" validate:"required" mapstructure:"tool"`
	Time     *time.Time       `json:"time,omitempty"  mapstructure:"time"`
	Metadata *schema.Metadata `json:"metadata,omitempty"  mapstructure:"metadata"`
	ID       *int             `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewTestRunModelRead() *TestRunModelRead {
	return &TestRunModelRead{}
}

func (tr *TestRunModelRead) FromEnt(value *TestRun) *TestRunModelRead {
	tr.Tool = &value.Tool
	tr.Time = &value.Time
	tr.Metadata = &value.Metadata
	tr.ID = &value.ID
	return tr
}

type TestRunModelUpdate struct {
	Tool     *string          `json:"tool,omitempty"  mapstructure:"tool"`
	Time     *time.Time       `json:"time,omitempty"  mapstructure:"time"`
	Metadata *schema.Metadata `json:"metadata,omitempty"  mapstructure:"metadata"`
}

func NewTestRunModelUpdate() *TestRunModelUpdate {
	return &TestRunModelUpdate{}
}
func (tr *TestRunModelUpdate) SetTool(value string) *TestRunModelUpdate {
	tr.Tool = &value
	return tr
}
func (tr *TestRunModelUpdate) SetTime(value time.Time) *TestRunModelUpdate {
	tr.Time = &value
	return tr
}
func (tr *TestRunModelUpdate) SetMetadata(value schema.Metadata) *TestRunModelUpdate {
	tr.Metadata = &value
	return tr
}

func (tr *TestRunUpdateOne) SetModelUpdate(model *TestRunModelUpdate) *TestRunUpdateOne {
	tr.mutation.SetModelUpdate(model)
	return tr
}

func (tr *TestRunMutation) SetModelUpdate(model *TestRunModelUpdate) *TestRunMutation {
	if model.Tool != nil {
		tr.SetTool(*model.Tool)
	}
	if model.Time != nil {
		tr.SetTime(*model.Time)
	}
	if model.Metadata != nil {
		tr.SetMetadata(*model.Metadata)
	}
	return tr
}

type VulnerabilityModelCreate struct {
	Vid           *string                 `json:"vid,omitempty" validate:"required" mapstructure:"vid"`
	Summary       *string                 `json:"summary,omitempty"  mapstructure:"summary"`
	Description   *string                 `json:"description,omitempty"  mapstructure:"description"`
	SeverityScore *float64                `json:"severity_score,omitempty"  mapstructure:"severity_score"`
	Severity      *vulnerability.Severity `json:"severity,omitempty"  mapstructure:"severity"`
	Published     *time.Time              `json:"published,omitempty"  mapstructure:"published"`
	Modified      *time.Time              `json:"modified,omitempty"  mapstructure:"modified"`
	Labels        *schema.Labels          `json:"labels,omitempty"  mapstructure:"labels"`
	Metadata      *schema.Metadata        `json:"metadata,omitempty"  mapstructure:"metadata"`
}

func NewVulnerabilityModelCreate() *VulnerabilityModelCreate {
	return &VulnerabilityModelCreate{}
}

func (v *VulnerabilityModelCreate) FromEnt(value *Vulnerability) *VulnerabilityModelCreate {
	v.Vid = &value.Vid
	v.Summary = &value.Summary
	v.Description = &value.Description
	v.SeverityScore = &value.SeverityScore
	v.Severity = &value.Severity
	v.Published = &value.Published
	v.Modified = &value.Modified
	v.Labels = &value.Labels
	v.Metadata = &value.Metadata
	return v
}
func (v *VulnerabilityModelCreate) SetVid(value string) *VulnerabilityModelCreate {
	v.Vid = &value
	return v
}
func (v *VulnerabilityModelCreate) SetSummary(value string) *VulnerabilityModelCreate {
	v.Summary = &value
	return v
}
func (v *VulnerabilityModelCreate) SetDescription(value string) *VulnerabilityModelCreate {
	v.Description = &value
	return v
}
func (v *VulnerabilityModelCreate) SetSeverityScore(value float64) *VulnerabilityModelCreate {
	v.SeverityScore = &value
	return v
}
func (v *VulnerabilityModelCreate) SetSeverity(value vulnerability.Severity) *VulnerabilityModelCreate {
	v.Severity = &value
	return v
}
func (v *VulnerabilityModelCreate) SetPublished(value time.Time) *VulnerabilityModelCreate {
	v.Published = &value
	return v
}
func (v *VulnerabilityModelCreate) SetModified(value time.Time) *VulnerabilityModelCreate {
	v.Modified = &value
	return v
}
func (v *VulnerabilityModelCreate) SetLabels(value schema.Labels) *VulnerabilityModelCreate {
	v.Labels = &value
	return v
}
func (v *VulnerabilityModelCreate) SetMetadata(value schema.Metadata) *VulnerabilityModelCreate {
	v.Metadata = &value
	return v
}

func (v *VulnerabilityCreate) SetModelCreate(model *VulnerabilityModelCreate) *VulnerabilityCreate {
	v.mutation.SetModelCreate(model)
	return v
}

func (v *VulnerabilityUpdateOne) SetModelCreate(model *VulnerabilityModelCreate) *VulnerabilityUpdateOne {
	v.mutation.SetModelCreate(model)
	return v
}

func (v *VulnerabilityMutation) SetModelCreate(model *VulnerabilityModelCreate) *VulnerabilityMutation {
	if model.Vid != nil {
		v.SetVid(*model.Vid)
	}
	if model.Summary != nil {
		v.SetSummary(*model.Summary)
	}
	if model.Description != nil {
		v.SetDescription(*model.Description)
	}
	if model.SeverityScore != nil {
		v.SetSeverityScore(*model.SeverityScore)
	}
	if model.Severity != nil {
		v.SetSeverity(*model.Severity)
	}
	if model.Published != nil {
		v.SetPublished(*model.Published)
	}
	if model.Modified != nil {
		v.SetModified(*model.Modified)
	}
	if model.Labels != nil {
		v.SetLabels(*model.Labels)
	}
	if model.Metadata != nil {
		v.SetMetadata(*model.Metadata)
	}
	return v
}

type VulnerabilityModelRead struct {
	Vid           *string                 `json:"vid,omitempty" validate:"required" mapstructure:"vid"`
	Summary       *string                 `json:"summary,omitempty"  mapstructure:"summary"`
	Description   *string                 `json:"description,omitempty"  mapstructure:"description"`
	SeverityScore *float64                `json:"severity_score,omitempty"  mapstructure:"severity_score"`
	Severity      *vulnerability.Severity `json:"severity,omitempty"  mapstructure:"severity"`
	Published     *time.Time              `json:"published,omitempty"  mapstructure:"published"`
	Modified      *time.Time              `json:"modified,omitempty"  mapstructure:"modified"`
	Labels        *schema.Labels          `json:"labels,omitempty"  mapstructure:"labels"`
	Metadata      *schema.Metadata        `json:"metadata,omitempty"  mapstructure:"metadata"`
	ID            *int                    `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewVulnerabilityModelRead() *VulnerabilityModelRead {
	return &VulnerabilityModelRead{}
}

func (v *VulnerabilityModelRead) FromEnt(value *Vulnerability) *VulnerabilityModelRead {
	v.Vid = &value.Vid
	v.Summary = &value.Summary
	v.Description = &value.Description
	v.SeverityScore = &value.SeverityScore
	v.Severity = &value.Severity
	v.Published = &value.Published
	v.Modified = &value.Modified
	v.Labels = &value.Labels
	v.Metadata = &value.Metadata
	v.ID = &value.ID
	return v
}

type VulnerabilityModelUpdate struct {
	Vid           *string                 `json:"vid,omitempty"  mapstructure:"vid"`
	Summary       *string                 `json:"summary,omitempty"  mapstructure:"summary"`
	Description   *string                 `json:"description,omitempty"  mapstructure:"description"`
	SeverityScore *float64                `json:"severity_score,omitempty"  mapstructure:"severity_score"`
	Severity      *vulnerability.Severity `json:"severity,omitempty"  mapstructure:"severity"`
	Published     *time.Time              `json:"published,omitempty"  mapstructure:"published"`
	Modified      *time.Time              `json:"modified,omitempty"  mapstructure:"modified"`
	Labels        *schema.Labels          `json:"labels,omitempty"  mapstructure:"labels"`
	Metadata      *schema.Metadata        `json:"metadata,omitempty"  mapstructure:"metadata"`
}

func NewVulnerabilityModelUpdate() *VulnerabilityModelUpdate {
	return &VulnerabilityModelUpdate{}
}
func (v *VulnerabilityModelUpdate) SetVid(value string) *VulnerabilityModelUpdate {
	v.Vid = &value
	return v
}
func (v *VulnerabilityModelUpdate) SetSummary(value string) *VulnerabilityModelUpdate {
	v.Summary = &value
	return v
}
func (v *VulnerabilityModelUpdate) SetDescription(value string) *VulnerabilityModelUpdate {
	v.Description = &value
	return v
}
func (v *VulnerabilityModelUpdate) SetSeverityScore(value float64) *VulnerabilityModelUpdate {
	v.SeverityScore = &value
	return v
}
func (v *VulnerabilityModelUpdate) SetSeverity(value vulnerability.Severity) *VulnerabilityModelUpdate {
	v.Severity = &value
	return v
}
func (v *VulnerabilityModelUpdate) SetPublished(value time.Time) *VulnerabilityModelUpdate {
	v.Published = &value
	return v
}
func (v *VulnerabilityModelUpdate) SetModified(value time.Time) *VulnerabilityModelUpdate {
	v.Modified = &value
	return v
}
func (v *VulnerabilityModelUpdate) SetLabels(value schema.Labels) *VulnerabilityModelUpdate {
	v.Labels = &value
	return v
}
func (v *VulnerabilityModelUpdate) SetMetadata(value schema.Metadata) *VulnerabilityModelUpdate {
	v.Metadata = &value
	return v
}

func (v *VulnerabilityUpdateOne) SetModelUpdate(model *VulnerabilityModelUpdate) *VulnerabilityUpdateOne {
	v.mutation.SetModelUpdate(model)
	return v
}

func (v *VulnerabilityMutation) SetModelUpdate(model *VulnerabilityModelUpdate) *VulnerabilityMutation {
	if model.Vid != nil {
		v.SetVid(*model.Vid)
	}
	if model.Summary != nil {
		v.SetSummary(*model.Summary)
	}
	if model.Description != nil {
		v.SetDescription(*model.Description)
	}
	if model.SeverityScore != nil {
		v.SetSeverityScore(*model.SeverityScore)
	}
	if model.Severity != nil {
		v.SetSeverity(*model.Severity)
	}
	if model.Published != nil {
		v.SetPublished(*model.Published)
	}
	if model.Modified != nil {
		v.SetModified(*model.Modified)
	}
	if model.Labels != nil {
		v.SetLabels(*model.Labels)
	}
	if model.Metadata != nil {
		v.SetMetadata(*model.Metadata)
	}
	return v
}

type VulnerabilityReviewModelCreate struct {
	Note     *string                       `json:"note,omitempty" validate:"required" mapstructure:"note"`
	Decision *vulnerabilityreview.Decision `json:"decision,omitempty"  mapstructure:"decision"`
}

func NewVulnerabilityReviewModelCreate() *VulnerabilityReviewModelCreate {
	return &VulnerabilityReviewModelCreate{}
}

func (vr *VulnerabilityReviewModelCreate) FromEnt(value *VulnerabilityReview) *VulnerabilityReviewModelCreate {
	vr.Note = &value.Note
	vr.Decision = &value.Decision
	return vr
}
func (vr *VulnerabilityReviewModelCreate) SetNote(value string) *VulnerabilityReviewModelCreate {
	vr.Note = &value
	return vr
}
func (vr *VulnerabilityReviewModelCreate) SetDecision(value vulnerabilityreview.Decision) *VulnerabilityReviewModelCreate {
	vr.Decision = &value
	return vr
}

func (vr *VulnerabilityReviewCreate) SetModelCreate(model *VulnerabilityReviewModelCreate) *VulnerabilityReviewCreate {
	vr.mutation.SetModelCreate(model)
	return vr
}

func (vr *VulnerabilityReviewUpdateOne) SetModelCreate(model *VulnerabilityReviewModelCreate) *VulnerabilityReviewUpdateOne {
	vr.mutation.SetModelCreate(model)
	return vr
}

func (vr *VulnerabilityReviewMutation) SetModelCreate(model *VulnerabilityReviewModelCreate) *VulnerabilityReviewMutation {
	if model.Note != nil {
		vr.SetNote(*model.Note)
	}
	if model.Decision != nil {
		vr.SetDecision(*model.Decision)
	}
	return vr
}

type VulnerabilityReviewModelRead struct {
	Note     *string                       `json:"note,omitempty" validate:"required" mapstructure:"note"`
	Decision *vulnerabilityreview.Decision `json:"decision,omitempty"  mapstructure:"decision"`
	ID       *int                          `json:"id,omitempty" validate:"required" mapstructure:"id"`
}

func NewVulnerabilityReviewModelRead() *VulnerabilityReviewModelRead {
	return &VulnerabilityReviewModelRead{}
}

func (vr *VulnerabilityReviewModelRead) FromEnt(value *VulnerabilityReview) *VulnerabilityReviewModelRead {
	vr.Note = &value.Note
	vr.Decision = &value.Decision
	vr.ID = &value.ID
	return vr
}

type VulnerabilityReviewModelUpdate struct {
	Note     *string                       `json:"note,omitempty"  mapstructure:"note"`
	Decision *vulnerabilityreview.Decision `json:"decision,omitempty"  mapstructure:"decision"`
}

func NewVulnerabilityReviewModelUpdate() *VulnerabilityReviewModelUpdate {
	return &VulnerabilityReviewModelUpdate{}
}
func (vr *VulnerabilityReviewModelUpdate) SetNote(value string) *VulnerabilityReviewModelUpdate {
	vr.Note = &value
	return vr
}
func (vr *VulnerabilityReviewModelUpdate) SetDecision(value vulnerabilityreview.Decision) *VulnerabilityReviewModelUpdate {
	vr.Decision = &value
	return vr
}

func (vr *VulnerabilityReviewUpdateOne) SetModelUpdate(model *VulnerabilityReviewModelUpdate) *VulnerabilityReviewUpdateOne {
	vr.mutation.SetModelUpdate(model)
	return vr
}

func (vr *VulnerabilityReviewMutation) SetModelUpdate(model *VulnerabilityReviewModelUpdate) *VulnerabilityReviewMutation {
	if model.Note != nil {
		vr.SetNote(*model.Note)
	}
	if model.Decision != nil {
		vr.SetDecision(*model.Decision)
	}
	return vr
}

func (a *AdapterQuery) WhereInput(input *AdapterWhereInput) *AdapterQuery {
	if input != nil {
		input.Filter(a)
	}
	return a
}

func (a *ArtifactQuery) WhereInput(input *ArtifactWhereInput) *ArtifactQuery {
	if input != nil {
		input.Filter(a)
	}
	return a
}

func (ci *CodeIssueQuery) WhereInput(input *CodeIssueWhereInput) *CodeIssueQuery {
	if input != nil {
		input.Filter(ci)
	}
	return ci
}

func (cs *CodeScanQuery) WhereInput(input *CodeScanWhereInput) *CodeScanQuery {
	if input != nil {
		input.Filter(cs)
	}
	return cs
}

func (c *ComponentQuery) WhereInput(input *ComponentWhereInput) *ComponentQuery {
	if input != nil {
		input.Filter(c)
	}
	return c
}

func (e *EventQuery) WhereInput(input *EventWhereInput) *EventQuery {
	if input != nil {
		input.Filter(e)
	}
	return e
}

func (gc *GitCommitQuery) WhereInput(input *GitCommitWhereInput) *GitCommitQuery {
	if input != nil {
		input.Filter(gc)
	}
	return gc
}

func (l *LicenseQuery) WhereInput(input *LicenseWhereInput) *LicenseQuery {
	if input != nil {
		input.Filter(l)
	}
	return l
}

func (o *OrganizationQuery) WhereInput(input *OrganizationWhereInput) *OrganizationQuery {
	if input != nil {
		input.Filter(o)
	}
	return o
}

func (pr *ProjectQuery) WhereInput(input *ProjectWhereInput) *ProjectQuery {
	if input != nil {
		input.Filter(pr)
	}
	return pr
}

func (r *ReleaseQuery) WhereInput(input *ReleaseWhereInput) *ReleaseQuery {
	if input != nil {
		input.Filter(r)
	}
	return r
}

func (rc *ReleaseComponentQuery) WhereInput(input *ReleaseComponentWhereInput) *ReleaseComponentQuery {
	if input != nil {
		input.Filter(rc)
	}
	return rc
}

func (re *ReleaseEntryQuery) WhereInput(input *ReleaseEntryWhereInput) *ReleaseEntryQuery {
	if input != nil {
		input.Filter(re)
	}
	return re
}

func (rl *ReleaseLicenseQuery) WhereInput(input *ReleaseLicenseWhereInput) *ReleaseLicenseQuery {
	if input != nil {
		input.Filter(rl)
	}
	return rl
}

func (rp *ReleasePolicyQuery) WhereInput(input *ReleasePolicyWhereInput) *ReleasePolicyQuery {
	if input != nil {
		input.Filter(rp)
	}
	return rp
}

func (rpv *ReleasePolicyViolationQuery) WhereInput(input *ReleasePolicyViolationWhereInput) *ReleasePolicyViolationQuery {
	if input != nil {
		input.Filter(rpv)
	}
	return rpv
}

func (rv *ReleaseVulnerabilityQuery) WhereInput(input *ReleaseVulnerabilityWhereInput) *ReleaseVulnerabilityQuery {
	if input != nil {
		input.Filter(rv)
	}
	return rv
}

func (r *RepositoryQuery) WhereInput(input *RepositoryWhereInput) *RepositoryQuery {
	if input != nil {
		input.Filter(r)
	}
	return r
}

func (sl *SPDXLicenseQuery) WhereInput(input *SPDXLicenseWhereInput) *SPDXLicenseQuery {
	if input != nil {
		input.Filter(sl)
	}
	return sl
}

func (tc *TestCaseQuery) WhereInput(input *TestCaseWhereInput) *TestCaseQuery {
	if input != nil {
		input.Filter(tc)
	}
	return tc
}

func (tr *TestRunQuery) WhereInput(input *TestRunWhereInput) *TestRunQuery {
	if input != nil {
		input.Filter(tr)
	}
	return tr
}

func (v *VulnerabilityQuery) WhereInput(input *VulnerabilityWhereInput) *VulnerabilityQuery {
	if input != nil {
		input.Filter(v)
	}
	return v
}

func (vr *VulnerabilityReviewQuery) WhereInput(input *VulnerabilityReviewWhereInput) *VulnerabilityReviewQuery {
	if input != nil {
		input.Filter(vr)
	}
	return vr
}
