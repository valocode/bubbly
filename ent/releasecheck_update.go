// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasecheck"
)

// ReleaseCheckUpdate is the builder for updating ReleaseCheck entities.
type ReleaseCheckUpdate struct {
	config
	hooks    []Hook
	mutation *ReleaseCheckMutation
}

// Where adds a new predicate for the ReleaseCheckUpdate builder.
func (rcu *ReleaseCheckUpdate) Where(ps ...predicate.ReleaseCheck) *ReleaseCheckUpdate {
	rcu.mutation.predicates = append(rcu.mutation.predicates, ps...)
	return rcu
}

// SetType sets the "type" field.
func (rcu *ReleaseCheckUpdate) SetType(r releasecheck.Type) *ReleaseCheckUpdate {
	rcu.mutation.SetType(r)
	return rcu
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (rcu *ReleaseCheckUpdate) SetReleaseID(id int) *ReleaseCheckUpdate {
	rcu.mutation.SetReleaseID(id)
	return rcu
}

// SetRelease sets the "release" edge to the Release entity.
func (rcu *ReleaseCheckUpdate) SetRelease(r *Release) *ReleaseCheckUpdate {
	return rcu.SetReleaseID(r.ID)
}

// Mutation returns the ReleaseCheckMutation object of the builder.
func (rcu *ReleaseCheckUpdate) Mutation() *ReleaseCheckMutation {
	return rcu.mutation
}

// ClearRelease clears the "release" edge to the Release entity.
func (rcu *ReleaseCheckUpdate) ClearRelease() *ReleaseCheckUpdate {
	rcu.mutation.ClearRelease()
	return rcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *ReleaseCheckUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rcu.hooks) == 0 {
		if err = rcu.check(); err != nil {
			return 0, err
		}
		affected, err = rcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseCheckMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rcu.check(); err != nil {
				return 0, err
			}
			rcu.mutation = mutation
			affected, err = rcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rcu.hooks) - 1; i >= 0; i-- {
			mut = rcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *ReleaseCheckUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *ReleaseCheckUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *ReleaseCheckUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcu *ReleaseCheckUpdate) check() error {
	if v, ok := rcu.mutation.GetType(); ok {
		if err := releasecheck.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := rcu.mutation.ReleaseID(); rcu.mutation.ReleaseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"release\"")
	}
	return nil
}

func (rcu *ReleaseCheckUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releasecheck.Table,
			Columns: releasecheck.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releasecheck.FieldID,
			},
		},
	}
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: releasecheck.FieldType,
		})
	}
	if rcu.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasecheck.ReleaseTable,
			Columns: []string{releasecheck.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasecheck.ReleaseTable,
			Columns: []string{releasecheck.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releasecheck.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ReleaseCheckUpdateOne is the builder for updating a single ReleaseCheck entity.
type ReleaseCheckUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReleaseCheckMutation
}

// SetType sets the "type" field.
func (rcuo *ReleaseCheckUpdateOne) SetType(r releasecheck.Type) *ReleaseCheckUpdateOne {
	rcuo.mutation.SetType(r)
	return rcuo
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (rcuo *ReleaseCheckUpdateOne) SetReleaseID(id int) *ReleaseCheckUpdateOne {
	rcuo.mutation.SetReleaseID(id)
	return rcuo
}

// SetRelease sets the "release" edge to the Release entity.
func (rcuo *ReleaseCheckUpdateOne) SetRelease(r *Release) *ReleaseCheckUpdateOne {
	return rcuo.SetReleaseID(r.ID)
}

// Mutation returns the ReleaseCheckMutation object of the builder.
func (rcuo *ReleaseCheckUpdateOne) Mutation() *ReleaseCheckMutation {
	return rcuo.mutation
}

// ClearRelease clears the "release" edge to the Release entity.
func (rcuo *ReleaseCheckUpdateOne) ClearRelease() *ReleaseCheckUpdateOne {
	rcuo.mutation.ClearRelease()
	return rcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *ReleaseCheckUpdateOne) Select(field string, fields ...string) *ReleaseCheckUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated ReleaseCheck entity.
func (rcuo *ReleaseCheckUpdateOne) Save(ctx context.Context) (*ReleaseCheck, error) {
	var (
		err  error
		node *ReleaseCheck
	)
	if len(rcuo.hooks) == 0 {
		if err = rcuo.check(); err != nil {
			return nil, err
		}
		node, err = rcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseCheckMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rcuo.check(); err != nil {
				return nil, err
			}
			rcuo.mutation = mutation
			node, err = rcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rcuo.hooks) - 1; i >= 0; i-- {
			mut = rcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *ReleaseCheckUpdateOne) SaveX(ctx context.Context) *ReleaseCheck {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *ReleaseCheckUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *ReleaseCheckUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcuo *ReleaseCheckUpdateOne) check() error {
	if v, ok := rcuo.mutation.GetType(); ok {
		if err := releasecheck.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := rcuo.mutation.ReleaseID(); rcuo.mutation.ReleaseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"release\"")
	}
	return nil
}

func (rcuo *ReleaseCheckUpdateOne) sqlSave(ctx context.Context) (_node *ReleaseCheck, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releasecheck.Table,
			Columns: releasecheck.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releasecheck.FieldID,
			},
		},
	}
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ReleaseCheck.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, releasecheck.FieldID)
		for _, f := range fields {
			if !releasecheck.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != releasecheck.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: releasecheck.FieldType,
		})
	}
	if rcuo.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasecheck.ReleaseTable,
			Columns: []string{releasecheck.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasecheck.ReleaseTable,
			Columns: []string{releasecheck.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReleaseCheck{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releasecheck.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
