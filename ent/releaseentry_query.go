// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/artifact"
	"github.com/valocode/bubbly/ent/codescan"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releaseentry"
	"github.com/valocode/bubbly/ent/testrun"
)

// ReleaseEntryQuery is the builder for querying ReleaseEntry entities.
type ReleaseEntryQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ReleaseEntry
	// eager-loading edges.
	withArtifact *ArtifactQuery
	withCodeScan *CodeScanQuery
	withTestRun  *TestRunQuery
	withRelease  *ReleaseQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ReleaseEntryQuery builder.
func (req *ReleaseEntryQuery) Where(ps ...predicate.ReleaseEntry) *ReleaseEntryQuery {
	req.predicates = append(req.predicates, ps...)
	return req
}

// Limit adds a limit step to the query.
func (req *ReleaseEntryQuery) Limit(limit int) *ReleaseEntryQuery {
	req.limit = &limit
	return req
}

// Offset adds an offset step to the query.
func (req *ReleaseEntryQuery) Offset(offset int) *ReleaseEntryQuery {
	req.offset = &offset
	return req
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (req *ReleaseEntryQuery) Unique(unique bool) *ReleaseEntryQuery {
	req.unique = &unique
	return req
}

// Order adds an order step to the query.
func (req *ReleaseEntryQuery) Order(o ...OrderFunc) *ReleaseEntryQuery {
	req.order = append(req.order, o...)
	return req
}

// QueryArtifact chains the current query on the "artifact" edge.
func (req *ReleaseEntryQuery) QueryArtifact() *ArtifactQuery {
	query := &ArtifactQuery{config: req.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := req.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := req.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(releaseentry.Table, releaseentry.FieldID, selector),
			sqlgraph.To(artifact.Table, artifact.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, releaseentry.ArtifactTable, releaseentry.ArtifactColumn),
		)
		fromU = sqlgraph.SetNeighbors(req.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCodeScan chains the current query on the "code_scan" edge.
func (req *ReleaseEntryQuery) QueryCodeScan() *CodeScanQuery {
	query := &CodeScanQuery{config: req.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := req.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := req.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(releaseentry.Table, releaseentry.FieldID, selector),
			sqlgraph.To(codescan.Table, codescan.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, releaseentry.CodeScanTable, releaseentry.CodeScanColumn),
		)
		fromU = sqlgraph.SetNeighbors(req.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTestRun chains the current query on the "test_run" edge.
func (req *ReleaseEntryQuery) QueryTestRun() *TestRunQuery {
	query := &TestRunQuery{config: req.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := req.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := req.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(releaseentry.Table, releaseentry.FieldID, selector),
			sqlgraph.To(testrun.Table, testrun.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, releaseentry.TestRunTable, releaseentry.TestRunColumn),
		)
		fromU = sqlgraph.SetNeighbors(req.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRelease chains the current query on the "release" edge.
func (req *ReleaseEntryQuery) QueryRelease() *ReleaseQuery {
	query := &ReleaseQuery{config: req.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := req.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := req.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(releaseentry.Table, releaseentry.FieldID, selector),
			sqlgraph.To(release.Table, release.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, releaseentry.ReleaseTable, releaseentry.ReleaseColumn),
		)
		fromU = sqlgraph.SetNeighbors(req.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ReleaseEntry entity from the query.
// Returns a *NotFoundError when no ReleaseEntry was found.
func (req *ReleaseEntryQuery) First(ctx context.Context) (*ReleaseEntry, error) {
	nodes, err := req.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{releaseentry.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (req *ReleaseEntryQuery) FirstX(ctx context.Context) *ReleaseEntry {
	node, err := req.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ReleaseEntry ID from the query.
// Returns a *NotFoundError when no ReleaseEntry ID was found.
func (req *ReleaseEntryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = req.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{releaseentry.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (req *ReleaseEntryQuery) FirstIDX(ctx context.Context) int {
	id, err := req.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ReleaseEntry entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ReleaseEntry entity is not found.
// Returns a *NotFoundError when no ReleaseEntry entities are found.
func (req *ReleaseEntryQuery) Only(ctx context.Context) (*ReleaseEntry, error) {
	nodes, err := req.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{releaseentry.Label}
	default:
		return nil, &NotSingularError{releaseentry.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (req *ReleaseEntryQuery) OnlyX(ctx context.Context) *ReleaseEntry {
	node, err := req.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ReleaseEntry ID in the query.
// Returns a *NotSingularError when exactly one ReleaseEntry ID is not found.
// Returns a *NotFoundError when no entities are found.
func (req *ReleaseEntryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = req.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{releaseentry.Label}
	default:
		err = &NotSingularError{releaseentry.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (req *ReleaseEntryQuery) OnlyIDX(ctx context.Context) int {
	id, err := req.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ReleaseEntries.
func (req *ReleaseEntryQuery) All(ctx context.Context) ([]*ReleaseEntry, error) {
	if err := req.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return req.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (req *ReleaseEntryQuery) AllX(ctx context.Context) []*ReleaseEntry {
	nodes, err := req.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ReleaseEntry IDs.
func (req *ReleaseEntryQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := req.Select(releaseentry.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (req *ReleaseEntryQuery) IDsX(ctx context.Context) []int {
	ids, err := req.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (req *ReleaseEntryQuery) Count(ctx context.Context) (int, error) {
	if err := req.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return req.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (req *ReleaseEntryQuery) CountX(ctx context.Context) int {
	count, err := req.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (req *ReleaseEntryQuery) Exist(ctx context.Context) (bool, error) {
	if err := req.prepareQuery(ctx); err != nil {
		return false, err
	}
	return req.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (req *ReleaseEntryQuery) ExistX(ctx context.Context) bool {
	exist, err := req.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ReleaseEntryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (req *ReleaseEntryQuery) Clone() *ReleaseEntryQuery {
	if req == nil {
		return nil
	}
	return &ReleaseEntryQuery{
		config:       req.config,
		limit:        req.limit,
		offset:       req.offset,
		order:        append([]OrderFunc{}, req.order...),
		predicates:   append([]predicate.ReleaseEntry{}, req.predicates...),
		withArtifact: req.withArtifact.Clone(),
		withCodeScan: req.withCodeScan.Clone(),
		withTestRun:  req.withTestRun.Clone(),
		withRelease:  req.withRelease.Clone(),
		// clone intermediate query.
		sql:  req.sql.Clone(),
		path: req.path,
	}
}

// WithArtifact tells the query-builder to eager-load the nodes that are connected to
// the "artifact" edge. The optional arguments are used to configure the query builder of the edge.
func (req *ReleaseEntryQuery) WithArtifact(opts ...func(*ArtifactQuery)) *ReleaseEntryQuery {
	query := &ArtifactQuery{config: req.config}
	for _, opt := range opts {
		opt(query)
	}
	req.withArtifact = query
	return req
}

// WithCodeScan tells the query-builder to eager-load the nodes that are connected to
// the "code_scan" edge. The optional arguments are used to configure the query builder of the edge.
func (req *ReleaseEntryQuery) WithCodeScan(opts ...func(*CodeScanQuery)) *ReleaseEntryQuery {
	query := &CodeScanQuery{config: req.config}
	for _, opt := range opts {
		opt(query)
	}
	req.withCodeScan = query
	return req
}

// WithTestRun tells the query-builder to eager-load the nodes that are connected to
// the "test_run" edge. The optional arguments are used to configure the query builder of the edge.
func (req *ReleaseEntryQuery) WithTestRun(opts ...func(*TestRunQuery)) *ReleaseEntryQuery {
	query := &TestRunQuery{config: req.config}
	for _, opt := range opts {
		opt(query)
	}
	req.withTestRun = query
	return req
}

// WithRelease tells the query-builder to eager-load the nodes that are connected to
// the "release" edge. The optional arguments are used to configure the query builder of the edge.
func (req *ReleaseEntryQuery) WithRelease(opts ...func(*ReleaseQuery)) *ReleaseEntryQuery {
	query := &ReleaseQuery{config: req.config}
	for _, opt := range opts {
		opt(query)
	}
	req.withRelease = query
	return req
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type releaseentry.Type `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ReleaseEntry.Query().
//		GroupBy(releaseentry.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (req *ReleaseEntryQuery) GroupBy(field string, fields ...string) *ReleaseEntryGroupBy {
	group := &ReleaseEntryGroupBy{config: req.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := req.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return req.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type releaseentry.Type `json:"type,omitempty"`
//	}
//
//	client.ReleaseEntry.Query().
//		Select(releaseentry.FieldType).
//		Scan(ctx, &v)
//
func (req *ReleaseEntryQuery) Select(fields ...string) *ReleaseEntrySelect {
	req.fields = append(req.fields, fields...)
	return &ReleaseEntrySelect{ReleaseEntryQuery: req}
}

func (req *ReleaseEntryQuery) prepareQuery(ctx context.Context) error {
	for _, f := range req.fields {
		if !releaseentry.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if req.path != nil {
		prev, err := req.path(ctx)
		if err != nil {
			return err
		}
		req.sql = prev
	}
	return nil
}

func (req *ReleaseEntryQuery) sqlAll(ctx context.Context) ([]*ReleaseEntry, error) {
	var (
		nodes       = []*ReleaseEntry{}
		withFKs     = req.withFKs
		_spec       = req.querySpec()
		loadedTypes = [4]bool{
			req.withArtifact != nil,
			req.withCodeScan != nil,
			req.withTestRun != nil,
			req.withRelease != nil,
		}
	)
	if req.withRelease != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, releaseentry.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ReleaseEntry{config: req.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, req.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := req.withArtifact; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ReleaseEntry)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Artifact(func(s *sql.Selector) {
			s.Where(sql.InValues(releaseentry.ArtifactColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.release_entry_artifact
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "release_entry_artifact" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "release_entry_artifact" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Artifact = n
		}
	}

	if query := req.withCodeScan; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ReleaseEntry)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.CodeScan(func(s *sql.Selector) {
			s.Where(sql.InValues(releaseentry.CodeScanColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.release_entry_code_scan
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "release_entry_code_scan" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "release_entry_code_scan" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.CodeScan = n
		}
	}

	if query := req.withTestRun; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ReleaseEntry)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.TestRun(func(s *sql.Selector) {
			s.Where(sql.InValues(releaseentry.TestRunColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.release_entry_test_run
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "release_entry_test_run" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "release_entry_test_run" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.TestRun = n
		}
	}

	if query := req.withRelease; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ReleaseEntry)
		for i := range nodes {
			if nodes[i].release_entry_release == nil {
				continue
			}
			fk := *nodes[i].release_entry_release
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(release.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "release_entry_release" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Release = n
			}
		}
	}

	return nodes, nil
}

func (req *ReleaseEntryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := req.querySpec()
	return sqlgraph.CountNodes(ctx, req.driver, _spec)
}

func (req *ReleaseEntryQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := req.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (req *ReleaseEntryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releaseentry.Table,
			Columns: releaseentry.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releaseentry.FieldID,
			},
		},
		From:   req.sql,
		Unique: true,
	}
	if unique := req.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := req.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, releaseentry.FieldID)
		for i := range fields {
			if fields[i] != releaseentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := req.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := req.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := req.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := req.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (req *ReleaseEntryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(req.driver.Dialect())
	t1 := builder.Table(releaseentry.Table)
	columns := req.fields
	if len(columns) == 0 {
		columns = releaseentry.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if req.sql != nil {
		selector = req.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range req.predicates {
		p(selector)
	}
	for _, p := range req.order {
		p(selector)
	}
	if offset := req.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := req.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ReleaseEntryGroupBy is the group-by builder for ReleaseEntry entities.
type ReleaseEntryGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (regb *ReleaseEntryGroupBy) Aggregate(fns ...AggregateFunc) *ReleaseEntryGroupBy {
	regb.fns = append(regb.fns, fns...)
	return regb
}

// Scan applies the group-by query and scans the result into the given value.
func (regb *ReleaseEntryGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := regb.path(ctx)
	if err != nil {
		return err
	}
	regb.sql = query
	return regb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (regb *ReleaseEntryGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := regb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (regb *ReleaseEntryGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(regb.fields) > 1 {
		return nil, errors.New("ent: ReleaseEntryGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := regb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (regb *ReleaseEntryGroupBy) StringsX(ctx context.Context) []string {
	v, err := regb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (regb *ReleaseEntryGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = regb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{releaseentry.Label}
	default:
		err = fmt.Errorf("ent: ReleaseEntryGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (regb *ReleaseEntryGroupBy) StringX(ctx context.Context) string {
	v, err := regb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (regb *ReleaseEntryGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(regb.fields) > 1 {
		return nil, errors.New("ent: ReleaseEntryGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := regb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (regb *ReleaseEntryGroupBy) IntsX(ctx context.Context) []int {
	v, err := regb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (regb *ReleaseEntryGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = regb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{releaseentry.Label}
	default:
		err = fmt.Errorf("ent: ReleaseEntryGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (regb *ReleaseEntryGroupBy) IntX(ctx context.Context) int {
	v, err := regb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (regb *ReleaseEntryGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(regb.fields) > 1 {
		return nil, errors.New("ent: ReleaseEntryGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := regb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (regb *ReleaseEntryGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := regb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (regb *ReleaseEntryGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = regb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{releaseentry.Label}
	default:
		err = fmt.Errorf("ent: ReleaseEntryGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (regb *ReleaseEntryGroupBy) Float64X(ctx context.Context) float64 {
	v, err := regb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (regb *ReleaseEntryGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(regb.fields) > 1 {
		return nil, errors.New("ent: ReleaseEntryGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := regb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (regb *ReleaseEntryGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := regb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (regb *ReleaseEntryGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = regb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{releaseentry.Label}
	default:
		err = fmt.Errorf("ent: ReleaseEntryGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (regb *ReleaseEntryGroupBy) BoolX(ctx context.Context) bool {
	v, err := regb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (regb *ReleaseEntryGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range regb.fields {
		if !releaseentry.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := regb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := regb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (regb *ReleaseEntryGroupBy) sqlQuery() *sql.Selector {
	selector := regb.sql.Select()
	aggregation := make([]string, 0, len(regb.fns))
	for _, fn := range regb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(regb.fields)+len(regb.fns))
		for _, f := range regb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(regb.fields...)...)
}

// ReleaseEntrySelect is the builder for selecting fields of ReleaseEntry entities.
type ReleaseEntrySelect struct {
	*ReleaseEntryQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (res *ReleaseEntrySelect) Scan(ctx context.Context, v interface{}) error {
	if err := res.prepareQuery(ctx); err != nil {
		return err
	}
	res.sql = res.ReleaseEntryQuery.sqlQuery(ctx)
	return res.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (res *ReleaseEntrySelect) ScanX(ctx context.Context, v interface{}) {
	if err := res.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (res *ReleaseEntrySelect) Strings(ctx context.Context) ([]string, error) {
	if len(res.fields) > 1 {
		return nil, errors.New("ent: ReleaseEntrySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := res.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (res *ReleaseEntrySelect) StringsX(ctx context.Context) []string {
	v, err := res.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (res *ReleaseEntrySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = res.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{releaseentry.Label}
	default:
		err = fmt.Errorf("ent: ReleaseEntrySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (res *ReleaseEntrySelect) StringX(ctx context.Context) string {
	v, err := res.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (res *ReleaseEntrySelect) Ints(ctx context.Context) ([]int, error) {
	if len(res.fields) > 1 {
		return nil, errors.New("ent: ReleaseEntrySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := res.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (res *ReleaseEntrySelect) IntsX(ctx context.Context) []int {
	v, err := res.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (res *ReleaseEntrySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = res.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{releaseentry.Label}
	default:
		err = fmt.Errorf("ent: ReleaseEntrySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (res *ReleaseEntrySelect) IntX(ctx context.Context) int {
	v, err := res.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (res *ReleaseEntrySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(res.fields) > 1 {
		return nil, errors.New("ent: ReleaseEntrySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := res.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (res *ReleaseEntrySelect) Float64sX(ctx context.Context) []float64 {
	v, err := res.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (res *ReleaseEntrySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = res.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{releaseentry.Label}
	default:
		err = fmt.Errorf("ent: ReleaseEntrySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (res *ReleaseEntrySelect) Float64X(ctx context.Context) float64 {
	v, err := res.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (res *ReleaseEntrySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(res.fields) > 1 {
		return nil, errors.New("ent: ReleaseEntrySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := res.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (res *ReleaseEntrySelect) BoolsX(ctx context.Context) []bool {
	v, err := res.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (res *ReleaseEntrySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = res.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{releaseentry.Label}
	default:
		err = fmt.Errorf("ent: ReleaseEntrySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (res *ReleaseEntrySelect) BoolX(ctx context.Context) bool {
	v, err := res.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (res *ReleaseEntrySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := res.sql.Query()
	if err := res.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
