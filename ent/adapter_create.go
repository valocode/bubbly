// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/adapter"
)

// AdapterCreate is the builder for creating a Adapter entity.
type AdapterCreate struct {
	config
	mutation *AdapterMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ac *AdapterCreate) SetName(s string) *AdapterCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetTag sets the "tag" field.
func (ac *AdapterCreate) SetTag(s string) *AdapterCreate {
	ac.mutation.SetTag(s)
	return ac
}

// SetType sets the "type" field.
func (ac *AdapterCreate) SetType(a adapter.Type) *AdapterCreate {
	ac.mutation.SetType(a)
	return ac
}

// SetOperation sets the "operation" field.
func (ac *AdapterCreate) SetOperation(jm json.RawMessage) *AdapterCreate {
	ac.mutation.SetOperation(jm)
	return ac
}

// SetResultsType sets the "results_type" field.
func (ac *AdapterCreate) SetResultsType(at adapter.ResultsType) *AdapterCreate {
	ac.mutation.SetResultsType(at)
	return ac
}

// SetResults sets the "results" field.
func (ac *AdapterCreate) SetResults(b []byte) *AdapterCreate {
	ac.mutation.SetResults(b)
	return ac
}

// Mutation returns the AdapterMutation object of the builder.
func (ac *AdapterCreate) Mutation() *AdapterMutation {
	return ac.mutation
}

// Save creates the Adapter in the database.
func (ac *AdapterCreate) Save(ctx context.Context) (*Adapter, error) {
	var (
		err  error
		node *Adapter
	)
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdapterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AdapterCreate) SaveX(ctx context.Context) *Adapter {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AdapterCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AdapterCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AdapterCreate) check() error {
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := ac.mutation.Name(); ok {
		if err := adapter.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required field "tag"`)}
	}
	if v, ok := ac.mutation.Tag(); ok {
		if err := adapter.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "tag": %w`, err)}
		}
	}
	if _, ok := ac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "type"`)}
	}
	if v, ok := ac.mutation.GetType(); ok {
		if err := adapter.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.ResultsType(); !ok {
		return &ValidationError{Name: "results_type", err: errors.New(`ent: missing required field "results_type"`)}
	}
	if v, ok := ac.mutation.ResultsType(); ok {
		if err := adapter.ResultsTypeValidator(v); err != nil {
			return &ValidationError{Name: "results_type", err: fmt.Errorf(`ent: validator failed for field "results_type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Results(); !ok {
		return &ValidationError{Name: "results", err: errors.New(`ent: missing required field "results"`)}
	}
	return nil
}

func (ac *AdapterCreate) sqlSave(ctx context.Context) (*Adapter, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AdapterCreate) createSpec() (*Adapter, *sqlgraph.CreateSpec) {
	var (
		_node = &Adapter{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: adapter.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adapter.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adapter.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ac.mutation.Tag(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adapter.FieldTag,
		})
		_node.Tag = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: adapter.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ac.mutation.Operation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: adapter.FieldOperation,
		})
		_node.Operation = value
	}
	if value, ok := ac.mutation.ResultsType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: adapter.FieldResultsType,
		})
		_node.ResultsType = value
	}
	if value, ok := ac.mutation.Results(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: adapter.FieldResults,
		})
		_node.Results = value
	}
	return _node, _spec
}

// AdapterCreateBulk is the builder for creating many Adapter entities in bulk.
type AdapterCreateBulk struct {
	config
	builders []*AdapterCreate
}

// Save creates the Adapter entities in the database.
func (acb *AdapterCreateBulk) Save(ctx context.Context) ([]*Adapter, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Adapter, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdapterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AdapterCreateBulk) SaveX(ctx context.Context) []*Adapter {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AdapterCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AdapterCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
