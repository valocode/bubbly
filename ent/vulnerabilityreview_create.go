// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/project"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasevulnerability"
	"github.com/valocode/bubbly/ent/repo"
	"github.com/valocode/bubbly/ent/vulnerability"
	"github.com/valocode/bubbly/ent/vulnerabilityreview"
)

// VulnerabilityReviewCreate is the builder for creating a VulnerabilityReview entity.
type VulnerabilityReviewCreate struct {
	config
	mutation *VulnerabilityReviewMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (vrc *VulnerabilityReviewCreate) SetName(s string) *VulnerabilityReviewCreate {
	vrc.mutation.SetName(s)
	return vrc
}

// SetDecision sets the "decision" field.
func (vrc *VulnerabilityReviewCreate) SetDecision(v vulnerabilityreview.Decision) *VulnerabilityReviewCreate {
	vrc.mutation.SetDecision(v)
	return vrc
}

// SetNillableDecision sets the "decision" field if the given value is not nil.
func (vrc *VulnerabilityReviewCreate) SetNillableDecision(v *vulnerabilityreview.Decision) *VulnerabilityReviewCreate {
	if v != nil {
		vrc.SetDecision(*v)
	}
	return vrc
}

// SetVulnerabilityID sets the "vulnerability" edge to the Vulnerability entity by ID.
func (vrc *VulnerabilityReviewCreate) SetVulnerabilityID(id int) *VulnerabilityReviewCreate {
	vrc.mutation.SetVulnerabilityID(id)
	return vrc
}

// SetVulnerability sets the "vulnerability" edge to the Vulnerability entity.
func (vrc *VulnerabilityReviewCreate) SetVulnerability(v *Vulnerability) *VulnerabilityReviewCreate {
	return vrc.SetVulnerabilityID(v.ID)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (vrc *VulnerabilityReviewCreate) AddProjectIDs(ids ...int) *VulnerabilityReviewCreate {
	vrc.mutation.AddProjectIDs(ids...)
	return vrc
}

// AddProjects adds the "projects" edges to the Project entity.
func (vrc *VulnerabilityReviewCreate) AddProjects(p ...*Project) *VulnerabilityReviewCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vrc.AddProjectIDs(ids...)
}

// AddRepoIDs adds the "repos" edge to the Repo entity by IDs.
func (vrc *VulnerabilityReviewCreate) AddRepoIDs(ids ...int) *VulnerabilityReviewCreate {
	vrc.mutation.AddRepoIDs(ids...)
	return vrc
}

// AddRepos adds the "repos" edges to the Repo entity.
func (vrc *VulnerabilityReviewCreate) AddRepos(r ...*Repo) *VulnerabilityReviewCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vrc.AddRepoIDs(ids...)
}

// AddReleaseIDs adds the "releases" edge to the Release entity by IDs.
func (vrc *VulnerabilityReviewCreate) AddReleaseIDs(ids ...int) *VulnerabilityReviewCreate {
	vrc.mutation.AddReleaseIDs(ids...)
	return vrc
}

// AddReleases adds the "releases" edges to the Release entity.
func (vrc *VulnerabilityReviewCreate) AddReleases(r ...*Release) *VulnerabilityReviewCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vrc.AddReleaseIDs(ids...)
}

// AddInstanceIDs adds the "instances" edge to the ReleaseVulnerability entity by IDs.
func (vrc *VulnerabilityReviewCreate) AddInstanceIDs(ids ...int) *VulnerabilityReviewCreate {
	vrc.mutation.AddInstanceIDs(ids...)
	return vrc
}

// AddInstances adds the "instances" edges to the ReleaseVulnerability entity.
func (vrc *VulnerabilityReviewCreate) AddInstances(r ...*ReleaseVulnerability) *VulnerabilityReviewCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vrc.AddInstanceIDs(ids...)
}

// Mutation returns the VulnerabilityReviewMutation object of the builder.
func (vrc *VulnerabilityReviewCreate) Mutation() *VulnerabilityReviewMutation {
	return vrc.mutation
}

// Save creates the VulnerabilityReview in the database.
func (vrc *VulnerabilityReviewCreate) Save(ctx context.Context) (*VulnerabilityReview, error) {
	var (
		err  error
		node *VulnerabilityReview
	)
	vrc.defaults()
	if len(vrc.hooks) == 0 {
		if err = vrc.check(); err != nil {
			return nil, err
		}
		node, err = vrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VulnerabilityReviewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vrc.check(); err != nil {
				return nil, err
			}
			vrc.mutation = mutation
			if node, err = vrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vrc.hooks) - 1; i >= 0; i-- {
			if vrc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vrc *VulnerabilityReviewCreate) SaveX(ctx context.Context) *VulnerabilityReview {
	v, err := vrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vrc *VulnerabilityReviewCreate) Exec(ctx context.Context) error {
	_, err := vrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vrc *VulnerabilityReviewCreate) ExecX(ctx context.Context) {
	if err := vrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vrc *VulnerabilityReviewCreate) defaults() {
	if _, ok := vrc.mutation.Decision(); !ok {
		v := vulnerabilityreview.DefaultDecision
		vrc.mutation.SetDecision(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vrc *VulnerabilityReviewCreate) check() error {
	if _, ok := vrc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := vrc.mutation.Name(); ok {
		if err := vulnerabilityreview.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := vrc.mutation.Decision(); !ok {
		return &ValidationError{Name: "decision", err: errors.New(`ent: missing required field "decision"`)}
	}
	if v, ok := vrc.mutation.Decision(); ok {
		if err := vulnerabilityreview.DecisionValidator(v); err != nil {
			return &ValidationError{Name: "decision", err: fmt.Errorf(`ent: validator failed for field "decision": %w`, err)}
		}
	}
	if _, ok := vrc.mutation.VulnerabilityID(); !ok {
		return &ValidationError{Name: "vulnerability", err: errors.New("ent: missing required edge \"vulnerability\"")}
	}
	return nil
}

func (vrc *VulnerabilityReviewCreate) sqlSave(ctx context.Context) (*VulnerabilityReview, error) {
	_node, _spec := vrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vrc *VulnerabilityReviewCreate) createSpec() (*VulnerabilityReview, *sqlgraph.CreateSpec) {
	var (
		_node = &VulnerabilityReview{config: vrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vulnerabilityreview.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vulnerabilityreview.FieldID,
			},
		}
	)
	if value, ok := vrc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnerabilityreview.FieldName,
		})
		_node.Name = value
	}
	if value, ok := vrc.mutation.Decision(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: vulnerabilityreview.FieldDecision,
		})
		_node.Decision = value
	}
	if nodes := vrc.mutation.VulnerabilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerabilityreview.VulnerabilityTable,
			Columns: []string{vulnerabilityreview.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vulnerability_review_vulnerability = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vrc.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ProjectsTable,
			Columns: vulnerabilityreview.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vrc.mutation.ReposIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ReposTable,
			Columns: vulnerabilityreview.ReposPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vrc.mutation.ReleasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ReleasesTable,
			Columns: vulnerabilityreview.ReleasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vrc.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerabilityreview.InstancesTable,
			Columns: vulnerabilityreview.InstancesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VulnerabilityReviewCreateBulk is the builder for creating many VulnerabilityReview entities in bulk.
type VulnerabilityReviewCreateBulk struct {
	config
	builders []*VulnerabilityReviewCreate
}

// Save creates the VulnerabilityReview entities in the database.
func (vrcb *VulnerabilityReviewCreateBulk) Save(ctx context.Context) ([]*VulnerabilityReview, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vrcb.builders))
	nodes := make([]*VulnerabilityReview, len(vrcb.builders))
	mutators := make([]Mutator, len(vrcb.builders))
	for i := range vrcb.builders {
		func(i int, root context.Context) {
			builder := vrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VulnerabilityReviewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vrcb *VulnerabilityReviewCreateBulk) SaveX(ctx context.Context) []*VulnerabilityReview {
	v, err := vrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vrcb *VulnerabilityReviewCreateBulk) Exec(ctx context.Context) error {
	_, err := vrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vrcb *VulnerabilityReviewCreateBulk) ExecX(ctx context.Context) {
	if err := vrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
