// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/cwe"
)

// CWE is the model entity for the CWE schema.
type CWE struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CweID holds the value of the "cwe_id" field.
	CweID string `json:"cwe_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// URL holds the value of the "url" field.
	URL float64 `json:"url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CWEQuery when eager-loading is set.
	Edges CWEEdges `json:"edges"`
}

// CWEEdges holds the relations/edges for other nodes in the graph.
type CWEEdges struct {
	// Issues holds the value of the issues edge.
	Issues []*CodeIssue `json:"issues,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IssuesOrErr returns the Issues value or an error if the edge
// was not loaded in eager-loading.
func (e CWEEdges) IssuesOrErr() ([]*CodeIssue, error) {
	if e.loadedTypes[0] {
		return e.Issues, nil
	}
	return nil, &NotLoadedError{edge: "issues"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CWE) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cwe.FieldURL:
			values[i] = new(sql.NullFloat64)
		case cwe.FieldID:
			values[i] = new(sql.NullInt64)
		case cwe.FieldCweID, cwe.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CWE", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CWE fields.
func (c *CWE) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cwe.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case cwe.FieldCweID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cwe_id", values[i])
			} else if value.Valid {
				c.CweID = value.String
			}
		case cwe.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case cwe.FieldURL:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				c.URL = value.Float64
			}
		}
	}
	return nil
}

// QueryIssues queries the "issues" edge of the CWE entity.
func (c *CWE) QueryIssues() *CodeIssueQuery {
	return (&CWEClient{config: c.config}).QueryIssues(c)
}

// Update returns a builder for updating this CWE.
// Note that you need to call CWE.Unwrap() before calling this method if this CWE
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *CWE) Update() *CWEUpdateOne {
	return (&CWEClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the CWE entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *CWE) Unwrap() *CWE {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: CWE is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *CWE) String() string {
	var builder strings.Builder
	builder.WriteString("CWE(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", cwe_id=")
	builder.WriteString(c.CweID)
	builder.WriteString(", description=")
	builder.WriteString(c.Description)
	builder.WriteString(", url=")
	builder.WriteString(fmt.Sprintf("%v", c.URL))
	builder.WriteByte(')')
	return builder.String()
}

// CWEs is a parsable slice of CWE.
type CWEs []*CWE

func (c CWEs) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
