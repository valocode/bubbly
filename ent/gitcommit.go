// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/gitcommit"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/repository"
)

// GitCommit is the model entity for the GitCommit schema.
type GitCommit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Branch holds the value of the "branch" field.
	Branch string `json:"branch,omitempty"`
	// Tag holds the value of the "tag" field.
	Tag string `json:"tag,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GitCommitQuery when eager-loading is set.
	Edges                 GitCommitEdges `json:"edges"`
	git_commit_repository *int
}

// GitCommitEdges holds the relations/edges for other nodes in the graph.
type GitCommitEdges struct {
	// Repository holds the value of the repository edge.
	Repository *Repository `json:"repository,omitempty"`
	// Release holds the value of the release edge.
	Release *Release `json:"release,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RepositoryOrErr returns the Repository value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GitCommitEdges) RepositoryOrErr() (*Repository, error) {
	if e.loadedTypes[0] {
		if e.Repository == nil {
			// The edge repository was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: repository.Label}
		}
		return e.Repository, nil
	}
	return nil, &NotLoadedError{edge: "repository"}
}

// ReleaseOrErr returns the Release value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GitCommitEdges) ReleaseOrErr() (*Release, error) {
	if e.loadedTypes[1] {
		if e.Release == nil {
			// The edge release was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: release.Label}
		}
		return e.Release, nil
	}
	return nil, &NotLoadedError{edge: "release"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GitCommit) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case gitcommit.FieldID:
			values[i] = new(sql.NullInt64)
		case gitcommit.FieldHash, gitcommit.FieldBranch, gitcommit.FieldTag:
			values[i] = new(sql.NullString)
		case gitcommit.FieldTime:
			values[i] = new(sql.NullTime)
		case gitcommit.ForeignKeys[0]: // git_commit_repository
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GitCommit", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GitCommit fields.
func (gc *GitCommit) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gitcommit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gc.ID = int(value.Int64)
		case gitcommit.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				gc.Hash = value.String
			}
		case gitcommit.FieldBranch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field branch", values[i])
			} else if value.Valid {
				gc.Branch = value.String
			}
		case gitcommit.FieldTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[i])
			} else if value.Valid {
				gc.Tag = value.String
			}
		case gitcommit.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				gc.Time = value.Time
			}
		case gitcommit.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field git_commit_repository", value)
			} else if value.Valid {
				gc.git_commit_repository = new(int)
				*gc.git_commit_repository = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRepository queries the "repository" edge of the GitCommit entity.
func (gc *GitCommit) QueryRepository() *RepositoryQuery {
	return (&GitCommitClient{config: gc.config}).QueryRepository(gc)
}

// QueryRelease queries the "release" edge of the GitCommit entity.
func (gc *GitCommit) QueryRelease() *ReleaseQuery {
	return (&GitCommitClient{config: gc.config}).QueryRelease(gc)
}

// Update returns a builder for updating this GitCommit.
// Note that you need to call GitCommit.Unwrap() before calling this method if this GitCommit
// was returned from a transaction, and the transaction was committed or rolled back.
func (gc *GitCommit) Update() *GitCommitUpdateOne {
	return (&GitCommitClient{config: gc.config}).UpdateOne(gc)
}

// Unwrap unwraps the GitCommit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gc *GitCommit) Unwrap() *GitCommit {
	tx, ok := gc.config.driver.(*txDriver)
	if !ok {
		panic("ent: GitCommit is not a transactional entity")
	}
	gc.config.driver = tx.drv
	return gc
}

// String implements the fmt.Stringer.
func (gc *GitCommit) String() string {
	var builder strings.Builder
	builder.WriteString("GitCommit(")
	builder.WriteString(fmt.Sprintf("id=%v", gc.ID))
	builder.WriteString(", hash=")
	builder.WriteString(gc.Hash)
	builder.WriteString(", branch=")
	builder.WriteString(gc.Branch)
	builder.WriteString(", tag=")
	builder.WriteString(gc.Tag)
	builder.WriteString(", time=")
	builder.WriteString(gc.Time.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GitCommits is a parsable slice of GitCommit.
type GitCommits []*GitCommit

func (gc GitCommits) config(cfg config) {
	for _i := range gc {
		gc[_i].config = cfg
	}
}
