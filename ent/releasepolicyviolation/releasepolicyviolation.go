// Code generated by entc, DO NOT EDIT.

package releasepolicyviolation

import (
	"fmt"
	"io"
	"strconv"
)

const (
	// Label holds the string label denoting the releasepolicyviolation type in the database.
	Label = "release_policy_violation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldSeverity holds the string denoting the severity field in the database.
	FieldSeverity = "severity"
	// EdgePolicy holds the string denoting the policy edge name in mutations.
	EdgePolicy = "policy"
	// EdgeRelease holds the string denoting the release edge name in mutations.
	EdgeRelease = "release"
	// Table holds the table name of the releasepolicyviolation in the database.
	Table = "release_policy_violation"
	// PolicyTable is the table that holds the policy relation/edge.
	PolicyTable = "release_policy_violation"
	// PolicyInverseTable is the table name for the ReleasePolicy entity.
	// It exists in this package in order to avoid circular dependency with the "releasepolicy" package.
	PolicyInverseTable = "release_policy"
	// PolicyColumn is the table column denoting the policy relation/edge.
	PolicyColumn = "release_policy_violation_policy"
	// ReleaseTable is the table that holds the release relation/edge.
	ReleaseTable = "release_policy_violation"
	// ReleaseInverseTable is the table name for the Release entity.
	// It exists in this package in order to avoid circular dependency with the "release" package.
	ReleaseInverseTable = "release"
	// ReleaseColumn is the table column denoting the release relation/edge.
	ReleaseColumn = "release_policy_violation_release"
)

// Columns holds all SQL columns for releasepolicyviolation fields.
var Columns = []string{
	FieldID,
	FieldMessage,
	FieldType,
	FieldSeverity,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "release_policy_violation"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"release_policy_violation_policy",
	"release_policy_violation_release",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// MessageValidator is a validator for the "message" field. It is called by the builders before save.
var MessageValidator func(string) error

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeRequire Type = "require"
	TypeDeny    Type = "deny"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeRequire, TypeDeny:
		return nil
	default:
		return fmt.Errorf("releasepolicyviolation: invalid enum value for type field: %q", _type)
	}
}

// Severity defines the type for the "severity" enum field.
type Severity string

// Severity values.
const (
	SeveritySuggestion Severity = "suggestion"
	SeverityWarning    Severity = "warning"
	SeverityError      Severity = "error"
	SeverityBlocking   Severity = "blocking"
)

func (s Severity) String() string {
	return string(s)
}

// SeverityValidator is a validator for the "severity" field enum values. It is called by the builders before save.
func SeverityValidator(s Severity) error {
	switch s {
	case SeveritySuggestion, SeverityWarning, SeverityError, SeverityBlocking:
		return nil
	default:
		return fmt.Errorf("releasepolicyviolation: invalid enum value for severity field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_type Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_type.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_type *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_type = Type(str)
	if err := TypeValidator(*_type); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (s Severity) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(s.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (s *Severity) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*s = Severity(str)
	if err := SeverityValidator(*s); err != nil {
		return fmt.Errorf("%s is not a valid Severity", str)
	}
	return nil
}
