// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/artifact"
	"github.com/valocode/bubbly/ent/codescan"
	"github.com/valocode/bubbly/ent/component"
	"github.com/valocode/bubbly/ent/cvescan"
	"github.com/valocode/bubbly/ent/gitcommit"
	"github.com/valocode/bubbly/ent/licensescan"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/project"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasecheck"
	"github.com/valocode/bubbly/ent/releaseentry"
	"github.com/valocode/bubbly/ent/testrun"
)

// ReleaseQuery is the builder for querying Release entities.
type ReleaseQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Release
	// eager-loading edges.
	withSubreleases  *ReleaseQuery
	withDependencies *ReleaseQuery
	withProject      *ProjectQuery
	withCommit       *GitCommitQuery
	withArtifacts    *ArtifactQuery
	withChecks       *ReleaseCheckQuery
	withLog          *ReleaseEntryQuery
	withCodeScans    *CodeScanQuery
	withCveScans     *CVEScanQuery
	withLicenseScans *LicenseScanQuery
	withTestRuns     *TestRunQuery
	withComponents   *ComponentQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ReleaseQuery builder.
func (rq *ReleaseQuery) Where(ps ...predicate.Release) *ReleaseQuery {
	rq.predicates = append(rq.predicates, ps...)
	return rq
}

// Limit adds a limit step to the query.
func (rq *ReleaseQuery) Limit(limit int) *ReleaseQuery {
	rq.limit = &limit
	return rq
}

// Offset adds an offset step to the query.
func (rq *ReleaseQuery) Offset(offset int) *ReleaseQuery {
	rq.offset = &offset
	return rq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rq *ReleaseQuery) Unique(unique bool) *ReleaseQuery {
	rq.unique = &unique
	return rq
}

// Order adds an order step to the query.
func (rq *ReleaseQuery) Order(o ...OrderFunc) *ReleaseQuery {
	rq.order = append(rq.order, o...)
	return rq
}

// QuerySubreleases chains the current query on the "subreleases" edge.
func (rq *ReleaseQuery) QuerySubreleases() *ReleaseQuery {
	query := &ReleaseQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(release.Table, release.FieldID, selector),
			sqlgraph.To(release.Table, release.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, release.SubreleasesTable, release.SubreleasesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDependencies chains the current query on the "dependencies" edge.
func (rq *ReleaseQuery) QueryDependencies() *ReleaseQuery {
	query := &ReleaseQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(release.Table, release.FieldID, selector),
			sqlgraph.To(release.Table, release.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, release.DependenciesTable, release.DependenciesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProject chains the current query on the "project" edge.
func (rq *ReleaseQuery) QueryProject() *ProjectQuery {
	query := &ProjectQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(release.Table, release.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, release.ProjectTable, release.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCommit chains the current query on the "commit" edge.
func (rq *ReleaseQuery) QueryCommit() *GitCommitQuery {
	query := &GitCommitQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(release.Table, release.FieldID, selector),
			sqlgraph.To(gitcommit.Table, gitcommit.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, release.CommitTable, release.CommitColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryArtifacts chains the current query on the "artifacts" edge.
func (rq *ReleaseQuery) QueryArtifacts() *ArtifactQuery {
	query := &ArtifactQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(release.Table, release.FieldID, selector),
			sqlgraph.To(artifact.Table, artifact.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, release.ArtifactsTable, release.ArtifactsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChecks chains the current query on the "checks" edge.
func (rq *ReleaseQuery) QueryChecks() *ReleaseCheckQuery {
	query := &ReleaseCheckQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(release.Table, release.FieldID, selector),
			sqlgraph.To(releasecheck.Table, releasecheck.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, release.ChecksTable, release.ChecksColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLog chains the current query on the "log" edge.
func (rq *ReleaseQuery) QueryLog() *ReleaseEntryQuery {
	query := &ReleaseEntryQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(release.Table, release.FieldID, selector),
			sqlgraph.To(releaseentry.Table, releaseentry.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, release.LogTable, release.LogColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCodeScans chains the current query on the "code_scans" edge.
func (rq *ReleaseQuery) QueryCodeScans() *CodeScanQuery {
	query := &CodeScanQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(release.Table, release.FieldID, selector),
			sqlgraph.To(codescan.Table, codescan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, release.CodeScansTable, release.CodeScansColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCveScans chains the current query on the "cve_scans" edge.
func (rq *ReleaseQuery) QueryCveScans() *CVEScanQuery {
	query := &CVEScanQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(release.Table, release.FieldID, selector),
			sqlgraph.To(cvescan.Table, cvescan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, release.CveScansTable, release.CveScansColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLicenseScans chains the current query on the "license_scans" edge.
func (rq *ReleaseQuery) QueryLicenseScans() *LicenseScanQuery {
	query := &LicenseScanQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(release.Table, release.FieldID, selector),
			sqlgraph.To(licensescan.Table, licensescan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, release.LicenseScansTable, release.LicenseScansColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTestRuns chains the current query on the "test_runs" edge.
func (rq *ReleaseQuery) QueryTestRuns() *TestRunQuery {
	query := &TestRunQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(release.Table, release.FieldID, selector),
			sqlgraph.To(testrun.Table, testrun.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, release.TestRunsTable, release.TestRunsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryComponents chains the current query on the "components" edge.
func (rq *ReleaseQuery) QueryComponents() *ComponentQuery {
	query := &ComponentQuery{config: rq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(release.Table, release.FieldID, selector),
			sqlgraph.To(component.Table, component.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, release.ComponentsTable, release.ComponentsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Release entity from the query.
// Returns a *NotFoundError when no Release was found.
func (rq *ReleaseQuery) First(ctx context.Context) (*Release, error) {
	nodes, err := rq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{release.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rq *ReleaseQuery) FirstX(ctx context.Context) *Release {
	node, err := rq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Release ID from the query.
// Returns a *NotFoundError when no Release ID was found.
func (rq *ReleaseQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{release.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rq *ReleaseQuery) FirstIDX(ctx context.Context) int {
	id, err := rq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Release entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one Release entity is not found.
// Returns a *NotFoundError when no Release entities are found.
func (rq *ReleaseQuery) Only(ctx context.Context) (*Release, error) {
	nodes, err := rq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{release.Label}
	default:
		return nil, &NotSingularError{release.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rq *ReleaseQuery) OnlyX(ctx context.Context) *Release {
	node, err := rq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Release ID in the query.
// Returns a *NotSingularError when exactly one Release ID is not found.
// Returns a *NotFoundError when no entities are found.
func (rq *ReleaseQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{release.Label}
	default:
		err = &NotSingularError{release.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rq *ReleaseQuery) OnlyIDX(ctx context.Context) int {
	id, err := rq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Releases.
func (rq *ReleaseQuery) All(ctx context.Context) ([]*Release, error) {
	if err := rq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rq *ReleaseQuery) AllX(ctx context.Context) []*Release {
	nodes, err := rq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Release IDs.
func (rq *ReleaseQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rq.Select(release.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rq *ReleaseQuery) IDsX(ctx context.Context) []int {
	ids, err := rq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rq *ReleaseQuery) Count(ctx context.Context) (int, error) {
	if err := rq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rq *ReleaseQuery) CountX(ctx context.Context) int {
	count, err := rq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rq *ReleaseQuery) Exist(ctx context.Context) (bool, error) {
	if err := rq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rq *ReleaseQuery) ExistX(ctx context.Context) bool {
	exist, err := rq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ReleaseQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rq *ReleaseQuery) Clone() *ReleaseQuery {
	if rq == nil {
		return nil
	}
	return &ReleaseQuery{
		config:           rq.config,
		limit:            rq.limit,
		offset:           rq.offset,
		order:            append([]OrderFunc{}, rq.order...),
		predicates:       append([]predicate.Release{}, rq.predicates...),
		withSubreleases:  rq.withSubreleases.Clone(),
		withDependencies: rq.withDependencies.Clone(),
		withProject:      rq.withProject.Clone(),
		withCommit:       rq.withCommit.Clone(),
		withArtifacts:    rq.withArtifacts.Clone(),
		withChecks:       rq.withChecks.Clone(),
		withLog:          rq.withLog.Clone(),
		withCodeScans:    rq.withCodeScans.Clone(),
		withCveScans:     rq.withCveScans.Clone(),
		withLicenseScans: rq.withLicenseScans.Clone(),
		withTestRuns:     rq.withTestRuns.Clone(),
		withComponents:   rq.withComponents.Clone(),
		// clone intermediate query.
		sql:  rq.sql.Clone(),
		path: rq.path,
	}
}

// WithSubreleases tells the query-builder to eager-load the nodes that are connected to
// the "subreleases" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *ReleaseQuery) WithSubreleases(opts ...func(*ReleaseQuery)) *ReleaseQuery {
	query := &ReleaseQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withSubreleases = query
	return rq
}

// WithDependencies tells the query-builder to eager-load the nodes that are connected to
// the "dependencies" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *ReleaseQuery) WithDependencies(opts ...func(*ReleaseQuery)) *ReleaseQuery {
	query := &ReleaseQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withDependencies = query
	return rq
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *ReleaseQuery) WithProject(opts ...func(*ProjectQuery)) *ReleaseQuery {
	query := &ProjectQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withProject = query
	return rq
}

// WithCommit tells the query-builder to eager-load the nodes that are connected to
// the "commit" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *ReleaseQuery) WithCommit(opts ...func(*GitCommitQuery)) *ReleaseQuery {
	query := &GitCommitQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withCommit = query
	return rq
}

// WithArtifacts tells the query-builder to eager-load the nodes that are connected to
// the "artifacts" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *ReleaseQuery) WithArtifacts(opts ...func(*ArtifactQuery)) *ReleaseQuery {
	query := &ArtifactQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withArtifacts = query
	return rq
}

// WithChecks tells the query-builder to eager-load the nodes that are connected to
// the "checks" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *ReleaseQuery) WithChecks(opts ...func(*ReleaseCheckQuery)) *ReleaseQuery {
	query := &ReleaseCheckQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withChecks = query
	return rq
}

// WithLog tells the query-builder to eager-load the nodes that are connected to
// the "log" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *ReleaseQuery) WithLog(opts ...func(*ReleaseEntryQuery)) *ReleaseQuery {
	query := &ReleaseEntryQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withLog = query
	return rq
}

// WithCodeScans tells the query-builder to eager-load the nodes that are connected to
// the "code_scans" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *ReleaseQuery) WithCodeScans(opts ...func(*CodeScanQuery)) *ReleaseQuery {
	query := &CodeScanQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withCodeScans = query
	return rq
}

// WithCveScans tells the query-builder to eager-load the nodes that are connected to
// the "cve_scans" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *ReleaseQuery) WithCveScans(opts ...func(*CVEScanQuery)) *ReleaseQuery {
	query := &CVEScanQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withCveScans = query
	return rq
}

// WithLicenseScans tells the query-builder to eager-load the nodes that are connected to
// the "license_scans" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *ReleaseQuery) WithLicenseScans(opts ...func(*LicenseScanQuery)) *ReleaseQuery {
	query := &LicenseScanQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withLicenseScans = query
	return rq
}

// WithTestRuns tells the query-builder to eager-load the nodes that are connected to
// the "test_runs" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *ReleaseQuery) WithTestRuns(opts ...func(*TestRunQuery)) *ReleaseQuery {
	query := &TestRunQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withTestRuns = query
	return rq
}

// WithComponents tells the query-builder to eager-load the nodes that are connected to
// the "components" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *ReleaseQuery) WithComponents(opts ...func(*ComponentQuery)) *ReleaseQuery {
	query := &ComponentQuery{config: rq.config}
	for _, opt := range opts {
		opt(query)
	}
	rq.withComponents = query
	return rq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Release.Query().
//		GroupBy(release.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rq *ReleaseQuery) GroupBy(field string, fields ...string) *ReleaseGroupBy {
	group := &ReleaseGroupBy{config: rq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Release.Query().
//		Select(release.FieldName).
//		Scan(ctx, &v)
//
func (rq *ReleaseQuery) Select(field string, fields ...string) *ReleaseSelect {
	rq.fields = append([]string{field}, fields...)
	return &ReleaseSelect{ReleaseQuery: rq}
}

func (rq *ReleaseQuery) prepareQuery(ctx context.Context) error {
	for _, f := range rq.fields {
		if !release.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rq.path != nil {
		prev, err := rq.path(ctx)
		if err != nil {
			return err
		}
		rq.sql = prev
	}
	return nil
}

func (rq *ReleaseQuery) sqlAll(ctx context.Context) ([]*Release, error) {
	var (
		nodes       = []*Release{}
		withFKs     = rq.withFKs
		_spec       = rq.querySpec()
		loadedTypes = [12]bool{
			rq.withSubreleases != nil,
			rq.withDependencies != nil,
			rq.withProject != nil,
			rq.withCommit != nil,
			rq.withArtifacts != nil,
			rq.withChecks != nil,
			rq.withLog != nil,
			rq.withCodeScans != nil,
			rq.withCveScans != nil,
			rq.withLicenseScans != nil,
			rq.withTestRuns != nil,
			rq.withComponents != nil,
		}
	)
	if rq.withProject != nil || rq.withCommit != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, release.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Release{config: rq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, rq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rq.withSubreleases; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*Release, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Subreleases = []*Release{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*Release)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   release.SubreleasesTable,
				Columns: release.SubreleasesPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(release.SubreleasesPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, rq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "subreleases": %w`, err)
		}
		query.Where(release.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "subreleases" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Subreleases = append(nodes[i].Edges.Subreleases, n)
			}
		}
	}

	if query := rq.withDependencies; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*Release, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Dependencies = []*Release{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*Release)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   release.DependenciesTable,
				Columns: release.DependenciesPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(release.DependenciesPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, rq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "dependencies": %w`, err)
		}
		query.Where(release.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "dependencies" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Dependencies = append(nodes[i].Edges.Dependencies, n)
			}
		}
	}

	if query := rq.withProject; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Release)
		for i := range nodes {
			if nodes[i].release_project == nil {
				continue
			}
			fk := *nodes[i].release_project
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(project.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "release_project" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Project = n
			}
		}
	}

	if query := rq.withCommit; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Release)
		for i := range nodes {
			if nodes[i].git_commit_release == nil {
				continue
			}
			fk := *nodes[i].git_commit_release
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(gitcommit.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "git_commit_release" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Commit = n
			}
		}
	}

	if query := rq.withArtifacts; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Release)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Artifacts = []*Artifact{}
		}
		query.withFKs = true
		query.Where(predicate.Artifact(func(s *sql.Selector) {
			s.Where(sql.InValues(release.ArtifactsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.artifact_release
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "artifact_release" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "artifact_release" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Artifacts = append(node.Edges.Artifacts, n)
		}
	}

	if query := rq.withChecks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Release)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Checks = []*ReleaseCheck{}
		}
		query.withFKs = true
		query.Where(predicate.ReleaseCheck(func(s *sql.Selector) {
			s.Where(sql.InValues(release.ChecksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.release_check_release
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "release_check_release" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "release_check_release" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Checks = append(node.Edges.Checks, n)
		}
	}

	if query := rq.withLog; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Release)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Log = []*ReleaseEntry{}
		}
		query.withFKs = true
		query.Where(predicate.ReleaseEntry(func(s *sql.Selector) {
			s.Where(sql.InValues(release.LogColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.release_entry_release
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "release_entry_release" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "release_entry_release" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Log = append(node.Edges.Log, n)
		}
	}

	if query := rq.withCodeScans; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Release)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.CodeScans = []*CodeScan{}
		}
		query.withFKs = true
		query.Where(predicate.CodeScan(func(s *sql.Selector) {
			s.Where(sql.InValues(release.CodeScansColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.code_scan_release
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "code_scan_release" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "code_scan_release" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.CodeScans = append(node.Edges.CodeScans, n)
		}
	}

	if query := rq.withCveScans; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Release)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.CveScans = []*CVEScan{}
		}
		query.withFKs = true
		query.Where(predicate.CVEScan(func(s *sql.Selector) {
			s.Where(sql.InValues(release.CveScansColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.cve_scan_release
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "cve_scan_release" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "cve_scan_release" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.CveScans = append(node.Edges.CveScans, n)
		}
	}

	if query := rq.withLicenseScans; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Release)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.LicenseScans = []*LicenseScan{}
		}
		query.withFKs = true
		query.Where(predicate.LicenseScan(func(s *sql.Selector) {
			s.Where(sql.InValues(release.LicenseScansColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.license_scan_release
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "license_scan_release" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "license_scan_release" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.LicenseScans = append(node.Edges.LicenseScans, n)
		}
	}

	if query := rq.withTestRuns; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Release)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TestRuns = []*TestRun{}
		}
		query.withFKs = true
		query.Where(predicate.TestRun(func(s *sql.Selector) {
			s.Where(sql.InValues(release.TestRunsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.test_run_release
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "test_run_release" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "test_run_release" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.TestRuns = append(node.Edges.TestRuns, n)
		}
	}

	if query := rq.withComponents; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*Release, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Components = []*Component{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*Release)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   release.ComponentsTable,
				Columns: release.ComponentsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(release.ComponentsPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, rq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "components": %w`, err)
		}
		query.Where(component.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "components" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Components = append(nodes[i].Edges.Components, n)
			}
		}
	}

	return nodes, nil
}

func (rq *ReleaseQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rq.querySpec()
	return sqlgraph.CountNodes(ctx, rq.driver, _spec)
}

func (rq *ReleaseQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (rq *ReleaseQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   release.Table,
			Columns: release.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: release.FieldID,
			},
		},
		From:   rq.sql,
		Unique: true,
	}
	if unique := rq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := rq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, release.FieldID)
		for i := range fields {
			if fields[i] != release.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rq *ReleaseQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rq.driver.Dialect())
	t1 := builder.Table(release.Table)
	columns := rq.fields
	if len(columns) == 0 {
		columns = release.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rq.sql != nil {
		selector = rq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range rq.predicates {
		p(selector)
	}
	for _, p := range rq.order {
		p(selector)
	}
	if offset := rq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ReleaseGroupBy is the group-by builder for Release entities.
type ReleaseGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rgb *ReleaseGroupBy) Aggregate(fns ...AggregateFunc) *ReleaseGroupBy {
	rgb.fns = append(rgb.fns, fns...)
	return rgb
}

// Scan applies the group-by query and scans the result into the given value.
func (rgb *ReleaseGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rgb.path(ctx)
	if err != nil {
		return err
	}
	rgb.sql = query
	return rgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rgb *ReleaseGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (rgb *ReleaseGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rgb.fields) > 1 {
		return nil, errors.New("ent: ReleaseGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rgb *ReleaseGroupBy) StringsX(ctx context.Context) []string {
	v, err := rgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rgb *ReleaseGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{release.Label}
	default:
		err = fmt.Errorf("ent: ReleaseGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rgb *ReleaseGroupBy) StringX(ctx context.Context) string {
	v, err := rgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (rgb *ReleaseGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rgb.fields) > 1 {
		return nil, errors.New("ent: ReleaseGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rgb *ReleaseGroupBy) IntsX(ctx context.Context) []int {
	v, err := rgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rgb *ReleaseGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{release.Label}
	default:
		err = fmt.Errorf("ent: ReleaseGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rgb *ReleaseGroupBy) IntX(ctx context.Context) int {
	v, err := rgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (rgb *ReleaseGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rgb.fields) > 1 {
		return nil, errors.New("ent: ReleaseGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rgb *ReleaseGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rgb *ReleaseGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{release.Label}
	default:
		err = fmt.Errorf("ent: ReleaseGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rgb *ReleaseGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (rgb *ReleaseGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rgb.fields) > 1 {
		return nil, errors.New("ent: ReleaseGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rgb *ReleaseGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rgb *ReleaseGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{release.Label}
	default:
		err = fmt.Errorf("ent: ReleaseGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rgb *ReleaseGroupBy) BoolX(ctx context.Context) bool {
	v, err := rgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rgb *ReleaseGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rgb.fields {
		if !release.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rgb *ReleaseGroupBy) sqlQuery() *sql.Selector {
	selector := rgb.sql.Select()
	aggregation := make([]string, 0, len(rgb.fns))
	for _, fn := range rgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(rgb.fields)+len(rgb.fns))
		for _, f := range rgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(rgb.fields...)...)
}

// ReleaseSelect is the builder for selecting fields of Release entities.
type ReleaseSelect struct {
	*ReleaseQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (rs *ReleaseSelect) Scan(ctx context.Context, v interface{}) error {
	if err := rs.prepareQuery(ctx); err != nil {
		return err
	}
	rs.sql = rs.ReleaseQuery.sqlQuery(ctx)
	return rs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rs *ReleaseSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (rs *ReleaseSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rs.fields) > 1 {
		return nil, errors.New("ent: ReleaseSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rs *ReleaseSelect) StringsX(ctx context.Context) []string {
	v, err := rs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (rs *ReleaseSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{release.Label}
	default:
		err = fmt.Errorf("ent: ReleaseSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rs *ReleaseSelect) StringX(ctx context.Context) string {
	v, err := rs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (rs *ReleaseSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rs.fields) > 1 {
		return nil, errors.New("ent: ReleaseSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rs *ReleaseSelect) IntsX(ctx context.Context) []int {
	v, err := rs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (rs *ReleaseSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{release.Label}
	default:
		err = fmt.Errorf("ent: ReleaseSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rs *ReleaseSelect) IntX(ctx context.Context) int {
	v, err := rs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (rs *ReleaseSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rs.fields) > 1 {
		return nil, errors.New("ent: ReleaseSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rs *ReleaseSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (rs *ReleaseSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{release.Label}
	default:
		err = fmt.Errorf("ent: ReleaseSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rs *ReleaseSelect) Float64X(ctx context.Context) float64 {
	v, err := rs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (rs *ReleaseSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rs.fields) > 1 {
		return nil, errors.New("ent: ReleaseSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rs *ReleaseSelect) BoolsX(ctx context.Context) []bool {
	v, err := rs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (rs *ReleaseSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{release.Label}
	default:
		err = fmt.Errorf("ent: ReleaseSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rs *ReleaseSelect) BoolX(ctx context.Context) bool {
	v, err := rs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rs *ReleaseSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := rs.sql.Query()
	if err := rs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
