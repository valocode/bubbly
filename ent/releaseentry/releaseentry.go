// Code generated by entc, DO NOT EDIT.

package releaseentry

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the releaseentry type in the database.
	Label = "release_entry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// EdgeArtifact holds the string denoting the artifact edge name in mutations.
	EdgeArtifact = "artifact"
	// EdgeCodeScan holds the string denoting the code_scan edge name in mutations.
	EdgeCodeScan = "code_scan"
	// EdgeTestRun holds the string denoting the test_run edge name in mutations.
	EdgeTestRun = "test_run"
	// EdgeCveScan holds the string denoting the cve_scan edge name in mutations.
	EdgeCveScan = "cve_scan"
	// EdgeLicenseScan holds the string denoting the license_scan edge name in mutations.
	EdgeLicenseScan = "license_scan"
	// EdgeRelease holds the string denoting the release edge name in mutations.
	EdgeRelease = "release"
	// Table holds the table name of the releaseentry in the database.
	Table = "release_entry"
	// ArtifactTable is the table the holds the artifact relation/edge.
	ArtifactTable = "artifact"
	// ArtifactInverseTable is the table name for the Artifact entity.
	// It exists in this package in order to avoid circular dependency with the "artifact" package.
	ArtifactInverseTable = "artifact"
	// ArtifactColumn is the table column denoting the artifact relation/edge.
	ArtifactColumn = "release_entry_artifact"
	// CodeScanTable is the table the holds the code_scan relation/edge.
	CodeScanTable = "code_scan"
	// CodeScanInverseTable is the table name for the CodeScan entity.
	// It exists in this package in order to avoid circular dependency with the "codescan" package.
	CodeScanInverseTable = "code_scan"
	// CodeScanColumn is the table column denoting the code_scan relation/edge.
	CodeScanColumn = "release_entry_code_scan"
	// TestRunTable is the table the holds the test_run relation/edge.
	TestRunTable = "test_run"
	// TestRunInverseTable is the table name for the TestRun entity.
	// It exists in this package in order to avoid circular dependency with the "testrun" package.
	TestRunInverseTable = "test_run"
	// TestRunColumn is the table column denoting the test_run relation/edge.
	TestRunColumn = "release_entry_test_run"
	// CveScanTable is the table the holds the cve_scan relation/edge.
	CveScanTable = "cve_scan"
	// CveScanInverseTable is the table name for the CVEScan entity.
	// It exists in this package in order to avoid circular dependency with the "cvescan" package.
	CveScanInverseTable = "cve_scan"
	// CveScanColumn is the table column denoting the cve_scan relation/edge.
	CveScanColumn = "release_entry_cve_scan"
	// LicenseScanTable is the table the holds the license_scan relation/edge.
	LicenseScanTable = "license_scan"
	// LicenseScanInverseTable is the table name for the LicenseScan entity.
	// It exists in this package in order to avoid circular dependency with the "licensescan" package.
	LicenseScanInverseTable = "license_scan"
	// LicenseScanColumn is the table column denoting the license_scan relation/edge.
	LicenseScanColumn = "release_entry_license_scan"
	// ReleaseTable is the table the holds the release relation/edge.
	ReleaseTable = "release_entry"
	// ReleaseInverseTable is the table name for the Release entity.
	// It exists in this package in order to avoid circular dependency with the "release" package.
	ReleaseInverseTable = "release"
	// ReleaseColumn is the table column denoting the release relation/edge.
	ReleaseColumn = "release_entry_release"
)

// Columns holds all SQL columns for releaseentry fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "release_entry"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"release_entry_release",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/valocode/bubbly/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// DefaultTime holds the default value on creation for the "time" field.
	DefaultTime func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeArtifact    Type = "artifact"
	TypeDeploy      Type = "deploy"
	TypeCodeScan    Type = "code_scan"
	TypeLicenseScan Type = "license_scan"
	TypeCveScan     Type = "cve_scan"
	TypeTestRun     Type = "test_run"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeArtifact, TypeDeploy, TypeCodeScan, TypeLicenseScan, TypeCveScan, TypeTestRun:
		return nil
	default:
		return fmt.Errorf("releaseentry: invalid enum value for type field: %q", _type)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_type Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_type.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_type *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_type = Type(str)
	if err := TypeValidator(*_type); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
