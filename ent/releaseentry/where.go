// Code generated by entc, DO NOT EDIT.

package releaseentry

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/valocode/bubbly/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v time.Time) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.ReleaseEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.ReleaseEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v time.Time) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v time.Time) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTime), v))
	})
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...time.Time) predicate.ReleaseEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTime), v...))
	})
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...time.Time) predicate.ReleaseEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTime), v...))
	})
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v time.Time) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTime), v))
	})
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v time.Time) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTime), v))
	})
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v time.Time) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTime), v))
	})
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v time.Time) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTime), v))
	})
}

// HasArtifact applies the HasEdge predicate on the "artifact" edge.
func HasArtifact() predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ArtifactTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ArtifactTable, ArtifactColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArtifactWith applies the HasEdge predicate on the "artifact" edge with a given conditions (other predicates).
func HasArtifactWith(preds ...predicate.Artifact) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ArtifactInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ArtifactTable, ArtifactColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCodeScan applies the HasEdge predicate on the "code_scan" edge.
func HasCodeScan() predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CodeScanTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CodeScanTable, CodeScanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCodeScanWith applies the HasEdge predicate on the "code_scan" edge with a given conditions (other predicates).
func HasCodeScanWith(preds ...predicate.CodeScan) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CodeScanInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CodeScanTable, CodeScanColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTestRun applies the HasEdge predicate on the "test_run" edge.
func HasTestRun() predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TestRunTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, TestRunTable, TestRunColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestRunWith applies the HasEdge predicate on the "test_run" edge with a given conditions (other predicates).
func HasTestRunWith(preds ...predicate.TestRun) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TestRunInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, TestRunTable, TestRunColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCveScan applies the HasEdge predicate on the "cve_scan" edge.
func HasCveScan() predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CveScanTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CveScanTable, CveScanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCveScanWith applies the HasEdge predicate on the "cve_scan" edge with a given conditions (other predicates).
func HasCveScanWith(preds ...predicate.CVEScan) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CveScanInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CveScanTable, CveScanColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLicenseScan applies the HasEdge predicate on the "license_scan" edge.
func HasLicenseScan() predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LicenseScanTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, LicenseScanTable, LicenseScanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLicenseScanWith applies the HasEdge predicate on the "license_scan" edge with a given conditions (other predicates).
func HasLicenseScanWith(preds ...predicate.LicenseScan) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LicenseScanInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, LicenseScanTable, LicenseScanColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRelease applies the HasEdge predicate on the "release" edge.
func HasRelease() predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReleaseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ReleaseTable, ReleaseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReleaseWith applies the HasEdge predicate on the "release" edge with a given conditions (other predicates).
func HasReleaseWith(preds ...predicate.Release) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReleaseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ReleaseTable, ReleaseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReleaseEntry) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReleaseEntry) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReleaseEntry) predicate.ReleaseEntry {
	return predicate.ReleaseEntry(func(s *sql.Selector) {
		p(s.Not())
	})
}
