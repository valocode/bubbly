// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ArtifactColumns holds the columns for the "artifact" table.
	ArtifactColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "sha256", Type: field.TypeString, Size: 2147483647},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"docker", "file"}},
		{Name: "artifact_release", Type: field.TypeInt, Nullable: true},
		{Name: "release_entry_artifact", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// ArtifactTable holds the schema information for the "artifact" table.
	ArtifactTable = &schema.Table{
		Name:       "artifact",
		Columns:    ArtifactColumns,
		PrimaryKey: []*schema.Column{ArtifactColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "artifact_release_release",
				Columns:    []*schema.Column{ArtifactColumns[4]},
				RefColumns: []*schema.Column{ReleaseColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "artifact_release_entry_artifact",
				Columns:    []*schema.Column{ArtifactColumns[5]},
				RefColumns: []*schema.Column{ReleaseEntryColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "artifact_sha256",
				Unique:  true,
				Columns: []*schema.Column{ArtifactColumns[2]},
			},
		},
	}
	// CveColumns holds the columns for the "cve" table.
	CveColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "cve_id", Type: field.TypeString, Size: 2147483647},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "severity_score", Type: field.TypeFloat64, Default: 0},
		{Name: "severity", Type: field.TypeEnum, Enums: []string{"None", "Low", "Medium", "High", "Critical"}, Default: "None"},
		{Name: "published_data", Type: field.TypeTime, Nullable: true},
		{Name: "modified_data", Type: field.TypeTime, Nullable: true},
	}
	// CveTable holds the schema information for the "cve" table.
	CveTable = &schema.Table{
		Name:       "cve",
		Columns:    CveColumns,
		PrimaryKey: []*schema.Column{CveColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "cve_cve_id",
				Unique:  true,
				Columns: []*schema.Column{CveColumns[1]},
			},
		},
	}
	// CveRuleColumns holds the columns for the "cve_rule" table.
	CveRuleColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "cve_rule_cve", Type: field.TypeInt, Nullable: true},
	}
	// CveRuleTable holds the schema information for the "cve_rule" table.
	CveRuleTable = &schema.Table{
		Name:       "cve_rule",
		Columns:    CveRuleColumns,
		PrimaryKey: []*schema.Column{CveRuleColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cve_rule_cve_cve",
				Columns:    []*schema.Column{CveRuleColumns[2]},
				RefColumns: []*schema.Column{CveColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CveScanColumns holds the columns for the "cve_scan" table.
	CveScanColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tool", Type: field.TypeString, Size: 2147483647},
		{Name: "cve_scan_release", Type: field.TypeInt, Nullable: true},
		{Name: "release_entry_cve_scan", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// CveScanTable holds the schema information for the "cve_scan" table.
	CveScanTable = &schema.Table{
		Name:       "cve_scan",
		Columns:    CveScanColumns,
		PrimaryKey: []*schema.Column{CveScanColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cve_scan_release_release",
				Columns:    []*schema.Column{CveScanColumns[2]},
				RefColumns: []*schema.Column{ReleaseColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "cve_scan_release_entry_cve_scan",
				Columns:    []*schema.Column{CveScanColumns[3]},
				RefColumns: []*schema.Column{ReleaseEntryColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CweColumns holds the columns for the "cwe" table.
	CweColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "cwe_id", Type: field.TypeString, Size: 2147483647},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "url", Type: field.TypeFloat64, Nullable: true},
	}
	// CweTable holds the schema information for the "cwe" table.
	CweTable = &schema.Table{
		Name:       "cwe",
		Columns:    CweColumns,
		PrimaryKey: []*schema.Column{CweColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "cwe_cwe_id",
				Unique:  true,
				Columns: []*schema.Column{CweColumns[1]},
			},
		},
	}
	// CodeIssueColumns holds the columns for the "code_issue" table.
	CodeIssueColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "rule_id", Type: field.TypeString, Size: 2147483647},
		{Name: "message", Type: field.TypeString, Size: 2147483647},
		{Name: "severity", Type: field.TypeEnum, Enums: []string{"low", "medium", "high"}},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"style", "security", "bug"}},
		{Name: "code_issue_scan", Type: field.TypeInt, Nullable: true},
	}
	// CodeIssueTable holds the schema information for the "code_issue" table.
	CodeIssueTable = &schema.Table{
		Name:       "code_issue",
		Columns:    CodeIssueColumns,
		PrimaryKey: []*schema.Column{CodeIssueColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "code_issue_code_scan_scan",
				Columns:    []*schema.Column{CodeIssueColumns[5]},
				RefColumns: []*schema.Column{CodeScanColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CodeScanColumns holds the columns for the "code_scan" table.
	CodeScanColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tool", Type: field.TypeString, Size: 2147483647},
		{Name: "code_scan_release", Type: field.TypeInt, Nullable: true},
		{Name: "release_entry_code_scan", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// CodeScanTable holds the schema information for the "code_scan" table.
	CodeScanTable = &schema.Table{
		Name:       "code_scan",
		Columns:    CodeScanColumns,
		PrimaryKey: []*schema.Column{CodeScanColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "code_scan_release_release",
				Columns:    []*schema.Column{CodeScanColumns[2]},
				RefColumns: []*schema.Column{ReleaseColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "code_scan_release_entry_code_scan",
				Columns:    []*schema.Column{CodeScanColumns[3]},
				RefColumns: []*schema.Column{ReleaseEntryColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ComponentColumns holds the columns for the "component" table.
	ComponentColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "vendor", Type: field.TypeString, Size: 2147483647},
		{Name: "version", Type: field.TypeString, Size: 2147483647},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "url", Type: field.TypeString, Size: 2147483647},
	}
	// ComponentTable holds the schema information for the "component" table.
	ComponentTable = &schema.Table{
		Name:       "component",
		Columns:    ComponentColumns,
		PrimaryKey: []*schema.Column{ComponentColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "component_name_vendor_version",
				Unique:  true,
				Columns: []*schema.Column{ComponentColumns[1], ComponentColumns[2], ComponentColumns[3]},
			},
		},
	}
	// CommitColumns holds the columns for the "commit" table.
	CommitColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hash", Type: field.TypeString, Size: 2147483647},
		{Name: "branch", Type: field.TypeString, Size: 2147483647},
		{Name: "tag", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "time", Type: field.TypeTime},
		{Name: "git_commit_repo", Type: field.TypeInt, Nullable: true},
	}
	// CommitTable holds the schema information for the "commit" table.
	CommitTable = &schema.Table{
		Name:       "commit",
		Columns:    CommitColumns,
		PrimaryKey: []*schema.Column{CommitColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "commit_repo_repo",
				Columns:    []*schema.Column{CommitColumns[5]},
				RefColumns: []*schema.Column{RepoColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "gitcommit_hash_git_commit_repo",
				Unique:  true,
				Columns: []*schema.Column{CommitColumns[1], CommitColumns[5]},
			},
		},
	}
	// LicenseColumns holds the columns for the "license" table.
	LicenseColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "spdx_id", Type: field.TypeString, Size: 2147483647},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "reference", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "details_url", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "is_osi_approved", Type: field.TypeBool, Default: false},
	}
	// LicenseTable holds the schema information for the "license" table.
	LicenseTable = &schema.Table{
		Name:       "license",
		Columns:    LicenseColumns,
		PrimaryKey: []*schema.Column{LicenseColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "license_spdx_id",
				Unique:  true,
				Columns: []*schema.Column{LicenseColumns[1]},
			},
		},
	}
	// LicenseScanColumns holds the columns for the "license_scan" table.
	LicenseScanColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tool", Type: field.TypeString, Size: 2147483647},
		{Name: "license_scan_release", Type: field.TypeInt, Nullable: true},
		{Name: "release_entry_license_scan", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// LicenseScanTable holds the schema information for the "license_scan" table.
	LicenseScanTable = &schema.Table{
		Name:       "license_scan",
		Columns:    LicenseScanColumns,
		PrimaryKey: []*schema.Column{LicenseScanColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "license_scan_release_release",
				Columns:    []*schema.Column{LicenseScanColumns[2]},
				RefColumns: []*schema.Column{ReleaseColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "license_scan_release_entry_license_scan",
				Columns:    []*schema.Column{LicenseScanColumns[3]},
				RefColumns: []*schema.Column{ReleaseEntryColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// LicenseUsageColumns holds the columns for the "license_usage" table.
	LicenseUsageColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "license_usage_license", Type: field.TypeInt, Nullable: true},
		{Name: "license_usage_scan", Type: field.TypeInt, Nullable: true},
	}
	// LicenseUsageTable holds the schema information for the "license_usage" table.
	LicenseUsageTable = &schema.Table{
		Name:       "license_usage",
		Columns:    LicenseUsageColumns,
		PrimaryKey: []*schema.Column{LicenseUsageColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "license_usage_license_license",
				Columns:    []*schema.Column{LicenseUsageColumns[1]},
				RefColumns: []*schema.Column{LicenseColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "license_usage_license_scan_scan",
				Columns:    []*schema.Column{LicenseUsageColumns[2]},
				RefColumns: []*schema.Column{LicenseScanColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProjectColumns holds the columns for the "project" table.
	ProjectColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
	}
	// ProjectTable holds the schema information for the "project" table.
	ProjectTable = &schema.Table{
		Name:       "project",
		Columns:    ProjectColumns,
		PrimaryKey: []*schema.Column{ProjectColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "project_name",
				Unique:  true,
				Columns: []*schema.Column{ProjectColumns[1]},
			},
		},
	}
	// ReleaseColumns holds the columns for the "release" table.
	ReleaseColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "version", Type: field.TypeString, Size: 2147483647},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "ready", "blocked"}, Default: "pending"},
		{Name: "git_commit_release", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "release_project", Type: field.TypeInt, Nullable: true},
	}
	// ReleaseTable holds the schema information for the "release" table.
	ReleaseTable = &schema.Table{
		Name:       "release",
		Columns:    ReleaseColumns,
		PrimaryKey: []*schema.Column{ReleaseColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "release_commit_release",
				Columns:    []*schema.Column{ReleaseColumns[4]},
				RefColumns: []*schema.Column{CommitColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "release_project_project",
				Columns:    []*schema.Column{ReleaseColumns[5]},
				RefColumns: []*schema.Column{ProjectColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "release_name_version_release_project_git_commit_release",
				Unique:  true,
				Columns: []*schema.Column{ReleaseColumns[1], ReleaseColumns[2], ReleaseColumns[5], ReleaseColumns[4]},
			},
		},
	}
	// ReleaseCheckColumns holds the columns for the "release_check" table.
	ReleaseCheckColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"artifact", "unit_test", "security"}},
		{Name: "release_check_release", Type: field.TypeInt, Nullable: true},
	}
	// ReleaseCheckTable holds the schema information for the "release_check" table.
	ReleaseCheckTable = &schema.Table{
		Name:       "release_check",
		Columns:    ReleaseCheckColumns,
		PrimaryKey: []*schema.Column{ReleaseCheckColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "release_check_release_release",
				Columns:    []*schema.Column{ReleaseCheckColumns[2]},
				RefColumns: []*schema.Column{ReleaseColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "releasecheck_type_release_check_release",
				Unique:  true,
				Columns: []*schema.Column{ReleaseCheckColumns[1], ReleaseCheckColumns[2]},
			},
		},
	}
	// ReleaseEntryColumns holds the columns for the "release_entry" table.
	ReleaseEntryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"artifact", "deploy", "code_scan", "license_scan", "cve_scan", "test_run"}},
		{Name: "time", Type: field.TypeTime},
		{Name: "release_entry_release", Type: field.TypeInt, Nullable: true},
	}
	// ReleaseEntryTable holds the schema information for the "release_entry" table.
	ReleaseEntryTable = &schema.Table{
		Name:       "release_entry",
		Columns:    ReleaseEntryColumns,
		PrimaryKey: []*schema.Column{ReleaseEntryColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "release_entry_release_release",
				Columns:    []*schema.Column{ReleaseEntryColumns[3]},
				RefColumns: []*schema.Column{ReleaseColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RepoColumns holds the columns for the "repo" table.
	RepoColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "repo_project", Type: field.TypeInt, Nullable: true},
	}
	// RepoTable holds the schema information for the "repo" table.
	RepoTable = &schema.Table{
		Name:       "repo",
		Columns:    RepoColumns,
		PrimaryKey: []*schema.Column{RepoColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "repo_project_project",
				Columns:    []*schema.Column{RepoColumns[2]},
				RefColumns: []*schema.Column{ProjectColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "repo_name",
				Unique:  true,
				Columns: []*schema.Column{RepoColumns[1]},
			},
		},
	}
	// TestCaseColumns holds the columns for the "test_case" table.
	TestCaseColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "result", Type: field.TypeBool},
		{Name: "message", Type: field.TypeString, Size: 2147483647},
		{Name: "elapsed", Type: field.TypeFloat64, Default: 0},
		{Name: "test_case_run", Type: field.TypeInt, Nullable: true},
	}
	// TestCaseTable holds the schema information for the "test_case" table.
	TestCaseTable = &schema.Table{
		Name:       "test_case",
		Columns:    TestCaseColumns,
		PrimaryKey: []*schema.Column{TestCaseColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "test_case_test_run_run",
				Columns:    []*schema.Column{TestCaseColumns[5]},
				RefColumns: []*schema.Column{TestRunColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TestRunColumns holds the columns for the "test_run" table.
	TestRunColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tool", Type: field.TypeString, Size: 2147483647},
		{Name: "release_entry_test_run", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "test_run_release", Type: field.TypeInt, Nullable: true},
	}
	// TestRunTable holds the schema information for the "test_run" table.
	TestRunTable = &schema.Table{
		Name:       "test_run",
		Columns:    TestRunColumns,
		PrimaryKey: []*schema.Column{TestRunColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "test_run_release_entry_test_run",
				Columns:    []*schema.Column{TestRunColumns[2]},
				RefColumns: []*schema.Column{ReleaseEntryColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "test_run_release_release",
				Columns:    []*schema.Column{TestRunColumns[3]},
				RefColumns: []*schema.Column{ReleaseColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// VulnerabilityColumns holds the columns for the "vulnerability" table.
	VulnerabilityColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "component_vulnerabilities", Type: field.TypeInt, Nullable: true},
		{Name: "vulnerability_cve", Type: field.TypeInt, Nullable: true},
		{Name: "vulnerability_scan", Type: field.TypeInt, Nullable: true},
	}
	// VulnerabilityTable holds the schema information for the "vulnerability" table.
	VulnerabilityTable = &schema.Table{
		Name:       "vulnerability",
		Columns:    VulnerabilityColumns,
		PrimaryKey: []*schema.Column{VulnerabilityColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "vulnerability_component_vulnerabilities",
				Columns:    []*schema.Column{VulnerabilityColumns[1]},
				RefColumns: []*schema.Column{ComponentColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "vulnerability_cve_cve",
				Columns:    []*schema.Column{VulnerabilityColumns[2]},
				RefColumns: []*schema.Column{CveColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "vulnerability_cve_scan_scan",
				Columns:    []*schema.Column{VulnerabilityColumns[3]},
				RefColumns: []*schema.Column{CveScanColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "vulnerability_vulnerability_cve_vulnerability_scan",
				Unique:  true,
				Columns: []*schema.Column{VulnerabilityColumns[2], VulnerabilityColumns[3]},
			},
		},
	}
	// CveRuleProjectColumns holds the columns for the "cve_rule_project" table.
	CveRuleProjectColumns = []*schema.Column{
		{Name: "cve_rule_id", Type: field.TypeInt},
		{Name: "project_id", Type: field.TypeInt},
	}
	// CveRuleProjectTable holds the schema information for the "cve_rule_project" table.
	CveRuleProjectTable = &schema.Table{
		Name:       "cve_rule_project",
		Columns:    CveRuleProjectColumns,
		PrimaryKey: []*schema.Column{CveRuleProjectColumns[0], CveRuleProjectColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cve_rule_project_cve_rule_id",
				Columns:    []*schema.Column{CveRuleProjectColumns[0]},
				RefColumns: []*schema.Column{CveRuleColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "cve_rule_project_project_id",
				Columns:    []*schema.Column{CveRuleProjectColumns[1]},
				RefColumns: []*schema.Column{ProjectColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// CveRuleRepoColumns holds the columns for the "cve_rule_repo" table.
	CveRuleRepoColumns = []*schema.Column{
		{Name: "cve_rule_id", Type: field.TypeInt},
		{Name: "repo_id", Type: field.TypeInt},
	}
	// CveRuleRepoTable holds the schema information for the "cve_rule_repo" table.
	CveRuleRepoTable = &schema.Table{
		Name:       "cve_rule_repo",
		Columns:    CveRuleRepoColumns,
		PrimaryKey: []*schema.Column{CveRuleRepoColumns[0], CveRuleRepoColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cve_rule_repo_cve_rule_id",
				Columns:    []*schema.Column{CveRuleRepoColumns[0]},
				RefColumns: []*schema.Column{CveRuleColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "cve_rule_repo_repo_id",
				Columns:    []*schema.Column{CveRuleRepoColumns[1]},
				RefColumns: []*schema.Column{RepoColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// CodeIssueCweColumns holds the columns for the "code_issue_cwe" table.
	CodeIssueCweColumns = []*schema.Column{
		{Name: "code_issue_id", Type: field.TypeInt},
		{Name: "cwe_id", Type: field.TypeInt},
	}
	// CodeIssueCweTable holds the schema information for the "code_issue_cwe" table.
	CodeIssueCweTable = &schema.Table{
		Name:       "code_issue_cwe",
		Columns:    CodeIssueCweColumns,
		PrimaryKey: []*schema.Column{CodeIssueCweColumns[0], CodeIssueCweColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "code_issue_cwe_code_issue_id",
				Columns:    []*schema.Column{CodeIssueCweColumns[0]},
				RefColumns: []*schema.Column{CodeIssueColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "code_issue_cwe_cwe_id",
				Columns:    []*schema.Column{CodeIssueCweColumns[1]},
				RefColumns: []*schema.Column{CweColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ComponentLicensesColumns holds the columns for the "component_licenses" table.
	ComponentLicensesColumns = []*schema.Column{
		{Name: "component_id", Type: field.TypeInt},
		{Name: "license_id", Type: field.TypeInt},
	}
	// ComponentLicensesTable holds the schema information for the "component_licenses" table.
	ComponentLicensesTable = &schema.Table{
		Name:       "component_licenses",
		Columns:    ComponentLicensesColumns,
		PrimaryKey: []*schema.Column{ComponentLicensesColumns[0], ComponentLicensesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "component_licenses_component_id",
				Columns:    []*schema.Column{ComponentLicensesColumns[0]},
				RefColumns: []*schema.Column{ComponentColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "component_licenses_license_id",
				Columns:    []*schema.Column{ComponentLicensesColumns[1]},
				RefColumns: []*schema.Column{LicenseColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ComponentReleaseColumns holds the columns for the "component_release" table.
	ComponentReleaseColumns = []*schema.Column{
		{Name: "component_id", Type: field.TypeInt},
		{Name: "release_id", Type: field.TypeInt},
	}
	// ComponentReleaseTable holds the schema information for the "component_release" table.
	ComponentReleaseTable = &schema.Table{
		Name:       "component_release",
		Columns:    ComponentReleaseColumns,
		PrimaryKey: []*schema.Column{ComponentReleaseColumns[0], ComponentReleaseColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "component_release_component_id",
				Columns:    []*schema.Column{ComponentReleaseColumns[0]},
				RefColumns: []*schema.Column{ComponentColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "component_release_release_id",
				Columns:    []*schema.Column{ComponentReleaseColumns[1]},
				RefColumns: []*schema.Column{ReleaseColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ReleaseDependenciesColumns holds the columns for the "release_dependencies" table.
	ReleaseDependenciesColumns = []*schema.Column{
		{Name: "release_id", Type: field.TypeInt},
		{Name: "subrelease_id", Type: field.TypeInt},
	}
	// ReleaseDependenciesTable holds the schema information for the "release_dependencies" table.
	ReleaseDependenciesTable = &schema.Table{
		Name:       "release_dependencies",
		Columns:    ReleaseDependenciesColumns,
		PrimaryKey: []*schema.Column{ReleaseDependenciesColumns[0], ReleaseDependenciesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "release_dependencies_release_id",
				Columns:    []*schema.Column{ReleaseDependenciesColumns[0]},
				RefColumns: []*schema.Column{ReleaseColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "release_dependencies_subrelease_id",
				Columns:    []*schema.Column{ReleaseDependenciesColumns[1]},
				RefColumns: []*schema.Column{ReleaseColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ArtifactTable,
		CveTable,
		CveRuleTable,
		CveScanTable,
		CweTable,
		CodeIssueTable,
		CodeScanTable,
		ComponentTable,
		CommitTable,
		LicenseTable,
		LicenseScanTable,
		LicenseUsageTable,
		ProjectTable,
		ReleaseTable,
		ReleaseCheckTable,
		ReleaseEntryTable,
		RepoTable,
		TestCaseTable,
		TestRunTable,
		VulnerabilityTable,
		CveRuleProjectTable,
		CveRuleRepoTable,
		CodeIssueCweTable,
		ComponentLicensesTable,
		ComponentReleaseTable,
		ReleaseDependenciesTable,
	}
)

func init() {
	ArtifactTable.ForeignKeys[0].RefTable = ReleaseTable
	ArtifactTable.ForeignKeys[1].RefTable = ReleaseEntryTable
	ArtifactTable.Annotation = &entsql.Annotation{
		Table: "artifact",
	}
	CveTable.Annotation = &entsql.Annotation{
		Table: "cve",
	}
	CveRuleTable.ForeignKeys[0].RefTable = CveTable
	CveRuleTable.Annotation = &entsql.Annotation{
		Table: "cve_rule",
	}
	CveScanTable.ForeignKeys[0].RefTable = ReleaseTable
	CveScanTable.ForeignKeys[1].RefTable = ReleaseEntryTable
	CveScanTable.Annotation = &entsql.Annotation{
		Table: "cve_scan",
	}
	CweTable.Annotation = &entsql.Annotation{
		Table: "cwe",
	}
	CodeIssueTable.ForeignKeys[0].RefTable = CodeScanTable
	CodeIssueTable.Annotation = &entsql.Annotation{
		Table: "code_issue",
	}
	CodeScanTable.ForeignKeys[0].RefTable = ReleaseTable
	CodeScanTable.ForeignKeys[1].RefTable = ReleaseEntryTable
	CodeScanTable.Annotation = &entsql.Annotation{
		Table: "code_scan",
	}
	ComponentTable.Annotation = &entsql.Annotation{
		Table: "component",
	}
	CommitTable.ForeignKeys[0].RefTable = RepoTable
	CommitTable.Annotation = &entsql.Annotation{
		Table: "commit",
	}
	LicenseTable.Annotation = &entsql.Annotation{
		Table: "license",
	}
	LicenseScanTable.ForeignKeys[0].RefTable = ReleaseTable
	LicenseScanTable.ForeignKeys[1].RefTable = ReleaseEntryTable
	LicenseScanTable.Annotation = &entsql.Annotation{
		Table: "license_scan",
	}
	LicenseUsageTable.ForeignKeys[0].RefTable = LicenseTable
	LicenseUsageTable.ForeignKeys[1].RefTable = LicenseScanTable
	LicenseUsageTable.Annotation = &entsql.Annotation{
		Table: "license_usage",
	}
	ProjectTable.Annotation = &entsql.Annotation{
		Table: "project",
	}
	ReleaseTable.ForeignKeys[0].RefTable = CommitTable
	ReleaseTable.ForeignKeys[1].RefTable = ProjectTable
	ReleaseTable.Annotation = &entsql.Annotation{
		Table: "release",
	}
	ReleaseCheckTable.ForeignKeys[0].RefTable = ReleaseTable
	ReleaseCheckTable.Annotation = &entsql.Annotation{
		Table: "release_check",
	}
	ReleaseEntryTable.ForeignKeys[0].RefTable = ReleaseTable
	ReleaseEntryTable.Annotation = &entsql.Annotation{
		Table: "release_entry",
	}
	RepoTable.ForeignKeys[0].RefTable = ProjectTable
	RepoTable.Annotation = &entsql.Annotation{
		Table: "repo",
	}
	TestCaseTable.ForeignKeys[0].RefTable = TestRunTable
	TestCaseTable.Annotation = &entsql.Annotation{
		Table: "test_case",
	}
	TestRunTable.ForeignKeys[0].RefTable = ReleaseEntryTable
	TestRunTable.ForeignKeys[1].RefTable = ReleaseTable
	TestRunTable.Annotation = &entsql.Annotation{
		Table: "test_run",
	}
	VulnerabilityTable.ForeignKeys[0].RefTable = ComponentTable
	VulnerabilityTable.ForeignKeys[1].RefTable = CveTable
	VulnerabilityTable.ForeignKeys[2].RefTable = CveScanTable
	VulnerabilityTable.Annotation = &entsql.Annotation{
		Table: "vulnerability",
	}
	CveRuleProjectTable.ForeignKeys[0].RefTable = CveRuleTable
	CveRuleProjectTable.ForeignKeys[1].RefTable = ProjectTable
	CveRuleRepoTable.ForeignKeys[0].RefTable = CveRuleTable
	CveRuleRepoTable.ForeignKeys[1].RefTable = RepoTable
	CodeIssueCweTable.ForeignKeys[0].RefTable = CodeIssueTable
	CodeIssueCweTable.ForeignKeys[1].RefTable = CweTable
	ComponentLicensesTable.ForeignKeys[0].RefTable = ComponentTable
	ComponentLicensesTable.ForeignKeys[1].RefTable = LicenseTable
	ComponentReleaseTable.ForeignKeys[0].RefTable = ComponentTable
	ComponentReleaseTable.ForeignKeys[1].RefTable = ReleaseTable
	ReleaseDependenciesTable.ForeignKeys[0].RefTable = ReleaseTable
	ReleaseDependenciesTable.ForeignKeys[1].RefTable = ReleaseTable
}
