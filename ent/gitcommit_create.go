// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/gitcommit"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/repo"
)

// GitCommitCreate is the builder for creating a GitCommit entity.
type GitCommitCreate struct {
	config
	mutation *GitCommitMutation
	hooks    []Hook
}

// SetHash sets the "hash" field.
func (gcc *GitCommitCreate) SetHash(s string) *GitCommitCreate {
	gcc.mutation.SetHash(s)
	return gcc
}

// SetBranch sets the "branch" field.
func (gcc *GitCommitCreate) SetBranch(s string) *GitCommitCreate {
	gcc.mutation.SetBranch(s)
	return gcc
}

// SetTag sets the "tag" field.
func (gcc *GitCommitCreate) SetTag(s string) *GitCommitCreate {
	gcc.mutation.SetTag(s)
	return gcc
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (gcc *GitCommitCreate) SetNillableTag(s *string) *GitCommitCreate {
	if s != nil {
		gcc.SetTag(*s)
	}
	return gcc
}

// SetTime sets the "time" field.
func (gcc *GitCommitCreate) SetTime(t time.Time) *GitCommitCreate {
	gcc.mutation.SetTime(t)
	return gcc
}

// SetRepoID sets the "repo" edge to the Repo entity by ID.
func (gcc *GitCommitCreate) SetRepoID(id int) *GitCommitCreate {
	gcc.mutation.SetRepoID(id)
	return gcc
}

// SetRepo sets the "repo" edge to the Repo entity.
func (gcc *GitCommitCreate) SetRepo(r *Repo) *GitCommitCreate {
	return gcc.SetRepoID(r.ID)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (gcc *GitCommitCreate) SetReleaseID(id int) *GitCommitCreate {
	gcc.mutation.SetReleaseID(id)
	return gcc
}

// SetNillableReleaseID sets the "release" edge to the Release entity by ID if the given value is not nil.
func (gcc *GitCommitCreate) SetNillableReleaseID(id *int) *GitCommitCreate {
	if id != nil {
		gcc = gcc.SetReleaseID(*id)
	}
	return gcc
}

// SetRelease sets the "release" edge to the Release entity.
func (gcc *GitCommitCreate) SetRelease(r *Release) *GitCommitCreate {
	return gcc.SetReleaseID(r.ID)
}

// Mutation returns the GitCommitMutation object of the builder.
func (gcc *GitCommitCreate) Mutation() *GitCommitMutation {
	return gcc.mutation
}

// Save creates the GitCommit in the database.
func (gcc *GitCommitCreate) Save(ctx context.Context) (*GitCommit, error) {
	var (
		err  error
		node *GitCommit
	)
	if len(gcc.hooks) == 0 {
		if err = gcc.check(); err != nil {
			return nil, err
		}
		node, err = gcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GitCommitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gcc.check(); err != nil {
				return nil, err
			}
			gcc.mutation = mutation
			if node, err = gcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gcc.hooks) - 1; i >= 0; i-- {
			mut = gcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gcc *GitCommitCreate) SaveX(ctx context.Context) *GitCommit {
	v, err := gcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (gcc *GitCommitCreate) check() error {
	if _, ok := gcc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New("ent: missing required field \"hash\"")}
	}
	if v, ok := gcc.mutation.Hash(); ok {
		if err := gitcommit.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf("ent: validator failed for field \"hash\": %w", err)}
		}
	}
	if _, ok := gcc.mutation.Branch(); !ok {
		return &ValidationError{Name: "branch", err: errors.New("ent: missing required field \"branch\"")}
	}
	if v, ok := gcc.mutation.Branch(); ok {
		if err := gitcommit.BranchValidator(v); err != nil {
			return &ValidationError{Name: "branch", err: fmt.Errorf("ent: validator failed for field \"branch\": %w", err)}
		}
	}
	if _, ok := gcc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New("ent: missing required field \"time\"")}
	}
	if _, ok := gcc.mutation.RepoID(); !ok {
		return &ValidationError{Name: "repo", err: errors.New("ent: missing required edge \"repo\"")}
	}
	return nil
}

func (gcc *GitCommitCreate) sqlSave(ctx context.Context) (*GitCommit, error) {
	_node, _spec := gcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (gcc *GitCommitCreate) createSpec() (*GitCommit, *sqlgraph.CreateSpec) {
	var (
		_node = &GitCommit{config: gcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: gitcommit.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: gitcommit.FieldID,
			},
		}
	)
	if value, ok := gcc.mutation.Hash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gitcommit.FieldHash,
		})
		_node.Hash = value
	}
	if value, ok := gcc.mutation.Branch(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gitcommit.FieldBranch,
		})
		_node.Branch = value
	}
	if value, ok := gcc.mutation.Tag(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gitcommit.FieldTag,
		})
		_node.Tag = value
	}
	if value, ok := gcc.mutation.Time(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: gitcommit.FieldTime,
		})
		_node.Time = value
	}
	if nodes := gcc.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gitcommit.RepoTable,
			Columns: []string{gitcommit.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.git_commit_repo = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gcc.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   gitcommit.ReleaseTable,
			Columns: []string{gitcommit.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GitCommitCreateBulk is the builder for creating many GitCommit entities in bulk.
type GitCommitCreateBulk struct {
	config
	builders []*GitCommitCreate
}

// Save creates the GitCommit entities in the database.
func (gccb *GitCommitCreateBulk) Save(ctx context.Context) ([]*GitCommit, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gccb.builders))
	nodes := make([]*GitCommit, len(gccb.builders))
	mutators := make([]Mutator, len(gccb.builders))
	for i := range gccb.builders {
		func(i int, root context.Context) {
			builder := gccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GitCommitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gccb *GitCommitCreateBulk) SaveX(ctx context.Context) []*GitCommit {
	v, err := gccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
