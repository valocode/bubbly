// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/artifact"
	"github.com/valocode/bubbly/ent/codescan"
	"github.com/valocode/bubbly/ent/cvescan"
	"github.com/valocode/bubbly/ent/licensescan"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releaseentry"
	"github.com/valocode/bubbly/ent/testrun"
)

// ReleaseEntryCreate is the builder for creating a ReleaseEntry entity.
type ReleaseEntryCreate struct {
	config
	mutation *ReleaseEntryMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (rec *ReleaseEntryCreate) SetType(r releaseentry.Type) *ReleaseEntryCreate {
	rec.mutation.SetType(r)
	return rec
}

// SetTime sets the "time" field.
func (rec *ReleaseEntryCreate) SetTime(t time.Time) *ReleaseEntryCreate {
	rec.mutation.SetTime(t)
	return rec
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (rec *ReleaseEntryCreate) SetNillableTime(t *time.Time) *ReleaseEntryCreate {
	if t != nil {
		rec.SetTime(*t)
	}
	return rec
}

// SetArtifactID sets the "artifact" edge to the Artifact entity by ID.
func (rec *ReleaseEntryCreate) SetArtifactID(id int) *ReleaseEntryCreate {
	rec.mutation.SetArtifactID(id)
	return rec
}

// SetNillableArtifactID sets the "artifact" edge to the Artifact entity by ID if the given value is not nil.
func (rec *ReleaseEntryCreate) SetNillableArtifactID(id *int) *ReleaseEntryCreate {
	if id != nil {
		rec = rec.SetArtifactID(*id)
	}
	return rec
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (rec *ReleaseEntryCreate) SetArtifact(a *Artifact) *ReleaseEntryCreate {
	return rec.SetArtifactID(a.ID)
}

// SetCodeScanID sets the "code_scan" edge to the CodeScan entity by ID.
func (rec *ReleaseEntryCreate) SetCodeScanID(id int) *ReleaseEntryCreate {
	rec.mutation.SetCodeScanID(id)
	return rec
}

// SetNillableCodeScanID sets the "code_scan" edge to the CodeScan entity by ID if the given value is not nil.
func (rec *ReleaseEntryCreate) SetNillableCodeScanID(id *int) *ReleaseEntryCreate {
	if id != nil {
		rec = rec.SetCodeScanID(*id)
	}
	return rec
}

// SetCodeScan sets the "code_scan" edge to the CodeScan entity.
func (rec *ReleaseEntryCreate) SetCodeScan(c *CodeScan) *ReleaseEntryCreate {
	return rec.SetCodeScanID(c.ID)
}

// SetTestRunID sets the "test_run" edge to the TestRun entity by ID.
func (rec *ReleaseEntryCreate) SetTestRunID(id int) *ReleaseEntryCreate {
	rec.mutation.SetTestRunID(id)
	return rec
}

// SetNillableTestRunID sets the "test_run" edge to the TestRun entity by ID if the given value is not nil.
func (rec *ReleaseEntryCreate) SetNillableTestRunID(id *int) *ReleaseEntryCreate {
	if id != nil {
		rec = rec.SetTestRunID(*id)
	}
	return rec
}

// SetTestRun sets the "test_run" edge to the TestRun entity.
func (rec *ReleaseEntryCreate) SetTestRun(t *TestRun) *ReleaseEntryCreate {
	return rec.SetTestRunID(t.ID)
}

// SetCveScanID sets the "cve_scan" edge to the CVEScan entity by ID.
func (rec *ReleaseEntryCreate) SetCveScanID(id int) *ReleaseEntryCreate {
	rec.mutation.SetCveScanID(id)
	return rec
}

// SetNillableCveScanID sets the "cve_scan" edge to the CVEScan entity by ID if the given value is not nil.
func (rec *ReleaseEntryCreate) SetNillableCveScanID(id *int) *ReleaseEntryCreate {
	if id != nil {
		rec = rec.SetCveScanID(*id)
	}
	return rec
}

// SetCveScan sets the "cve_scan" edge to the CVEScan entity.
func (rec *ReleaseEntryCreate) SetCveScan(c *CVEScan) *ReleaseEntryCreate {
	return rec.SetCveScanID(c.ID)
}

// SetLicenseScanID sets the "license_scan" edge to the LicenseScan entity by ID.
func (rec *ReleaseEntryCreate) SetLicenseScanID(id int) *ReleaseEntryCreate {
	rec.mutation.SetLicenseScanID(id)
	return rec
}

// SetNillableLicenseScanID sets the "license_scan" edge to the LicenseScan entity by ID if the given value is not nil.
func (rec *ReleaseEntryCreate) SetNillableLicenseScanID(id *int) *ReleaseEntryCreate {
	if id != nil {
		rec = rec.SetLicenseScanID(*id)
	}
	return rec
}

// SetLicenseScan sets the "license_scan" edge to the LicenseScan entity.
func (rec *ReleaseEntryCreate) SetLicenseScan(l *LicenseScan) *ReleaseEntryCreate {
	return rec.SetLicenseScanID(l.ID)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (rec *ReleaseEntryCreate) SetReleaseID(id int) *ReleaseEntryCreate {
	rec.mutation.SetReleaseID(id)
	return rec
}

// SetRelease sets the "release" edge to the Release entity.
func (rec *ReleaseEntryCreate) SetRelease(r *Release) *ReleaseEntryCreate {
	return rec.SetReleaseID(r.ID)
}

// Mutation returns the ReleaseEntryMutation object of the builder.
func (rec *ReleaseEntryCreate) Mutation() *ReleaseEntryMutation {
	return rec.mutation
}

// Save creates the ReleaseEntry in the database.
func (rec *ReleaseEntryCreate) Save(ctx context.Context) (*ReleaseEntry, error) {
	var (
		err  error
		node *ReleaseEntry
	)
	rec.defaults()
	if len(rec.hooks) == 0 {
		if err = rec.check(); err != nil {
			return nil, err
		}
		node, err = rec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseEntryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rec.check(); err != nil {
				return nil, err
			}
			rec.mutation = mutation
			if node, err = rec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rec.hooks) - 1; i >= 0; i-- {
			mut = rec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rec *ReleaseEntryCreate) SaveX(ctx context.Context) *ReleaseEntry {
	v, err := rec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (rec *ReleaseEntryCreate) defaults() {
	if _, ok := rec.mutation.Time(); !ok {
		v := releaseentry.DefaultTime()
		rec.mutation.SetTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rec *ReleaseEntryCreate) check() error {
	if _, ok := rec.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if v, ok := rec.mutation.GetType(); ok {
		if err := releaseentry.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := rec.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New("ent: missing required field \"time\"")}
	}
	if _, ok := rec.mutation.ReleaseID(); !ok {
		return &ValidationError{Name: "release", err: errors.New("ent: missing required edge \"release\"")}
	}
	return nil
}

func (rec *ReleaseEntryCreate) sqlSave(ctx context.Context) (*ReleaseEntry, error) {
	_node, _spec := rec.createSpec()
	if err := sqlgraph.CreateNode(ctx, rec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rec *ReleaseEntryCreate) createSpec() (*ReleaseEntry, *sqlgraph.CreateSpec) {
	var (
		_node = &ReleaseEntry{config: rec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: releaseentry.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releaseentry.FieldID,
			},
		}
	)
	if value, ok := rec.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: releaseentry.FieldType,
		})
		_node.Type = value
	}
	if value, ok := rec.mutation.Time(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: releaseentry.FieldTime,
		})
		_node.Time = value
	}
	if nodes := rec.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   releaseentry.ArtifactTable,
			Columns: []string{releaseentry.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artifact.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rec.mutation.CodeScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   releaseentry.CodeScanTable,
			Columns: []string{releaseentry.CodeScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rec.mutation.TestRunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   releaseentry.TestRunTable,
			Columns: []string{releaseentry.TestRunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testrun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rec.mutation.CveScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   releaseentry.CveScanTable,
			Columns: []string{releaseentry.CveScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cvescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rec.mutation.LicenseScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   releaseentry.LicenseScanTable,
			Columns: []string{releaseentry.LicenseScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: licensescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rec.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaseentry.ReleaseTable,
			Columns: []string{releaseentry.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.release_entry_release = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReleaseEntryCreateBulk is the builder for creating many ReleaseEntry entities in bulk.
type ReleaseEntryCreateBulk struct {
	config
	builders []*ReleaseEntryCreate
}

// Save creates the ReleaseEntry entities in the database.
func (recb *ReleaseEntryCreateBulk) Save(ctx context.Context) ([]*ReleaseEntry, error) {
	specs := make([]*sqlgraph.CreateSpec, len(recb.builders))
	nodes := make([]*ReleaseEntry, len(recb.builders))
	mutators := make([]Mutator, len(recb.builders))
	for i := range recb.builders {
		func(i int, root context.Context) {
			builder := recb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReleaseEntryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, recb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, recb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, recb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (recb *ReleaseEntryCreateBulk) SaveX(ctx context.Context) []*ReleaseEntry {
	v, err := recb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
