// Code generated by entc, DO NOT EDIT.

package licenseusage

const (
	// Label holds the string label denoting the licenseusage type in the database.
	Label = "license_usage"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeLicense holds the string denoting the license edge name in mutations.
	EdgeLicense = "license"
	// EdgeScan holds the string denoting the scan edge name in mutations.
	EdgeScan = "scan"
	// Table holds the table name of the licenseusage in the database.
	Table = "license_usage"
	// LicenseTable is the table the holds the license relation/edge.
	LicenseTable = "license_usage"
	// LicenseInverseTable is the table name for the License entity.
	// It exists in this package in order to avoid circular dependency with the "license" package.
	LicenseInverseTable = "license"
	// LicenseColumn is the table column denoting the license relation/edge.
	LicenseColumn = "license_usage_license"
	// ScanTable is the table the holds the scan relation/edge.
	ScanTable = "license_usage"
	// ScanInverseTable is the table name for the LicenseScan entity.
	// It exists in this package in order to avoid circular dependency with the "licensescan" package.
	ScanInverseTable = "license_scan"
	// ScanColumn is the table column denoting the scan relation/edge.
	ScanColumn = "license_usage_scan"
)

// Columns holds all SQL columns for licenseusage fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "license_usage"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"license_usage_license",
	"license_usage_scan",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
