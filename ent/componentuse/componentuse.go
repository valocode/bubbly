// Code generated by entc, DO NOT EDIT.

package componentuse

const (
	// Label holds the string label denoting the componentuse type in the database.
	Label = "component_use"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeRelease holds the string denoting the release edge name in mutations.
	EdgeRelease = "release"
	// EdgeScans holds the string denoting the scans edge name in mutations.
	EdgeScans = "scans"
	// EdgeComponent holds the string denoting the component edge name in mutations.
	EdgeComponent = "component"
	// Table holds the table name of the componentuse in the database.
	Table = "component_use"
	// ReleaseTable is the table that holds the release relation/edge.
	ReleaseTable = "component_use"
	// ReleaseInverseTable is the table name for the Release entity.
	// It exists in this package in order to avoid circular dependency with the "release" package.
	ReleaseInverseTable = "release"
	// ReleaseColumn is the table column denoting the release relation/edge.
	ReleaseColumn = "component_use_release"
	// ScansTable is the table that holds the scans relation/edge. The primary key declared below.
	ScansTable = "component_use_scans"
	// ScansInverseTable is the table name for the CodeScan entity.
	// It exists in this package in order to avoid circular dependency with the "codescan" package.
	ScansInverseTable = "code_scan"
	// ComponentTable is the table that holds the component relation/edge.
	ComponentTable = "component_use"
	// ComponentInverseTable is the table name for the Component entity.
	// It exists in this package in order to avoid circular dependency with the "component" package.
	ComponentInverseTable = "component"
	// ComponentColumn is the table column denoting the component relation/edge.
	ComponentColumn = "component_use_component"
)

// Columns holds all SQL columns for componentuse fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "component_use"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"component_use_release",
	"component_use_component",
}

var (
	// ScansPrimaryKey and ScansColumn2 are the table columns denoting the
	// primary key for the scans relation (M2M).
	ScansPrimaryKey = []string{"component_use_id", "code_scan_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
