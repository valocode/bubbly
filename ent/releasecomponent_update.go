// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/codescan"
	"github.com/valocode/bubbly/ent/component"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasecomponent"
	"github.com/valocode/bubbly/ent/releaselicense"
	"github.com/valocode/bubbly/ent/releasevulnerability"
)

// ReleaseComponentUpdate is the builder for updating ReleaseComponent entities.
type ReleaseComponentUpdate struct {
	config
	hooks    []Hook
	mutation *ReleaseComponentMutation
}

// Where appends a list predicates to the ReleaseComponentUpdate builder.
func (rcu *ReleaseComponentUpdate) Where(ps ...predicate.ReleaseComponent) *ReleaseComponentUpdate {
	rcu.mutation.Where(ps...)
	return rcu
}

// SetType sets the "type" field.
func (rcu *ReleaseComponentUpdate) SetType(r releasecomponent.Type) *ReleaseComponentUpdate {
	rcu.mutation.SetType(r)
	return rcu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rcu *ReleaseComponentUpdate) SetNillableType(r *releasecomponent.Type) *ReleaseComponentUpdate {
	if r != nil {
		rcu.SetType(*r)
	}
	return rcu
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (rcu *ReleaseComponentUpdate) SetReleaseID(id int) *ReleaseComponentUpdate {
	rcu.mutation.SetReleaseID(id)
	return rcu
}

// SetRelease sets the "release" edge to the Release entity.
func (rcu *ReleaseComponentUpdate) SetRelease(r *Release) *ReleaseComponentUpdate {
	return rcu.SetReleaseID(r.ID)
}

// AddScanIDs adds the "scans" edge to the CodeScan entity by IDs.
func (rcu *ReleaseComponentUpdate) AddScanIDs(ids ...int) *ReleaseComponentUpdate {
	rcu.mutation.AddScanIDs(ids...)
	return rcu
}

// AddScans adds the "scans" edges to the CodeScan entity.
func (rcu *ReleaseComponentUpdate) AddScans(c ...*CodeScan) *ReleaseComponentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rcu.AddScanIDs(ids...)
}

// SetComponentID sets the "component" edge to the Component entity by ID.
func (rcu *ReleaseComponentUpdate) SetComponentID(id int) *ReleaseComponentUpdate {
	rcu.mutation.SetComponentID(id)
	return rcu
}

// SetComponent sets the "component" edge to the Component entity.
func (rcu *ReleaseComponentUpdate) SetComponent(c *Component) *ReleaseComponentUpdate {
	return rcu.SetComponentID(c.ID)
}

// AddVulnerabilityIDs adds the "vulnerabilities" edge to the ReleaseVulnerability entity by IDs.
func (rcu *ReleaseComponentUpdate) AddVulnerabilityIDs(ids ...int) *ReleaseComponentUpdate {
	rcu.mutation.AddVulnerabilityIDs(ids...)
	return rcu
}

// AddVulnerabilities adds the "vulnerabilities" edges to the ReleaseVulnerability entity.
func (rcu *ReleaseComponentUpdate) AddVulnerabilities(r ...*ReleaseVulnerability) *ReleaseComponentUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.AddVulnerabilityIDs(ids...)
}

// AddLicenseIDs adds the "licenses" edge to the ReleaseLicense entity by IDs.
func (rcu *ReleaseComponentUpdate) AddLicenseIDs(ids ...int) *ReleaseComponentUpdate {
	rcu.mutation.AddLicenseIDs(ids...)
	return rcu
}

// AddLicenses adds the "licenses" edges to the ReleaseLicense entity.
func (rcu *ReleaseComponentUpdate) AddLicenses(r ...*ReleaseLicense) *ReleaseComponentUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.AddLicenseIDs(ids...)
}

// Mutation returns the ReleaseComponentMutation object of the builder.
func (rcu *ReleaseComponentUpdate) Mutation() *ReleaseComponentMutation {
	return rcu.mutation
}

// ClearRelease clears the "release" edge to the Release entity.
func (rcu *ReleaseComponentUpdate) ClearRelease() *ReleaseComponentUpdate {
	rcu.mutation.ClearRelease()
	return rcu
}

// ClearScans clears all "scans" edges to the CodeScan entity.
func (rcu *ReleaseComponentUpdate) ClearScans() *ReleaseComponentUpdate {
	rcu.mutation.ClearScans()
	return rcu
}

// RemoveScanIDs removes the "scans" edge to CodeScan entities by IDs.
func (rcu *ReleaseComponentUpdate) RemoveScanIDs(ids ...int) *ReleaseComponentUpdate {
	rcu.mutation.RemoveScanIDs(ids...)
	return rcu
}

// RemoveScans removes "scans" edges to CodeScan entities.
func (rcu *ReleaseComponentUpdate) RemoveScans(c ...*CodeScan) *ReleaseComponentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rcu.RemoveScanIDs(ids...)
}

// ClearComponent clears the "component" edge to the Component entity.
func (rcu *ReleaseComponentUpdate) ClearComponent() *ReleaseComponentUpdate {
	rcu.mutation.ClearComponent()
	return rcu
}

// ClearVulnerabilities clears all "vulnerabilities" edges to the ReleaseVulnerability entity.
func (rcu *ReleaseComponentUpdate) ClearVulnerabilities() *ReleaseComponentUpdate {
	rcu.mutation.ClearVulnerabilities()
	return rcu
}

// RemoveVulnerabilityIDs removes the "vulnerabilities" edge to ReleaseVulnerability entities by IDs.
func (rcu *ReleaseComponentUpdate) RemoveVulnerabilityIDs(ids ...int) *ReleaseComponentUpdate {
	rcu.mutation.RemoveVulnerabilityIDs(ids...)
	return rcu
}

// RemoveVulnerabilities removes "vulnerabilities" edges to ReleaseVulnerability entities.
func (rcu *ReleaseComponentUpdate) RemoveVulnerabilities(r ...*ReleaseVulnerability) *ReleaseComponentUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.RemoveVulnerabilityIDs(ids...)
}

// ClearLicenses clears all "licenses" edges to the ReleaseLicense entity.
func (rcu *ReleaseComponentUpdate) ClearLicenses() *ReleaseComponentUpdate {
	rcu.mutation.ClearLicenses()
	return rcu
}

// RemoveLicenseIDs removes the "licenses" edge to ReleaseLicense entities by IDs.
func (rcu *ReleaseComponentUpdate) RemoveLicenseIDs(ids ...int) *ReleaseComponentUpdate {
	rcu.mutation.RemoveLicenseIDs(ids...)
	return rcu
}

// RemoveLicenses removes "licenses" edges to ReleaseLicense entities.
func (rcu *ReleaseComponentUpdate) RemoveLicenses(r ...*ReleaseLicense) *ReleaseComponentUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.RemoveLicenseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *ReleaseComponentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rcu.hooks) == 0 {
		if err = rcu.check(); err != nil {
			return 0, err
		}
		affected, err = rcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseComponentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rcu.check(); err != nil {
				return 0, err
			}
			rcu.mutation = mutation
			affected, err = rcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rcu.hooks) - 1; i >= 0; i-- {
			if rcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *ReleaseComponentUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *ReleaseComponentUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *ReleaseComponentUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcu *ReleaseComponentUpdate) check() error {
	if v, ok := rcu.mutation.GetType(); ok {
		if err := releasecomponent.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := rcu.mutation.ReleaseID(); rcu.mutation.ReleaseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"release\"")
	}
	if _, ok := rcu.mutation.ComponentID(); rcu.mutation.ComponentCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"component\"")
	}
	return nil
}

func (rcu *ReleaseComponentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releasecomponent.Table,
			Columns: releasecomponent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releasecomponent.FieldID,
			},
		},
	}
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: releasecomponent.FieldType,
		})
	}
	if rcu.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasecomponent.ReleaseTable,
			Columns: []string{releasecomponent.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasecomponent.ReleaseTable,
			Columns: []string{releasecomponent.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasecomponent.ScansTable,
			Columns: releasecomponent.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedScansIDs(); len(nodes) > 0 && !rcu.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasecomponent.ScansTable,
			Columns: releasecomponent.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasecomponent.ScansTable,
			Columns: releasecomponent.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.ComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasecomponent.ComponentTable,
			Columns: []string{releasecomponent.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasecomponent.ComponentTable,
			Columns: []string{releasecomponent.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.VulnerabilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasecomponent.VulnerabilitiesTable,
			Columns: []string{releasecomponent.VulnerabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedVulnerabilitiesIDs(); len(nodes) > 0 && !rcu.mutation.VulnerabilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasecomponent.VulnerabilitiesTable,
			Columns: []string{releasecomponent.VulnerabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.VulnerabilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasecomponent.VulnerabilitiesTable,
			Columns: []string{releasecomponent.VulnerabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.LicensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasecomponent.LicensesTable,
			Columns: []string{releasecomponent.LicensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaselicense.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedLicensesIDs(); len(nodes) > 0 && !rcu.mutation.LicensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasecomponent.LicensesTable,
			Columns: []string{releasecomponent.LicensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaselicense.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.LicensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasecomponent.LicensesTable,
			Columns: []string{releasecomponent.LicensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaselicense.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releasecomponent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ReleaseComponentUpdateOne is the builder for updating a single ReleaseComponent entity.
type ReleaseComponentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReleaseComponentMutation
}

// SetType sets the "type" field.
func (rcuo *ReleaseComponentUpdateOne) SetType(r releasecomponent.Type) *ReleaseComponentUpdateOne {
	rcuo.mutation.SetType(r)
	return rcuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rcuo *ReleaseComponentUpdateOne) SetNillableType(r *releasecomponent.Type) *ReleaseComponentUpdateOne {
	if r != nil {
		rcuo.SetType(*r)
	}
	return rcuo
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (rcuo *ReleaseComponentUpdateOne) SetReleaseID(id int) *ReleaseComponentUpdateOne {
	rcuo.mutation.SetReleaseID(id)
	return rcuo
}

// SetRelease sets the "release" edge to the Release entity.
func (rcuo *ReleaseComponentUpdateOne) SetRelease(r *Release) *ReleaseComponentUpdateOne {
	return rcuo.SetReleaseID(r.ID)
}

// AddScanIDs adds the "scans" edge to the CodeScan entity by IDs.
func (rcuo *ReleaseComponentUpdateOne) AddScanIDs(ids ...int) *ReleaseComponentUpdateOne {
	rcuo.mutation.AddScanIDs(ids...)
	return rcuo
}

// AddScans adds the "scans" edges to the CodeScan entity.
func (rcuo *ReleaseComponentUpdateOne) AddScans(c ...*CodeScan) *ReleaseComponentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rcuo.AddScanIDs(ids...)
}

// SetComponentID sets the "component" edge to the Component entity by ID.
func (rcuo *ReleaseComponentUpdateOne) SetComponentID(id int) *ReleaseComponentUpdateOne {
	rcuo.mutation.SetComponentID(id)
	return rcuo
}

// SetComponent sets the "component" edge to the Component entity.
func (rcuo *ReleaseComponentUpdateOne) SetComponent(c *Component) *ReleaseComponentUpdateOne {
	return rcuo.SetComponentID(c.ID)
}

// AddVulnerabilityIDs adds the "vulnerabilities" edge to the ReleaseVulnerability entity by IDs.
func (rcuo *ReleaseComponentUpdateOne) AddVulnerabilityIDs(ids ...int) *ReleaseComponentUpdateOne {
	rcuo.mutation.AddVulnerabilityIDs(ids...)
	return rcuo
}

// AddVulnerabilities adds the "vulnerabilities" edges to the ReleaseVulnerability entity.
func (rcuo *ReleaseComponentUpdateOne) AddVulnerabilities(r ...*ReleaseVulnerability) *ReleaseComponentUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.AddVulnerabilityIDs(ids...)
}

// AddLicenseIDs adds the "licenses" edge to the ReleaseLicense entity by IDs.
func (rcuo *ReleaseComponentUpdateOne) AddLicenseIDs(ids ...int) *ReleaseComponentUpdateOne {
	rcuo.mutation.AddLicenseIDs(ids...)
	return rcuo
}

// AddLicenses adds the "licenses" edges to the ReleaseLicense entity.
func (rcuo *ReleaseComponentUpdateOne) AddLicenses(r ...*ReleaseLicense) *ReleaseComponentUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.AddLicenseIDs(ids...)
}

// Mutation returns the ReleaseComponentMutation object of the builder.
func (rcuo *ReleaseComponentUpdateOne) Mutation() *ReleaseComponentMutation {
	return rcuo.mutation
}

// ClearRelease clears the "release" edge to the Release entity.
func (rcuo *ReleaseComponentUpdateOne) ClearRelease() *ReleaseComponentUpdateOne {
	rcuo.mutation.ClearRelease()
	return rcuo
}

// ClearScans clears all "scans" edges to the CodeScan entity.
func (rcuo *ReleaseComponentUpdateOne) ClearScans() *ReleaseComponentUpdateOne {
	rcuo.mutation.ClearScans()
	return rcuo
}

// RemoveScanIDs removes the "scans" edge to CodeScan entities by IDs.
func (rcuo *ReleaseComponentUpdateOne) RemoveScanIDs(ids ...int) *ReleaseComponentUpdateOne {
	rcuo.mutation.RemoveScanIDs(ids...)
	return rcuo
}

// RemoveScans removes "scans" edges to CodeScan entities.
func (rcuo *ReleaseComponentUpdateOne) RemoveScans(c ...*CodeScan) *ReleaseComponentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rcuo.RemoveScanIDs(ids...)
}

// ClearComponent clears the "component" edge to the Component entity.
func (rcuo *ReleaseComponentUpdateOne) ClearComponent() *ReleaseComponentUpdateOne {
	rcuo.mutation.ClearComponent()
	return rcuo
}

// ClearVulnerabilities clears all "vulnerabilities" edges to the ReleaseVulnerability entity.
func (rcuo *ReleaseComponentUpdateOne) ClearVulnerabilities() *ReleaseComponentUpdateOne {
	rcuo.mutation.ClearVulnerabilities()
	return rcuo
}

// RemoveVulnerabilityIDs removes the "vulnerabilities" edge to ReleaseVulnerability entities by IDs.
func (rcuo *ReleaseComponentUpdateOne) RemoveVulnerabilityIDs(ids ...int) *ReleaseComponentUpdateOne {
	rcuo.mutation.RemoveVulnerabilityIDs(ids...)
	return rcuo
}

// RemoveVulnerabilities removes "vulnerabilities" edges to ReleaseVulnerability entities.
func (rcuo *ReleaseComponentUpdateOne) RemoveVulnerabilities(r ...*ReleaseVulnerability) *ReleaseComponentUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.RemoveVulnerabilityIDs(ids...)
}

// ClearLicenses clears all "licenses" edges to the ReleaseLicense entity.
func (rcuo *ReleaseComponentUpdateOne) ClearLicenses() *ReleaseComponentUpdateOne {
	rcuo.mutation.ClearLicenses()
	return rcuo
}

// RemoveLicenseIDs removes the "licenses" edge to ReleaseLicense entities by IDs.
func (rcuo *ReleaseComponentUpdateOne) RemoveLicenseIDs(ids ...int) *ReleaseComponentUpdateOne {
	rcuo.mutation.RemoveLicenseIDs(ids...)
	return rcuo
}

// RemoveLicenses removes "licenses" edges to ReleaseLicense entities.
func (rcuo *ReleaseComponentUpdateOne) RemoveLicenses(r ...*ReleaseLicense) *ReleaseComponentUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.RemoveLicenseIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *ReleaseComponentUpdateOne) Select(field string, fields ...string) *ReleaseComponentUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated ReleaseComponent entity.
func (rcuo *ReleaseComponentUpdateOne) Save(ctx context.Context) (*ReleaseComponent, error) {
	var (
		err  error
		node *ReleaseComponent
	)
	if len(rcuo.hooks) == 0 {
		if err = rcuo.check(); err != nil {
			return nil, err
		}
		node, err = rcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseComponentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rcuo.check(); err != nil {
				return nil, err
			}
			rcuo.mutation = mutation
			node, err = rcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rcuo.hooks) - 1; i >= 0; i-- {
			if rcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *ReleaseComponentUpdateOne) SaveX(ctx context.Context) *ReleaseComponent {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *ReleaseComponentUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *ReleaseComponentUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcuo *ReleaseComponentUpdateOne) check() error {
	if v, ok := rcuo.mutation.GetType(); ok {
		if err := releasecomponent.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := rcuo.mutation.ReleaseID(); rcuo.mutation.ReleaseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"release\"")
	}
	if _, ok := rcuo.mutation.ComponentID(); rcuo.mutation.ComponentCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"component\"")
	}
	return nil
}

func (rcuo *ReleaseComponentUpdateOne) sqlSave(ctx context.Context) (_node *ReleaseComponent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releasecomponent.Table,
			Columns: releasecomponent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releasecomponent.FieldID,
			},
		},
	}
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ReleaseComponent.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, releasecomponent.FieldID)
		for _, f := range fields {
			if !releasecomponent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != releasecomponent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: releasecomponent.FieldType,
		})
	}
	if rcuo.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasecomponent.ReleaseTable,
			Columns: []string{releasecomponent.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasecomponent.ReleaseTable,
			Columns: []string{releasecomponent.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasecomponent.ScansTable,
			Columns: releasecomponent.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedScansIDs(); len(nodes) > 0 && !rcuo.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasecomponent.ScansTable,
			Columns: releasecomponent.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasecomponent.ScansTable,
			Columns: releasecomponent.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.ComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasecomponent.ComponentTable,
			Columns: []string{releasecomponent.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasecomponent.ComponentTable,
			Columns: []string{releasecomponent.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.VulnerabilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasecomponent.VulnerabilitiesTable,
			Columns: []string{releasecomponent.VulnerabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedVulnerabilitiesIDs(); len(nodes) > 0 && !rcuo.mutation.VulnerabilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasecomponent.VulnerabilitiesTable,
			Columns: []string{releasecomponent.VulnerabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.VulnerabilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasecomponent.VulnerabilitiesTable,
			Columns: []string{releasecomponent.VulnerabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.LicensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasecomponent.LicensesTable,
			Columns: []string{releasecomponent.LicensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaselicense.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedLicensesIDs(); len(nodes) > 0 && !rcuo.mutation.LicensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasecomponent.LicensesTable,
			Columns: []string{releasecomponent.LicensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaselicense.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.LicensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   releasecomponent.LicensesTable,
			Columns: []string{releasecomponent.LicensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaselicense.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReleaseComponent{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releasecomponent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
