// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/license"
	"github.com/valocode/bubbly/ent/licensescan"
	"github.com/valocode/bubbly/ent/licenseusage"
)

// LicenseUsage is the model entity for the LicenseUsage schema.
type LicenseUsage struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LicenseUsageQuery when eager-loading is set.
	Edges                 LicenseUsageEdges `json:"edges"`
	license_usage_license *int
	license_usage_scan    *int
}

// LicenseUsageEdges holds the relations/edges for other nodes in the graph.
type LicenseUsageEdges struct {
	// License holds the value of the license edge.
	License *License `json:"license,omitempty"`
	// Scan holds the value of the scan edge.
	Scan *LicenseScan `json:"scan,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LicenseOrErr returns the License value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LicenseUsageEdges) LicenseOrErr() (*License, error) {
	if e.loadedTypes[0] {
		if e.License == nil {
			// The edge license was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: license.Label}
		}
		return e.License, nil
	}
	return nil, &NotLoadedError{edge: "license"}
}

// ScanOrErr returns the Scan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LicenseUsageEdges) ScanOrErr() (*LicenseScan, error) {
	if e.loadedTypes[1] {
		if e.Scan == nil {
			// The edge scan was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: licensescan.Label}
		}
		return e.Scan, nil
	}
	return nil, &NotLoadedError{edge: "scan"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LicenseUsage) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case licenseusage.FieldID:
			values[i] = new(sql.NullInt64)
		case licenseusage.ForeignKeys[0]: // license_usage_license
			values[i] = new(sql.NullInt64)
		case licenseusage.ForeignKeys[1]: // license_usage_scan
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LicenseUsage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LicenseUsage fields.
func (lu *LicenseUsage) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case licenseusage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lu.ID = int(value.Int64)
		case licenseusage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field license_usage_license", value)
			} else if value.Valid {
				lu.license_usage_license = new(int)
				*lu.license_usage_license = int(value.Int64)
			}
		case licenseusage.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field license_usage_scan", value)
			} else if value.Valid {
				lu.license_usage_scan = new(int)
				*lu.license_usage_scan = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryLicense queries the "license" edge of the LicenseUsage entity.
func (lu *LicenseUsage) QueryLicense() *LicenseQuery {
	return (&LicenseUsageClient{config: lu.config}).QueryLicense(lu)
}

// QueryScan queries the "scan" edge of the LicenseUsage entity.
func (lu *LicenseUsage) QueryScan() *LicenseScanQuery {
	return (&LicenseUsageClient{config: lu.config}).QueryScan(lu)
}

// Update returns a builder for updating this LicenseUsage.
// Note that you need to call LicenseUsage.Unwrap() before calling this method if this LicenseUsage
// was returned from a transaction, and the transaction was committed or rolled back.
func (lu *LicenseUsage) Update() *LicenseUsageUpdateOne {
	return (&LicenseUsageClient{config: lu.config}).UpdateOne(lu)
}

// Unwrap unwraps the LicenseUsage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lu *LicenseUsage) Unwrap() *LicenseUsage {
	tx, ok := lu.config.driver.(*txDriver)
	if !ok {
		panic("ent: LicenseUsage is not a transactional entity")
	}
	lu.config.driver = tx.drv
	return lu
}

// String implements the fmt.Stringer.
func (lu *LicenseUsage) String() string {
	var builder strings.Builder
	builder.WriteString("LicenseUsage(")
	builder.WriteString(fmt.Sprintf("id=%v", lu.ID))
	builder.WriteByte(')')
	return builder.String()
}

// LicenseUsages is a parsable slice of LicenseUsage.
type LicenseUsages []*LicenseUsage

func (lu LicenseUsages) config(cfg config) {
	for _i := range lu {
		lu[_i].config = cfg
	}
}
