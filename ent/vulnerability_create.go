// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/component"
	"github.com/valocode/bubbly/ent/cve"
	"github.com/valocode/bubbly/ent/cvescan"
	"github.com/valocode/bubbly/ent/vulnerability"
)

// VulnerabilityCreate is the builder for creating a Vulnerability entity.
type VulnerabilityCreate struct {
	config
	mutation *VulnerabilityMutation
	hooks    []Hook
}

// SetCveID sets the "cve" edge to the CVE entity by ID.
func (vc *VulnerabilityCreate) SetCveID(id int) *VulnerabilityCreate {
	vc.mutation.SetCveID(id)
	return vc
}

// SetCve sets the "cve" edge to the CVE entity.
func (vc *VulnerabilityCreate) SetCve(c *CVE) *VulnerabilityCreate {
	return vc.SetCveID(c.ID)
}

// SetScanID sets the "scan" edge to the CVEScan entity by ID.
func (vc *VulnerabilityCreate) SetScanID(id int) *VulnerabilityCreate {
	vc.mutation.SetScanID(id)
	return vc
}

// SetScan sets the "scan" edge to the CVEScan entity.
func (vc *VulnerabilityCreate) SetScan(c *CVEScan) *VulnerabilityCreate {
	return vc.SetScanID(c.ID)
}

// SetComponentID sets the "component" edge to the Component entity by ID.
func (vc *VulnerabilityCreate) SetComponentID(id int) *VulnerabilityCreate {
	vc.mutation.SetComponentID(id)
	return vc
}

// SetComponent sets the "component" edge to the Component entity.
func (vc *VulnerabilityCreate) SetComponent(c *Component) *VulnerabilityCreate {
	return vc.SetComponentID(c.ID)
}

// Mutation returns the VulnerabilityMutation object of the builder.
func (vc *VulnerabilityCreate) Mutation() *VulnerabilityMutation {
	return vc.mutation
}

// Save creates the Vulnerability in the database.
func (vc *VulnerabilityCreate) Save(ctx context.Context) (*Vulnerability, error) {
	var (
		err  error
		node *Vulnerability
	)
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VulnerabilityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			if node, err = vc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			mut = vc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VulnerabilityCreate) SaveX(ctx context.Context) *Vulnerability {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (vc *VulnerabilityCreate) check() error {
	if _, ok := vc.mutation.CveID(); !ok {
		return &ValidationError{Name: "cve", err: errors.New("ent: missing required edge \"cve\"")}
	}
	if _, ok := vc.mutation.ScanID(); !ok {
		return &ValidationError{Name: "scan", err: errors.New("ent: missing required edge \"scan\"")}
	}
	if _, ok := vc.mutation.ComponentID(); !ok {
		return &ValidationError{Name: "component", err: errors.New("ent: missing required edge \"component\"")}
	}
	return nil
}

func (vc *VulnerabilityCreate) sqlSave(ctx context.Context) (*Vulnerability, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vc *VulnerabilityCreate) createSpec() (*Vulnerability, *sqlgraph.CreateSpec) {
	var (
		_node = &Vulnerability{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vulnerability.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vulnerability.FieldID,
			},
		}
	)
	if nodes := vc.mutation.CveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.CveTable,
			Columns: []string{vulnerability.CveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cve.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vulnerability_cve = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.ScanTable,
			Columns: []string{vulnerability.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cvescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vulnerability_scan = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vulnerability.ComponentTable,
			Columns: []string{vulnerability.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.component_vulnerabilities = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VulnerabilityCreateBulk is the builder for creating many Vulnerability entities in bulk.
type VulnerabilityCreateBulk struct {
	config
	builders []*VulnerabilityCreate
}

// Save creates the Vulnerability entities in the database.
func (vcb *VulnerabilityCreateBulk) Save(ctx context.Context) ([]*Vulnerability, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vulnerability, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VulnerabilityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VulnerabilityCreateBulk) SaveX(ctx context.Context) []*Vulnerability {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
