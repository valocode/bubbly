// Code generated by entc, DO NOT EDIT.

package vulnerabilityreview

import (
	"fmt"
	"io"
	"strconv"
)

const (
	// Label holds the string label denoting the vulnerabilityreview type in the database.
	Label = "vulnerability_review"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDecision holds the string denoting the decision field in the database.
	FieldDecision = "decision"
	// EdgeVulnerability holds the string denoting the vulnerability edge name in mutations.
	EdgeVulnerability = "vulnerability"
	// EdgeProjects holds the string denoting the projects edge name in mutations.
	EdgeProjects = "projects"
	// EdgeRepos holds the string denoting the repos edge name in mutations.
	EdgeRepos = "repos"
	// EdgeReleases holds the string denoting the releases edge name in mutations.
	EdgeReleases = "releases"
	// EdgeInstances holds the string denoting the instances edge name in mutations.
	EdgeInstances = "instances"
	// Table holds the table name of the vulnerabilityreview in the database.
	Table = "vulnerability_review"
	// VulnerabilityTable is the table that holds the vulnerability relation/edge.
	VulnerabilityTable = "vulnerability_review"
	// VulnerabilityInverseTable is the table name for the Vulnerability entity.
	// It exists in this package in order to avoid circular dependency with the "vulnerability" package.
	VulnerabilityInverseTable = "vulnerability"
	// VulnerabilityColumn is the table column denoting the vulnerability relation/edge.
	VulnerabilityColumn = "vulnerability_review_vulnerability"
	// ProjectsTable is the table that holds the projects relation/edge. The primary key declared below.
	ProjectsTable = "vulnerability_review_projects"
	// ProjectsInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectsInverseTable = "project"
	// ReposTable is the table that holds the repos relation/edge. The primary key declared below.
	ReposTable = "vulnerability_review_repos"
	// ReposInverseTable is the table name for the Repo entity.
	// It exists in this package in order to avoid circular dependency with the "repo" package.
	ReposInverseTable = "repo"
	// ReleasesTable is the table that holds the releases relation/edge. The primary key declared below.
	ReleasesTable = "vulnerability_review_releases"
	// ReleasesInverseTable is the table name for the Release entity.
	// It exists in this package in order to avoid circular dependency with the "release" package.
	ReleasesInverseTable = "release"
	// InstancesTable is the table that holds the instances relation/edge. The primary key declared below.
	InstancesTable = "release_vulnerability_reviews"
	// InstancesInverseTable is the table name for the ReleaseVulnerability entity.
	// It exists in this package in order to avoid circular dependency with the "releasevulnerability" package.
	InstancesInverseTable = "release_vulnerability"
)

// Columns holds all SQL columns for vulnerabilityreview fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDecision,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "vulnerability_review"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"vulnerability_review_vulnerability",
}

var (
	// ProjectsPrimaryKey and ProjectsColumn2 are the table columns denoting the
	// primary key for the projects relation (M2M).
	ProjectsPrimaryKey = []string{"vulnerability_review_id", "project_id"}
	// ReposPrimaryKey and ReposColumn2 are the table columns denoting the
	// primary key for the repos relation (M2M).
	ReposPrimaryKey = []string{"vulnerability_review_id", "repo_id"}
	// ReleasesPrimaryKey and ReleasesColumn2 are the table columns denoting the
	// primary key for the releases relation (M2M).
	ReleasesPrimaryKey = []string{"vulnerability_review_id", "release_id"}
	// InstancesPrimaryKey and InstancesColumn2 are the table columns denoting the
	// primary key for the instances relation (M2M).
	InstancesPrimaryKey = []string{"release_vulnerability_id", "vulnerability_review_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// Decision defines the type for the "decision" enum field.
type Decision string

// DecisionExploitable is the default value of the Decision enum.
const DefaultDecision = DecisionExploitable

// Decision values.
const (
	DecisionExploitable Decision = "exploitable"
	DecisionInProgress  Decision = "in_progress"
	DecisionInvalid     Decision = "invalid"
	DecisionMitigated   Decision = "mitigated"
	DecisionIneffective Decision = "ineffective"
	DecisionPatched     Decision = "patched"
)

func (d Decision) String() string {
	return string(d)
}

// DecisionValidator is a validator for the "decision" field enum values. It is called by the builders before save.
func DecisionValidator(d Decision) error {
	switch d {
	case DecisionExploitable, DecisionInProgress, DecisionInvalid, DecisionMitigated, DecisionIneffective, DecisionPatched:
		return nil
	default:
		return fmt.Errorf("vulnerabilityreview: invalid enum value for decision field: %q", d)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (d Decision) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(d.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (d *Decision) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*d = Decision(str)
	if err := DecisionValidator(*d); err != nil {
		return fmt.Errorf("%s is not a valid Decision", str)
	}
	return nil
}
