// Code generated by entc, DO NOT EDIT.

package releasepolicy

const (
	// Label holds the string label denoting the releasepolicy type in the database.
	Label = "release_policy"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldModule holds the string denoting the module field in the database.
	FieldModule = "module"
	// EdgeProjects holds the string denoting the projects edge name in mutations.
	EdgeProjects = "projects"
	// EdgeRepos holds the string denoting the repos edge name in mutations.
	EdgeRepos = "repos"
	// EdgeViolations holds the string denoting the violations edge name in mutations.
	EdgeViolations = "violations"
	// Table holds the table name of the releasepolicy in the database.
	Table = "release_policy"
	// ProjectsTable is the table that holds the projects relation/edge. The primary key declared below.
	ProjectsTable = "release_policy_projects"
	// ProjectsInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectsInverseTable = "project"
	// ReposTable is the table that holds the repos relation/edge. The primary key declared below.
	ReposTable = "release_policy_repos"
	// ReposInverseTable is the table name for the Repo entity.
	// It exists in this package in order to avoid circular dependency with the "repo" package.
	ReposInverseTable = "repo"
	// ViolationsTable is the table that holds the violations relation/edge.
	ViolationsTable = "release_policy_violation"
	// ViolationsInverseTable is the table name for the ReleasePolicyViolation entity.
	// It exists in this package in order to avoid circular dependency with the "releasepolicyviolation" package.
	ViolationsInverseTable = "release_policy_violation"
	// ViolationsColumn is the table column denoting the violations relation/edge.
	ViolationsColumn = "release_policy_violation_policy"
)

// Columns holds all SQL columns for releasepolicy fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldModule,
}

var (
	// ProjectsPrimaryKey and ProjectsColumn2 are the table columns denoting the
	// primary key for the projects relation (M2M).
	ProjectsPrimaryKey = []string{"release_policy_id", "project_id"}
	// ReposPrimaryKey and ReposColumn2 are the table columns denoting the
	// primary key for the repos relation (M2M).
	ReposPrimaryKey = []string{"release_policy_id", "repo_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// ModuleValidator is a validator for the "module" field. It is called by the builders before save.
	ModuleValidator func(string) error
)
