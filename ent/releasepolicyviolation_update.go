// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasepolicy"
	"github.com/valocode/bubbly/ent/releasepolicyviolation"
)

// ReleasePolicyViolationUpdate is the builder for updating ReleasePolicyViolation entities.
type ReleasePolicyViolationUpdate struct {
	config
	hooks    []Hook
	mutation *ReleasePolicyViolationMutation
}

// Where appends a list predicates to the ReleasePolicyViolationUpdate builder.
func (rpvu *ReleasePolicyViolationUpdate) Where(ps ...predicate.ReleasePolicyViolation) *ReleasePolicyViolationUpdate {
	rpvu.mutation.Where(ps...)
	return rpvu
}

// SetMessage sets the "message" field.
func (rpvu *ReleasePolicyViolationUpdate) SetMessage(s string) *ReleasePolicyViolationUpdate {
	rpvu.mutation.SetMessage(s)
	return rpvu
}

// SetType sets the "type" field.
func (rpvu *ReleasePolicyViolationUpdate) SetType(r releasepolicyviolation.Type) *ReleasePolicyViolationUpdate {
	rpvu.mutation.SetType(r)
	return rpvu
}

// SetSeverity sets the "severity" field.
func (rpvu *ReleasePolicyViolationUpdate) SetSeverity(r releasepolicyviolation.Severity) *ReleasePolicyViolationUpdate {
	rpvu.mutation.SetSeverity(r)
	return rpvu
}

// SetPolicyID sets the "policy" edge to the ReleasePolicy entity by ID.
func (rpvu *ReleasePolicyViolationUpdate) SetPolicyID(id int) *ReleasePolicyViolationUpdate {
	rpvu.mutation.SetPolicyID(id)
	return rpvu
}

// SetPolicy sets the "policy" edge to the ReleasePolicy entity.
func (rpvu *ReleasePolicyViolationUpdate) SetPolicy(r *ReleasePolicy) *ReleasePolicyViolationUpdate {
	return rpvu.SetPolicyID(r.ID)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (rpvu *ReleasePolicyViolationUpdate) SetReleaseID(id int) *ReleasePolicyViolationUpdate {
	rpvu.mutation.SetReleaseID(id)
	return rpvu
}

// SetRelease sets the "release" edge to the Release entity.
func (rpvu *ReleasePolicyViolationUpdate) SetRelease(r *Release) *ReleasePolicyViolationUpdate {
	return rpvu.SetReleaseID(r.ID)
}

// Mutation returns the ReleasePolicyViolationMutation object of the builder.
func (rpvu *ReleasePolicyViolationUpdate) Mutation() *ReleasePolicyViolationMutation {
	return rpvu.mutation
}

// ClearPolicy clears the "policy" edge to the ReleasePolicy entity.
func (rpvu *ReleasePolicyViolationUpdate) ClearPolicy() *ReleasePolicyViolationUpdate {
	rpvu.mutation.ClearPolicy()
	return rpvu
}

// ClearRelease clears the "release" edge to the Release entity.
func (rpvu *ReleasePolicyViolationUpdate) ClearRelease() *ReleasePolicyViolationUpdate {
	rpvu.mutation.ClearRelease()
	return rpvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpvu *ReleasePolicyViolationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rpvu.hooks) == 0 {
		if err = rpvu.check(); err != nil {
			return 0, err
		}
		affected, err = rpvu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleasePolicyViolationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rpvu.check(); err != nil {
				return 0, err
			}
			rpvu.mutation = mutation
			affected, err = rpvu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rpvu.hooks) - 1; i >= 0; i-- {
			if rpvu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rpvu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rpvu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rpvu *ReleasePolicyViolationUpdate) SaveX(ctx context.Context) int {
	affected, err := rpvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpvu *ReleasePolicyViolationUpdate) Exec(ctx context.Context) error {
	_, err := rpvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpvu *ReleasePolicyViolationUpdate) ExecX(ctx context.Context) {
	if err := rpvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpvu *ReleasePolicyViolationUpdate) check() error {
	if v, ok := rpvu.mutation.Message(); ok {
		if err := releasepolicyviolation.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf("ent: validator failed for field \"message\": %w", err)}
		}
	}
	if v, ok := rpvu.mutation.GetType(); ok {
		if err := releasepolicyviolation.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := rpvu.mutation.Severity(); ok {
		if err := releasepolicyviolation.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf("ent: validator failed for field \"severity\": %w", err)}
		}
	}
	if _, ok := rpvu.mutation.PolicyID(); rpvu.mutation.PolicyCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"policy\"")
	}
	if _, ok := rpvu.mutation.ReleaseID(); rpvu.mutation.ReleaseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"release\"")
	}
	return nil
}

func (rpvu *ReleasePolicyViolationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releasepolicyviolation.Table,
			Columns: releasepolicyviolation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releasepolicyviolation.FieldID,
			},
		},
	}
	if ps := rpvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpvu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: releasepolicyviolation.FieldMessage,
		})
	}
	if value, ok := rpvu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: releasepolicyviolation.FieldType,
		})
	}
	if value, ok := rpvu.mutation.Severity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: releasepolicyviolation.FieldSeverity,
		})
	}
	if rpvu.mutation.PolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasepolicyviolation.PolicyTable,
			Columns: []string{releasepolicyviolation.PolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasepolicy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpvu.mutation.PolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasepolicyviolation.PolicyTable,
			Columns: []string{releasepolicyviolation.PolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasepolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpvu.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasepolicyviolation.ReleaseTable,
			Columns: []string{releasepolicyviolation.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpvu.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasepolicyviolation.ReleaseTable,
			Columns: []string{releasepolicyviolation.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releasepolicyviolation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ReleasePolicyViolationUpdateOne is the builder for updating a single ReleasePolicyViolation entity.
type ReleasePolicyViolationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReleasePolicyViolationMutation
}

// SetMessage sets the "message" field.
func (rpvuo *ReleasePolicyViolationUpdateOne) SetMessage(s string) *ReleasePolicyViolationUpdateOne {
	rpvuo.mutation.SetMessage(s)
	return rpvuo
}

// SetType sets the "type" field.
func (rpvuo *ReleasePolicyViolationUpdateOne) SetType(r releasepolicyviolation.Type) *ReleasePolicyViolationUpdateOne {
	rpvuo.mutation.SetType(r)
	return rpvuo
}

// SetSeverity sets the "severity" field.
func (rpvuo *ReleasePolicyViolationUpdateOne) SetSeverity(r releasepolicyviolation.Severity) *ReleasePolicyViolationUpdateOne {
	rpvuo.mutation.SetSeverity(r)
	return rpvuo
}

// SetPolicyID sets the "policy" edge to the ReleasePolicy entity by ID.
func (rpvuo *ReleasePolicyViolationUpdateOne) SetPolicyID(id int) *ReleasePolicyViolationUpdateOne {
	rpvuo.mutation.SetPolicyID(id)
	return rpvuo
}

// SetPolicy sets the "policy" edge to the ReleasePolicy entity.
func (rpvuo *ReleasePolicyViolationUpdateOne) SetPolicy(r *ReleasePolicy) *ReleasePolicyViolationUpdateOne {
	return rpvuo.SetPolicyID(r.ID)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (rpvuo *ReleasePolicyViolationUpdateOne) SetReleaseID(id int) *ReleasePolicyViolationUpdateOne {
	rpvuo.mutation.SetReleaseID(id)
	return rpvuo
}

// SetRelease sets the "release" edge to the Release entity.
func (rpvuo *ReleasePolicyViolationUpdateOne) SetRelease(r *Release) *ReleasePolicyViolationUpdateOne {
	return rpvuo.SetReleaseID(r.ID)
}

// Mutation returns the ReleasePolicyViolationMutation object of the builder.
func (rpvuo *ReleasePolicyViolationUpdateOne) Mutation() *ReleasePolicyViolationMutation {
	return rpvuo.mutation
}

// ClearPolicy clears the "policy" edge to the ReleasePolicy entity.
func (rpvuo *ReleasePolicyViolationUpdateOne) ClearPolicy() *ReleasePolicyViolationUpdateOne {
	rpvuo.mutation.ClearPolicy()
	return rpvuo
}

// ClearRelease clears the "release" edge to the Release entity.
func (rpvuo *ReleasePolicyViolationUpdateOne) ClearRelease() *ReleasePolicyViolationUpdateOne {
	rpvuo.mutation.ClearRelease()
	return rpvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpvuo *ReleasePolicyViolationUpdateOne) Select(field string, fields ...string) *ReleasePolicyViolationUpdateOne {
	rpvuo.fields = append([]string{field}, fields...)
	return rpvuo
}

// Save executes the query and returns the updated ReleasePolicyViolation entity.
func (rpvuo *ReleasePolicyViolationUpdateOne) Save(ctx context.Context) (*ReleasePolicyViolation, error) {
	var (
		err  error
		node *ReleasePolicyViolation
	)
	if len(rpvuo.hooks) == 0 {
		if err = rpvuo.check(); err != nil {
			return nil, err
		}
		node, err = rpvuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleasePolicyViolationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rpvuo.check(); err != nil {
				return nil, err
			}
			rpvuo.mutation = mutation
			node, err = rpvuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rpvuo.hooks) - 1; i >= 0; i-- {
			if rpvuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rpvuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rpvuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rpvuo *ReleasePolicyViolationUpdateOne) SaveX(ctx context.Context) *ReleasePolicyViolation {
	node, err := rpvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpvuo *ReleasePolicyViolationUpdateOne) Exec(ctx context.Context) error {
	_, err := rpvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpvuo *ReleasePolicyViolationUpdateOne) ExecX(ctx context.Context) {
	if err := rpvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpvuo *ReleasePolicyViolationUpdateOne) check() error {
	if v, ok := rpvuo.mutation.Message(); ok {
		if err := releasepolicyviolation.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf("ent: validator failed for field \"message\": %w", err)}
		}
	}
	if v, ok := rpvuo.mutation.GetType(); ok {
		if err := releasepolicyviolation.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := rpvuo.mutation.Severity(); ok {
		if err := releasepolicyviolation.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf("ent: validator failed for field \"severity\": %w", err)}
		}
	}
	if _, ok := rpvuo.mutation.PolicyID(); rpvuo.mutation.PolicyCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"policy\"")
	}
	if _, ok := rpvuo.mutation.ReleaseID(); rpvuo.mutation.ReleaseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"release\"")
	}
	return nil
}

func (rpvuo *ReleasePolicyViolationUpdateOne) sqlSave(ctx context.Context) (_node *ReleasePolicyViolation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releasepolicyviolation.Table,
			Columns: releasepolicyviolation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releasepolicyviolation.FieldID,
			},
		},
	}
	id, ok := rpvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ReleasePolicyViolation.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rpvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, releasepolicyviolation.FieldID)
		for _, f := range fields {
			if !releasepolicyviolation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != releasepolicyviolation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpvuo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: releasepolicyviolation.FieldMessage,
		})
	}
	if value, ok := rpvuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: releasepolicyviolation.FieldType,
		})
	}
	if value, ok := rpvuo.mutation.Severity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: releasepolicyviolation.FieldSeverity,
		})
	}
	if rpvuo.mutation.PolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasepolicyviolation.PolicyTable,
			Columns: []string{releasepolicyviolation.PolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasepolicy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpvuo.mutation.PolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasepolicyviolation.PolicyTable,
			Columns: []string{releasepolicyviolation.PolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasepolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpvuo.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasepolicyviolation.ReleaseTable,
			Columns: []string{releasepolicyviolation.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpvuo.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasepolicyviolation.ReleaseTable,
			Columns: []string{releasepolicyviolation.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReleasePolicyViolation{config: rpvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releasepolicyviolation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
