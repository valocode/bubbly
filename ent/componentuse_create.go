// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/codescan"
	"github.com/valocode/bubbly/ent/component"
	"github.com/valocode/bubbly/ent/componentuse"
	"github.com/valocode/bubbly/ent/release"
)

// ComponentUseCreate is the builder for creating a ComponentUse entity.
type ComponentUseCreate struct {
	config
	mutation *ComponentUseMutation
	hooks    []Hook
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (cuc *ComponentUseCreate) SetReleaseID(id int) *ComponentUseCreate {
	cuc.mutation.SetReleaseID(id)
	return cuc
}

// SetRelease sets the "release" edge to the Release entity.
func (cuc *ComponentUseCreate) SetRelease(r *Release) *ComponentUseCreate {
	return cuc.SetReleaseID(r.ID)
}

// AddScanIDs adds the "scans" edge to the CodeScan entity by IDs.
func (cuc *ComponentUseCreate) AddScanIDs(ids ...int) *ComponentUseCreate {
	cuc.mutation.AddScanIDs(ids...)
	return cuc
}

// AddScans adds the "scans" edges to the CodeScan entity.
func (cuc *ComponentUseCreate) AddScans(c ...*CodeScan) *ComponentUseCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuc.AddScanIDs(ids...)
}

// SetComponentID sets the "component" edge to the Component entity by ID.
func (cuc *ComponentUseCreate) SetComponentID(id int) *ComponentUseCreate {
	cuc.mutation.SetComponentID(id)
	return cuc
}

// SetComponent sets the "component" edge to the Component entity.
func (cuc *ComponentUseCreate) SetComponent(c *Component) *ComponentUseCreate {
	return cuc.SetComponentID(c.ID)
}

// Mutation returns the ComponentUseMutation object of the builder.
func (cuc *ComponentUseCreate) Mutation() *ComponentUseMutation {
	return cuc.mutation
}

// Save creates the ComponentUse in the database.
func (cuc *ComponentUseCreate) Save(ctx context.Context) (*ComponentUse, error) {
	var (
		err  error
		node *ComponentUse
	)
	if len(cuc.hooks) == 0 {
		if err = cuc.check(); err != nil {
			return nil, err
		}
		node, err = cuc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComponentUseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuc.check(); err != nil {
				return nil, err
			}
			cuc.mutation = mutation
			if node, err = cuc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cuc.hooks) - 1; i >= 0; i-- {
			if cuc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cuc *ComponentUseCreate) SaveX(ctx context.Context) *ComponentUse {
	v, err := cuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cuc *ComponentUseCreate) Exec(ctx context.Context) error {
	_, err := cuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuc *ComponentUseCreate) ExecX(ctx context.Context) {
	if err := cuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuc *ComponentUseCreate) check() error {
	if _, ok := cuc.mutation.ReleaseID(); !ok {
		return &ValidationError{Name: "release", err: errors.New("ent: missing required edge \"release\"")}
	}
	if len(cuc.mutation.ScansIDs()) == 0 {
		return &ValidationError{Name: "scans", err: errors.New("ent: missing required edge \"scans\"")}
	}
	if _, ok := cuc.mutation.ComponentID(); !ok {
		return &ValidationError{Name: "component", err: errors.New("ent: missing required edge \"component\"")}
	}
	return nil
}

func (cuc *ComponentUseCreate) sqlSave(ctx context.Context) (*ComponentUse, error) {
	_node, _spec := cuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cuc *ComponentUseCreate) createSpec() (*ComponentUse, *sqlgraph.CreateSpec) {
	var (
		_node = &ComponentUse{config: cuc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: componentuse.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: componentuse.FieldID,
			},
		}
	)
	if nodes := cuc.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   componentuse.ReleaseTable,
			Columns: []string{componentuse.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.component_use_release = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cuc.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   componentuse.ScansTable,
			Columns: componentuse.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cuc.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   componentuse.ComponentTable,
			Columns: []string{componentuse.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.component_use_component = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ComponentUseCreateBulk is the builder for creating many ComponentUse entities in bulk.
type ComponentUseCreateBulk struct {
	config
	builders []*ComponentUseCreate
}

// Save creates the ComponentUse entities in the database.
func (cucb *ComponentUseCreateBulk) Save(ctx context.Context) ([]*ComponentUse, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cucb.builders))
	nodes := make([]*ComponentUse, len(cucb.builders))
	mutators := make([]Mutator, len(cucb.builders))
	for i := range cucb.builders {
		func(i int, root context.Context) {
			builder := cucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ComponentUseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cucb *ComponentUseCreateBulk) SaveX(ctx context.Context) []*ComponentUse {
	v, err := cucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cucb *ComponentUseCreateBulk) Exec(ctx context.Context) error {
	_, err := cucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cucb *ComponentUseCreateBulk) ExecX(ctx context.Context) {
	if err := cucb.Exec(ctx); err != nil {
		panic(err)
	}
}
