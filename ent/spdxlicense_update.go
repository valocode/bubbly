// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/spdxlicense"
)

// SPDXLicenseUpdate is the builder for updating SPDXLicense entities.
type SPDXLicenseUpdate struct {
	config
	hooks    []Hook
	mutation *SPDXLicenseMutation
}

// Where appends a list predicates to the SPDXLicenseUpdate builder.
func (slu *SPDXLicenseUpdate) Where(ps ...predicate.SPDXLicense) *SPDXLicenseUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetLicenseID sets the "license_id" field.
func (slu *SPDXLicenseUpdate) SetLicenseID(s string) *SPDXLicenseUpdate {
	slu.mutation.SetLicenseID(s)
	return slu
}

// SetName sets the "name" field.
func (slu *SPDXLicenseUpdate) SetName(s string) *SPDXLicenseUpdate {
	slu.mutation.SetName(s)
	return slu
}

// SetReference sets the "reference" field.
func (slu *SPDXLicenseUpdate) SetReference(s string) *SPDXLicenseUpdate {
	slu.mutation.SetReference(s)
	return slu
}

// SetNillableReference sets the "reference" field if the given value is not nil.
func (slu *SPDXLicenseUpdate) SetNillableReference(s *string) *SPDXLicenseUpdate {
	if s != nil {
		slu.SetReference(*s)
	}
	return slu
}

// ClearReference clears the value of the "reference" field.
func (slu *SPDXLicenseUpdate) ClearReference() *SPDXLicenseUpdate {
	slu.mutation.ClearReference()
	return slu
}

// SetDetailsURL sets the "details_url" field.
func (slu *SPDXLicenseUpdate) SetDetailsURL(s string) *SPDXLicenseUpdate {
	slu.mutation.SetDetailsURL(s)
	return slu
}

// SetNillableDetailsURL sets the "details_url" field if the given value is not nil.
func (slu *SPDXLicenseUpdate) SetNillableDetailsURL(s *string) *SPDXLicenseUpdate {
	if s != nil {
		slu.SetDetailsURL(*s)
	}
	return slu
}

// ClearDetailsURL clears the value of the "details_url" field.
func (slu *SPDXLicenseUpdate) ClearDetailsURL() *SPDXLicenseUpdate {
	slu.mutation.ClearDetailsURL()
	return slu
}

// SetIsOsiApproved sets the "is_osi_approved" field.
func (slu *SPDXLicenseUpdate) SetIsOsiApproved(b bool) *SPDXLicenseUpdate {
	slu.mutation.SetIsOsiApproved(b)
	return slu
}

// SetNillableIsOsiApproved sets the "is_osi_approved" field if the given value is not nil.
func (slu *SPDXLicenseUpdate) SetNillableIsOsiApproved(b *bool) *SPDXLicenseUpdate {
	if b != nil {
		slu.SetIsOsiApproved(*b)
	}
	return slu
}

// Mutation returns the SPDXLicenseMutation object of the builder.
func (slu *SPDXLicenseUpdate) Mutation() *SPDXLicenseMutation {
	return slu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *SPDXLicenseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(slu.hooks) == 0 {
		if err = slu.check(); err != nil {
			return 0, err
		}
		affected, err = slu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SPDXLicenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = slu.check(); err != nil {
				return 0, err
			}
			slu.mutation = mutation
			affected, err = slu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(slu.hooks) - 1; i >= 0; i-- {
			if slu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = slu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, slu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (slu *SPDXLicenseUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *SPDXLicenseUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *SPDXLicenseUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slu *SPDXLicenseUpdate) check() error {
	if v, ok := slu.mutation.LicenseID(); ok {
		if err := spdxlicense.LicenseIDValidator(v); err != nil {
			return &ValidationError{Name: "license_id", err: fmt.Errorf("ent: validator failed for field \"license_id\": %w", err)}
		}
	}
	if v, ok := slu.mutation.Name(); ok {
		if err := spdxlicense.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (slu *SPDXLicenseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spdxlicense.Table,
			Columns: spdxlicense.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: spdxlicense.FieldID,
			},
		},
	}
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slu.mutation.LicenseID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spdxlicense.FieldLicenseID,
		})
	}
	if value, ok := slu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spdxlicense.FieldName,
		})
	}
	if value, ok := slu.mutation.Reference(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spdxlicense.FieldReference,
		})
	}
	if slu.mutation.ReferenceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: spdxlicense.FieldReference,
		})
	}
	if value, ok := slu.mutation.DetailsURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spdxlicense.FieldDetailsURL,
		})
	}
	if slu.mutation.DetailsURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: spdxlicense.FieldDetailsURL,
		})
	}
	if value, ok := slu.mutation.IsOsiApproved(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: spdxlicense.FieldIsOsiApproved,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spdxlicense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SPDXLicenseUpdateOne is the builder for updating a single SPDXLicense entity.
type SPDXLicenseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SPDXLicenseMutation
}

// SetLicenseID sets the "license_id" field.
func (sluo *SPDXLicenseUpdateOne) SetLicenseID(s string) *SPDXLicenseUpdateOne {
	sluo.mutation.SetLicenseID(s)
	return sluo
}

// SetName sets the "name" field.
func (sluo *SPDXLicenseUpdateOne) SetName(s string) *SPDXLicenseUpdateOne {
	sluo.mutation.SetName(s)
	return sluo
}

// SetReference sets the "reference" field.
func (sluo *SPDXLicenseUpdateOne) SetReference(s string) *SPDXLicenseUpdateOne {
	sluo.mutation.SetReference(s)
	return sluo
}

// SetNillableReference sets the "reference" field if the given value is not nil.
func (sluo *SPDXLicenseUpdateOne) SetNillableReference(s *string) *SPDXLicenseUpdateOne {
	if s != nil {
		sluo.SetReference(*s)
	}
	return sluo
}

// ClearReference clears the value of the "reference" field.
func (sluo *SPDXLicenseUpdateOne) ClearReference() *SPDXLicenseUpdateOne {
	sluo.mutation.ClearReference()
	return sluo
}

// SetDetailsURL sets the "details_url" field.
func (sluo *SPDXLicenseUpdateOne) SetDetailsURL(s string) *SPDXLicenseUpdateOne {
	sluo.mutation.SetDetailsURL(s)
	return sluo
}

// SetNillableDetailsURL sets the "details_url" field if the given value is not nil.
func (sluo *SPDXLicenseUpdateOne) SetNillableDetailsURL(s *string) *SPDXLicenseUpdateOne {
	if s != nil {
		sluo.SetDetailsURL(*s)
	}
	return sluo
}

// ClearDetailsURL clears the value of the "details_url" field.
func (sluo *SPDXLicenseUpdateOne) ClearDetailsURL() *SPDXLicenseUpdateOne {
	sluo.mutation.ClearDetailsURL()
	return sluo
}

// SetIsOsiApproved sets the "is_osi_approved" field.
func (sluo *SPDXLicenseUpdateOne) SetIsOsiApproved(b bool) *SPDXLicenseUpdateOne {
	sluo.mutation.SetIsOsiApproved(b)
	return sluo
}

// SetNillableIsOsiApproved sets the "is_osi_approved" field if the given value is not nil.
func (sluo *SPDXLicenseUpdateOne) SetNillableIsOsiApproved(b *bool) *SPDXLicenseUpdateOne {
	if b != nil {
		sluo.SetIsOsiApproved(*b)
	}
	return sluo
}

// Mutation returns the SPDXLicenseMutation object of the builder.
func (sluo *SPDXLicenseUpdateOne) Mutation() *SPDXLicenseMutation {
	return sluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *SPDXLicenseUpdateOne) Select(field string, fields ...string) *SPDXLicenseUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated SPDXLicense entity.
func (sluo *SPDXLicenseUpdateOne) Save(ctx context.Context) (*SPDXLicense, error) {
	var (
		err  error
		node *SPDXLicense
	)
	if len(sluo.hooks) == 0 {
		if err = sluo.check(); err != nil {
			return nil, err
		}
		node, err = sluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SPDXLicenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sluo.check(); err != nil {
				return nil, err
			}
			sluo.mutation = mutation
			node, err = sluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sluo.hooks) - 1; i >= 0; i-- {
			if sluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *SPDXLicenseUpdateOne) SaveX(ctx context.Context) *SPDXLicense {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *SPDXLicenseUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *SPDXLicenseUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sluo *SPDXLicenseUpdateOne) check() error {
	if v, ok := sluo.mutation.LicenseID(); ok {
		if err := spdxlicense.LicenseIDValidator(v); err != nil {
			return &ValidationError{Name: "license_id", err: fmt.Errorf("ent: validator failed for field \"license_id\": %w", err)}
		}
	}
	if v, ok := sluo.mutation.Name(); ok {
		if err := spdxlicense.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (sluo *SPDXLicenseUpdateOne) sqlSave(ctx context.Context) (_node *SPDXLicense, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spdxlicense.Table,
			Columns: spdxlicense.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: spdxlicense.FieldID,
			},
		},
	}
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SPDXLicense.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spdxlicense.FieldID)
		for _, f := range fields {
			if !spdxlicense.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spdxlicense.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sluo.mutation.LicenseID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spdxlicense.FieldLicenseID,
		})
	}
	if value, ok := sluo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spdxlicense.FieldName,
		})
	}
	if value, ok := sluo.mutation.Reference(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spdxlicense.FieldReference,
		})
	}
	if sluo.mutation.ReferenceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: spdxlicense.FieldReference,
		})
	}
	if value, ok := sluo.mutation.DetailsURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spdxlicense.FieldDetailsURL,
		})
	}
	if sluo.mutation.DetailsURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: spdxlicense.FieldDetailsURL,
		})
	}
	if value, ok := sluo.mutation.IsOsiApproved(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: spdxlicense.FieldIsOsiApproved,
		})
	}
	_node = &SPDXLicense{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spdxlicense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
