// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/cve"
	"github.com/valocode/bubbly/ent/cverule"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/project"
	"github.com/valocode/bubbly/ent/repo"
)

// CVERuleUpdate is the builder for updating CVERule entities.
type CVERuleUpdate struct {
	config
	hooks    []Hook
	mutation *CVERuleMutation
}

// Where adds a new predicate for the CVERuleUpdate builder.
func (cru *CVERuleUpdate) Where(ps ...predicate.CVERule) *CVERuleUpdate {
	cru.mutation.predicates = append(cru.mutation.predicates, ps...)
	return cru
}

// SetName sets the "name" field.
func (cru *CVERuleUpdate) SetName(s string) *CVERuleUpdate {
	cru.mutation.SetName(s)
	return cru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cru *CVERuleUpdate) SetNillableName(s *string) *CVERuleUpdate {
	if s != nil {
		cru.SetName(*s)
	}
	return cru
}

// ClearName clears the value of the "name" field.
func (cru *CVERuleUpdate) ClearName() *CVERuleUpdate {
	cru.mutation.ClearName()
	return cru
}

// SetCveID sets the "cve" edge to the CVE entity by ID.
func (cru *CVERuleUpdate) SetCveID(id int) *CVERuleUpdate {
	cru.mutation.SetCveID(id)
	return cru
}

// SetCve sets the "cve" edge to the CVE entity.
func (cru *CVERuleUpdate) SetCve(c *CVE) *CVERuleUpdate {
	return cru.SetCveID(c.ID)
}

// AddProjectIDs adds the "project" edge to the Project entity by IDs.
func (cru *CVERuleUpdate) AddProjectIDs(ids ...int) *CVERuleUpdate {
	cru.mutation.AddProjectIDs(ids...)
	return cru
}

// AddProject adds the "project" edges to the Project entity.
func (cru *CVERuleUpdate) AddProject(p ...*Project) *CVERuleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cru.AddProjectIDs(ids...)
}

// AddRepoIDs adds the "repo" edge to the Repo entity by IDs.
func (cru *CVERuleUpdate) AddRepoIDs(ids ...int) *CVERuleUpdate {
	cru.mutation.AddRepoIDs(ids...)
	return cru
}

// AddRepo adds the "repo" edges to the Repo entity.
func (cru *CVERuleUpdate) AddRepo(r ...*Repo) *CVERuleUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cru.AddRepoIDs(ids...)
}

// Mutation returns the CVERuleMutation object of the builder.
func (cru *CVERuleUpdate) Mutation() *CVERuleMutation {
	return cru.mutation
}

// ClearCve clears the "cve" edge to the CVE entity.
func (cru *CVERuleUpdate) ClearCve() *CVERuleUpdate {
	cru.mutation.ClearCve()
	return cru
}

// ClearProject clears all "project" edges to the Project entity.
func (cru *CVERuleUpdate) ClearProject() *CVERuleUpdate {
	cru.mutation.ClearProject()
	return cru
}

// RemoveProjectIDs removes the "project" edge to Project entities by IDs.
func (cru *CVERuleUpdate) RemoveProjectIDs(ids ...int) *CVERuleUpdate {
	cru.mutation.RemoveProjectIDs(ids...)
	return cru
}

// RemoveProject removes "project" edges to Project entities.
func (cru *CVERuleUpdate) RemoveProject(p ...*Project) *CVERuleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cru.RemoveProjectIDs(ids...)
}

// ClearRepo clears all "repo" edges to the Repo entity.
func (cru *CVERuleUpdate) ClearRepo() *CVERuleUpdate {
	cru.mutation.ClearRepo()
	return cru
}

// RemoveRepoIDs removes the "repo" edge to Repo entities by IDs.
func (cru *CVERuleUpdate) RemoveRepoIDs(ids ...int) *CVERuleUpdate {
	cru.mutation.RemoveRepoIDs(ids...)
	return cru
}

// RemoveRepo removes "repo" edges to Repo entities.
func (cru *CVERuleUpdate) RemoveRepo(r ...*Repo) *CVERuleUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cru.RemoveRepoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *CVERuleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cru.hooks) == 0 {
		if err = cru.check(); err != nil {
			return 0, err
		}
		affected, err = cru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CVERuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cru.check(); err != nil {
				return 0, err
			}
			cru.mutation = mutation
			affected, err = cru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cru.hooks) - 1; i >= 0; i-- {
			mut = cru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cru *CVERuleUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *CVERuleUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *CVERuleUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cru *CVERuleUpdate) check() error {
	if _, ok := cru.mutation.CveID(); cru.mutation.CveCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"cve\"")
	}
	return nil
}

func (cru *CVERuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cverule.Table,
			Columns: cverule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cverule.FieldID,
			},
		},
	}
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cverule.FieldName,
		})
	}
	if cru.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cverule.FieldName,
		})
	}
	if cru.mutation.CveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cverule.CveTable,
			Columns: []string{cverule.CveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cve.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.CveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cverule.CveTable,
			Columns: []string{cverule.CveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cve.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cverule.ProjectTable,
			Columns: cverule.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.RemovedProjectIDs(); len(nodes) > 0 && !cru.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cverule.ProjectTable,
			Columns: cverule.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cverule.ProjectTable,
			Columns: cverule.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cverule.RepoTable,
			Columns: cverule.RepoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.RemovedRepoIDs(); len(nodes) > 0 && !cru.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cverule.RepoTable,
			Columns: cverule.RepoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cverule.RepoTable,
			Columns: cverule.RepoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cverule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CVERuleUpdateOne is the builder for updating a single CVERule entity.
type CVERuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CVERuleMutation
}

// SetName sets the "name" field.
func (cruo *CVERuleUpdateOne) SetName(s string) *CVERuleUpdateOne {
	cruo.mutation.SetName(s)
	return cruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cruo *CVERuleUpdateOne) SetNillableName(s *string) *CVERuleUpdateOne {
	if s != nil {
		cruo.SetName(*s)
	}
	return cruo
}

// ClearName clears the value of the "name" field.
func (cruo *CVERuleUpdateOne) ClearName() *CVERuleUpdateOne {
	cruo.mutation.ClearName()
	return cruo
}

// SetCveID sets the "cve" edge to the CVE entity by ID.
func (cruo *CVERuleUpdateOne) SetCveID(id int) *CVERuleUpdateOne {
	cruo.mutation.SetCveID(id)
	return cruo
}

// SetCve sets the "cve" edge to the CVE entity.
func (cruo *CVERuleUpdateOne) SetCve(c *CVE) *CVERuleUpdateOne {
	return cruo.SetCveID(c.ID)
}

// AddProjectIDs adds the "project" edge to the Project entity by IDs.
func (cruo *CVERuleUpdateOne) AddProjectIDs(ids ...int) *CVERuleUpdateOne {
	cruo.mutation.AddProjectIDs(ids...)
	return cruo
}

// AddProject adds the "project" edges to the Project entity.
func (cruo *CVERuleUpdateOne) AddProject(p ...*Project) *CVERuleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cruo.AddProjectIDs(ids...)
}

// AddRepoIDs adds the "repo" edge to the Repo entity by IDs.
func (cruo *CVERuleUpdateOne) AddRepoIDs(ids ...int) *CVERuleUpdateOne {
	cruo.mutation.AddRepoIDs(ids...)
	return cruo
}

// AddRepo adds the "repo" edges to the Repo entity.
func (cruo *CVERuleUpdateOne) AddRepo(r ...*Repo) *CVERuleUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cruo.AddRepoIDs(ids...)
}

// Mutation returns the CVERuleMutation object of the builder.
func (cruo *CVERuleUpdateOne) Mutation() *CVERuleMutation {
	return cruo.mutation
}

// ClearCve clears the "cve" edge to the CVE entity.
func (cruo *CVERuleUpdateOne) ClearCve() *CVERuleUpdateOne {
	cruo.mutation.ClearCve()
	return cruo
}

// ClearProject clears all "project" edges to the Project entity.
func (cruo *CVERuleUpdateOne) ClearProject() *CVERuleUpdateOne {
	cruo.mutation.ClearProject()
	return cruo
}

// RemoveProjectIDs removes the "project" edge to Project entities by IDs.
func (cruo *CVERuleUpdateOne) RemoveProjectIDs(ids ...int) *CVERuleUpdateOne {
	cruo.mutation.RemoveProjectIDs(ids...)
	return cruo
}

// RemoveProject removes "project" edges to Project entities.
func (cruo *CVERuleUpdateOne) RemoveProject(p ...*Project) *CVERuleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cruo.RemoveProjectIDs(ids...)
}

// ClearRepo clears all "repo" edges to the Repo entity.
func (cruo *CVERuleUpdateOne) ClearRepo() *CVERuleUpdateOne {
	cruo.mutation.ClearRepo()
	return cruo
}

// RemoveRepoIDs removes the "repo" edge to Repo entities by IDs.
func (cruo *CVERuleUpdateOne) RemoveRepoIDs(ids ...int) *CVERuleUpdateOne {
	cruo.mutation.RemoveRepoIDs(ids...)
	return cruo
}

// RemoveRepo removes "repo" edges to Repo entities.
func (cruo *CVERuleUpdateOne) RemoveRepo(r ...*Repo) *CVERuleUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cruo.RemoveRepoIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *CVERuleUpdateOne) Select(field string, fields ...string) *CVERuleUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated CVERule entity.
func (cruo *CVERuleUpdateOne) Save(ctx context.Context) (*CVERule, error) {
	var (
		err  error
		node *CVERule
	)
	if len(cruo.hooks) == 0 {
		if err = cruo.check(); err != nil {
			return nil, err
		}
		node, err = cruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CVERuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cruo.check(); err != nil {
				return nil, err
			}
			cruo.mutation = mutation
			node, err = cruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cruo.hooks) - 1; i >= 0; i-- {
			mut = cruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *CVERuleUpdateOne) SaveX(ctx context.Context) *CVERule {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *CVERuleUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *CVERuleUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cruo *CVERuleUpdateOne) check() error {
	if _, ok := cruo.mutation.CveID(); cruo.mutation.CveCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"cve\"")
	}
	return nil
}

func (cruo *CVERuleUpdateOne) sqlSave(ctx context.Context) (_node *CVERule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cverule.Table,
			Columns: cverule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cverule.FieldID,
			},
		},
	}
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CVERule.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cverule.FieldID)
		for _, f := range fields {
			if !cverule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cverule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cverule.FieldName,
		})
	}
	if cruo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cverule.FieldName,
		})
	}
	if cruo.mutation.CveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cverule.CveTable,
			Columns: []string{cverule.CveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cve.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.CveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cverule.CveTable,
			Columns: []string{cverule.CveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cve.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cverule.ProjectTable,
			Columns: cverule.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.RemovedProjectIDs(); len(nodes) > 0 && !cruo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cverule.ProjectTable,
			Columns: cverule.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cverule.ProjectTable,
			Columns: cverule.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cverule.RepoTable,
			Columns: cverule.RepoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.RemovedRepoIDs(); len(nodes) > 0 && !cruo.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cverule.RepoTable,
			Columns: cverule.RepoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cverule.RepoTable,
			Columns: cverule.RepoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CVERule{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cverule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
