// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/artifact"
	"github.com/valocode/bubbly/ent/codescan"
	"github.com/valocode/bubbly/ent/gitcommit"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasecomponent"
	"github.com/valocode/bubbly/ent/releaseentry"
	"github.com/valocode/bubbly/ent/releaselicense"
	"github.com/valocode/bubbly/ent/releasepolicyviolation"
	"github.com/valocode/bubbly/ent/releasevulnerability"
	"github.com/valocode/bubbly/ent/repo"
	schema "github.com/valocode/bubbly/ent/schema/types"
	"github.com/valocode/bubbly/ent/testrun"
	"github.com/valocode/bubbly/ent/vulnerabilityreview"
)

// ReleaseUpdate is the builder for updating Release entities.
type ReleaseUpdate struct {
	config
	hooks    []Hook
	mutation *ReleaseMutation
}

// Where appends a list predicates to the ReleaseUpdate builder.
func (ru *ReleaseUpdate) Where(ps ...predicate.Release) *ReleaseUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *ReleaseUpdate) SetName(s string) *ReleaseUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetVersion sets the "version" field.
func (ru *ReleaseUpdate) SetVersion(s string) *ReleaseUpdate {
	ru.mutation.SetVersion(s)
	return ru
}

// SetLabels sets the "labels" field.
func (ru *ReleaseUpdate) SetLabels(s schema.Labels) *ReleaseUpdate {
	ru.mutation.SetLabels(s)
	return ru
}

// ClearLabels clears the value of the "labels" field.
func (ru *ReleaseUpdate) ClearLabels() *ReleaseUpdate {
	ru.mutation.ClearLabels()
	return ru
}

// AddSubreleaseIDs adds the "subreleases" edge to the Release entity by IDs.
func (ru *ReleaseUpdate) AddSubreleaseIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.AddSubreleaseIDs(ids...)
	return ru
}

// AddSubreleases adds the "subreleases" edges to the Release entity.
func (ru *ReleaseUpdate) AddSubreleases(r ...*Release) *ReleaseUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddSubreleaseIDs(ids...)
}

// AddDependencyIDs adds the "dependencies" edge to the Release entity by IDs.
func (ru *ReleaseUpdate) AddDependencyIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.AddDependencyIDs(ids...)
	return ru
}

// AddDependencies adds the "dependencies" edges to the Release entity.
func (ru *ReleaseUpdate) AddDependencies(r ...*Release) *ReleaseUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddDependencyIDs(ids...)
}

// SetCommitID sets the "commit" edge to the GitCommit entity by ID.
func (ru *ReleaseUpdate) SetCommitID(id int) *ReleaseUpdate {
	ru.mutation.SetCommitID(id)
	return ru
}

// SetCommit sets the "commit" edge to the GitCommit entity.
func (ru *ReleaseUpdate) SetCommit(g *GitCommit) *ReleaseUpdate {
	return ru.SetCommitID(g.ID)
}

// SetHeadOfID sets the "head_of" edge to the Repo entity by ID.
func (ru *ReleaseUpdate) SetHeadOfID(id int) *ReleaseUpdate {
	ru.mutation.SetHeadOfID(id)
	return ru
}

// SetNillableHeadOfID sets the "head_of" edge to the Repo entity by ID if the given value is not nil.
func (ru *ReleaseUpdate) SetNillableHeadOfID(id *int) *ReleaseUpdate {
	if id != nil {
		ru = ru.SetHeadOfID(*id)
	}
	return ru
}

// SetHeadOf sets the "head_of" edge to the Repo entity.
func (ru *ReleaseUpdate) SetHeadOf(r *Repo) *ReleaseUpdate {
	return ru.SetHeadOfID(r.ID)
}

// AddLogIDs adds the "log" edge to the ReleaseEntry entity by IDs.
func (ru *ReleaseUpdate) AddLogIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.AddLogIDs(ids...)
	return ru
}

// AddLog adds the "log" edges to the ReleaseEntry entity.
func (ru *ReleaseUpdate) AddLog(r ...*ReleaseEntry) *ReleaseUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddLogIDs(ids...)
}

// AddViolationIDs adds the "violations" edge to the ReleasePolicyViolation entity by IDs.
func (ru *ReleaseUpdate) AddViolationIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.AddViolationIDs(ids...)
	return ru
}

// AddViolations adds the "violations" edges to the ReleasePolicyViolation entity.
func (ru *ReleaseUpdate) AddViolations(r ...*ReleasePolicyViolation) *ReleaseUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddViolationIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (ru *ReleaseUpdate) AddArtifactIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.AddArtifactIDs(ids...)
	return ru
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (ru *ReleaseUpdate) AddArtifacts(a ...*Artifact) *ReleaseUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddArtifactIDs(ids...)
}

// AddComponentIDs adds the "components" edge to the ReleaseComponent entity by IDs.
func (ru *ReleaseUpdate) AddComponentIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.AddComponentIDs(ids...)
	return ru
}

// AddComponents adds the "components" edges to the ReleaseComponent entity.
func (ru *ReleaseUpdate) AddComponents(r ...*ReleaseComponent) *ReleaseUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddComponentIDs(ids...)
}

// AddVulnerabilityIDs adds the "vulnerabilities" edge to the ReleaseVulnerability entity by IDs.
func (ru *ReleaseUpdate) AddVulnerabilityIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.AddVulnerabilityIDs(ids...)
	return ru
}

// AddVulnerabilities adds the "vulnerabilities" edges to the ReleaseVulnerability entity.
func (ru *ReleaseUpdate) AddVulnerabilities(r ...*ReleaseVulnerability) *ReleaseUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddVulnerabilityIDs(ids...)
}

// AddLicenseIDs adds the "licenses" edge to the ReleaseLicense entity by IDs.
func (ru *ReleaseUpdate) AddLicenseIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.AddLicenseIDs(ids...)
	return ru
}

// AddLicenses adds the "licenses" edges to the ReleaseLicense entity.
func (ru *ReleaseUpdate) AddLicenses(r ...*ReleaseLicense) *ReleaseUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddLicenseIDs(ids...)
}

// AddCodeScanIDs adds the "code_scans" edge to the CodeScan entity by IDs.
func (ru *ReleaseUpdate) AddCodeScanIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.AddCodeScanIDs(ids...)
	return ru
}

// AddCodeScans adds the "code_scans" edges to the CodeScan entity.
func (ru *ReleaseUpdate) AddCodeScans(c ...*CodeScan) *ReleaseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.AddCodeScanIDs(ids...)
}

// AddTestRunIDs adds the "test_runs" edge to the TestRun entity by IDs.
func (ru *ReleaseUpdate) AddTestRunIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.AddTestRunIDs(ids...)
	return ru
}

// AddTestRuns adds the "test_runs" edges to the TestRun entity.
func (ru *ReleaseUpdate) AddTestRuns(t ...*TestRun) *ReleaseUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.AddTestRunIDs(ids...)
}

// AddVulnerabilityReviewIDs adds the "vulnerability_reviews" edge to the VulnerabilityReview entity by IDs.
func (ru *ReleaseUpdate) AddVulnerabilityReviewIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.AddVulnerabilityReviewIDs(ids...)
	return ru
}

// AddVulnerabilityReviews adds the "vulnerability_reviews" edges to the VulnerabilityReview entity.
func (ru *ReleaseUpdate) AddVulnerabilityReviews(v ...*VulnerabilityReview) *ReleaseUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ru.AddVulnerabilityReviewIDs(ids...)
}

// Mutation returns the ReleaseMutation object of the builder.
func (ru *ReleaseUpdate) Mutation() *ReleaseMutation {
	return ru.mutation
}

// ClearSubreleases clears all "subreleases" edges to the Release entity.
func (ru *ReleaseUpdate) ClearSubreleases() *ReleaseUpdate {
	ru.mutation.ClearSubreleases()
	return ru
}

// RemoveSubreleaseIDs removes the "subreleases" edge to Release entities by IDs.
func (ru *ReleaseUpdate) RemoveSubreleaseIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.RemoveSubreleaseIDs(ids...)
	return ru
}

// RemoveSubreleases removes "subreleases" edges to Release entities.
func (ru *ReleaseUpdate) RemoveSubreleases(r ...*Release) *ReleaseUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveSubreleaseIDs(ids...)
}

// ClearDependencies clears all "dependencies" edges to the Release entity.
func (ru *ReleaseUpdate) ClearDependencies() *ReleaseUpdate {
	ru.mutation.ClearDependencies()
	return ru
}

// RemoveDependencyIDs removes the "dependencies" edge to Release entities by IDs.
func (ru *ReleaseUpdate) RemoveDependencyIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.RemoveDependencyIDs(ids...)
	return ru
}

// RemoveDependencies removes "dependencies" edges to Release entities.
func (ru *ReleaseUpdate) RemoveDependencies(r ...*Release) *ReleaseUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveDependencyIDs(ids...)
}

// ClearCommit clears the "commit" edge to the GitCommit entity.
func (ru *ReleaseUpdate) ClearCommit() *ReleaseUpdate {
	ru.mutation.ClearCommit()
	return ru
}

// ClearHeadOf clears the "head_of" edge to the Repo entity.
func (ru *ReleaseUpdate) ClearHeadOf() *ReleaseUpdate {
	ru.mutation.ClearHeadOf()
	return ru
}

// ClearLog clears all "log" edges to the ReleaseEntry entity.
func (ru *ReleaseUpdate) ClearLog() *ReleaseUpdate {
	ru.mutation.ClearLog()
	return ru
}

// RemoveLogIDs removes the "log" edge to ReleaseEntry entities by IDs.
func (ru *ReleaseUpdate) RemoveLogIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.RemoveLogIDs(ids...)
	return ru
}

// RemoveLog removes "log" edges to ReleaseEntry entities.
func (ru *ReleaseUpdate) RemoveLog(r ...*ReleaseEntry) *ReleaseUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveLogIDs(ids...)
}

// ClearViolations clears all "violations" edges to the ReleasePolicyViolation entity.
func (ru *ReleaseUpdate) ClearViolations() *ReleaseUpdate {
	ru.mutation.ClearViolations()
	return ru
}

// RemoveViolationIDs removes the "violations" edge to ReleasePolicyViolation entities by IDs.
func (ru *ReleaseUpdate) RemoveViolationIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.RemoveViolationIDs(ids...)
	return ru
}

// RemoveViolations removes "violations" edges to ReleasePolicyViolation entities.
func (ru *ReleaseUpdate) RemoveViolations(r ...*ReleasePolicyViolation) *ReleaseUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveViolationIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (ru *ReleaseUpdate) ClearArtifacts() *ReleaseUpdate {
	ru.mutation.ClearArtifacts()
	return ru
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (ru *ReleaseUpdate) RemoveArtifactIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.RemoveArtifactIDs(ids...)
	return ru
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (ru *ReleaseUpdate) RemoveArtifacts(a ...*Artifact) *ReleaseUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveArtifactIDs(ids...)
}

// ClearComponents clears all "components" edges to the ReleaseComponent entity.
func (ru *ReleaseUpdate) ClearComponents() *ReleaseUpdate {
	ru.mutation.ClearComponents()
	return ru
}

// RemoveComponentIDs removes the "components" edge to ReleaseComponent entities by IDs.
func (ru *ReleaseUpdate) RemoveComponentIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.RemoveComponentIDs(ids...)
	return ru
}

// RemoveComponents removes "components" edges to ReleaseComponent entities.
func (ru *ReleaseUpdate) RemoveComponents(r ...*ReleaseComponent) *ReleaseUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveComponentIDs(ids...)
}

// ClearVulnerabilities clears all "vulnerabilities" edges to the ReleaseVulnerability entity.
func (ru *ReleaseUpdate) ClearVulnerabilities() *ReleaseUpdate {
	ru.mutation.ClearVulnerabilities()
	return ru
}

// RemoveVulnerabilityIDs removes the "vulnerabilities" edge to ReleaseVulnerability entities by IDs.
func (ru *ReleaseUpdate) RemoveVulnerabilityIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.RemoveVulnerabilityIDs(ids...)
	return ru
}

// RemoveVulnerabilities removes "vulnerabilities" edges to ReleaseVulnerability entities.
func (ru *ReleaseUpdate) RemoveVulnerabilities(r ...*ReleaseVulnerability) *ReleaseUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveVulnerabilityIDs(ids...)
}

// ClearLicenses clears all "licenses" edges to the ReleaseLicense entity.
func (ru *ReleaseUpdate) ClearLicenses() *ReleaseUpdate {
	ru.mutation.ClearLicenses()
	return ru
}

// RemoveLicenseIDs removes the "licenses" edge to ReleaseLicense entities by IDs.
func (ru *ReleaseUpdate) RemoveLicenseIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.RemoveLicenseIDs(ids...)
	return ru
}

// RemoveLicenses removes "licenses" edges to ReleaseLicense entities.
func (ru *ReleaseUpdate) RemoveLicenses(r ...*ReleaseLicense) *ReleaseUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveLicenseIDs(ids...)
}

// ClearCodeScans clears all "code_scans" edges to the CodeScan entity.
func (ru *ReleaseUpdate) ClearCodeScans() *ReleaseUpdate {
	ru.mutation.ClearCodeScans()
	return ru
}

// RemoveCodeScanIDs removes the "code_scans" edge to CodeScan entities by IDs.
func (ru *ReleaseUpdate) RemoveCodeScanIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.RemoveCodeScanIDs(ids...)
	return ru
}

// RemoveCodeScans removes "code_scans" edges to CodeScan entities.
func (ru *ReleaseUpdate) RemoveCodeScans(c ...*CodeScan) *ReleaseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.RemoveCodeScanIDs(ids...)
}

// ClearTestRuns clears all "test_runs" edges to the TestRun entity.
func (ru *ReleaseUpdate) ClearTestRuns() *ReleaseUpdate {
	ru.mutation.ClearTestRuns()
	return ru
}

// RemoveTestRunIDs removes the "test_runs" edge to TestRun entities by IDs.
func (ru *ReleaseUpdate) RemoveTestRunIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.RemoveTestRunIDs(ids...)
	return ru
}

// RemoveTestRuns removes "test_runs" edges to TestRun entities.
func (ru *ReleaseUpdate) RemoveTestRuns(t ...*TestRun) *ReleaseUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.RemoveTestRunIDs(ids...)
}

// ClearVulnerabilityReviews clears all "vulnerability_reviews" edges to the VulnerabilityReview entity.
func (ru *ReleaseUpdate) ClearVulnerabilityReviews() *ReleaseUpdate {
	ru.mutation.ClearVulnerabilityReviews()
	return ru
}

// RemoveVulnerabilityReviewIDs removes the "vulnerability_reviews" edge to VulnerabilityReview entities by IDs.
func (ru *ReleaseUpdate) RemoveVulnerabilityReviewIDs(ids ...int) *ReleaseUpdate {
	ru.mutation.RemoveVulnerabilityReviewIDs(ids...)
	return ru
}

// RemoveVulnerabilityReviews removes "vulnerability_reviews" edges to VulnerabilityReview entities.
func (ru *ReleaseUpdate) RemoveVulnerabilityReviews(v ...*VulnerabilityReview) *ReleaseUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ru.RemoveVulnerabilityReviewIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReleaseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReleaseUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReleaseUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReleaseUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReleaseUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := release.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Version(); ok {
		if err := release.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf("ent: validator failed for field \"version\": %w", err)}
		}
	}
	if _, ok := ru.mutation.CommitID(); ru.mutation.CommitCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"commit\"")
	}
	return nil
}

func (ru *ReleaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   release.Table,
			Columns: release.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: release.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: release.FieldName,
		})
	}
	if value, ok := ru.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: release.FieldVersion,
		})
	}
	if value, ok := ru.mutation.Labels(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: release.FieldLabels,
		})
	}
	if ru.mutation.LabelsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: release.FieldLabels,
		})
	}
	if ru.mutation.SubreleasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.SubreleasesTable,
			Columns: release.SubreleasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedSubreleasesIDs(); len(nodes) > 0 && !ru.mutation.SubreleasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.SubreleasesTable,
			Columns: release.SubreleasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SubreleasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.SubreleasesTable,
			Columns: release.SubreleasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   release.DependenciesTable,
			Columns: release.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !ru.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   release.DependenciesTable,
			Columns: release.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   release.DependenciesTable,
			Columns: release.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.CommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   release.CommitTable,
			Columns: []string{release.CommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gitcommit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   release.CommitTable,
			Columns: []string{release.CommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gitcommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.HeadOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   release.HeadOfTable,
			Columns: []string{release.HeadOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.HeadOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   release.HeadOfTable,
			Columns: []string{release.HeadOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.LogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.LogTable,
			Columns: []string{release.LogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaseentry.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedLogIDs(); len(nodes) > 0 && !ru.mutation.LogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.LogTable,
			Columns: []string{release.LogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaseentry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.LogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.LogTable,
			Columns: []string{release.LogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaseentry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ViolationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ViolationsTable,
			Columns: []string{release.ViolationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasepolicyviolation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedViolationsIDs(); len(nodes) > 0 && !ru.mutation.ViolationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ViolationsTable,
			Columns: []string{release.ViolationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasepolicyviolation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ViolationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ViolationsTable,
			Columns: []string{release.ViolationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasepolicyviolation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ArtifactsTable,
			Columns: []string{release.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artifact.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !ru.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ArtifactsTable,
			Columns: []string{release.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artifact.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ArtifactsTable,
			Columns: []string{release.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artifact.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ComponentsTable,
			Columns: []string{release.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasecomponent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !ru.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ComponentsTable,
			Columns: []string{release.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasecomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ComponentsTable,
			Columns: []string{release.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasecomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.VulnerabilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.VulnerabilitiesTable,
			Columns: []string{release.VulnerabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedVulnerabilitiesIDs(); len(nodes) > 0 && !ru.mutation.VulnerabilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.VulnerabilitiesTable,
			Columns: []string{release.VulnerabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.VulnerabilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.VulnerabilitiesTable,
			Columns: []string{release.VulnerabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.LicensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.LicensesTable,
			Columns: []string{release.LicensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaselicense.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedLicensesIDs(); len(nodes) > 0 && !ru.mutation.LicensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.LicensesTable,
			Columns: []string{release.LicensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaselicense.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.LicensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.LicensesTable,
			Columns: []string{release.LicensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaselicense.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.CodeScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.CodeScansTable,
			Columns: []string{release.CodeScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedCodeScansIDs(); len(nodes) > 0 && !ru.mutation.CodeScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.CodeScansTable,
			Columns: []string{release.CodeScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CodeScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.CodeScansTable,
			Columns: []string{release.CodeScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.TestRunsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.TestRunsTable,
			Columns: []string{release.TestRunsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testrun.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedTestRunsIDs(); len(nodes) > 0 && !ru.mutation.TestRunsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.TestRunsTable,
			Columns: []string{release.TestRunsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testrun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TestRunsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.TestRunsTable,
			Columns: []string{release.TestRunsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testrun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.VulnerabilityReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.VulnerabilityReviewsTable,
			Columns: release.VulnerabilityReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedVulnerabilityReviewsIDs(); len(nodes) > 0 && !ru.mutation.VulnerabilityReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.VulnerabilityReviewsTable,
			Columns: release.VulnerabilityReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.VulnerabilityReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.VulnerabilityReviewsTable,
			Columns: release.VulnerabilityReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{release.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ReleaseUpdateOne is the builder for updating a single Release entity.
type ReleaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReleaseMutation
}

// SetName sets the "name" field.
func (ruo *ReleaseUpdateOne) SetName(s string) *ReleaseUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetVersion sets the "version" field.
func (ruo *ReleaseUpdateOne) SetVersion(s string) *ReleaseUpdateOne {
	ruo.mutation.SetVersion(s)
	return ruo
}

// SetLabels sets the "labels" field.
func (ruo *ReleaseUpdateOne) SetLabels(s schema.Labels) *ReleaseUpdateOne {
	ruo.mutation.SetLabels(s)
	return ruo
}

// ClearLabels clears the value of the "labels" field.
func (ruo *ReleaseUpdateOne) ClearLabels() *ReleaseUpdateOne {
	ruo.mutation.ClearLabels()
	return ruo
}

// AddSubreleaseIDs adds the "subreleases" edge to the Release entity by IDs.
func (ruo *ReleaseUpdateOne) AddSubreleaseIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.AddSubreleaseIDs(ids...)
	return ruo
}

// AddSubreleases adds the "subreleases" edges to the Release entity.
func (ruo *ReleaseUpdateOne) AddSubreleases(r ...*Release) *ReleaseUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddSubreleaseIDs(ids...)
}

// AddDependencyIDs adds the "dependencies" edge to the Release entity by IDs.
func (ruo *ReleaseUpdateOne) AddDependencyIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.AddDependencyIDs(ids...)
	return ruo
}

// AddDependencies adds the "dependencies" edges to the Release entity.
func (ruo *ReleaseUpdateOne) AddDependencies(r ...*Release) *ReleaseUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddDependencyIDs(ids...)
}

// SetCommitID sets the "commit" edge to the GitCommit entity by ID.
func (ruo *ReleaseUpdateOne) SetCommitID(id int) *ReleaseUpdateOne {
	ruo.mutation.SetCommitID(id)
	return ruo
}

// SetCommit sets the "commit" edge to the GitCommit entity.
func (ruo *ReleaseUpdateOne) SetCommit(g *GitCommit) *ReleaseUpdateOne {
	return ruo.SetCommitID(g.ID)
}

// SetHeadOfID sets the "head_of" edge to the Repo entity by ID.
func (ruo *ReleaseUpdateOne) SetHeadOfID(id int) *ReleaseUpdateOne {
	ruo.mutation.SetHeadOfID(id)
	return ruo
}

// SetNillableHeadOfID sets the "head_of" edge to the Repo entity by ID if the given value is not nil.
func (ruo *ReleaseUpdateOne) SetNillableHeadOfID(id *int) *ReleaseUpdateOne {
	if id != nil {
		ruo = ruo.SetHeadOfID(*id)
	}
	return ruo
}

// SetHeadOf sets the "head_of" edge to the Repo entity.
func (ruo *ReleaseUpdateOne) SetHeadOf(r *Repo) *ReleaseUpdateOne {
	return ruo.SetHeadOfID(r.ID)
}

// AddLogIDs adds the "log" edge to the ReleaseEntry entity by IDs.
func (ruo *ReleaseUpdateOne) AddLogIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.AddLogIDs(ids...)
	return ruo
}

// AddLog adds the "log" edges to the ReleaseEntry entity.
func (ruo *ReleaseUpdateOne) AddLog(r ...*ReleaseEntry) *ReleaseUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddLogIDs(ids...)
}

// AddViolationIDs adds the "violations" edge to the ReleasePolicyViolation entity by IDs.
func (ruo *ReleaseUpdateOne) AddViolationIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.AddViolationIDs(ids...)
	return ruo
}

// AddViolations adds the "violations" edges to the ReleasePolicyViolation entity.
func (ruo *ReleaseUpdateOne) AddViolations(r ...*ReleasePolicyViolation) *ReleaseUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddViolationIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (ruo *ReleaseUpdateOne) AddArtifactIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.AddArtifactIDs(ids...)
	return ruo
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (ruo *ReleaseUpdateOne) AddArtifacts(a ...*Artifact) *ReleaseUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddArtifactIDs(ids...)
}

// AddComponentIDs adds the "components" edge to the ReleaseComponent entity by IDs.
func (ruo *ReleaseUpdateOne) AddComponentIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.AddComponentIDs(ids...)
	return ruo
}

// AddComponents adds the "components" edges to the ReleaseComponent entity.
func (ruo *ReleaseUpdateOne) AddComponents(r ...*ReleaseComponent) *ReleaseUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddComponentIDs(ids...)
}

// AddVulnerabilityIDs adds the "vulnerabilities" edge to the ReleaseVulnerability entity by IDs.
func (ruo *ReleaseUpdateOne) AddVulnerabilityIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.AddVulnerabilityIDs(ids...)
	return ruo
}

// AddVulnerabilities adds the "vulnerabilities" edges to the ReleaseVulnerability entity.
func (ruo *ReleaseUpdateOne) AddVulnerabilities(r ...*ReleaseVulnerability) *ReleaseUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddVulnerabilityIDs(ids...)
}

// AddLicenseIDs adds the "licenses" edge to the ReleaseLicense entity by IDs.
func (ruo *ReleaseUpdateOne) AddLicenseIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.AddLicenseIDs(ids...)
	return ruo
}

// AddLicenses adds the "licenses" edges to the ReleaseLicense entity.
func (ruo *ReleaseUpdateOne) AddLicenses(r ...*ReleaseLicense) *ReleaseUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddLicenseIDs(ids...)
}

// AddCodeScanIDs adds the "code_scans" edge to the CodeScan entity by IDs.
func (ruo *ReleaseUpdateOne) AddCodeScanIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.AddCodeScanIDs(ids...)
	return ruo
}

// AddCodeScans adds the "code_scans" edges to the CodeScan entity.
func (ruo *ReleaseUpdateOne) AddCodeScans(c ...*CodeScan) *ReleaseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.AddCodeScanIDs(ids...)
}

// AddTestRunIDs adds the "test_runs" edge to the TestRun entity by IDs.
func (ruo *ReleaseUpdateOne) AddTestRunIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.AddTestRunIDs(ids...)
	return ruo
}

// AddTestRuns adds the "test_runs" edges to the TestRun entity.
func (ruo *ReleaseUpdateOne) AddTestRuns(t ...*TestRun) *ReleaseUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.AddTestRunIDs(ids...)
}

// AddVulnerabilityReviewIDs adds the "vulnerability_reviews" edge to the VulnerabilityReview entity by IDs.
func (ruo *ReleaseUpdateOne) AddVulnerabilityReviewIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.AddVulnerabilityReviewIDs(ids...)
	return ruo
}

// AddVulnerabilityReviews adds the "vulnerability_reviews" edges to the VulnerabilityReview entity.
func (ruo *ReleaseUpdateOne) AddVulnerabilityReviews(v ...*VulnerabilityReview) *ReleaseUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ruo.AddVulnerabilityReviewIDs(ids...)
}

// Mutation returns the ReleaseMutation object of the builder.
func (ruo *ReleaseUpdateOne) Mutation() *ReleaseMutation {
	return ruo.mutation
}

// ClearSubreleases clears all "subreleases" edges to the Release entity.
func (ruo *ReleaseUpdateOne) ClearSubreleases() *ReleaseUpdateOne {
	ruo.mutation.ClearSubreleases()
	return ruo
}

// RemoveSubreleaseIDs removes the "subreleases" edge to Release entities by IDs.
func (ruo *ReleaseUpdateOne) RemoveSubreleaseIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.RemoveSubreleaseIDs(ids...)
	return ruo
}

// RemoveSubreleases removes "subreleases" edges to Release entities.
func (ruo *ReleaseUpdateOne) RemoveSubreleases(r ...*Release) *ReleaseUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveSubreleaseIDs(ids...)
}

// ClearDependencies clears all "dependencies" edges to the Release entity.
func (ruo *ReleaseUpdateOne) ClearDependencies() *ReleaseUpdateOne {
	ruo.mutation.ClearDependencies()
	return ruo
}

// RemoveDependencyIDs removes the "dependencies" edge to Release entities by IDs.
func (ruo *ReleaseUpdateOne) RemoveDependencyIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.RemoveDependencyIDs(ids...)
	return ruo
}

// RemoveDependencies removes "dependencies" edges to Release entities.
func (ruo *ReleaseUpdateOne) RemoveDependencies(r ...*Release) *ReleaseUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveDependencyIDs(ids...)
}

// ClearCommit clears the "commit" edge to the GitCommit entity.
func (ruo *ReleaseUpdateOne) ClearCommit() *ReleaseUpdateOne {
	ruo.mutation.ClearCommit()
	return ruo
}

// ClearHeadOf clears the "head_of" edge to the Repo entity.
func (ruo *ReleaseUpdateOne) ClearHeadOf() *ReleaseUpdateOne {
	ruo.mutation.ClearHeadOf()
	return ruo
}

// ClearLog clears all "log" edges to the ReleaseEntry entity.
func (ruo *ReleaseUpdateOne) ClearLog() *ReleaseUpdateOne {
	ruo.mutation.ClearLog()
	return ruo
}

// RemoveLogIDs removes the "log" edge to ReleaseEntry entities by IDs.
func (ruo *ReleaseUpdateOne) RemoveLogIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.RemoveLogIDs(ids...)
	return ruo
}

// RemoveLog removes "log" edges to ReleaseEntry entities.
func (ruo *ReleaseUpdateOne) RemoveLog(r ...*ReleaseEntry) *ReleaseUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveLogIDs(ids...)
}

// ClearViolations clears all "violations" edges to the ReleasePolicyViolation entity.
func (ruo *ReleaseUpdateOne) ClearViolations() *ReleaseUpdateOne {
	ruo.mutation.ClearViolations()
	return ruo
}

// RemoveViolationIDs removes the "violations" edge to ReleasePolicyViolation entities by IDs.
func (ruo *ReleaseUpdateOne) RemoveViolationIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.RemoveViolationIDs(ids...)
	return ruo
}

// RemoveViolations removes "violations" edges to ReleasePolicyViolation entities.
func (ruo *ReleaseUpdateOne) RemoveViolations(r ...*ReleasePolicyViolation) *ReleaseUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveViolationIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (ruo *ReleaseUpdateOne) ClearArtifacts() *ReleaseUpdateOne {
	ruo.mutation.ClearArtifacts()
	return ruo
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (ruo *ReleaseUpdateOne) RemoveArtifactIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.RemoveArtifactIDs(ids...)
	return ruo
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (ruo *ReleaseUpdateOne) RemoveArtifacts(a ...*Artifact) *ReleaseUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveArtifactIDs(ids...)
}

// ClearComponents clears all "components" edges to the ReleaseComponent entity.
func (ruo *ReleaseUpdateOne) ClearComponents() *ReleaseUpdateOne {
	ruo.mutation.ClearComponents()
	return ruo
}

// RemoveComponentIDs removes the "components" edge to ReleaseComponent entities by IDs.
func (ruo *ReleaseUpdateOne) RemoveComponentIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.RemoveComponentIDs(ids...)
	return ruo
}

// RemoveComponents removes "components" edges to ReleaseComponent entities.
func (ruo *ReleaseUpdateOne) RemoveComponents(r ...*ReleaseComponent) *ReleaseUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveComponentIDs(ids...)
}

// ClearVulnerabilities clears all "vulnerabilities" edges to the ReleaseVulnerability entity.
func (ruo *ReleaseUpdateOne) ClearVulnerabilities() *ReleaseUpdateOne {
	ruo.mutation.ClearVulnerabilities()
	return ruo
}

// RemoveVulnerabilityIDs removes the "vulnerabilities" edge to ReleaseVulnerability entities by IDs.
func (ruo *ReleaseUpdateOne) RemoveVulnerabilityIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.RemoveVulnerabilityIDs(ids...)
	return ruo
}

// RemoveVulnerabilities removes "vulnerabilities" edges to ReleaseVulnerability entities.
func (ruo *ReleaseUpdateOne) RemoveVulnerabilities(r ...*ReleaseVulnerability) *ReleaseUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveVulnerabilityIDs(ids...)
}

// ClearLicenses clears all "licenses" edges to the ReleaseLicense entity.
func (ruo *ReleaseUpdateOne) ClearLicenses() *ReleaseUpdateOne {
	ruo.mutation.ClearLicenses()
	return ruo
}

// RemoveLicenseIDs removes the "licenses" edge to ReleaseLicense entities by IDs.
func (ruo *ReleaseUpdateOne) RemoveLicenseIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.RemoveLicenseIDs(ids...)
	return ruo
}

// RemoveLicenses removes "licenses" edges to ReleaseLicense entities.
func (ruo *ReleaseUpdateOne) RemoveLicenses(r ...*ReleaseLicense) *ReleaseUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveLicenseIDs(ids...)
}

// ClearCodeScans clears all "code_scans" edges to the CodeScan entity.
func (ruo *ReleaseUpdateOne) ClearCodeScans() *ReleaseUpdateOne {
	ruo.mutation.ClearCodeScans()
	return ruo
}

// RemoveCodeScanIDs removes the "code_scans" edge to CodeScan entities by IDs.
func (ruo *ReleaseUpdateOne) RemoveCodeScanIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.RemoveCodeScanIDs(ids...)
	return ruo
}

// RemoveCodeScans removes "code_scans" edges to CodeScan entities.
func (ruo *ReleaseUpdateOne) RemoveCodeScans(c ...*CodeScan) *ReleaseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.RemoveCodeScanIDs(ids...)
}

// ClearTestRuns clears all "test_runs" edges to the TestRun entity.
func (ruo *ReleaseUpdateOne) ClearTestRuns() *ReleaseUpdateOne {
	ruo.mutation.ClearTestRuns()
	return ruo
}

// RemoveTestRunIDs removes the "test_runs" edge to TestRun entities by IDs.
func (ruo *ReleaseUpdateOne) RemoveTestRunIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.RemoveTestRunIDs(ids...)
	return ruo
}

// RemoveTestRuns removes "test_runs" edges to TestRun entities.
func (ruo *ReleaseUpdateOne) RemoveTestRuns(t ...*TestRun) *ReleaseUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.RemoveTestRunIDs(ids...)
}

// ClearVulnerabilityReviews clears all "vulnerability_reviews" edges to the VulnerabilityReview entity.
func (ruo *ReleaseUpdateOne) ClearVulnerabilityReviews() *ReleaseUpdateOne {
	ruo.mutation.ClearVulnerabilityReviews()
	return ruo
}

// RemoveVulnerabilityReviewIDs removes the "vulnerability_reviews" edge to VulnerabilityReview entities by IDs.
func (ruo *ReleaseUpdateOne) RemoveVulnerabilityReviewIDs(ids ...int) *ReleaseUpdateOne {
	ruo.mutation.RemoveVulnerabilityReviewIDs(ids...)
	return ruo
}

// RemoveVulnerabilityReviews removes "vulnerability_reviews" edges to VulnerabilityReview entities.
func (ruo *ReleaseUpdateOne) RemoveVulnerabilityReviews(v ...*VulnerabilityReview) *ReleaseUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ruo.RemoveVulnerabilityReviewIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReleaseUpdateOne) Select(field string, fields ...string) *ReleaseUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Release entity.
func (ruo *ReleaseUpdateOne) Save(ctx context.Context) (*Release, error) {
	var (
		err  error
		node *Release
	)
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReleaseUpdateOne) SaveX(ctx context.Context) *Release {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReleaseUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReleaseUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReleaseUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := release.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Version(); ok {
		if err := release.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf("ent: validator failed for field \"version\": %w", err)}
		}
	}
	if _, ok := ruo.mutation.CommitID(); ruo.mutation.CommitCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"commit\"")
	}
	return nil
}

func (ruo *ReleaseUpdateOne) sqlSave(ctx context.Context) (_node *Release, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   release.Table,
			Columns: release.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: release.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Release.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, release.FieldID)
		for _, f := range fields {
			if !release.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != release.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: release.FieldName,
		})
	}
	if value, ok := ruo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: release.FieldVersion,
		})
	}
	if value, ok := ruo.mutation.Labels(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: release.FieldLabels,
		})
	}
	if ruo.mutation.LabelsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: release.FieldLabels,
		})
	}
	if ruo.mutation.SubreleasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.SubreleasesTable,
			Columns: release.SubreleasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedSubreleasesIDs(); len(nodes) > 0 && !ruo.mutation.SubreleasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.SubreleasesTable,
			Columns: release.SubreleasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SubreleasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.SubreleasesTable,
			Columns: release.SubreleasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   release.DependenciesTable,
			Columns: release.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !ruo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   release.DependenciesTable,
			Columns: release.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   release.DependenciesTable,
			Columns: release.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.CommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   release.CommitTable,
			Columns: []string{release.CommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gitcommit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   release.CommitTable,
			Columns: []string{release.CommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gitcommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.HeadOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   release.HeadOfTable,
			Columns: []string{release.HeadOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.HeadOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   release.HeadOfTable,
			Columns: []string{release.HeadOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.LogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.LogTable,
			Columns: []string{release.LogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaseentry.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedLogIDs(); len(nodes) > 0 && !ruo.mutation.LogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.LogTable,
			Columns: []string{release.LogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaseentry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.LogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.LogTable,
			Columns: []string{release.LogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaseentry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ViolationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ViolationsTable,
			Columns: []string{release.ViolationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasepolicyviolation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedViolationsIDs(); len(nodes) > 0 && !ruo.mutation.ViolationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ViolationsTable,
			Columns: []string{release.ViolationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasepolicyviolation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ViolationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ViolationsTable,
			Columns: []string{release.ViolationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasepolicyviolation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ArtifactsTable,
			Columns: []string{release.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artifact.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !ruo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ArtifactsTable,
			Columns: []string{release.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artifact.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ArtifactsTable,
			Columns: []string{release.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artifact.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ComponentsTable,
			Columns: []string{release.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasecomponent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !ruo.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ComponentsTable,
			Columns: []string{release.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasecomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.ComponentsTable,
			Columns: []string{release.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasecomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.VulnerabilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.VulnerabilitiesTable,
			Columns: []string{release.VulnerabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedVulnerabilitiesIDs(); len(nodes) > 0 && !ruo.mutation.VulnerabilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.VulnerabilitiesTable,
			Columns: []string{release.VulnerabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.VulnerabilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.VulnerabilitiesTable,
			Columns: []string{release.VulnerabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.LicensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.LicensesTable,
			Columns: []string{release.LicensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaselicense.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedLicensesIDs(); len(nodes) > 0 && !ruo.mutation.LicensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.LicensesTable,
			Columns: []string{release.LicensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaselicense.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.LicensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.LicensesTable,
			Columns: []string{release.LicensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releaselicense.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.CodeScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.CodeScansTable,
			Columns: []string{release.CodeScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedCodeScansIDs(); len(nodes) > 0 && !ruo.mutation.CodeScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.CodeScansTable,
			Columns: []string{release.CodeScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CodeScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.CodeScansTable,
			Columns: []string{release.CodeScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.TestRunsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.TestRunsTable,
			Columns: []string{release.TestRunsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testrun.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedTestRunsIDs(); len(nodes) > 0 && !ruo.mutation.TestRunsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.TestRunsTable,
			Columns: []string{release.TestRunsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testrun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TestRunsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   release.TestRunsTable,
			Columns: []string{release.TestRunsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testrun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.VulnerabilityReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.VulnerabilityReviewsTable,
			Columns: release.VulnerabilityReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedVulnerabilityReviewsIDs(); len(nodes) > 0 && !ruo.mutation.VulnerabilityReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.VulnerabilityReviewsTable,
			Columns: release.VulnerabilityReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.VulnerabilityReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.VulnerabilityReviewsTable,
			Columns: release.VulnerabilityReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Release{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{release.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
