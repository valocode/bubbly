// Code generated by entc, DO NOT EDIT.

package ent

import "github.com/hashicorp/hcl/v2"

const (
	attributeNodeOperation = "_operation"
	attributeNodeRef       = "ref"
	blockNodeDisjoint      = "_disjoint"
)

type HCLBodySpec struct {
	Attributes []hcl.AttributeSchema
	Blocks     []HCLBlockSpec
}

func (b HCLBodySpec) Schema() *hcl.BodySchema {
	var blocks = make([]hcl.BlockHeaderSchema, len(b.Blocks))
	for i, block := range b.Blocks {
		blocks[i] = block.BlockHeaderSchema
	}
	return &hcl.BodySchema{
		Attributes: b.Attributes,
		Blocks:     blocks,
	}
}

type HCLBlockSpec struct {
	hcl.BlockHeaderSchema
	// MinItems and MaxItems define the lower and upper limits on the number of
	// blocks allowed of the given type. If both are left at zero, no limit is applied.
	MinItems, MaxItems int
}

var AllDataNodesSchema = HCLBodySpec{
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "artifact"},
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "cve"},
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "cve_rule"},
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "cwe"},
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "code_issue"},
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "code_scan"},
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "component"},
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "component_use"},
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "commit"},
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "license"},
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "license_use"},
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "project"},
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release"},
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release_entry"},
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "repo"},
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "test_case"},
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "test_run"},
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "vulnerability"},
		},
	},
}
var ArtifactBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
		{
			Name: "name",
		},
		{
			Name: "sha256",
		},
		{
			Name: "type",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "entry"},
			MaxItems:          1,
		},
	},
}
var ArtifactReleaseEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release"},
			MaxItems:          1,
		},
	},
}
var ArtifactEntryEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release_entry"},
			MaxItems:          1,
		},
	},
}
var CVEBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
		{
			Name: "cve_id",
		},
		{
			Name: "description",
		},
		{
			Name: "severity_score",
		},
		{
			Name: "severity",
		},
		{
			Name: "published_data",
		},
		{
			Name: "modified_data",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "components"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "vulnerabilities"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "rules"},
			MaxItems:          1,
		},
	},
}
var CVEComponentsEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "component"},
		},
	},
}
var CVEVulnerabilitiesEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "vulnerability"},
		},
	},
}
var CVERulesEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "cve_rule"},
		},
	},
}
var CVERuleBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
		{
			Name: "name",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "cve"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "project"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "repo"},
			MaxItems:          1,
		},
	},
}
var CVERuleCveEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "cve"},
			MaxItems:          1,
		},
	},
}
var CVERuleProjectEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "project"},
		},
	},
}
var CVERuleRepoEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "repo"},
		},
	},
}
var CWEBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
		{
			Name: "cwe_id",
		},
		{
			Name: "description",
		},
		{
			Name: "url",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "issues"},
			MaxItems:          1,
		},
	},
}
var CWEIssuesEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "code_issue"},
		},
	},
}
var CodeIssueBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
		{
			Name: "rule_id",
		},
		{
			Name: "message",
		},
		{
			Name: "severity",
		},
		{
			Name: "type",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "cwe"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "scan"},
			MaxItems:          1,
		},
	},
}
var CodeIssueCweEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "cwe"},
		},
	},
}
var CodeIssueScanEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "code_scan"},
			MaxItems:          1,
		},
	},
}
var CodeScanBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
		{
			Name: "tool",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "entry"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "issues"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "components"},
			MaxItems:          1,
		},
	},
}
var CodeScanReleaseEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release"},
			MaxItems:          1,
		},
	},
}
var CodeScanEntryEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release_entry"},
			MaxItems:          1,
		},
	},
}
var CodeScanIssuesEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "code_issue"},
		},
	},
}
var CodeScanComponentsEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "component_use"},
		},
	},
}
var ComponentBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
		{
			Name: "name",
		},
		{
			Name: "vendor",
		},
		{
			Name: "version",
		},
		{
			Name: "description",
		},
		{
			Name: "url",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "cves"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "licenses"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "uses"},
			MaxItems:          1,
		},
	},
}
var ComponentCvesEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "cve"},
		},
	},
}
var ComponentLicensesEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "license"},
		},
	},
}
var ComponentUsesEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "component_use"},
		},
	},
}
var ComponentUseBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "scans"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "component"},
			MaxItems:          1,
		},
	},
}
var ComponentUseReleaseEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release"},
			MaxItems:          1,
		},
	},
}
var ComponentUseScansEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "code_scan"},
		},
	},
}
var ComponentUseComponentEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "component"},
			MaxItems:          1,
		},
	},
}
var GitCommitBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
		{
			Name: "hash",
		},
		{
			Name: "branch",
		},
		{
			Name: "tag",
		},
		{
			Name: "time",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "repo"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release"},
			MaxItems:          1,
		},
	},
}
var GitCommitRepoEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "repo"},
			MaxItems:          1,
		},
	},
}
var GitCommitReleaseEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release"},
			MaxItems:          1,
		},
	},
}
var LicenseBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
		{
			Name: "spdx_id",
		},
		{
			Name: "name",
		},
		{
			Name: "reference",
		},
		{
			Name: "details_url",
		},
		{
			Name: "is_osi_approved",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "components"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "uses"},
			MaxItems:          1,
		},
	},
}
var LicenseComponentsEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "component"},
		},
	},
}
var LicenseUsesEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "license_use"},
		},
	},
}
var LicenseUseBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "license"},
			MaxItems:          1,
		},
	},
}
var LicenseUseLicenseEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "license"},
			MaxItems:          1,
		},
	},
}
var ProjectBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
		{
			Name: "name",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "repos"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "releases"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "cve_rules"},
			MaxItems:          1,
		},
	},
}
var ProjectReposEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "repo"},
		},
	},
}
var ProjectReleasesEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release"},
		},
	},
}
var ProjectCveRulesEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "cve_rule"},
		},
	},
}
var ReleaseBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
		{
			Name: "name",
		},
		{
			Name: "version",
		},
		{
			Name: "status",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "subreleases"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "dependencies"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "project"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "commit"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "log"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "artifacts"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "components"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "code_scans"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "test_runs"},
			MaxItems:          1,
		},
	},
}
var ReleaseSubreleasesEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release"},
		},
	},
}
var ReleaseDependenciesEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release"},
		},
	},
}
var ReleaseProjectEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "project"},
			MaxItems:          1,
		},
	},
}
var ReleaseCommitEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "commit"},
			MaxItems:          1,
		},
	},
}
var ReleaseLogEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release_entry"},
		},
	},
}
var ReleaseArtifactsEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "artifact"},
		},
	},
}
var ReleaseComponentsEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "component_use"},
		},
	},
}
var ReleaseCodeScansEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "code_scan"},
		},
	},
}
var ReleaseTestRunsEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "test_run"},
		},
	},
}
var ReleaseEntryBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
		{
			Name: "type",
		},
		{
			Name: "time",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "artifact"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "code_scan"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "test_run"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release"},
			MaxItems:          1,
		},
	},
}
var ReleaseEntryArtifactEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "artifact"},
			MaxItems:          1,
		},
	},
}
var ReleaseEntryCodeScanEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "code_scan"},
			MaxItems:          1,
		},
	},
}
var ReleaseEntryTestRunEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "test_run"},
			MaxItems:          1,
		},
	},
}
var ReleaseEntryReleaseEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release"},
			MaxItems:          1,
		},
	},
}
var RepoBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
		{
			Name: "name",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "project"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "commits"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "cve_rules"},
			MaxItems:          1,
		},
	},
}
var RepoProjectEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "project"},
			MaxItems:          1,
		},
	},
}
var RepoCommitsEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "commit"},
		},
	},
}
var RepoCveRulesEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "cve_rule"},
		},
	},
}
var TestCaseBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
		{
			Name: "name",
		},
		{
			Name: "result",
		},
		{
			Name: "message",
		},
		{
			Name: "elapsed",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "run"},
			MaxItems:          1,
		},
	},
}
var TestCaseRunEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "test_run"},
			MaxItems:          1,
		},
	},
}
var TestRunBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
		{
			Name: "tool",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "entry"},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "tests"},
			MaxItems:          1,
		},
	},
}
var TestRunReleaseEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release"},
			MaxItems:          1,
		},
	},
}
var TestRunEntryEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "release_entry"},
			MaxItems:          1,
		},
	},
}
var TestRunTestsEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "test_case"},
		},
	},
}
var VulnerabilityBodySpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: "_operation",
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: blockNodeDisjoint},
			MaxItems:          1,
		},
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "cve"},
			MaxItems:          1,
		},
	},
}
var VulnerabilityCveEdgeSpec = HCLBodySpec{
	Attributes: []hcl.AttributeSchema{
		{
			Name: attributeNodeRef,
		},
	},
	Blocks: []HCLBlockSpec{
		{
			BlockHeaderSchema: hcl.BlockHeaderSchema{Type: "cve"},
			MaxItems:          1,
		},
	},
}

var DataEdgeSchemas = map[string]map[string]*HCLBodySpec{
	"artifact": {
		"release": &ArtifactReleaseEdgeSpec,
		"entry":   &ArtifactEntryEdgeSpec,
	},
	"cve": {
		"components":      &CVEComponentsEdgeSpec,
		"vulnerabilities": &CVEVulnerabilitiesEdgeSpec,
		"rules":           &CVERulesEdgeSpec,
	},
	"cve_rule": {
		"cve":     &CVERuleCveEdgeSpec,
		"project": &CVERuleProjectEdgeSpec,
		"repo":    &CVERuleRepoEdgeSpec,
	},
	"cwe": {
		"issues": &CWEIssuesEdgeSpec,
	},
	"code_issue": {
		"cwe":  &CodeIssueCweEdgeSpec,
		"scan": &CodeIssueScanEdgeSpec,
	},
	"code_scan": {
		"release":    &CodeScanReleaseEdgeSpec,
		"entry":      &CodeScanEntryEdgeSpec,
		"issues":     &CodeScanIssuesEdgeSpec,
		"components": &CodeScanComponentsEdgeSpec,
	},
	"component": {
		"cves":     &ComponentCvesEdgeSpec,
		"licenses": &ComponentLicensesEdgeSpec,
		"uses":     &ComponentUsesEdgeSpec,
	},
	"component_use": {
		"release":   &ComponentUseReleaseEdgeSpec,
		"scans":     &ComponentUseScansEdgeSpec,
		"component": &ComponentUseComponentEdgeSpec,
	},
	"commit": {
		"repo":    &GitCommitRepoEdgeSpec,
		"release": &GitCommitReleaseEdgeSpec,
	},
	"license": {
		"components": &LicenseComponentsEdgeSpec,
		"uses":       &LicenseUsesEdgeSpec,
	},
	"license_use": {
		"license": &LicenseUseLicenseEdgeSpec,
	},
	"project": {
		"repos":     &ProjectReposEdgeSpec,
		"releases":  &ProjectReleasesEdgeSpec,
		"cve_rules": &ProjectCveRulesEdgeSpec,
	},
	"release": {
		"subreleases":  &ReleaseSubreleasesEdgeSpec,
		"dependencies": &ReleaseDependenciesEdgeSpec,
		"project":      &ReleaseProjectEdgeSpec,
		"commit":       &ReleaseCommitEdgeSpec,
		"log":          &ReleaseLogEdgeSpec,
		"artifacts":    &ReleaseArtifactsEdgeSpec,
		"components":   &ReleaseComponentsEdgeSpec,
		"code_scans":   &ReleaseCodeScansEdgeSpec,
		"test_runs":    &ReleaseTestRunsEdgeSpec,
	},
	"release_entry": {
		"artifact":  &ReleaseEntryArtifactEdgeSpec,
		"code_scan": &ReleaseEntryCodeScanEdgeSpec,
		"test_run":  &ReleaseEntryTestRunEdgeSpec,
		"release":   &ReleaseEntryReleaseEdgeSpec,
	},
	"repo": {
		"project":   &RepoProjectEdgeSpec,
		"commits":   &RepoCommitsEdgeSpec,
		"cve_rules": &RepoCveRulesEdgeSpec,
	},
	"test_case": {
		"run": &TestCaseRunEdgeSpec,
	},
	"test_run": {
		"release": &TestRunReleaseEdgeSpec,
		"entry":   &TestRunEntryEdgeSpec,
		"tests":   &TestRunTestsEdgeSpec,
	},
	"vulnerability": {
		"cve": &VulnerabilityCveEdgeSpec,
	},
}

var RequiredEdges = map[string]map[string]string{
	"artifact": {},
	"cve":      {},
	"cve_rule": {
		"cve": "rules",
	},
	"cwe": {},
	"code_issue": {
		"scan": "issues",
	},
	"code_scan": {
		"release": "code_scans",
	},
	"component": {},
	"component_use": {
		"release":   "components",
		"scans":     "components",
		"component": "uses",
	},
	"commit": {
		"repo": "commits",
	},
	"license": {},
	"license_use": {
		"license": "uses",
	},
	"project": {},
	"release": {
		"project": "releases",
		"commit":  "release",
	},
	"release_entry": {
		"release": "log",
	},
	"repo": {},
	"test_case": {
		"run": "tests",
	},
	"test_run": {
		"release": "test_runs",
	},
	"vulnerability": {
		"cve": "vulnerabilities",
	},
}

var RefDataEdges = map[string]map[string]string{
	"artifact": {
		"release": "artifacts",
		"entry":   "artifact",
	},
	"cve": {
		"components":      "cves",
		"vulnerabilities": "cve",
		"rules":           "cve",
	},
	"cve_rule": {
		"cve":     "rules",
		"project": "cve_rules",
		"repo":    "cve_rules",
	},
	"cwe": {
		"issues": "cwe",
	},
	"code_issue": {
		"cwe":  "issues",
		"scan": "issues",
	},
	"code_scan": {
		"release":    "code_scans",
		"entry":      "code_scan",
		"issues":     "scan",
		"components": "scans",
	},
	"component": {
		"cves":     "components",
		"licenses": "components",
		"uses":     "component",
	},
	"component_use": {
		"release":   "components",
		"scans":     "components",
		"component": "uses",
	},
	"commit": {
		"repo":    "commits",
		"release": "commit",
	},
	"license": {
		"components": "licenses",
		"uses":       "license",
	},
	"license_use": {
		"license": "uses",
	},
	"project": {
		"repos":     "project",
		"releases":  "project",
		"cve_rules": "project",
	},
	"release": {
		"subreleases":  "dependencies",
		"dependencies": "subreleases",
		"project":      "releases",
		"commit":       "release",
		"log":          "release",
		"artifacts":    "release",
		"components":   "release",
		"code_scans":   "release",
		"test_runs":    "release",
	},
	"release_entry": {
		"artifact":  "entry",
		"code_scan": "entry",
		"test_run":  "entry",
		"release":   "log",
	},
	"repo": {
		"project":   "repos",
		"commits":   "repo",
		"cve_rules": "repo",
	},
	"test_case": {
		"run": "tests",
	},
	"test_run": {
		"release": "test_runs",
		"entry":   "test_run",
		"tests":   "run",
	},
	"vulnerability": {
		"cve": "vulnerabilities",
	},
}

var DataNodeSchemas = map[string]*HCLBodySpec{
	"_disjoint":     &AllDataNodesSchema,
	"artifact":      &ArtifactBodySpec,
	"cve":           &CVEBodySpec,
	"cve_rule":      &CVERuleBodySpec,
	"cwe":           &CWEBodySpec,
	"code_issue":    &CodeIssueBodySpec,
	"code_scan":     &CodeScanBodySpec,
	"component":     &ComponentBodySpec,
	"component_use": &ComponentUseBodySpec,
	"commit":        &GitCommitBodySpec,
	"license":       &LicenseBodySpec,
	"license_use":   &LicenseUseBodySpec,
	"project":       &ProjectBodySpec,
	"release":       &ReleaseBodySpec,
	"release_entry": &ReleaseEntryBodySpec,
	"repo":          &RepoBodySpec,
	"test_case":     &TestCaseBodySpec,
	"test_run":      &TestRunBodySpec,
	"vulnerability": &VulnerabilityBodySpec,
}
