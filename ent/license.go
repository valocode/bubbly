// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/license"
)

// License is the model entity for the License schema.
type License struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SpdxID holds the value of the "spdx_id" field.
	SpdxID string `json:"spdx_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Reference holds the value of the "reference" field.
	Reference string `json:"reference,omitempty"`
	// DetailsURL holds the value of the "details_url" field.
	DetailsURL string `json:"details_url,omitempty"`
	// IsOsiApproved holds the value of the "is_osi_approved" field.
	IsOsiApproved bool `json:"is_osi_approved,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LicenseQuery when eager-loading is set.
	Edges LicenseEdges `json:"edges"`
}

// LicenseEdges holds the relations/edges for other nodes in the graph.
type LicenseEdges struct {
	// Components holds the value of the components edge.
	Components []*Component `json:"components,omitempty"`
	// Uses holds the value of the uses edge.
	Uses []*LicenseUse `json:"uses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ComponentsOrErr returns the Components value or an error if the edge
// was not loaded in eager-loading.
func (e LicenseEdges) ComponentsOrErr() ([]*Component, error) {
	if e.loadedTypes[0] {
		return e.Components, nil
	}
	return nil, &NotLoadedError{edge: "components"}
}

// UsesOrErr returns the Uses value or an error if the edge
// was not loaded in eager-loading.
func (e LicenseEdges) UsesOrErr() ([]*LicenseUse, error) {
	if e.loadedTypes[1] {
		return e.Uses, nil
	}
	return nil, &NotLoadedError{edge: "uses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*License) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case license.FieldIsOsiApproved:
			values[i] = new(sql.NullBool)
		case license.FieldID:
			values[i] = new(sql.NullInt64)
		case license.FieldSpdxID, license.FieldName, license.FieldReference, license.FieldDetailsURL:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type License", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the License fields.
func (l *License) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case license.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case license.FieldSpdxID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spdx_id", values[i])
			} else if value.Valid {
				l.SpdxID = value.String
			}
		case license.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				l.Name = value.String
			}
		case license.FieldReference:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference", values[i])
			} else if value.Valid {
				l.Reference = value.String
			}
		case license.FieldDetailsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field details_url", values[i])
			} else if value.Valid {
				l.DetailsURL = value.String
			}
		case license.FieldIsOsiApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_osi_approved", values[i])
			} else if value.Valid {
				l.IsOsiApproved = value.Bool
			}
		}
	}
	return nil
}

// QueryComponents queries the "components" edge of the License entity.
func (l *License) QueryComponents() *ComponentQuery {
	return (&LicenseClient{config: l.config}).QueryComponents(l)
}

// QueryUses queries the "uses" edge of the License entity.
func (l *License) QueryUses() *LicenseUseQuery {
	return (&LicenseClient{config: l.config}).QueryUses(l)
}

// Update returns a builder for updating this License.
// Note that you need to call License.Unwrap() before calling this method if this License
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *License) Update() *LicenseUpdateOne {
	return (&LicenseClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the License entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *License) Unwrap() *License {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: License is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *License) String() string {
	var builder strings.Builder
	builder.WriteString("License(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteString(", spdx_id=")
	builder.WriteString(l.SpdxID)
	builder.WriteString(", name=")
	builder.WriteString(l.Name)
	builder.WriteString(", reference=")
	builder.WriteString(l.Reference)
	builder.WriteString(", details_url=")
	builder.WriteString(l.DetailsURL)
	builder.WriteString(", is_osi_approved=")
	builder.WriteString(fmt.Sprintf("%v", l.IsOsiApproved))
	builder.WriteByte(')')
	return builder.String()
}

// Licenses is a parsable slice of License.
type Licenses []*License

func (l Licenses) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
