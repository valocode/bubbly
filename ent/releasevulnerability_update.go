// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/codescan"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasecomponent"
	"github.com/valocode/bubbly/ent/releasevulnerability"
	"github.com/valocode/bubbly/ent/vulnerability"
	"github.com/valocode/bubbly/ent/vulnerabilityreview"
)

// ReleaseVulnerabilityUpdate is the builder for updating ReleaseVulnerability entities.
type ReleaseVulnerabilityUpdate struct {
	config
	hooks    []Hook
	mutation *ReleaseVulnerabilityMutation
}

// Where appends a list predicates to the ReleaseVulnerabilityUpdate builder.
func (rvu *ReleaseVulnerabilityUpdate) Where(ps ...predicate.ReleaseVulnerability) *ReleaseVulnerabilityUpdate {
	rvu.mutation.Where(ps...)
	return rvu
}

// SetVulnerabilityID sets the "vulnerability" edge to the Vulnerability entity by ID.
func (rvu *ReleaseVulnerabilityUpdate) SetVulnerabilityID(id int) *ReleaseVulnerabilityUpdate {
	rvu.mutation.SetVulnerabilityID(id)
	return rvu
}

// SetVulnerability sets the "vulnerability" edge to the Vulnerability entity.
func (rvu *ReleaseVulnerabilityUpdate) SetVulnerability(v *Vulnerability) *ReleaseVulnerabilityUpdate {
	return rvu.SetVulnerabilityID(v.ID)
}

// AddComponentIDs adds the "components" edge to the ReleaseComponent entity by IDs.
func (rvu *ReleaseVulnerabilityUpdate) AddComponentIDs(ids ...int) *ReleaseVulnerabilityUpdate {
	rvu.mutation.AddComponentIDs(ids...)
	return rvu
}

// AddComponents adds the "components" edges to the ReleaseComponent entity.
func (rvu *ReleaseVulnerabilityUpdate) AddComponents(r ...*ReleaseComponent) *ReleaseVulnerabilityUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rvu.AddComponentIDs(ids...)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (rvu *ReleaseVulnerabilityUpdate) SetReleaseID(id int) *ReleaseVulnerabilityUpdate {
	rvu.mutation.SetReleaseID(id)
	return rvu
}

// SetRelease sets the "release" edge to the Release entity.
func (rvu *ReleaseVulnerabilityUpdate) SetRelease(r *Release) *ReleaseVulnerabilityUpdate {
	return rvu.SetReleaseID(r.ID)
}

// AddReviewIDs adds the "reviews" edge to the VulnerabilityReview entity by IDs.
func (rvu *ReleaseVulnerabilityUpdate) AddReviewIDs(ids ...int) *ReleaseVulnerabilityUpdate {
	rvu.mutation.AddReviewIDs(ids...)
	return rvu
}

// AddReviews adds the "reviews" edges to the VulnerabilityReview entity.
func (rvu *ReleaseVulnerabilityUpdate) AddReviews(v ...*VulnerabilityReview) *ReleaseVulnerabilityUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return rvu.AddReviewIDs(ids...)
}

// AddScanIDs adds the "scans" edge to the CodeScan entity by IDs.
func (rvu *ReleaseVulnerabilityUpdate) AddScanIDs(ids ...int) *ReleaseVulnerabilityUpdate {
	rvu.mutation.AddScanIDs(ids...)
	return rvu
}

// AddScans adds the "scans" edges to the CodeScan entity.
func (rvu *ReleaseVulnerabilityUpdate) AddScans(c ...*CodeScan) *ReleaseVulnerabilityUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rvu.AddScanIDs(ids...)
}

// Mutation returns the ReleaseVulnerabilityMutation object of the builder.
func (rvu *ReleaseVulnerabilityUpdate) Mutation() *ReleaseVulnerabilityMutation {
	return rvu.mutation
}

// ClearVulnerability clears the "vulnerability" edge to the Vulnerability entity.
func (rvu *ReleaseVulnerabilityUpdate) ClearVulnerability() *ReleaseVulnerabilityUpdate {
	rvu.mutation.ClearVulnerability()
	return rvu
}

// ClearComponents clears all "components" edges to the ReleaseComponent entity.
func (rvu *ReleaseVulnerabilityUpdate) ClearComponents() *ReleaseVulnerabilityUpdate {
	rvu.mutation.ClearComponents()
	return rvu
}

// RemoveComponentIDs removes the "components" edge to ReleaseComponent entities by IDs.
func (rvu *ReleaseVulnerabilityUpdate) RemoveComponentIDs(ids ...int) *ReleaseVulnerabilityUpdate {
	rvu.mutation.RemoveComponentIDs(ids...)
	return rvu
}

// RemoveComponents removes "components" edges to ReleaseComponent entities.
func (rvu *ReleaseVulnerabilityUpdate) RemoveComponents(r ...*ReleaseComponent) *ReleaseVulnerabilityUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rvu.RemoveComponentIDs(ids...)
}

// ClearRelease clears the "release" edge to the Release entity.
func (rvu *ReleaseVulnerabilityUpdate) ClearRelease() *ReleaseVulnerabilityUpdate {
	rvu.mutation.ClearRelease()
	return rvu
}

// ClearReviews clears all "reviews" edges to the VulnerabilityReview entity.
func (rvu *ReleaseVulnerabilityUpdate) ClearReviews() *ReleaseVulnerabilityUpdate {
	rvu.mutation.ClearReviews()
	return rvu
}

// RemoveReviewIDs removes the "reviews" edge to VulnerabilityReview entities by IDs.
func (rvu *ReleaseVulnerabilityUpdate) RemoveReviewIDs(ids ...int) *ReleaseVulnerabilityUpdate {
	rvu.mutation.RemoveReviewIDs(ids...)
	return rvu
}

// RemoveReviews removes "reviews" edges to VulnerabilityReview entities.
func (rvu *ReleaseVulnerabilityUpdate) RemoveReviews(v ...*VulnerabilityReview) *ReleaseVulnerabilityUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return rvu.RemoveReviewIDs(ids...)
}

// ClearScans clears all "scans" edges to the CodeScan entity.
func (rvu *ReleaseVulnerabilityUpdate) ClearScans() *ReleaseVulnerabilityUpdate {
	rvu.mutation.ClearScans()
	return rvu
}

// RemoveScanIDs removes the "scans" edge to CodeScan entities by IDs.
func (rvu *ReleaseVulnerabilityUpdate) RemoveScanIDs(ids ...int) *ReleaseVulnerabilityUpdate {
	rvu.mutation.RemoveScanIDs(ids...)
	return rvu
}

// RemoveScans removes "scans" edges to CodeScan entities.
func (rvu *ReleaseVulnerabilityUpdate) RemoveScans(c ...*CodeScan) *ReleaseVulnerabilityUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rvu.RemoveScanIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rvu *ReleaseVulnerabilityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rvu.hooks) == 0 {
		if err = rvu.check(); err != nil {
			return 0, err
		}
		affected, err = rvu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseVulnerabilityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rvu.check(); err != nil {
				return 0, err
			}
			rvu.mutation = mutation
			affected, err = rvu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rvu.hooks) - 1; i >= 0; i-- {
			if rvu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rvu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rvu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rvu *ReleaseVulnerabilityUpdate) SaveX(ctx context.Context) int {
	affected, err := rvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rvu *ReleaseVulnerabilityUpdate) Exec(ctx context.Context) error {
	_, err := rvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rvu *ReleaseVulnerabilityUpdate) ExecX(ctx context.Context) {
	if err := rvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rvu *ReleaseVulnerabilityUpdate) check() error {
	if _, ok := rvu.mutation.VulnerabilityID(); rvu.mutation.VulnerabilityCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"vulnerability\"")
	}
	if _, ok := rvu.mutation.ReleaseID(); rvu.mutation.ReleaseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"release\"")
	}
	return nil
}

func (rvu *ReleaseVulnerabilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releasevulnerability.Table,
			Columns: releasevulnerability.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releasevulnerability.FieldID,
			},
		},
	}
	if ps := rvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rvu.mutation.VulnerabilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasevulnerability.VulnerabilityTable,
			Columns: []string{releasevulnerability.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerability.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvu.mutation.VulnerabilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasevulnerability.VulnerabilityTable,
			Columns: []string{releasevulnerability.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rvu.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ComponentsTable,
			Columns: releasevulnerability.ComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasecomponent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvu.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !rvu.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ComponentsTable,
			Columns: releasevulnerability.ComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasecomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvu.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ComponentsTable,
			Columns: releasevulnerability.ComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasecomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rvu.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasevulnerability.ReleaseTable,
			Columns: []string{releasevulnerability.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvu.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasevulnerability.ReleaseTable,
			Columns: []string{releasevulnerability.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rvu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ReviewsTable,
			Columns: releasevulnerability.ReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvu.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !rvu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ReviewsTable,
			Columns: releasevulnerability.ReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvu.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ReviewsTable,
			Columns: releasevulnerability.ReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rvu.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ScansTable,
			Columns: releasevulnerability.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvu.mutation.RemovedScansIDs(); len(nodes) > 0 && !rvu.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ScansTable,
			Columns: releasevulnerability.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvu.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ScansTable,
			Columns: releasevulnerability.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releasevulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ReleaseVulnerabilityUpdateOne is the builder for updating a single ReleaseVulnerability entity.
type ReleaseVulnerabilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReleaseVulnerabilityMutation
}

// SetVulnerabilityID sets the "vulnerability" edge to the Vulnerability entity by ID.
func (rvuo *ReleaseVulnerabilityUpdateOne) SetVulnerabilityID(id int) *ReleaseVulnerabilityUpdateOne {
	rvuo.mutation.SetVulnerabilityID(id)
	return rvuo
}

// SetVulnerability sets the "vulnerability" edge to the Vulnerability entity.
func (rvuo *ReleaseVulnerabilityUpdateOne) SetVulnerability(v *Vulnerability) *ReleaseVulnerabilityUpdateOne {
	return rvuo.SetVulnerabilityID(v.ID)
}

// AddComponentIDs adds the "components" edge to the ReleaseComponent entity by IDs.
func (rvuo *ReleaseVulnerabilityUpdateOne) AddComponentIDs(ids ...int) *ReleaseVulnerabilityUpdateOne {
	rvuo.mutation.AddComponentIDs(ids...)
	return rvuo
}

// AddComponents adds the "components" edges to the ReleaseComponent entity.
func (rvuo *ReleaseVulnerabilityUpdateOne) AddComponents(r ...*ReleaseComponent) *ReleaseVulnerabilityUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rvuo.AddComponentIDs(ids...)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (rvuo *ReleaseVulnerabilityUpdateOne) SetReleaseID(id int) *ReleaseVulnerabilityUpdateOne {
	rvuo.mutation.SetReleaseID(id)
	return rvuo
}

// SetRelease sets the "release" edge to the Release entity.
func (rvuo *ReleaseVulnerabilityUpdateOne) SetRelease(r *Release) *ReleaseVulnerabilityUpdateOne {
	return rvuo.SetReleaseID(r.ID)
}

// AddReviewIDs adds the "reviews" edge to the VulnerabilityReview entity by IDs.
func (rvuo *ReleaseVulnerabilityUpdateOne) AddReviewIDs(ids ...int) *ReleaseVulnerabilityUpdateOne {
	rvuo.mutation.AddReviewIDs(ids...)
	return rvuo
}

// AddReviews adds the "reviews" edges to the VulnerabilityReview entity.
func (rvuo *ReleaseVulnerabilityUpdateOne) AddReviews(v ...*VulnerabilityReview) *ReleaseVulnerabilityUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return rvuo.AddReviewIDs(ids...)
}

// AddScanIDs adds the "scans" edge to the CodeScan entity by IDs.
func (rvuo *ReleaseVulnerabilityUpdateOne) AddScanIDs(ids ...int) *ReleaseVulnerabilityUpdateOne {
	rvuo.mutation.AddScanIDs(ids...)
	return rvuo
}

// AddScans adds the "scans" edges to the CodeScan entity.
func (rvuo *ReleaseVulnerabilityUpdateOne) AddScans(c ...*CodeScan) *ReleaseVulnerabilityUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rvuo.AddScanIDs(ids...)
}

// Mutation returns the ReleaseVulnerabilityMutation object of the builder.
func (rvuo *ReleaseVulnerabilityUpdateOne) Mutation() *ReleaseVulnerabilityMutation {
	return rvuo.mutation
}

// ClearVulnerability clears the "vulnerability" edge to the Vulnerability entity.
func (rvuo *ReleaseVulnerabilityUpdateOne) ClearVulnerability() *ReleaseVulnerabilityUpdateOne {
	rvuo.mutation.ClearVulnerability()
	return rvuo
}

// ClearComponents clears all "components" edges to the ReleaseComponent entity.
func (rvuo *ReleaseVulnerabilityUpdateOne) ClearComponents() *ReleaseVulnerabilityUpdateOne {
	rvuo.mutation.ClearComponents()
	return rvuo
}

// RemoveComponentIDs removes the "components" edge to ReleaseComponent entities by IDs.
func (rvuo *ReleaseVulnerabilityUpdateOne) RemoveComponentIDs(ids ...int) *ReleaseVulnerabilityUpdateOne {
	rvuo.mutation.RemoveComponentIDs(ids...)
	return rvuo
}

// RemoveComponents removes "components" edges to ReleaseComponent entities.
func (rvuo *ReleaseVulnerabilityUpdateOne) RemoveComponents(r ...*ReleaseComponent) *ReleaseVulnerabilityUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rvuo.RemoveComponentIDs(ids...)
}

// ClearRelease clears the "release" edge to the Release entity.
func (rvuo *ReleaseVulnerabilityUpdateOne) ClearRelease() *ReleaseVulnerabilityUpdateOne {
	rvuo.mutation.ClearRelease()
	return rvuo
}

// ClearReviews clears all "reviews" edges to the VulnerabilityReview entity.
func (rvuo *ReleaseVulnerabilityUpdateOne) ClearReviews() *ReleaseVulnerabilityUpdateOne {
	rvuo.mutation.ClearReviews()
	return rvuo
}

// RemoveReviewIDs removes the "reviews" edge to VulnerabilityReview entities by IDs.
func (rvuo *ReleaseVulnerabilityUpdateOne) RemoveReviewIDs(ids ...int) *ReleaseVulnerabilityUpdateOne {
	rvuo.mutation.RemoveReviewIDs(ids...)
	return rvuo
}

// RemoveReviews removes "reviews" edges to VulnerabilityReview entities.
func (rvuo *ReleaseVulnerabilityUpdateOne) RemoveReviews(v ...*VulnerabilityReview) *ReleaseVulnerabilityUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return rvuo.RemoveReviewIDs(ids...)
}

// ClearScans clears all "scans" edges to the CodeScan entity.
func (rvuo *ReleaseVulnerabilityUpdateOne) ClearScans() *ReleaseVulnerabilityUpdateOne {
	rvuo.mutation.ClearScans()
	return rvuo
}

// RemoveScanIDs removes the "scans" edge to CodeScan entities by IDs.
func (rvuo *ReleaseVulnerabilityUpdateOne) RemoveScanIDs(ids ...int) *ReleaseVulnerabilityUpdateOne {
	rvuo.mutation.RemoveScanIDs(ids...)
	return rvuo
}

// RemoveScans removes "scans" edges to CodeScan entities.
func (rvuo *ReleaseVulnerabilityUpdateOne) RemoveScans(c ...*CodeScan) *ReleaseVulnerabilityUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rvuo.RemoveScanIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rvuo *ReleaseVulnerabilityUpdateOne) Select(field string, fields ...string) *ReleaseVulnerabilityUpdateOne {
	rvuo.fields = append([]string{field}, fields...)
	return rvuo
}

// Save executes the query and returns the updated ReleaseVulnerability entity.
func (rvuo *ReleaseVulnerabilityUpdateOne) Save(ctx context.Context) (*ReleaseVulnerability, error) {
	var (
		err  error
		node *ReleaseVulnerability
	)
	if len(rvuo.hooks) == 0 {
		if err = rvuo.check(); err != nil {
			return nil, err
		}
		node, err = rvuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseVulnerabilityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rvuo.check(); err != nil {
				return nil, err
			}
			rvuo.mutation = mutation
			node, err = rvuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rvuo.hooks) - 1; i >= 0; i-- {
			if rvuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rvuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rvuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rvuo *ReleaseVulnerabilityUpdateOne) SaveX(ctx context.Context) *ReleaseVulnerability {
	node, err := rvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rvuo *ReleaseVulnerabilityUpdateOne) Exec(ctx context.Context) error {
	_, err := rvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rvuo *ReleaseVulnerabilityUpdateOne) ExecX(ctx context.Context) {
	if err := rvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rvuo *ReleaseVulnerabilityUpdateOne) check() error {
	if _, ok := rvuo.mutation.VulnerabilityID(); rvuo.mutation.VulnerabilityCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"vulnerability\"")
	}
	if _, ok := rvuo.mutation.ReleaseID(); rvuo.mutation.ReleaseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"release\"")
	}
	return nil
}

func (rvuo *ReleaseVulnerabilityUpdateOne) sqlSave(ctx context.Context) (_node *ReleaseVulnerability, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releasevulnerability.Table,
			Columns: releasevulnerability.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releasevulnerability.FieldID,
			},
		},
	}
	id, ok := rvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ReleaseVulnerability.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, releasevulnerability.FieldID)
		for _, f := range fields {
			if !releasevulnerability.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != releasevulnerability.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rvuo.mutation.VulnerabilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasevulnerability.VulnerabilityTable,
			Columns: []string{releasevulnerability.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerability.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvuo.mutation.VulnerabilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasevulnerability.VulnerabilityTable,
			Columns: []string{releasevulnerability.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rvuo.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ComponentsTable,
			Columns: releasevulnerability.ComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasecomponent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvuo.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !rvuo.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ComponentsTable,
			Columns: releasevulnerability.ComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasecomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvuo.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ComponentsTable,
			Columns: releasevulnerability.ComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasecomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rvuo.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasevulnerability.ReleaseTable,
			Columns: []string{releasevulnerability.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvuo.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasevulnerability.ReleaseTable,
			Columns: []string{releasevulnerability.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rvuo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ReviewsTable,
			Columns: releasevulnerability.ReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvuo.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !rvuo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ReviewsTable,
			Columns: releasevulnerability.ReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvuo.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ReviewsTable,
			Columns: releasevulnerability.ReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rvuo.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ScansTable,
			Columns: releasevulnerability.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvuo.mutation.RemovedScansIDs(); len(nodes) > 0 && !rvuo.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ScansTable,
			Columns: releasevulnerability.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rvuo.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   releasevulnerability.ScansTable,
			Columns: releasevulnerability.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReleaseVulnerability{config: rvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releasevulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
