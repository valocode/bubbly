// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/project"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasevulnerability"
	"github.com/valocode/bubbly/ent/repo"
	"github.com/valocode/bubbly/ent/vulnerability"
	"github.com/valocode/bubbly/ent/vulnerabilityreview"
)

// VulnerabilityReviewQuery is the builder for querying VulnerabilityReview entities.
type VulnerabilityReviewQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.VulnerabilityReview
	// eager-loading edges.
	withVulnerability *VulnerabilityQuery
	withProjects      *ProjectQuery
	withRepos         *RepoQuery
	withReleases      *ReleaseQuery
	withInstances     *ReleaseVulnerabilityQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VulnerabilityReviewQuery builder.
func (vrq *VulnerabilityReviewQuery) Where(ps ...predicate.VulnerabilityReview) *VulnerabilityReviewQuery {
	vrq.predicates = append(vrq.predicates, ps...)
	return vrq
}

// Limit adds a limit step to the query.
func (vrq *VulnerabilityReviewQuery) Limit(limit int) *VulnerabilityReviewQuery {
	vrq.limit = &limit
	return vrq
}

// Offset adds an offset step to the query.
func (vrq *VulnerabilityReviewQuery) Offset(offset int) *VulnerabilityReviewQuery {
	vrq.offset = &offset
	return vrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vrq *VulnerabilityReviewQuery) Unique(unique bool) *VulnerabilityReviewQuery {
	vrq.unique = &unique
	return vrq
}

// Order adds an order step to the query.
func (vrq *VulnerabilityReviewQuery) Order(o ...OrderFunc) *VulnerabilityReviewQuery {
	vrq.order = append(vrq.order, o...)
	return vrq
}

// QueryVulnerability chains the current query on the "vulnerability" edge.
func (vrq *VulnerabilityReviewQuery) QueryVulnerability() *VulnerabilityQuery {
	query := &VulnerabilityQuery{config: vrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vulnerabilityreview.Table, vulnerabilityreview.FieldID, selector),
			sqlgraph.To(vulnerability.Table, vulnerability.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, vulnerabilityreview.VulnerabilityTable, vulnerabilityreview.VulnerabilityColumn),
		)
		fromU = sqlgraph.SetNeighbors(vrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProjects chains the current query on the "projects" edge.
func (vrq *VulnerabilityReviewQuery) QueryProjects() *ProjectQuery {
	query := &ProjectQuery{config: vrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vulnerabilityreview.Table, vulnerabilityreview.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, vulnerabilityreview.ProjectsTable, vulnerabilityreview.ProjectsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(vrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRepos chains the current query on the "repos" edge.
func (vrq *VulnerabilityReviewQuery) QueryRepos() *RepoQuery {
	query := &RepoQuery{config: vrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vulnerabilityreview.Table, vulnerabilityreview.FieldID, selector),
			sqlgraph.To(repo.Table, repo.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, vulnerabilityreview.ReposTable, vulnerabilityreview.ReposPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(vrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReleases chains the current query on the "releases" edge.
func (vrq *VulnerabilityReviewQuery) QueryReleases() *ReleaseQuery {
	query := &ReleaseQuery{config: vrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vulnerabilityreview.Table, vulnerabilityreview.FieldID, selector),
			sqlgraph.To(release.Table, release.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, vulnerabilityreview.ReleasesTable, vulnerabilityreview.ReleasesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(vrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInstances chains the current query on the "instances" edge.
func (vrq *VulnerabilityReviewQuery) QueryInstances() *ReleaseVulnerabilityQuery {
	query := &ReleaseVulnerabilityQuery{config: vrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vulnerabilityreview.Table, vulnerabilityreview.FieldID, selector),
			sqlgraph.To(releasevulnerability.Table, releasevulnerability.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, vulnerabilityreview.InstancesTable, vulnerabilityreview.InstancesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(vrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VulnerabilityReview entity from the query.
// Returns a *NotFoundError when no VulnerabilityReview was found.
func (vrq *VulnerabilityReviewQuery) First(ctx context.Context) (*VulnerabilityReview, error) {
	nodes, err := vrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{vulnerabilityreview.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vrq *VulnerabilityReviewQuery) FirstX(ctx context.Context) *VulnerabilityReview {
	node, err := vrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VulnerabilityReview ID from the query.
// Returns a *NotFoundError when no VulnerabilityReview ID was found.
func (vrq *VulnerabilityReviewQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{vulnerabilityreview.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vrq *VulnerabilityReviewQuery) FirstIDX(ctx context.Context) int {
	id, err := vrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VulnerabilityReview entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one VulnerabilityReview entity is not found.
// Returns a *NotFoundError when no VulnerabilityReview entities are found.
func (vrq *VulnerabilityReviewQuery) Only(ctx context.Context) (*VulnerabilityReview, error) {
	nodes, err := vrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{vulnerabilityreview.Label}
	default:
		return nil, &NotSingularError{vulnerabilityreview.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vrq *VulnerabilityReviewQuery) OnlyX(ctx context.Context) *VulnerabilityReview {
	node, err := vrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VulnerabilityReview ID in the query.
// Returns a *NotSingularError when exactly one VulnerabilityReview ID is not found.
// Returns a *NotFoundError when no entities are found.
func (vrq *VulnerabilityReviewQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{vulnerabilityreview.Label}
	default:
		err = &NotSingularError{vulnerabilityreview.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vrq *VulnerabilityReviewQuery) OnlyIDX(ctx context.Context) int {
	id, err := vrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VulnerabilityReviews.
func (vrq *VulnerabilityReviewQuery) All(ctx context.Context) ([]*VulnerabilityReview, error) {
	if err := vrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return vrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (vrq *VulnerabilityReviewQuery) AllX(ctx context.Context) []*VulnerabilityReview {
	nodes, err := vrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VulnerabilityReview IDs.
func (vrq *VulnerabilityReviewQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := vrq.Select(vulnerabilityreview.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vrq *VulnerabilityReviewQuery) IDsX(ctx context.Context) []int {
	ids, err := vrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vrq *VulnerabilityReviewQuery) Count(ctx context.Context) (int, error) {
	if err := vrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return vrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (vrq *VulnerabilityReviewQuery) CountX(ctx context.Context) int {
	count, err := vrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vrq *VulnerabilityReviewQuery) Exist(ctx context.Context) (bool, error) {
	if err := vrq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return vrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (vrq *VulnerabilityReviewQuery) ExistX(ctx context.Context) bool {
	exist, err := vrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VulnerabilityReviewQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vrq *VulnerabilityReviewQuery) Clone() *VulnerabilityReviewQuery {
	if vrq == nil {
		return nil
	}
	return &VulnerabilityReviewQuery{
		config:            vrq.config,
		limit:             vrq.limit,
		offset:            vrq.offset,
		order:             append([]OrderFunc{}, vrq.order...),
		predicates:        append([]predicate.VulnerabilityReview{}, vrq.predicates...),
		withVulnerability: vrq.withVulnerability.Clone(),
		withProjects:      vrq.withProjects.Clone(),
		withRepos:         vrq.withRepos.Clone(),
		withReleases:      vrq.withReleases.Clone(),
		withInstances:     vrq.withInstances.Clone(),
		// clone intermediate query.
		sql:  vrq.sql.Clone(),
		path: vrq.path,
	}
}

// WithVulnerability tells the query-builder to eager-load the nodes that are connected to
// the "vulnerability" edge. The optional arguments are used to configure the query builder of the edge.
func (vrq *VulnerabilityReviewQuery) WithVulnerability(opts ...func(*VulnerabilityQuery)) *VulnerabilityReviewQuery {
	query := &VulnerabilityQuery{config: vrq.config}
	for _, opt := range opts {
		opt(query)
	}
	vrq.withVulnerability = query
	return vrq
}

// WithProjects tells the query-builder to eager-load the nodes that are connected to
// the "projects" edge. The optional arguments are used to configure the query builder of the edge.
func (vrq *VulnerabilityReviewQuery) WithProjects(opts ...func(*ProjectQuery)) *VulnerabilityReviewQuery {
	query := &ProjectQuery{config: vrq.config}
	for _, opt := range opts {
		opt(query)
	}
	vrq.withProjects = query
	return vrq
}

// WithRepos tells the query-builder to eager-load the nodes that are connected to
// the "repos" edge. The optional arguments are used to configure the query builder of the edge.
func (vrq *VulnerabilityReviewQuery) WithRepos(opts ...func(*RepoQuery)) *VulnerabilityReviewQuery {
	query := &RepoQuery{config: vrq.config}
	for _, opt := range opts {
		opt(query)
	}
	vrq.withRepos = query
	return vrq
}

// WithReleases tells the query-builder to eager-load the nodes that are connected to
// the "releases" edge. The optional arguments are used to configure the query builder of the edge.
func (vrq *VulnerabilityReviewQuery) WithReleases(opts ...func(*ReleaseQuery)) *VulnerabilityReviewQuery {
	query := &ReleaseQuery{config: vrq.config}
	for _, opt := range opts {
		opt(query)
	}
	vrq.withReleases = query
	return vrq
}

// WithInstances tells the query-builder to eager-load the nodes that are connected to
// the "instances" edge. The optional arguments are used to configure the query builder of the edge.
func (vrq *VulnerabilityReviewQuery) WithInstances(opts ...func(*ReleaseVulnerabilityQuery)) *VulnerabilityReviewQuery {
	query := &ReleaseVulnerabilityQuery{config: vrq.config}
	for _, opt := range opts {
		opt(query)
	}
	vrq.withInstances = query
	return vrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VulnerabilityReview.Query().
//		GroupBy(vulnerabilityreview.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (vrq *VulnerabilityReviewQuery) GroupBy(field string, fields ...string) *VulnerabilityReviewGroupBy {
	group := &VulnerabilityReviewGroupBy{config: vrq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := vrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return vrq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.VulnerabilityReview.Query().
//		Select(vulnerabilityreview.FieldName).
//		Scan(ctx, &v)
//
func (vrq *VulnerabilityReviewQuery) Select(fields ...string) *VulnerabilityReviewSelect {
	vrq.fields = append(vrq.fields, fields...)
	return &VulnerabilityReviewSelect{VulnerabilityReviewQuery: vrq}
}

func (vrq *VulnerabilityReviewQuery) prepareQuery(ctx context.Context) error {
	for _, f := range vrq.fields {
		if !vulnerabilityreview.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vrq.path != nil {
		prev, err := vrq.path(ctx)
		if err != nil {
			return err
		}
		vrq.sql = prev
	}
	return nil
}

func (vrq *VulnerabilityReviewQuery) sqlAll(ctx context.Context) ([]*VulnerabilityReview, error) {
	var (
		nodes       = []*VulnerabilityReview{}
		withFKs     = vrq.withFKs
		_spec       = vrq.querySpec()
		loadedTypes = [5]bool{
			vrq.withVulnerability != nil,
			vrq.withProjects != nil,
			vrq.withRepos != nil,
			vrq.withReleases != nil,
			vrq.withInstances != nil,
		}
	)
	if vrq.withVulnerability != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, vulnerabilityreview.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &VulnerabilityReview{config: vrq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, vrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := vrq.withVulnerability; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*VulnerabilityReview)
		for i := range nodes {
			if nodes[i].vulnerability_review_vulnerability == nil {
				continue
			}
			fk := *nodes[i].vulnerability_review_vulnerability
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(vulnerability.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "vulnerability_review_vulnerability" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Vulnerability = n
			}
		}
	}

	if query := vrq.withProjects; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*VulnerabilityReview, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Projects = []*Project{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*VulnerabilityReview)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   vulnerabilityreview.ProjectsTable,
				Columns: vulnerabilityreview.ProjectsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(vulnerabilityreview.ProjectsPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, vrq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "projects": %w`, err)
		}
		query.Where(project.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "projects" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Projects = append(nodes[i].Edges.Projects, n)
			}
		}
	}

	if query := vrq.withRepos; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*VulnerabilityReview, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Repos = []*Repo{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*VulnerabilityReview)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   vulnerabilityreview.ReposTable,
				Columns: vulnerabilityreview.ReposPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(vulnerabilityreview.ReposPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, vrq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "repos": %w`, err)
		}
		query.Where(repo.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "repos" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Repos = append(nodes[i].Edges.Repos, n)
			}
		}
	}

	if query := vrq.withReleases; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*VulnerabilityReview, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Releases = []*Release{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*VulnerabilityReview)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   vulnerabilityreview.ReleasesTable,
				Columns: vulnerabilityreview.ReleasesPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(vulnerabilityreview.ReleasesPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, vrq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "releases": %w`, err)
		}
		query.Where(release.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "releases" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Releases = append(nodes[i].Edges.Releases, n)
			}
		}
	}

	if query := vrq.withInstances; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*VulnerabilityReview, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Instances = []*ReleaseVulnerability{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*VulnerabilityReview)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   vulnerabilityreview.InstancesTable,
				Columns: vulnerabilityreview.InstancesPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(vulnerabilityreview.InstancesPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, vrq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "instances": %w`, err)
		}
		query.Where(releasevulnerability.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "instances" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Instances = append(nodes[i].Edges.Instances, n)
			}
		}
	}

	return nodes, nil
}

func (vrq *VulnerabilityReviewQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vrq.querySpec()
	return sqlgraph.CountNodes(ctx, vrq.driver, _spec)
}

func (vrq *VulnerabilityReviewQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := vrq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (vrq *VulnerabilityReviewQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vulnerabilityreview.Table,
			Columns: vulnerabilityreview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vulnerabilityreview.FieldID,
			},
		},
		From:   vrq.sql,
		Unique: true,
	}
	if unique := vrq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := vrq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vulnerabilityreview.FieldID)
		for i := range fields {
			if fields[i] != vulnerabilityreview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := vrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vrq *VulnerabilityReviewQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vrq.driver.Dialect())
	t1 := builder.Table(vulnerabilityreview.Table)
	columns := vrq.fields
	if len(columns) == 0 {
		columns = vulnerabilityreview.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vrq.sql != nil {
		selector = vrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range vrq.predicates {
		p(selector)
	}
	for _, p := range vrq.order {
		p(selector)
	}
	if offset := vrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VulnerabilityReviewGroupBy is the group-by builder for VulnerabilityReview entities.
type VulnerabilityReviewGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vrgb *VulnerabilityReviewGroupBy) Aggregate(fns ...AggregateFunc) *VulnerabilityReviewGroupBy {
	vrgb.fns = append(vrgb.fns, fns...)
	return vrgb
}

// Scan applies the group-by query and scans the result into the given value.
func (vrgb *VulnerabilityReviewGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := vrgb.path(ctx)
	if err != nil {
		return err
	}
	vrgb.sql = query
	return vrgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (vrgb *VulnerabilityReviewGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := vrgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (vrgb *VulnerabilityReviewGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(vrgb.fields) > 1 {
		return nil, errors.New("ent: VulnerabilityReviewGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := vrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (vrgb *VulnerabilityReviewGroupBy) StringsX(ctx context.Context) []string {
	v, err := vrgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (vrgb *VulnerabilityReviewGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = vrgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vulnerabilityreview.Label}
	default:
		err = fmt.Errorf("ent: VulnerabilityReviewGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (vrgb *VulnerabilityReviewGroupBy) StringX(ctx context.Context) string {
	v, err := vrgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (vrgb *VulnerabilityReviewGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(vrgb.fields) > 1 {
		return nil, errors.New("ent: VulnerabilityReviewGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := vrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (vrgb *VulnerabilityReviewGroupBy) IntsX(ctx context.Context) []int {
	v, err := vrgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (vrgb *VulnerabilityReviewGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = vrgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vulnerabilityreview.Label}
	default:
		err = fmt.Errorf("ent: VulnerabilityReviewGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (vrgb *VulnerabilityReviewGroupBy) IntX(ctx context.Context) int {
	v, err := vrgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (vrgb *VulnerabilityReviewGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(vrgb.fields) > 1 {
		return nil, errors.New("ent: VulnerabilityReviewGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := vrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (vrgb *VulnerabilityReviewGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := vrgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (vrgb *VulnerabilityReviewGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = vrgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vulnerabilityreview.Label}
	default:
		err = fmt.Errorf("ent: VulnerabilityReviewGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (vrgb *VulnerabilityReviewGroupBy) Float64X(ctx context.Context) float64 {
	v, err := vrgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (vrgb *VulnerabilityReviewGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(vrgb.fields) > 1 {
		return nil, errors.New("ent: VulnerabilityReviewGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := vrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (vrgb *VulnerabilityReviewGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := vrgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (vrgb *VulnerabilityReviewGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = vrgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vulnerabilityreview.Label}
	default:
		err = fmt.Errorf("ent: VulnerabilityReviewGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (vrgb *VulnerabilityReviewGroupBy) BoolX(ctx context.Context) bool {
	v, err := vrgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (vrgb *VulnerabilityReviewGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range vrgb.fields {
		if !vulnerabilityreview.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := vrgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (vrgb *VulnerabilityReviewGroupBy) sqlQuery() *sql.Selector {
	selector := vrgb.sql.Select()
	aggregation := make([]string, 0, len(vrgb.fns))
	for _, fn := range vrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(vrgb.fields)+len(vrgb.fns))
		for _, f := range vrgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(vrgb.fields...)...)
}

// VulnerabilityReviewSelect is the builder for selecting fields of VulnerabilityReview entities.
type VulnerabilityReviewSelect struct {
	*VulnerabilityReviewQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (vrs *VulnerabilityReviewSelect) Scan(ctx context.Context, v interface{}) error {
	if err := vrs.prepareQuery(ctx); err != nil {
		return err
	}
	vrs.sql = vrs.VulnerabilityReviewQuery.sqlQuery(ctx)
	return vrs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (vrs *VulnerabilityReviewSelect) ScanX(ctx context.Context, v interface{}) {
	if err := vrs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (vrs *VulnerabilityReviewSelect) Strings(ctx context.Context) ([]string, error) {
	if len(vrs.fields) > 1 {
		return nil, errors.New("ent: VulnerabilityReviewSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := vrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (vrs *VulnerabilityReviewSelect) StringsX(ctx context.Context) []string {
	v, err := vrs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (vrs *VulnerabilityReviewSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = vrs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vulnerabilityreview.Label}
	default:
		err = fmt.Errorf("ent: VulnerabilityReviewSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (vrs *VulnerabilityReviewSelect) StringX(ctx context.Context) string {
	v, err := vrs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (vrs *VulnerabilityReviewSelect) Ints(ctx context.Context) ([]int, error) {
	if len(vrs.fields) > 1 {
		return nil, errors.New("ent: VulnerabilityReviewSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := vrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (vrs *VulnerabilityReviewSelect) IntsX(ctx context.Context) []int {
	v, err := vrs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (vrs *VulnerabilityReviewSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = vrs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vulnerabilityreview.Label}
	default:
		err = fmt.Errorf("ent: VulnerabilityReviewSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (vrs *VulnerabilityReviewSelect) IntX(ctx context.Context) int {
	v, err := vrs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (vrs *VulnerabilityReviewSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(vrs.fields) > 1 {
		return nil, errors.New("ent: VulnerabilityReviewSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := vrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (vrs *VulnerabilityReviewSelect) Float64sX(ctx context.Context) []float64 {
	v, err := vrs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (vrs *VulnerabilityReviewSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = vrs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vulnerabilityreview.Label}
	default:
		err = fmt.Errorf("ent: VulnerabilityReviewSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (vrs *VulnerabilityReviewSelect) Float64X(ctx context.Context) float64 {
	v, err := vrs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (vrs *VulnerabilityReviewSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(vrs.fields) > 1 {
		return nil, errors.New("ent: VulnerabilityReviewSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := vrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (vrs *VulnerabilityReviewSelect) BoolsX(ctx context.Context) []bool {
	v, err := vrs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (vrs *VulnerabilityReviewSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = vrs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vulnerabilityreview.Label}
	default:
		err = fmt.Errorf("ent: VulnerabilityReviewSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (vrs *VulnerabilityReviewSelect) BoolX(ctx context.Context) bool {
	v, err := vrs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (vrs *VulnerabilityReviewSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := vrs.sql.Query()
	if err := vrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
