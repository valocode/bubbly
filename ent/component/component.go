// Code generated by entc, DO NOT EDIT.

package component

const (
	// Label holds the string label denoting the component type in the database.
	Label = "component"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldVendor holds the string denoting the vendor field in the database.
	FieldVendor = "vendor"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// EdgeVulnerabilities holds the string denoting the vulnerabilities edge name in mutations.
	EdgeVulnerabilities = "vulnerabilities"
	// EdgeLicenses holds the string denoting the licenses edge name in mutations.
	EdgeLicenses = "licenses"
	// EdgeRelease holds the string denoting the release edge name in mutations.
	EdgeRelease = "release"
	// Table holds the table name of the component in the database.
	Table = "component"
	// VulnerabilitiesTable is the table the holds the vulnerabilities relation/edge.
	VulnerabilitiesTable = "vulnerability"
	// VulnerabilitiesInverseTable is the table name for the Vulnerability entity.
	// It exists in this package in order to avoid circular dependency with the "vulnerability" package.
	VulnerabilitiesInverseTable = "vulnerability"
	// VulnerabilitiesColumn is the table column denoting the vulnerabilities relation/edge.
	VulnerabilitiesColumn = "component_vulnerabilities"
	// LicensesTable is the table the holds the licenses relation/edge. The primary key declared below.
	LicensesTable = "component_licenses"
	// LicensesInverseTable is the table name for the License entity.
	// It exists in this package in order to avoid circular dependency with the "license" package.
	LicensesInverseTable = "license"
	// ReleaseTable is the table the holds the release relation/edge. The primary key declared below.
	ReleaseTable = "component_release"
	// ReleaseInverseTable is the table name for the Release entity.
	// It exists in this package in order to avoid circular dependency with the "release" package.
	ReleaseInverseTable = "release"
)

// Columns holds all SQL columns for component fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldVendor,
	FieldVersion,
	FieldDescription,
	FieldURL,
}

var (
	// LicensesPrimaryKey and LicensesColumn2 are the table columns denoting the
	// primary key for the licenses relation (M2M).
	LicensesPrimaryKey = []string{"component_id", "license_id"}
	// ReleasePrimaryKey and ReleaseColumn2 are the table columns denoting the
	// primary key for the release relation (M2M).
	ReleasePrimaryKey = []string{"component_id", "release_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// VendorValidator is a validator for the "vendor" field. It is called by the builders before save.
	VendorValidator func(string) error
	// VersionValidator is a validator for the "version" field. It is called by the builders before save.
	VersionValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
)
