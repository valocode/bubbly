package schema

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/edge"
)

type ReleaseVulnerability struct {
	ent.Schema
}

func (ReleaseVulnerability) Annotations() []schema.Annotation {
	return []schema.Annotation{
		entsql.Annotation{Table: "release_vulnerability"},
	}
}

func (ReleaseVulnerability) Fields() []ent.Field {
	return []ent.Field{}
}

func (ReleaseVulnerability) Edges() []ent.Edge {
	return []ent.Edge{
		// Edge to the actual vulnerability for this
		edge.To("vulnerability", Vulnerability.Type).Unique().Required(),
		edge.To("components", ReleaseComponent.Type),
		edge.To("release", Release.Type).Unique().Required(),
		edge.To("reviews", VulnerabilityReview.Type),
		// Scan is optional and only used if the vulnerability was identified by
		// a tool integrated with an adapter
		edge.To("scans", CodeScan.Type),
	}
}

// func (ReleaseVulnerability) Hooks() []ent.Hook {
// 	return []ent.Hook{
// 		// Automatically set the ReleaseVulnerability severity if it has not already been set
// 		hook.On(
// 			func(next ent.Mutator) ent.Mutator {
// 				return hook.VulnerabilityFunc(func(ctx context.Context, m *gen.VulnerabilityMutation) (ent.Value, error) {
// 					if score, exists := m.SeverityScore(); exists {
// 						// Ranges: https://nvd.nist.gov/vuln-metrics/cvss
// 						var severity vulnerability.Severity
// 						switch {
// 						case score == 0.0:
// 							severity = vulnerability.SeverityNone
// 						case score >= 0.1 && score < 4.0:
// 							severity = vulnerability.SeverityLow
// 						case score >= 4.0 && score < 7.0:
// 							severity = vulnerability.SeverityMedium
// 						case score >= 7.0 && score < 9.0:
// 							severity = vulnerability.SeverityHigh
// 						case score >= 9.0:
// 							severity = vulnerability.SeverityCritical
// 						default:
// 							severity = vulnerability.SeverityNone
// 						}
// 						m.SetSeverity(severity)
// 					}
// 					return next.Mutate(ctx, m)
// 				})
// 			},
// 			ent.OpCreate|ent.OpUpdate|ent.OpUpdateOne,
// 		),
// 	}
// }
