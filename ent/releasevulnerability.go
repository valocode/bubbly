// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/codescan"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasecomponent"
	"github.com/valocode/bubbly/ent/releasevulnerability"
	"github.com/valocode/bubbly/ent/vulnerability"
)

// ReleaseVulnerability is the model entity for the ReleaseVulnerability schema.
type ReleaseVulnerability struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReleaseVulnerabilityQuery when eager-loading is set.
	Edges                               ReleaseVulnerabilityEdges `json:"edges"`
	release_vulnerability_vulnerability *int
	release_vulnerability_component     *int
	release_vulnerability_release       *int
	release_vulnerability_scan          *int
}

// ReleaseVulnerabilityEdges holds the relations/edges for other nodes in the graph.
type ReleaseVulnerabilityEdges struct {
	// Vulnerability holds the value of the vulnerability edge.
	Vulnerability *Vulnerability `json:"vulnerability,omitempty"`
	// Component holds the value of the component edge.
	Component *ReleaseComponent `json:"component,omitempty"`
	// Release holds the value of the release edge.
	Release *Release `json:"release,omitempty"`
	// Reviews holds the value of the reviews edge.
	Reviews []*VulnerabilityReview `json:"reviews,omitempty"`
	// Scan holds the value of the scan edge.
	Scan *CodeScan `json:"scan,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// VulnerabilityOrErr returns the Vulnerability value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReleaseVulnerabilityEdges) VulnerabilityOrErr() (*Vulnerability, error) {
	if e.loadedTypes[0] {
		if e.Vulnerability == nil {
			// The edge vulnerability was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: vulnerability.Label}
		}
		return e.Vulnerability, nil
	}
	return nil, &NotLoadedError{edge: "vulnerability"}
}

// ComponentOrErr returns the Component value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReleaseVulnerabilityEdges) ComponentOrErr() (*ReleaseComponent, error) {
	if e.loadedTypes[1] {
		if e.Component == nil {
			// The edge component was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: releasecomponent.Label}
		}
		return e.Component, nil
	}
	return nil, &NotLoadedError{edge: "component"}
}

// ReleaseOrErr returns the Release value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReleaseVulnerabilityEdges) ReleaseOrErr() (*Release, error) {
	if e.loadedTypes[2] {
		if e.Release == nil {
			// The edge release was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: release.Label}
		}
		return e.Release, nil
	}
	return nil, &NotLoadedError{edge: "release"}
}

// ReviewsOrErr returns the Reviews value or an error if the edge
// was not loaded in eager-loading.
func (e ReleaseVulnerabilityEdges) ReviewsOrErr() ([]*VulnerabilityReview, error) {
	if e.loadedTypes[3] {
		return e.Reviews, nil
	}
	return nil, &NotLoadedError{edge: "reviews"}
}

// ScanOrErr returns the Scan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReleaseVulnerabilityEdges) ScanOrErr() (*CodeScan, error) {
	if e.loadedTypes[4] {
		if e.Scan == nil {
			// The edge scan was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: codescan.Label}
		}
		return e.Scan, nil
	}
	return nil, &NotLoadedError{edge: "scan"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReleaseVulnerability) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case releasevulnerability.FieldID:
			values[i] = new(sql.NullInt64)
		case releasevulnerability.ForeignKeys[0]: // release_vulnerability_vulnerability
			values[i] = new(sql.NullInt64)
		case releasevulnerability.ForeignKeys[1]: // release_vulnerability_component
			values[i] = new(sql.NullInt64)
		case releasevulnerability.ForeignKeys[2]: // release_vulnerability_release
			values[i] = new(sql.NullInt64)
		case releasevulnerability.ForeignKeys[3]: // release_vulnerability_scan
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ReleaseVulnerability", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReleaseVulnerability fields.
func (rv *ReleaseVulnerability) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case releasevulnerability.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rv.ID = int(value.Int64)
		case releasevulnerability.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field release_vulnerability_vulnerability", value)
			} else if value.Valid {
				rv.release_vulnerability_vulnerability = new(int)
				*rv.release_vulnerability_vulnerability = int(value.Int64)
			}
		case releasevulnerability.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field release_vulnerability_component", value)
			} else if value.Valid {
				rv.release_vulnerability_component = new(int)
				*rv.release_vulnerability_component = int(value.Int64)
			}
		case releasevulnerability.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field release_vulnerability_release", value)
			} else if value.Valid {
				rv.release_vulnerability_release = new(int)
				*rv.release_vulnerability_release = int(value.Int64)
			}
		case releasevulnerability.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field release_vulnerability_scan", value)
			} else if value.Valid {
				rv.release_vulnerability_scan = new(int)
				*rv.release_vulnerability_scan = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryVulnerability queries the "vulnerability" edge of the ReleaseVulnerability entity.
func (rv *ReleaseVulnerability) QueryVulnerability() *VulnerabilityQuery {
	return (&ReleaseVulnerabilityClient{config: rv.config}).QueryVulnerability(rv)
}

// QueryComponent queries the "component" edge of the ReleaseVulnerability entity.
func (rv *ReleaseVulnerability) QueryComponent() *ReleaseComponentQuery {
	return (&ReleaseVulnerabilityClient{config: rv.config}).QueryComponent(rv)
}

// QueryRelease queries the "release" edge of the ReleaseVulnerability entity.
func (rv *ReleaseVulnerability) QueryRelease() *ReleaseQuery {
	return (&ReleaseVulnerabilityClient{config: rv.config}).QueryRelease(rv)
}

// QueryReviews queries the "reviews" edge of the ReleaseVulnerability entity.
func (rv *ReleaseVulnerability) QueryReviews() *VulnerabilityReviewQuery {
	return (&ReleaseVulnerabilityClient{config: rv.config}).QueryReviews(rv)
}

// QueryScan queries the "scan" edge of the ReleaseVulnerability entity.
func (rv *ReleaseVulnerability) QueryScan() *CodeScanQuery {
	return (&ReleaseVulnerabilityClient{config: rv.config}).QueryScan(rv)
}

// Update returns a builder for updating this ReleaseVulnerability.
// Note that you need to call ReleaseVulnerability.Unwrap() before calling this method if this ReleaseVulnerability
// was returned from a transaction, and the transaction was committed or rolled back.
func (rv *ReleaseVulnerability) Update() *ReleaseVulnerabilityUpdateOne {
	return (&ReleaseVulnerabilityClient{config: rv.config}).UpdateOne(rv)
}

// Unwrap unwraps the ReleaseVulnerability entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rv *ReleaseVulnerability) Unwrap() *ReleaseVulnerability {
	tx, ok := rv.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReleaseVulnerability is not a transactional entity")
	}
	rv.config.driver = tx.drv
	return rv
}

// String implements the fmt.Stringer.
func (rv *ReleaseVulnerability) String() string {
	var builder strings.Builder
	builder.WriteString("ReleaseVulnerability(")
	builder.WriteString(fmt.Sprintf("id=%v", rv.ID))
	builder.WriteByte(')')
	return builder.String()
}

// ReleaseVulnerabilities is a parsable slice of ReleaseVulnerability.
type ReleaseVulnerabilities []*ReleaseVulnerability

func (rv ReleaseVulnerabilities) config(cfg config) {
	for _i := range rv {
		rv[_i].config = cfg
	}
}
