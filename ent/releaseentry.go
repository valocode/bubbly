// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/artifact"
	"github.com/valocode/bubbly/ent/codescan"
	"github.com/valocode/bubbly/ent/cvescan"
	"github.com/valocode/bubbly/ent/licensescan"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releaseentry"
	"github.com/valocode/bubbly/ent/testrun"
)

// ReleaseEntry is the model entity for the ReleaseEntry schema.
type ReleaseEntry struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type releaseentry.Type `json:"type,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReleaseEntryQuery when eager-loading is set.
	Edges                 ReleaseEntryEdges `json:"edges"`
	release_entry_release *int
}

// ReleaseEntryEdges holds the relations/edges for other nodes in the graph.
type ReleaseEntryEdges struct {
	// Artifact holds the value of the artifact edge.
	Artifact *Artifact `json:"artifact,omitempty"`
	// CodeScan holds the value of the code_scan edge.
	CodeScan *CodeScan `json:"code_scan,omitempty"`
	// TestRun holds the value of the test_run edge.
	TestRun *TestRun `json:"test_run,omitempty"`
	// CveScan holds the value of the cve_scan edge.
	CveScan *CVEScan `json:"cve_scan,omitempty"`
	// LicenseScan holds the value of the license_scan edge.
	LicenseScan *LicenseScan `json:"license_scan,omitempty"`
	// Release holds the value of the release edge.
	Release *Release `json:"release,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// ArtifactOrErr returns the Artifact value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReleaseEntryEdges) ArtifactOrErr() (*Artifact, error) {
	if e.loadedTypes[0] {
		if e.Artifact == nil {
			// The edge artifact was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: artifact.Label}
		}
		return e.Artifact, nil
	}
	return nil, &NotLoadedError{edge: "artifact"}
}

// CodeScanOrErr returns the CodeScan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReleaseEntryEdges) CodeScanOrErr() (*CodeScan, error) {
	if e.loadedTypes[1] {
		if e.CodeScan == nil {
			// The edge code_scan was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: codescan.Label}
		}
		return e.CodeScan, nil
	}
	return nil, &NotLoadedError{edge: "code_scan"}
}

// TestRunOrErr returns the TestRun value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReleaseEntryEdges) TestRunOrErr() (*TestRun, error) {
	if e.loadedTypes[2] {
		if e.TestRun == nil {
			// The edge test_run was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: testrun.Label}
		}
		return e.TestRun, nil
	}
	return nil, &NotLoadedError{edge: "test_run"}
}

// CveScanOrErr returns the CveScan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReleaseEntryEdges) CveScanOrErr() (*CVEScan, error) {
	if e.loadedTypes[3] {
		if e.CveScan == nil {
			// The edge cve_scan was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cvescan.Label}
		}
		return e.CveScan, nil
	}
	return nil, &NotLoadedError{edge: "cve_scan"}
}

// LicenseScanOrErr returns the LicenseScan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReleaseEntryEdges) LicenseScanOrErr() (*LicenseScan, error) {
	if e.loadedTypes[4] {
		if e.LicenseScan == nil {
			// The edge license_scan was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: licensescan.Label}
		}
		return e.LicenseScan, nil
	}
	return nil, &NotLoadedError{edge: "license_scan"}
}

// ReleaseOrErr returns the Release value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReleaseEntryEdges) ReleaseOrErr() (*Release, error) {
	if e.loadedTypes[5] {
		if e.Release == nil {
			// The edge release was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: release.Label}
		}
		return e.Release, nil
	}
	return nil, &NotLoadedError{edge: "release"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReleaseEntry) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case releaseentry.FieldID:
			values[i] = new(sql.NullInt64)
		case releaseentry.FieldType:
			values[i] = new(sql.NullString)
		case releaseentry.FieldTime:
			values[i] = new(sql.NullTime)
		case releaseentry.ForeignKeys[0]: // release_entry_release
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ReleaseEntry", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReleaseEntry fields.
func (re *ReleaseEntry) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case releaseentry.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			re.ID = int(value.Int64)
		case releaseentry.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				re.Type = releaseentry.Type(value.String)
			}
		case releaseentry.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				re.Time = value.Time
			}
		case releaseentry.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field release_entry_release", value)
			} else if value.Valid {
				re.release_entry_release = new(int)
				*re.release_entry_release = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryArtifact queries the "artifact" edge of the ReleaseEntry entity.
func (re *ReleaseEntry) QueryArtifact() *ArtifactQuery {
	return (&ReleaseEntryClient{config: re.config}).QueryArtifact(re)
}

// QueryCodeScan queries the "code_scan" edge of the ReleaseEntry entity.
func (re *ReleaseEntry) QueryCodeScan() *CodeScanQuery {
	return (&ReleaseEntryClient{config: re.config}).QueryCodeScan(re)
}

// QueryTestRun queries the "test_run" edge of the ReleaseEntry entity.
func (re *ReleaseEntry) QueryTestRun() *TestRunQuery {
	return (&ReleaseEntryClient{config: re.config}).QueryTestRun(re)
}

// QueryCveScan queries the "cve_scan" edge of the ReleaseEntry entity.
func (re *ReleaseEntry) QueryCveScan() *CVEScanQuery {
	return (&ReleaseEntryClient{config: re.config}).QueryCveScan(re)
}

// QueryLicenseScan queries the "license_scan" edge of the ReleaseEntry entity.
func (re *ReleaseEntry) QueryLicenseScan() *LicenseScanQuery {
	return (&ReleaseEntryClient{config: re.config}).QueryLicenseScan(re)
}

// QueryRelease queries the "release" edge of the ReleaseEntry entity.
func (re *ReleaseEntry) QueryRelease() *ReleaseQuery {
	return (&ReleaseEntryClient{config: re.config}).QueryRelease(re)
}

// Update returns a builder for updating this ReleaseEntry.
// Note that you need to call ReleaseEntry.Unwrap() before calling this method if this ReleaseEntry
// was returned from a transaction, and the transaction was committed or rolled back.
func (re *ReleaseEntry) Update() *ReleaseEntryUpdateOne {
	return (&ReleaseEntryClient{config: re.config}).UpdateOne(re)
}

// Unwrap unwraps the ReleaseEntry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (re *ReleaseEntry) Unwrap() *ReleaseEntry {
	tx, ok := re.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReleaseEntry is not a transactional entity")
	}
	re.config.driver = tx.drv
	return re
}

// String implements the fmt.Stringer.
func (re *ReleaseEntry) String() string {
	var builder strings.Builder
	builder.WriteString("ReleaseEntry(")
	builder.WriteString(fmt.Sprintf("id=%v", re.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", re.Type))
	builder.WriteString(", time=")
	builder.WriteString(re.Time.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ReleaseEntries is a parsable slice of ReleaseEntry.
type ReleaseEntries []*ReleaseEntry

func (re ReleaseEntries) config(cfg config) {
	for _i := range re {
		re[_i].config = cfg
	}
}
