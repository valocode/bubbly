// Code generated by entc, DO NOT EDIT.

package license

const (
	// Label holds the string label denoting the license type in the database.
	Label = "license"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLicenseID holds the string denoting the license_id field in the database.
	FieldLicenseID = "license_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldReference holds the string denoting the reference field in the database.
	FieldReference = "reference"
	// FieldDetailsURL holds the string denoting the details_url field in the database.
	FieldDetailsURL = "details_url"
	// FieldIsOsiApproved holds the string denoting the is_osi_approved field in the database.
	FieldIsOsiApproved = "is_osi_approved"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeComponents holds the string denoting the components edge name in mutations.
	EdgeComponents = "components"
	// EdgeInstances holds the string denoting the instances edge name in mutations.
	EdgeInstances = "instances"
	// Table holds the table name of the license in the database.
	Table = "license"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "license"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organization"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "license_owner"
	// ComponentsTable is the table that holds the components relation/edge. The primary key declared below.
	ComponentsTable = "component_licenses"
	// ComponentsInverseTable is the table name for the Component entity.
	// It exists in this package in order to avoid circular dependency with the "component" package.
	ComponentsInverseTable = "component"
	// InstancesTable is the table that holds the instances relation/edge.
	InstancesTable = "release_license"
	// InstancesInverseTable is the table name for the ReleaseLicense entity.
	// It exists in this package in order to avoid circular dependency with the "releaselicense" package.
	InstancesInverseTable = "release_license"
	// InstancesColumn is the table column denoting the instances relation/edge.
	InstancesColumn = "release_license_license"
)

// Columns holds all SQL columns for license fields.
var Columns = []string{
	FieldID,
	FieldLicenseID,
	FieldName,
	FieldReference,
	FieldDetailsURL,
	FieldIsOsiApproved,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "license"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"license_owner",
}

var (
	// ComponentsPrimaryKey and ComponentsColumn2 are the table columns denoting the
	// primary key for the components relation (M2M).
	ComponentsPrimaryKey = []string{"component_id", "license_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// LicenseIDValidator is a validator for the "license_id" field. It is called by the builders before save.
	LicenseIDValidator func(string) error
	// DefaultIsOsiApproved holds the default value on creation for the "is_osi_approved" field.
	DefaultIsOsiApproved bool
)
