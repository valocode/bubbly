// Code generated by entc, DO NOT EDIT.

package license

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/valocode/bubbly/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SpdxID applies equality check predicate on the "spdx_id" field. It's identical to SpdxIDEQ.
func SpdxID(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpdxID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Reference applies equality check predicate on the "reference" field. It's identical to ReferenceEQ.
func Reference(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReference), v))
	})
}

// DetailsURL applies equality check predicate on the "details_url" field. It's identical to DetailsURLEQ.
func DetailsURL(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetailsURL), v))
	})
}

// IsOsiApproved applies equality check predicate on the "is_osi_approved" field. It's identical to IsOsiApprovedEQ.
func IsOsiApproved(v bool) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsOsiApproved), v))
	})
}

// SpdxIDEQ applies the EQ predicate on the "spdx_id" field.
func SpdxIDEQ(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpdxID), v))
	})
}

// SpdxIDNEQ applies the NEQ predicate on the "spdx_id" field.
func SpdxIDNEQ(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpdxID), v))
	})
}

// SpdxIDIn applies the In predicate on the "spdx_id" field.
func SpdxIDIn(vs ...string) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSpdxID), v...))
	})
}

// SpdxIDNotIn applies the NotIn predicate on the "spdx_id" field.
func SpdxIDNotIn(vs ...string) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSpdxID), v...))
	})
}

// SpdxIDGT applies the GT predicate on the "spdx_id" field.
func SpdxIDGT(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpdxID), v))
	})
}

// SpdxIDGTE applies the GTE predicate on the "spdx_id" field.
func SpdxIDGTE(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpdxID), v))
	})
}

// SpdxIDLT applies the LT predicate on the "spdx_id" field.
func SpdxIDLT(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpdxID), v))
	})
}

// SpdxIDLTE applies the LTE predicate on the "spdx_id" field.
func SpdxIDLTE(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpdxID), v))
	})
}

// SpdxIDContains applies the Contains predicate on the "spdx_id" field.
func SpdxIDContains(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSpdxID), v))
	})
}

// SpdxIDHasPrefix applies the HasPrefix predicate on the "spdx_id" field.
func SpdxIDHasPrefix(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSpdxID), v))
	})
}

// SpdxIDHasSuffix applies the HasSuffix predicate on the "spdx_id" field.
func SpdxIDHasSuffix(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSpdxID), v))
	})
}

// SpdxIDEqualFold applies the EqualFold predicate on the "spdx_id" field.
func SpdxIDEqualFold(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSpdxID), v))
	})
}

// SpdxIDContainsFold applies the ContainsFold predicate on the "spdx_id" field.
func SpdxIDContainsFold(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSpdxID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// ReferenceEQ applies the EQ predicate on the "reference" field.
func ReferenceEQ(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReference), v))
	})
}

// ReferenceNEQ applies the NEQ predicate on the "reference" field.
func ReferenceNEQ(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReference), v))
	})
}

// ReferenceIn applies the In predicate on the "reference" field.
func ReferenceIn(vs ...string) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReference), v...))
	})
}

// ReferenceNotIn applies the NotIn predicate on the "reference" field.
func ReferenceNotIn(vs ...string) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReference), v...))
	})
}

// ReferenceGT applies the GT predicate on the "reference" field.
func ReferenceGT(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReference), v))
	})
}

// ReferenceGTE applies the GTE predicate on the "reference" field.
func ReferenceGTE(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReference), v))
	})
}

// ReferenceLT applies the LT predicate on the "reference" field.
func ReferenceLT(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReference), v))
	})
}

// ReferenceLTE applies the LTE predicate on the "reference" field.
func ReferenceLTE(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReference), v))
	})
}

// ReferenceContains applies the Contains predicate on the "reference" field.
func ReferenceContains(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReference), v))
	})
}

// ReferenceHasPrefix applies the HasPrefix predicate on the "reference" field.
func ReferenceHasPrefix(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReference), v))
	})
}

// ReferenceHasSuffix applies the HasSuffix predicate on the "reference" field.
func ReferenceHasSuffix(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReference), v))
	})
}

// ReferenceIsNil applies the IsNil predicate on the "reference" field.
func ReferenceIsNil() predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReference)))
	})
}

// ReferenceNotNil applies the NotNil predicate on the "reference" field.
func ReferenceNotNil() predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReference)))
	})
}

// ReferenceEqualFold applies the EqualFold predicate on the "reference" field.
func ReferenceEqualFold(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReference), v))
	})
}

// ReferenceContainsFold applies the ContainsFold predicate on the "reference" field.
func ReferenceContainsFold(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReference), v))
	})
}

// DetailsURLEQ applies the EQ predicate on the "details_url" field.
func DetailsURLEQ(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLNEQ applies the NEQ predicate on the "details_url" field.
func DetailsURLNEQ(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLIn applies the In predicate on the "details_url" field.
func DetailsURLIn(vs ...string) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDetailsURL), v...))
	})
}

// DetailsURLNotIn applies the NotIn predicate on the "details_url" field.
func DetailsURLNotIn(vs ...string) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDetailsURL), v...))
	})
}

// DetailsURLGT applies the GT predicate on the "details_url" field.
func DetailsURLGT(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLGTE applies the GTE predicate on the "details_url" field.
func DetailsURLGTE(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLLT applies the LT predicate on the "details_url" field.
func DetailsURLLT(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLLTE applies the LTE predicate on the "details_url" field.
func DetailsURLLTE(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLContains applies the Contains predicate on the "details_url" field.
func DetailsURLContains(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLHasPrefix applies the HasPrefix predicate on the "details_url" field.
func DetailsURLHasPrefix(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLHasSuffix applies the HasSuffix predicate on the "details_url" field.
func DetailsURLHasSuffix(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLIsNil applies the IsNil predicate on the "details_url" field.
func DetailsURLIsNil() predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDetailsURL)))
	})
}

// DetailsURLNotNil applies the NotNil predicate on the "details_url" field.
func DetailsURLNotNil() predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDetailsURL)))
	})
}

// DetailsURLEqualFold applies the EqualFold predicate on the "details_url" field.
func DetailsURLEqualFold(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLContainsFold applies the ContainsFold predicate on the "details_url" field.
func DetailsURLContainsFold(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDetailsURL), v))
	})
}

// IsOsiApprovedEQ applies the EQ predicate on the "is_osi_approved" field.
func IsOsiApprovedEQ(v bool) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsOsiApproved), v))
	})
}

// IsOsiApprovedNEQ applies the NEQ predicate on the "is_osi_approved" field.
func IsOsiApprovedNEQ(v bool) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsOsiApproved), v))
	})
}

// HasComponents applies the HasEdge predicate on the "components" edge.
func HasComponents() predicate.License {
	return predicate.License(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ComponentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ComponentsTable, ComponentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasComponentsWith applies the HasEdge predicate on the "components" edge with a given conditions (other predicates).
func HasComponentsWith(preds ...predicate.Component) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ComponentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ComponentsTable, ComponentsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsages applies the HasEdge predicate on the "usages" edge.
func HasUsages() predicate.License {
	return predicate.License(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsagesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UsagesTable, UsagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsagesWith applies the HasEdge predicate on the "usages" edge with a given conditions (other predicates).
func HasUsagesWith(preds ...predicate.LicenseUsage) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsagesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UsagesTable, UsagesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.License) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.License) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.License) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		p(s.Not())
	})
}
