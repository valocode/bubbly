// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/vulnerability"
	"github.com/valocode/bubbly/ent/vulnerabilityreview"
)

// VulnerabilityReview is the model entity for the VulnerabilityReview schema.
type VulnerabilityReview struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Decision holds the value of the "decision" field.
	Decision vulnerabilityreview.Decision `json:"decision,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VulnerabilityReviewQuery when eager-loading is set.
	Edges                              VulnerabilityReviewEdges `json:"edges"`
	vulnerability_review_vulnerability *int
}

// VulnerabilityReviewEdges holds the relations/edges for other nodes in the graph.
type VulnerabilityReviewEdges struct {
	// Vulnerability holds the value of the vulnerability edge.
	Vulnerability *Vulnerability `json:"vulnerability,omitempty"`
	// Releases holds the value of the releases edge.
	Releases []*Release `json:"releases,omitempty"`
	// Instances holds the value of the instances edge.
	Instances []*ReleaseVulnerability `json:"instances,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// VulnerabilityOrErr returns the Vulnerability value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VulnerabilityReviewEdges) VulnerabilityOrErr() (*Vulnerability, error) {
	if e.loadedTypes[0] {
		if e.Vulnerability == nil {
			// The edge vulnerability was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: vulnerability.Label}
		}
		return e.Vulnerability, nil
	}
	return nil, &NotLoadedError{edge: "vulnerability"}
}

// ReleasesOrErr returns the Releases value or an error if the edge
// was not loaded in eager-loading.
func (e VulnerabilityReviewEdges) ReleasesOrErr() ([]*Release, error) {
	if e.loadedTypes[1] {
		return e.Releases, nil
	}
	return nil, &NotLoadedError{edge: "releases"}
}

// InstancesOrErr returns the Instances value or an error if the edge
// was not loaded in eager-loading.
func (e VulnerabilityReviewEdges) InstancesOrErr() ([]*ReleaseVulnerability, error) {
	if e.loadedTypes[2] {
		return e.Instances, nil
	}
	return nil, &NotLoadedError{edge: "instances"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VulnerabilityReview) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case vulnerabilityreview.FieldID:
			values[i] = new(sql.NullInt64)
		case vulnerabilityreview.FieldNote, vulnerabilityreview.FieldDecision:
			values[i] = new(sql.NullString)
		case vulnerabilityreview.ForeignKeys[0]: // vulnerability_review_vulnerability
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type VulnerabilityReview", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VulnerabilityReview fields.
func (vr *VulnerabilityReview) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vulnerabilityreview.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vr.ID = int(value.Int64)
		case vulnerabilityreview.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				vr.Note = value.String
			}
		case vulnerabilityreview.FieldDecision:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field decision", values[i])
			} else if value.Valid {
				vr.Decision = vulnerabilityreview.Decision(value.String)
			}
		case vulnerabilityreview.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vulnerability_review_vulnerability", value)
			} else if value.Valid {
				vr.vulnerability_review_vulnerability = new(int)
				*vr.vulnerability_review_vulnerability = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryVulnerability queries the "vulnerability" edge of the VulnerabilityReview entity.
func (vr *VulnerabilityReview) QueryVulnerability() *VulnerabilityQuery {
	return (&VulnerabilityReviewClient{config: vr.config}).QueryVulnerability(vr)
}

// QueryReleases queries the "releases" edge of the VulnerabilityReview entity.
func (vr *VulnerabilityReview) QueryReleases() *ReleaseQuery {
	return (&VulnerabilityReviewClient{config: vr.config}).QueryReleases(vr)
}

// QueryInstances queries the "instances" edge of the VulnerabilityReview entity.
func (vr *VulnerabilityReview) QueryInstances() *ReleaseVulnerabilityQuery {
	return (&VulnerabilityReviewClient{config: vr.config}).QueryInstances(vr)
}

// Update returns a builder for updating this VulnerabilityReview.
// Note that you need to call VulnerabilityReview.Unwrap() before calling this method if this VulnerabilityReview
// was returned from a transaction, and the transaction was committed or rolled back.
func (vr *VulnerabilityReview) Update() *VulnerabilityReviewUpdateOne {
	return (&VulnerabilityReviewClient{config: vr.config}).UpdateOne(vr)
}

// Unwrap unwraps the VulnerabilityReview entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vr *VulnerabilityReview) Unwrap() *VulnerabilityReview {
	tx, ok := vr.config.driver.(*txDriver)
	if !ok {
		panic("ent: VulnerabilityReview is not a transactional entity")
	}
	vr.config.driver = tx.drv
	return vr
}

// String implements the fmt.Stringer.
func (vr *VulnerabilityReview) String() string {
	var builder strings.Builder
	builder.WriteString("VulnerabilityReview(")
	builder.WriteString(fmt.Sprintf("id=%v", vr.ID))
	builder.WriteString(", note=")
	builder.WriteString(vr.Note)
	builder.WriteString(", decision=")
	builder.WriteString(fmt.Sprintf("%v", vr.Decision))
	builder.WriteByte(')')
	return builder.String()
}

// VulnerabilityReviews is a parsable slice of VulnerabilityReview.
type VulnerabilityReviews []*VulnerabilityReview

func (vr VulnerabilityReviews) config(cfg config) {
	for _i := range vr {
		vr[_i].config = cfg
	}
}
