// Code generated by entc, DO NOT EDIT.

package repository

const (
	// Label holds the string label denoting the repository type in the database.
	Label = "repository"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDefaultBranch holds the string denoting the default_branch field in the database.
	FieldDefaultBranch = "default_branch"
	// FieldLabels holds the string denoting the labels field in the database.
	FieldLabels = "labels"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeHead holds the string denoting the head edge name in mutations.
	EdgeHead = "head"
	// EdgeCommits holds the string denoting the commits edge name in mutations.
	EdgeCommits = "commits"
	// Table holds the table name of the repository in the database.
	Table = "repositories"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "repositories"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organization"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "repository_owner"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "repositories"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "project"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "repository_project"
	// HeadTable is the table that holds the head relation/edge.
	HeadTable = "release"
	// HeadInverseTable is the table name for the Release entity.
	// It exists in this package in order to avoid circular dependency with the "release" package.
	HeadInverseTable = "release"
	// HeadColumn is the table column denoting the head relation/edge.
	HeadColumn = "repository_head"
	// CommitsTable is the table that holds the commits relation/edge.
	CommitsTable = "commit"
	// CommitsInverseTable is the table name for the GitCommit entity.
	// It exists in this package in order to avoid circular dependency with the "gitcommit" package.
	CommitsInverseTable = "commit"
	// CommitsColumn is the table column denoting the commits relation/edge.
	CommitsColumn = "git_commit_repository"
)

// Columns holds all SQL columns for repository fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDefaultBranch,
	FieldLabels,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "repositories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"repository_owner",
	"repository_project",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultDefaultBranch holds the default value on creation for the "default_branch" field.
	DefaultDefaultBranch string
	// DefaultBranchValidator is a validator for the "default_branch" field. It is called by the builders before save.
	DefaultBranchValidator func(string) error
)
