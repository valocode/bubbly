// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/component"
	"github.com/valocode/bubbly/ent/cve"
	"github.com/valocode/bubbly/ent/cvescan"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/vulnerability"
)

// VulnerabilityUpdate is the builder for updating Vulnerability entities.
type VulnerabilityUpdate struct {
	config
	hooks    []Hook
	mutation *VulnerabilityMutation
}

// Where adds a new predicate for the VulnerabilityUpdate builder.
func (vu *VulnerabilityUpdate) Where(ps ...predicate.Vulnerability) *VulnerabilityUpdate {
	vu.mutation.predicates = append(vu.mutation.predicates, ps...)
	return vu
}

// SetCveID sets the "cve" edge to the CVE entity by ID.
func (vu *VulnerabilityUpdate) SetCveID(id int) *VulnerabilityUpdate {
	vu.mutation.SetCveID(id)
	return vu
}

// SetCve sets the "cve" edge to the CVE entity.
func (vu *VulnerabilityUpdate) SetCve(c *CVE) *VulnerabilityUpdate {
	return vu.SetCveID(c.ID)
}

// SetScanID sets the "scan" edge to the CVEScan entity by ID.
func (vu *VulnerabilityUpdate) SetScanID(id int) *VulnerabilityUpdate {
	vu.mutation.SetScanID(id)
	return vu
}

// SetScan sets the "scan" edge to the CVEScan entity.
func (vu *VulnerabilityUpdate) SetScan(c *CVEScan) *VulnerabilityUpdate {
	return vu.SetScanID(c.ID)
}

// SetComponentID sets the "component" edge to the Component entity by ID.
func (vu *VulnerabilityUpdate) SetComponentID(id int) *VulnerabilityUpdate {
	vu.mutation.SetComponentID(id)
	return vu
}

// SetComponent sets the "component" edge to the Component entity.
func (vu *VulnerabilityUpdate) SetComponent(c *Component) *VulnerabilityUpdate {
	return vu.SetComponentID(c.ID)
}

// Mutation returns the VulnerabilityMutation object of the builder.
func (vu *VulnerabilityUpdate) Mutation() *VulnerabilityMutation {
	return vu.mutation
}

// ClearCve clears the "cve" edge to the CVE entity.
func (vu *VulnerabilityUpdate) ClearCve() *VulnerabilityUpdate {
	vu.mutation.ClearCve()
	return vu
}

// ClearScan clears the "scan" edge to the CVEScan entity.
func (vu *VulnerabilityUpdate) ClearScan() *VulnerabilityUpdate {
	vu.mutation.ClearScan()
	return vu
}

// ClearComponent clears the "component" edge to the Component entity.
func (vu *VulnerabilityUpdate) ClearComponent() *VulnerabilityUpdate {
	vu.mutation.ClearComponent()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VulnerabilityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vu.hooks) == 0 {
		if err = vu.check(); err != nil {
			return 0, err
		}
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VulnerabilityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vu.check(); err != nil {
				return 0, err
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VulnerabilityUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VulnerabilityUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VulnerabilityUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VulnerabilityUpdate) check() error {
	if _, ok := vu.mutation.CveID(); vu.mutation.CveCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"cve\"")
	}
	if _, ok := vu.mutation.ScanID(); vu.mutation.ScanCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"scan\"")
	}
	if _, ok := vu.mutation.ComponentID(); vu.mutation.ComponentCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"component\"")
	}
	return nil
}

func (vu *VulnerabilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vulnerability.Table,
			Columns: vulnerability.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vulnerability.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vu.mutation.CveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.CveTable,
			Columns: []string{vulnerability.CveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cve.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.CveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.CveTable,
			Columns: []string{vulnerability.CveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cve.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.ScanTable,
			Columns: []string{vulnerability.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cvescan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.ScanTable,
			Columns: []string{vulnerability.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cvescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.ComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vulnerability.ComponentTable,
			Columns: []string{vulnerability.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vulnerability.ComponentTable,
			Columns: []string{vulnerability.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VulnerabilityUpdateOne is the builder for updating a single Vulnerability entity.
type VulnerabilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VulnerabilityMutation
}

// SetCveID sets the "cve" edge to the CVE entity by ID.
func (vuo *VulnerabilityUpdateOne) SetCveID(id int) *VulnerabilityUpdateOne {
	vuo.mutation.SetCveID(id)
	return vuo
}

// SetCve sets the "cve" edge to the CVE entity.
func (vuo *VulnerabilityUpdateOne) SetCve(c *CVE) *VulnerabilityUpdateOne {
	return vuo.SetCveID(c.ID)
}

// SetScanID sets the "scan" edge to the CVEScan entity by ID.
func (vuo *VulnerabilityUpdateOne) SetScanID(id int) *VulnerabilityUpdateOne {
	vuo.mutation.SetScanID(id)
	return vuo
}

// SetScan sets the "scan" edge to the CVEScan entity.
func (vuo *VulnerabilityUpdateOne) SetScan(c *CVEScan) *VulnerabilityUpdateOne {
	return vuo.SetScanID(c.ID)
}

// SetComponentID sets the "component" edge to the Component entity by ID.
func (vuo *VulnerabilityUpdateOne) SetComponentID(id int) *VulnerabilityUpdateOne {
	vuo.mutation.SetComponentID(id)
	return vuo
}

// SetComponent sets the "component" edge to the Component entity.
func (vuo *VulnerabilityUpdateOne) SetComponent(c *Component) *VulnerabilityUpdateOne {
	return vuo.SetComponentID(c.ID)
}

// Mutation returns the VulnerabilityMutation object of the builder.
func (vuo *VulnerabilityUpdateOne) Mutation() *VulnerabilityMutation {
	return vuo.mutation
}

// ClearCve clears the "cve" edge to the CVE entity.
func (vuo *VulnerabilityUpdateOne) ClearCve() *VulnerabilityUpdateOne {
	vuo.mutation.ClearCve()
	return vuo
}

// ClearScan clears the "scan" edge to the CVEScan entity.
func (vuo *VulnerabilityUpdateOne) ClearScan() *VulnerabilityUpdateOne {
	vuo.mutation.ClearScan()
	return vuo
}

// ClearComponent clears the "component" edge to the Component entity.
func (vuo *VulnerabilityUpdateOne) ClearComponent() *VulnerabilityUpdateOne {
	vuo.mutation.ClearComponent()
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VulnerabilityUpdateOne) Select(field string, fields ...string) *VulnerabilityUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vulnerability entity.
func (vuo *VulnerabilityUpdateOne) Save(ctx context.Context) (*Vulnerability, error) {
	var (
		err  error
		node *Vulnerability
	)
	if len(vuo.hooks) == 0 {
		if err = vuo.check(); err != nil {
			return nil, err
		}
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VulnerabilityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vuo.check(); err != nil {
				return nil, err
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VulnerabilityUpdateOne) SaveX(ctx context.Context) *Vulnerability {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VulnerabilityUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VulnerabilityUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VulnerabilityUpdateOne) check() error {
	if _, ok := vuo.mutation.CveID(); vuo.mutation.CveCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"cve\"")
	}
	if _, ok := vuo.mutation.ScanID(); vuo.mutation.ScanCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"scan\"")
	}
	if _, ok := vuo.mutation.ComponentID(); vuo.mutation.ComponentCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"component\"")
	}
	return nil
}

func (vuo *VulnerabilityUpdateOne) sqlSave(ctx context.Context) (_node *Vulnerability, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vulnerability.Table,
			Columns: vulnerability.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vulnerability.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Vulnerability.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vulnerability.FieldID)
		for _, f := range fields {
			if !vulnerability.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vulnerability.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vuo.mutation.CveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.CveTable,
			Columns: []string{vulnerability.CveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cve.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.CveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.CveTable,
			Columns: []string{vulnerability.CveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cve.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.ScanTable,
			Columns: []string{vulnerability.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cvescan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.ScanTable,
			Columns: []string{vulnerability.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cvescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.ComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vulnerability.ComponentTable,
			Columns: []string{vulnerability.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vulnerability.ComponentTable,
			Columns: []string{vulnerability.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vulnerability{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
