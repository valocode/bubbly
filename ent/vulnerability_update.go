// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/component"
	"github.com/valocode/bubbly/ent/organization"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/releasevulnerability"
	schema "github.com/valocode/bubbly/ent/schema/types"
	"github.com/valocode/bubbly/ent/vulnerability"
	"github.com/valocode/bubbly/ent/vulnerabilityreview"
)

// VulnerabilityUpdate is the builder for updating Vulnerability entities.
type VulnerabilityUpdate struct {
	config
	hooks    []Hook
	mutation *VulnerabilityMutation
}

// Where appends a list predicates to the VulnerabilityUpdate builder.
func (vu *VulnerabilityUpdate) Where(ps ...predicate.Vulnerability) *VulnerabilityUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetSummary sets the "summary" field.
func (vu *VulnerabilityUpdate) SetSummary(s string) *VulnerabilityUpdate {
	vu.mutation.SetSummary(s)
	return vu
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableSummary(s *string) *VulnerabilityUpdate {
	if s != nil {
		vu.SetSummary(*s)
	}
	return vu
}

// ClearSummary clears the value of the "summary" field.
func (vu *VulnerabilityUpdate) ClearSummary() *VulnerabilityUpdate {
	vu.mutation.ClearSummary()
	return vu
}

// SetDescription sets the "description" field.
func (vu *VulnerabilityUpdate) SetDescription(s string) *VulnerabilityUpdate {
	vu.mutation.SetDescription(s)
	return vu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableDescription(s *string) *VulnerabilityUpdate {
	if s != nil {
		vu.SetDescription(*s)
	}
	return vu
}

// ClearDescription clears the value of the "description" field.
func (vu *VulnerabilityUpdate) ClearDescription() *VulnerabilityUpdate {
	vu.mutation.ClearDescription()
	return vu
}

// SetSeverityScore sets the "severity_score" field.
func (vu *VulnerabilityUpdate) SetSeverityScore(f float64) *VulnerabilityUpdate {
	vu.mutation.ResetSeverityScore()
	vu.mutation.SetSeverityScore(f)
	return vu
}

// SetNillableSeverityScore sets the "severity_score" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableSeverityScore(f *float64) *VulnerabilityUpdate {
	if f != nil {
		vu.SetSeverityScore(*f)
	}
	return vu
}

// AddSeverityScore adds f to the "severity_score" field.
func (vu *VulnerabilityUpdate) AddSeverityScore(f float64) *VulnerabilityUpdate {
	vu.mutation.AddSeverityScore(f)
	return vu
}

// SetSeverity sets the "severity" field.
func (vu *VulnerabilityUpdate) SetSeverity(v vulnerability.Severity) *VulnerabilityUpdate {
	vu.mutation.SetSeverity(v)
	return vu
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableSeverity(v *vulnerability.Severity) *VulnerabilityUpdate {
	if v != nil {
		vu.SetSeverity(*v)
	}
	return vu
}

// SetPublished sets the "published" field.
func (vu *VulnerabilityUpdate) SetPublished(t time.Time) *VulnerabilityUpdate {
	vu.mutation.SetPublished(t)
	return vu
}

// SetNillablePublished sets the "published" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillablePublished(t *time.Time) *VulnerabilityUpdate {
	if t != nil {
		vu.SetPublished(*t)
	}
	return vu
}

// ClearPublished clears the value of the "published" field.
func (vu *VulnerabilityUpdate) ClearPublished() *VulnerabilityUpdate {
	vu.mutation.ClearPublished()
	return vu
}

// SetModified sets the "modified" field.
func (vu *VulnerabilityUpdate) SetModified(t time.Time) *VulnerabilityUpdate {
	vu.mutation.SetModified(t)
	return vu
}

// SetNillableModified sets the "modified" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableModified(t *time.Time) *VulnerabilityUpdate {
	if t != nil {
		vu.SetModified(*t)
	}
	return vu
}

// ClearModified clears the value of the "modified" field.
func (vu *VulnerabilityUpdate) ClearModified() *VulnerabilityUpdate {
	vu.mutation.ClearModified()
	return vu
}

// SetMetadata sets the "metadata" field.
func (vu *VulnerabilityUpdate) SetMetadata(s schema.Metadata) *VulnerabilityUpdate {
	vu.mutation.SetMetadata(s)
	return vu
}

// ClearMetadata clears the value of the "metadata" field.
func (vu *VulnerabilityUpdate) ClearMetadata() *VulnerabilityUpdate {
	vu.mutation.ClearMetadata()
	return vu
}

// SetOwnerID sets the "owner" edge to the Organization entity by ID.
func (vu *VulnerabilityUpdate) SetOwnerID(id int) *VulnerabilityUpdate {
	vu.mutation.SetOwnerID(id)
	return vu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (vu *VulnerabilityUpdate) SetOwner(o *Organization) *VulnerabilityUpdate {
	return vu.SetOwnerID(o.ID)
}

// AddComponentIDs adds the "components" edge to the Component entity by IDs.
func (vu *VulnerabilityUpdate) AddComponentIDs(ids ...int) *VulnerabilityUpdate {
	vu.mutation.AddComponentIDs(ids...)
	return vu
}

// AddComponents adds the "components" edges to the Component entity.
func (vu *VulnerabilityUpdate) AddComponents(c ...*Component) *VulnerabilityUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vu.AddComponentIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the VulnerabilityReview entity by IDs.
func (vu *VulnerabilityUpdate) AddReviewIDs(ids ...int) *VulnerabilityUpdate {
	vu.mutation.AddReviewIDs(ids...)
	return vu
}

// AddReviews adds the "reviews" edges to the VulnerabilityReview entity.
func (vu *VulnerabilityUpdate) AddReviews(v ...*VulnerabilityReview) *VulnerabilityUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.AddReviewIDs(ids...)
}

// AddInstanceIDs adds the "instances" edge to the ReleaseVulnerability entity by IDs.
func (vu *VulnerabilityUpdate) AddInstanceIDs(ids ...int) *VulnerabilityUpdate {
	vu.mutation.AddInstanceIDs(ids...)
	return vu
}

// AddInstances adds the "instances" edges to the ReleaseVulnerability entity.
func (vu *VulnerabilityUpdate) AddInstances(r ...*ReleaseVulnerability) *VulnerabilityUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vu.AddInstanceIDs(ids...)
}

// Mutation returns the VulnerabilityMutation object of the builder.
func (vu *VulnerabilityUpdate) Mutation() *VulnerabilityMutation {
	return vu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (vu *VulnerabilityUpdate) ClearOwner() *VulnerabilityUpdate {
	vu.mutation.ClearOwner()
	return vu
}

// ClearComponents clears all "components" edges to the Component entity.
func (vu *VulnerabilityUpdate) ClearComponents() *VulnerabilityUpdate {
	vu.mutation.ClearComponents()
	return vu
}

// RemoveComponentIDs removes the "components" edge to Component entities by IDs.
func (vu *VulnerabilityUpdate) RemoveComponentIDs(ids ...int) *VulnerabilityUpdate {
	vu.mutation.RemoveComponentIDs(ids...)
	return vu
}

// RemoveComponents removes "components" edges to Component entities.
func (vu *VulnerabilityUpdate) RemoveComponents(c ...*Component) *VulnerabilityUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vu.RemoveComponentIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the VulnerabilityReview entity.
func (vu *VulnerabilityUpdate) ClearReviews() *VulnerabilityUpdate {
	vu.mutation.ClearReviews()
	return vu
}

// RemoveReviewIDs removes the "reviews" edge to VulnerabilityReview entities by IDs.
func (vu *VulnerabilityUpdate) RemoveReviewIDs(ids ...int) *VulnerabilityUpdate {
	vu.mutation.RemoveReviewIDs(ids...)
	return vu
}

// RemoveReviews removes "reviews" edges to VulnerabilityReview entities.
func (vu *VulnerabilityUpdate) RemoveReviews(v ...*VulnerabilityReview) *VulnerabilityUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.RemoveReviewIDs(ids...)
}

// ClearInstances clears all "instances" edges to the ReleaseVulnerability entity.
func (vu *VulnerabilityUpdate) ClearInstances() *VulnerabilityUpdate {
	vu.mutation.ClearInstances()
	return vu
}

// RemoveInstanceIDs removes the "instances" edge to ReleaseVulnerability entities by IDs.
func (vu *VulnerabilityUpdate) RemoveInstanceIDs(ids ...int) *VulnerabilityUpdate {
	vu.mutation.RemoveInstanceIDs(ids...)
	return vu
}

// RemoveInstances removes "instances" edges to ReleaseVulnerability entities.
func (vu *VulnerabilityUpdate) RemoveInstances(r ...*ReleaseVulnerability) *VulnerabilityUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vu.RemoveInstanceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VulnerabilityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vu.hooks) == 0 {
		if err = vu.check(); err != nil {
			return 0, err
		}
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VulnerabilityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vu.check(); err != nil {
				return 0, err
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			if vu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VulnerabilityUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VulnerabilityUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VulnerabilityUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VulnerabilityUpdate) check() error {
	if v, ok := vu.mutation.Severity(); ok {
		if err := vulnerability.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf("ent: validator failed for field \"severity\": %w", err)}
		}
	}
	if _, ok := vu.mutation.OwnerID(); vu.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (vu *VulnerabilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vulnerability.Table,
			Columns: vulnerability.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vulnerability.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnerability.FieldSummary,
		})
	}
	if vu.mutation.SummaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vulnerability.FieldSummary,
		})
	}
	if value, ok := vu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnerability.FieldDescription,
		})
	}
	if vu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vulnerability.FieldDescription,
		})
	}
	if value, ok := vu.mutation.SeverityScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: vulnerability.FieldSeverityScore,
		})
	}
	if value, ok := vu.mutation.AddedSeverityScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: vulnerability.FieldSeverityScore,
		})
	}
	if value, ok := vu.mutation.Severity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: vulnerability.FieldSeverity,
		})
	}
	if value, ok := vu.mutation.Published(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vulnerability.FieldPublished,
		})
	}
	if vu.mutation.PublishedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: vulnerability.FieldPublished,
		})
	}
	if value, ok := vu.mutation.Modified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vulnerability.FieldModified,
		})
	}
	if vu.mutation.ModifiedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: vulnerability.FieldModified,
		})
	}
	if value, ok := vu.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vulnerability.FieldMetadata,
		})
	}
	if vu.mutation.MetadataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: vulnerability.FieldMetadata,
		})
	}
	if vu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.OwnerTable,
			Columns: []string{vulnerability.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.OwnerTable,
			Columns: []string{vulnerability.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerability.ComponentsTable,
			Columns: vulnerability.ComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !vu.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerability.ComponentsTable,
			Columns: vulnerability.ComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerability.ComponentsTable,
			Columns: vulnerability.ComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerability.ReviewsTable,
			Columns: []string{vulnerability.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !vu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerability.ReviewsTable,
			Columns: []string{vulnerability.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerability.ReviewsTable,
			Columns: []string{vulnerability.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerability.InstancesTable,
			Columns: []string{vulnerability.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !vu.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerability.InstancesTable,
			Columns: []string{vulnerability.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerability.InstancesTable,
			Columns: []string{vulnerability.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VulnerabilityUpdateOne is the builder for updating a single Vulnerability entity.
type VulnerabilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VulnerabilityMutation
}

// SetSummary sets the "summary" field.
func (vuo *VulnerabilityUpdateOne) SetSummary(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetSummary(s)
	return vuo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableSummary(s *string) *VulnerabilityUpdateOne {
	if s != nil {
		vuo.SetSummary(*s)
	}
	return vuo
}

// ClearSummary clears the value of the "summary" field.
func (vuo *VulnerabilityUpdateOne) ClearSummary() *VulnerabilityUpdateOne {
	vuo.mutation.ClearSummary()
	return vuo
}

// SetDescription sets the "description" field.
func (vuo *VulnerabilityUpdateOne) SetDescription(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetDescription(s)
	return vuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableDescription(s *string) *VulnerabilityUpdateOne {
	if s != nil {
		vuo.SetDescription(*s)
	}
	return vuo
}

// ClearDescription clears the value of the "description" field.
func (vuo *VulnerabilityUpdateOne) ClearDescription() *VulnerabilityUpdateOne {
	vuo.mutation.ClearDescription()
	return vuo
}

// SetSeverityScore sets the "severity_score" field.
func (vuo *VulnerabilityUpdateOne) SetSeverityScore(f float64) *VulnerabilityUpdateOne {
	vuo.mutation.ResetSeverityScore()
	vuo.mutation.SetSeverityScore(f)
	return vuo
}

// SetNillableSeverityScore sets the "severity_score" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableSeverityScore(f *float64) *VulnerabilityUpdateOne {
	if f != nil {
		vuo.SetSeverityScore(*f)
	}
	return vuo
}

// AddSeverityScore adds f to the "severity_score" field.
func (vuo *VulnerabilityUpdateOne) AddSeverityScore(f float64) *VulnerabilityUpdateOne {
	vuo.mutation.AddSeverityScore(f)
	return vuo
}

// SetSeverity sets the "severity" field.
func (vuo *VulnerabilityUpdateOne) SetSeverity(v vulnerability.Severity) *VulnerabilityUpdateOne {
	vuo.mutation.SetSeverity(v)
	return vuo
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableSeverity(v *vulnerability.Severity) *VulnerabilityUpdateOne {
	if v != nil {
		vuo.SetSeverity(*v)
	}
	return vuo
}

// SetPublished sets the "published" field.
func (vuo *VulnerabilityUpdateOne) SetPublished(t time.Time) *VulnerabilityUpdateOne {
	vuo.mutation.SetPublished(t)
	return vuo
}

// SetNillablePublished sets the "published" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillablePublished(t *time.Time) *VulnerabilityUpdateOne {
	if t != nil {
		vuo.SetPublished(*t)
	}
	return vuo
}

// ClearPublished clears the value of the "published" field.
func (vuo *VulnerabilityUpdateOne) ClearPublished() *VulnerabilityUpdateOne {
	vuo.mutation.ClearPublished()
	return vuo
}

// SetModified sets the "modified" field.
func (vuo *VulnerabilityUpdateOne) SetModified(t time.Time) *VulnerabilityUpdateOne {
	vuo.mutation.SetModified(t)
	return vuo
}

// SetNillableModified sets the "modified" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableModified(t *time.Time) *VulnerabilityUpdateOne {
	if t != nil {
		vuo.SetModified(*t)
	}
	return vuo
}

// ClearModified clears the value of the "modified" field.
func (vuo *VulnerabilityUpdateOne) ClearModified() *VulnerabilityUpdateOne {
	vuo.mutation.ClearModified()
	return vuo
}

// SetMetadata sets the "metadata" field.
func (vuo *VulnerabilityUpdateOne) SetMetadata(s schema.Metadata) *VulnerabilityUpdateOne {
	vuo.mutation.SetMetadata(s)
	return vuo
}

// ClearMetadata clears the value of the "metadata" field.
func (vuo *VulnerabilityUpdateOne) ClearMetadata() *VulnerabilityUpdateOne {
	vuo.mutation.ClearMetadata()
	return vuo
}

// SetOwnerID sets the "owner" edge to the Organization entity by ID.
func (vuo *VulnerabilityUpdateOne) SetOwnerID(id int) *VulnerabilityUpdateOne {
	vuo.mutation.SetOwnerID(id)
	return vuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (vuo *VulnerabilityUpdateOne) SetOwner(o *Organization) *VulnerabilityUpdateOne {
	return vuo.SetOwnerID(o.ID)
}

// AddComponentIDs adds the "components" edge to the Component entity by IDs.
func (vuo *VulnerabilityUpdateOne) AddComponentIDs(ids ...int) *VulnerabilityUpdateOne {
	vuo.mutation.AddComponentIDs(ids...)
	return vuo
}

// AddComponents adds the "components" edges to the Component entity.
func (vuo *VulnerabilityUpdateOne) AddComponents(c ...*Component) *VulnerabilityUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vuo.AddComponentIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the VulnerabilityReview entity by IDs.
func (vuo *VulnerabilityUpdateOne) AddReviewIDs(ids ...int) *VulnerabilityUpdateOne {
	vuo.mutation.AddReviewIDs(ids...)
	return vuo
}

// AddReviews adds the "reviews" edges to the VulnerabilityReview entity.
func (vuo *VulnerabilityUpdateOne) AddReviews(v ...*VulnerabilityReview) *VulnerabilityUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.AddReviewIDs(ids...)
}

// AddInstanceIDs adds the "instances" edge to the ReleaseVulnerability entity by IDs.
func (vuo *VulnerabilityUpdateOne) AddInstanceIDs(ids ...int) *VulnerabilityUpdateOne {
	vuo.mutation.AddInstanceIDs(ids...)
	return vuo
}

// AddInstances adds the "instances" edges to the ReleaseVulnerability entity.
func (vuo *VulnerabilityUpdateOne) AddInstances(r ...*ReleaseVulnerability) *VulnerabilityUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vuo.AddInstanceIDs(ids...)
}

// Mutation returns the VulnerabilityMutation object of the builder.
func (vuo *VulnerabilityUpdateOne) Mutation() *VulnerabilityMutation {
	return vuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (vuo *VulnerabilityUpdateOne) ClearOwner() *VulnerabilityUpdateOne {
	vuo.mutation.ClearOwner()
	return vuo
}

// ClearComponents clears all "components" edges to the Component entity.
func (vuo *VulnerabilityUpdateOne) ClearComponents() *VulnerabilityUpdateOne {
	vuo.mutation.ClearComponents()
	return vuo
}

// RemoveComponentIDs removes the "components" edge to Component entities by IDs.
func (vuo *VulnerabilityUpdateOne) RemoveComponentIDs(ids ...int) *VulnerabilityUpdateOne {
	vuo.mutation.RemoveComponentIDs(ids...)
	return vuo
}

// RemoveComponents removes "components" edges to Component entities.
func (vuo *VulnerabilityUpdateOne) RemoveComponents(c ...*Component) *VulnerabilityUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vuo.RemoveComponentIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the VulnerabilityReview entity.
func (vuo *VulnerabilityUpdateOne) ClearReviews() *VulnerabilityUpdateOne {
	vuo.mutation.ClearReviews()
	return vuo
}

// RemoveReviewIDs removes the "reviews" edge to VulnerabilityReview entities by IDs.
func (vuo *VulnerabilityUpdateOne) RemoveReviewIDs(ids ...int) *VulnerabilityUpdateOne {
	vuo.mutation.RemoveReviewIDs(ids...)
	return vuo
}

// RemoveReviews removes "reviews" edges to VulnerabilityReview entities.
func (vuo *VulnerabilityUpdateOne) RemoveReviews(v ...*VulnerabilityReview) *VulnerabilityUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.RemoveReviewIDs(ids...)
}

// ClearInstances clears all "instances" edges to the ReleaseVulnerability entity.
func (vuo *VulnerabilityUpdateOne) ClearInstances() *VulnerabilityUpdateOne {
	vuo.mutation.ClearInstances()
	return vuo
}

// RemoveInstanceIDs removes the "instances" edge to ReleaseVulnerability entities by IDs.
func (vuo *VulnerabilityUpdateOne) RemoveInstanceIDs(ids ...int) *VulnerabilityUpdateOne {
	vuo.mutation.RemoveInstanceIDs(ids...)
	return vuo
}

// RemoveInstances removes "instances" edges to ReleaseVulnerability entities.
func (vuo *VulnerabilityUpdateOne) RemoveInstances(r ...*ReleaseVulnerability) *VulnerabilityUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vuo.RemoveInstanceIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VulnerabilityUpdateOne) Select(field string, fields ...string) *VulnerabilityUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vulnerability entity.
func (vuo *VulnerabilityUpdateOne) Save(ctx context.Context) (*Vulnerability, error) {
	var (
		err  error
		node *Vulnerability
	)
	if len(vuo.hooks) == 0 {
		if err = vuo.check(); err != nil {
			return nil, err
		}
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VulnerabilityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vuo.check(); err != nil {
				return nil, err
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			if vuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VulnerabilityUpdateOne) SaveX(ctx context.Context) *Vulnerability {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VulnerabilityUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VulnerabilityUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VulnerabilityUpdateOne) check() error {
	if v, ok := vuo.mutation.Severity(); ok {
		if err := vulnerability.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf("ent: validator failed for field \"severity\": %w", err)}
		}
	}
	if _, ok := vuo.mutation.OwnerID(); vuo.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (vuo *VulnerabilityUpdateOne) sqlSave(ctx context.Context) (_node *Vulnerability, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vulnerability.Table,
			Columns: vulnerability.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vulnerability.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Vulnerability.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vulnerability.FieldID)
		for _, f := range fields {
			if !vulnerability.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vulnerability.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnerability.FieldSummary,
		})
	}
	if vuo.mutation.SummaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vulnerability.FieldSummary,
		})
	}
	if value, ok := vuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnerability.FieldDescription,
		})
	}
	if vuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vulnerability.FieldDescription,
		})
	}
	if value, ok := vuo.mutation.SeverityScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: vulnerability.FieldSeverityScore,
		})
	}
	if value, ok := vuo.mutation.AddedSeverityScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: vulnerability.FieldSeverityScore,
		})
	}
	if value, ok := vuo.mutation.Severity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: vulnerability.FieldSeverity,
		})
	}
	if value, ok := vuo.mutation.Published(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vulnerability.FieldPublished,
		})
	}
	if vuo.mutation.PublishedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: vulnerability.FieldPublished,
		})
	}
	if value, ok := vuo.mutation.Modified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vulnerability.FieldModified,
		})
	}
	if vuo.mutation.ModifiedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: vulnerability.FieldModified,
		})
	}
	if value, ok := vuo.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vulnerability.FieldMetadata,
		})
	}
	if vuo.mutation.MetadataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: vulnerability.FieldMetadata,
		})
	}
	if vuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.OwnerTable,
			Columns: []string{vulnerability.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.OwnerTable,
			Columns: []string{vulnerability.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerability.ComponentsTable,
			Columns: vulnerability.ComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !vuo.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerability.ComponentsTable,
			Columns: vulnerability.ComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerability.ComponentsTable,
			Columns: vulnerability.ComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerability.ReviewsTable,
			Columns: []string{vulnerability.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !vuo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerability.ReviewsTable,
			Columns: []string{vulnerability.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerability.ReviewsTable,
			Columns: []string{vulnerability.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerabilityreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerability.InstancesTable,
			Columns: []string{vulnerability.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !vuo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerability.InstancesTable,
			Columns: []string{vulnerability.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerability.InstancesTable,
			Columns: []string{vulnerability.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vulnerability{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
