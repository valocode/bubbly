// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/vulnerability"

	"github.com/valocode/bubbly/ent/organization"
	schema "github.com/valocode/bubbly/ent/schema/types"
)

// Vulnerability is the model entity for the Vulnerability schema.
type Vulnerability struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Vid holds the value of the "vid" field.
	Vid string `json:"vid,omitempty"`
	// Summary holds the value of the "summary" field.
	Summary string `json:"summary,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// SeverityScore holds the value of the "severity_score" field.
	SeverityScore float64 `json:"severity_score,omitempty"`
	// Severity holds the value of the "severity" field.
	Severity vulnerability.Severity `json:"severity,omitempty"`
	// Published holds the value of the "published" field.
	Published time.Time `json:"published,omitempty"`
	// Modified holds the value of the "modified" field.
	Modified time.Time `json:"modified,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata schema.Metadata `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VulnerabilityQuery when eager-loading is set.
	Edges               VulnerabilityEdges `json:"edges"`
	vulnerability_owner *int
}

// VulnerabilityEdges holds the relations/edges for other nodes in the graph.
type VulnerabilityEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Components holds the value of the components edge.
	Components []*Component `json:"components,omitempty"`
	// Reviews holds the value of the reviews edge.
	Reviews []*VulnerabilityReview `json:"reviews,omitempty"`
	// Instances holds the value of the instances edge.
	Instances []*ReleaseVulnerability `json:"instances,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VulnerabilityEdges) OwnerOrErr() (*Organization, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: organization.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ComponentsOrErr returns the Components value or an error if the edge
// was not loaded in eager-loading.
func (e VulnerabilityEdges) ComponentsOrErr() ([]*Component, error) {
	if e.loadedTypes[1] {
		return e.Components, nil
	}
	return nil, &NotLoadedError{edge: "components"}
}

// ReviewsOrErr returns the Reviews value or an error if the edge
// was not loaded in eager-loading.
func (e VulnerabilityEdges) ReviewsOrErr() ([]*VulnerabilityReview, error) {
	if e.loadedTypes[2] {
		return e.Reviews, nil
	}
	return nil, &NotLoadedError{edge: "reviews"}
}

// InstancesOrErr returns the Instances value or an error if the edge
// was not loaded in eager-loading.
func (e VulnerabilityEdges) InstancesOrErr() ([]*ReleaseVulnerability, error) {
	if e.loadedTypes[3] {
		return e.Instances, nil
	}
	return nil, &NotLoadedError{edge: "instances"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vulnerability) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case vulnerability.FieldMetadata:
			values[i] = new([]byte)
		case vulnerability.FieldSeverityScore:
			values[i] = new(sql.NullFloat64)
		case vulnerability.FieldID:
			values[i] = new(sql.NullInt64)
		case vulnerability.FieldVid, vulnerability.FieldSummary, vulnerability.FieldDescription, vulnerability.FieldSeverity:
			values[i] = new(sql.NullString)
		case vulnerability.FieldPublished, vulnerability.FieldModified:
			values[i] = new(sql.NullTime)
		case vulnerability.ForeignKeys[0]: // vulnerability_owner
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Vulnerability", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vulnerability fields.
func (v *Vulnerability) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vulnerability.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case vulnerability.FieldVid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vid", values[i])
			} else if value.Valid {
				v.Vid = value.String
			}
		case vulnerability.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				v.Summary = value.String
			}
		case vulnerability.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				v.Description = value.String
			}
		case vulnerability.FieldSeverityScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field severity_score", values[i])
			} else if value.Valid {
				v.SeverityScore = value.Float64
			}
		case vulnerability.FieldSeverity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field severity", values[i])
			} else if value.Valid {
				v.Severity = vulnerability.Severity(value.String)
			}
		case vulnerability.FieldPublished:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published", values[i])
			} else if value.Valid {
				v.Published = value.Time
			}
		case vulnerability.FieldModified:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified", values[i])
			} else if value.Valid {
				v.Modified = value.Time
			}
		case vulnerability.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &v.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case vulnerability.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vulnerability_owner", value)
			} else if value.Valid {
				v.vulnerability_owner = new(int)
				*v.vulnerability_owner = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Vulnerability entity.
func (v *Vulnerability) QueryOwner() *OrganizationQuery {
	return (&VulnerabilityClient{config: v.config}).QueryOwner(v)
}

// QueryComponents queries the "components" edge of the Vulnerability entity.
func (v *Vulnerability) QueryComponents() *ComponentQuery {
	return (&VulnerabilityClient{config: v.config}).QueryComponents(v)
}

// QueryReviews queries the "reviews" edge of the Vulnerability entity.
func (v *Vulnerability) QueryReviews() *VulnerabilityReviewQuery {
	return (&VulnerabilityClient{config: v.config}).QueryReviews(v)
}

// QueryInstances queries the "instances" edge of the Vulnerability entity.
func (v *Vulnerability) QueryInstances() *ReleaseVulnerabilityQuery {
	return (&VulnerabilityClient{config: v.config}).QueryInstances(v)
}

// Update returns a builder for updating this Vulnerability.
// Note that you need to call Vulnerability.Unwrap() before calling this method if this Vulnerability
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vulnerability) Update() *VulnerabilityUpdateOne {
	return (&VulnerabilityClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Vulnerability entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vulnerability) Unwrap() *Vulnerability {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vulnerability is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vulnerability) String() string {
	var builder strings.Builder
	builder.WriteString("Vulnerability(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", vid=")
	builder.WriteString(v.Vid)
	builder.WriteString(", summary=")
	builder.WriteString(v.Summary)
	builder.WriteString(", description=")
	builder.WriteString(v.Description)
	builder.WriteString(", severity_score=")
	builder.WriteString(fmt.Sprintf("%v", v.SeverityScore))
	builder.WriteString(", severity=")
	builder.WriteString(fmt.Sprintf("%v", v.Severity))
	builder.WriteString(", published=")
	builder.WriteString(v.Published.Format(time.ANSIC))
	builder.WriteString(", modified=")
	builder.WriteString(v.Modified.Format(time.ANSIC))
	builder.WriteString(", metadata=")
	builder.WriteString(fmt.Sprintf("%v", v.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// Vulnerabilities is a parsable slice of Vulnerability.
type Vulnerabilities []*Vulnerability

func (v Vulnerabilities) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
