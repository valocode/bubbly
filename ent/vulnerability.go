// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/cve"
	"github.com/valocode/bubbly/ent/vulnerability"
)

// Vulnerability is the model entity for the Vulnerability schema.
type Vulnerability struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VulnerabilityQuery when eager-loading is set.
	Edges             VulnerabilityEdges `json:"edges"`
	vulnerability_cve *int
}

// VulnerabilityEdges holds the relations/edges for other nodes in the graph.
type VulnerabilityEdges struct {
	// Cve holds the value of the cve edge.
	Cve *CVE `json:"cve,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CveOrErr returns the Cve value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VulnerabilityEdges) CveOrErr() (*CVE, error) {
	if e.loadedTypes[0] {
		if e.Cve == nil {
			// The edge cve was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cve.Label}
		}
		return e.Cve, nil
	}
	return nil, &NotLoadedError{edge: "cve"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vulnerability) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case vulnerability.FieldID:
			values[i] = new(sql.NullInt64)
		case vulnerability.ForeignKeys[0]: // vulnerability_cve
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Vulnerability", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vulnerability fields.
func (v *Vulnerability) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vulnerability.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case vulnerability.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vulnerability_cve", value)
			} else if value.Valid {
				v.vulnerability_cve = new(int)
				*v.vulnerability_cve = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCve queries the "cve" edge of the Vulnerability entity.
func (v *Vulnerability) QueryCve() *CVEQuery {
	return (&VulnerabilityClient{config: v.config}).QueryCve(v)
}

// Update returns a builder for updating this Vulnerability.
// Note that you need to call Vulnerability.Unwrap() before calling this method if this Vulnerability
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vulnerability) Update() *VulnerabilityUpdateOne {
	return (&VulnerabilityClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Vulnerability entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vulnerability) Unwrap() *Vulnerability {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vulnerability is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vulnerability) String() string {
	var builder strings.Builder
	builder.WriteString("Vulnerability(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Vulnerabilities is a parsable slice of Vulnerability.
type Vulnerabilities []*Vulnerability

func (v Vulnerabilities) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
