// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasecheck"
)

// ReleaseCheckCreate is the builder for creating a ReleaseCheck entity.
type ReleaseCheckCreate struct {
	config
	mutation *ReleaseCheckMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (rcc *ReleaseCheckCreate) SetType(r releasecheck.Type) *ReleaseCheckCreate {
	rcc.mutation.SetType(r)
	return rcc
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (rcc *ReleaseCheckCreate) SetReleaseID(id int) *ReleaseCheckCreate {
	rcc.mutation.SetReleaseID(id)
	return rcc
}

// SetRelease sets the "release" edge to the Release entity.
func (rcc *ReleaseCheckCreate) SetRelease(r *Release) *ReleaseCheckCreate {
	return rcc.SetReleaseID(r.ID)
}

// Mutation returns the ReleaseCheckMutation object of the builder.
func (rcc *ReleaseCheckCreate) Mutation() *ReleaseCheckMutation {
	return rcc.mutation
}

// Save creates the ReleaseCheck in the database.
func (rcc *ReleaseCheckCreate) Save(ctx context.Context) (*ReleaseCheck, error) {
	var (
		err  error
		node *ReleaseCheck
	)
	if len(rcc.hooks) == 0 {
		if err = rcc.check(); err != nil {
			return nil, err
		}
		node, err = rcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseCheckMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rcc.check(); err != nil {
				return nil, err
			}
			rcc.mutation = mutation
			if node, err = rcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rcc.hooks) - 1; i >= 0; i-- {
			mut = rcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rcc *ReleaseCheckCreate) SaveX(ctx context.Context) *ReleaseCheck {
	v, err := rcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (rcc *ReleaseCheckCreate) check() error {
	if _, ok := rcc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if v, ok := rcc.mutation.GetType(); ok {
		if err := releasecheck.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := rcc.mutation.ReleaseID(); !ok {
		return &ValidationError{Name: "release", err: errors.New("ent: missing required edge \"release\"")}
	}
	return nil
}

func (rcc *ReleaseCheckCreate) sqlSave(ctx context.Context) (*ReleaseCheck, error) {
	_node, _spec := rcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rcc *ReleaseCheckCreate) createSpec() (*ReleaseCheck, *sqlgraph.CreateSpec) {
	var (
		_node = &ReleaseCheck{config: rcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: releasecheck.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releasecheck.FieldID,
			},
		}
	)
	if value, ok := rcc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: releasecheck.FieldType,
		})
		_node.Type = value
	}
	if nodes := rcc.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releasecheck.ReleaseTable,
			Columns: []string{releasecheck.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.release_check_release = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReleaseCheckCreateBulk is the builder for creating many ReleaseCheck entities in bulk.
type ReleaseCheckCreateBulk struct {
	config
	builders []*ReleaseCheckCreate
}

// Save creates the ReleaseCheck entities in the database.
func (rccb *ReleaseCheckCreateBulk) Save(ctx context.Context) ([]*ReleaseCheck, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rccb.builders))
	nodes := make([]*ReleaseCheck, len(rccb.builders))
	mutators := make([]Mutator, len(rccb.builders))
	for i := range rccb.builders {
		func(i int, root context.Context) {
			builder := rccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReleaseCheckMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rccb *ReleaseCheckCreateBulk) SaveX(ctx context.Context) []*ReleaseCheck {
	v, err := rccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
