// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/artifact"
	"github.com/valocode/bubbly/ent/codescan"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releaseentry"
	"github.com/valocode/bubbly/ent/testrun"
)

// ReleaseEntryUpdate is the builder for updating ReleaseEntry entities.
type ReleaseEntryUpdate struct {
	config
	hooks    []Hook
	mutation *ReleaseEntryMutation
}

// Where appends a list predicates to the ReleaseEntryUpdate builder.
func (reu *ReleaseEntryUpdate) Where(ps ...predicate.ReleaseEntry) *ReleaseEntryUpdate {
	reu.mutation.Where(ps...)
	return reu
}

// SetArtifactID sets the "artifact" edge to the Artifact entity by ID.
func (reu *ReleaseEntryUpdate) SetArtifactID(id int) *ReleaseEntryUpdate {
	reu.mutation.SetArtifactID(id)
	return reu
}

// SetNillableArtifactID sets the "artifact" edge to the Artifact entity by ID if the given value is not nil.
func (reu *ReleaseEntryUpdate) SetNillableArtifactID(id *int) *ReleaseEntryUpdate {
	if id != nil {
		reu = reu.SetArtifactID(*id)
	}
	return reu
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (reu *ReleaseEntryUpdate) SetArtifact(a *Artifact) *ReleaseEntryUpdate {
	return reu.SetArtifactID(a.ID)
}

// SetCodeScanID sets the "code_scan" edge to the CodeScan entity by ID.
func (reu *ReleaseEntryUpdate) SetCodeScanID(id int) *ReleaseEntryUpdate {
	reu.mutation.SetCodeScanID(id)
	return reu
}

// SetNillableCodeScanID sets the "code_scan" edge to the CodeScan entity by ID if the given value is not nil.
func (reu *ReleaseEntryUpdate) SetNillableCodeScanID(id *int) *ReleaseEntryUpdate {
	if id != nil {
		reu = reu.SetCodeScanID(*id)
	}
	return reu
}

// SetCodeScan sets the "code_scan" edge to the CodeScan entity.
func (reu *ReleaseEntryUpdate) SetCodeScan(c *CodeScan) *ReleaseEntryUpdate {
	return reu.SetCodeScanID(c.ID)
}

// SetTestRunID sets the "test_run" edge to the TestRun entity by ID.
func (reu *ReleaseEntryUpdate) SetTestRunID(id int) *ReleaseEntryUpdate {
	reu.mutation.SetTestRunID(id)
	return reu
}

// SetNillableTestRunID sets the "test_run" edge to the TestRun entity by ID if the given value is not nil.
func (reu *ReleaseEntryUpdate) SetNillableTestRunID(id *int) *ReleaseEntryUpdate {
	if id != nil {
		reu = reu.SetTestRunID(*id)
	}
	return reu
}

// SetTestRun sets the "test_run" edge to the TestRun entity.
func (reu *ReleaseEntryUpdate) SetTestRun(t *TestRun) *ReleaseEntryUpdate {
	return reu.SetTestRunID(t.ID)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (reu *ReleaseEntryUpdate) SetReleaseID(id int) *ReleaseEntryUpdate {
	reu.mutation.SetReleaseID(id)
	return reu
}

// SetRelease sets the "release" edge to the Release entity.
func (reu *ReleaseEntryUpdate) SetRelease(r *Release) *ReleaseEntryUpdate {
	return reu.SetReleaseID(r.ID)
}

// Mutation returns the ReleaseEntryMutation object of the builder.
func (reu *ReleaseEntryUpdate) Mutation() *ReleaseEntryMutation {
	return reu.mutation
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (reu *ReleaseEntryUpdate) ClearArtifact() *ReleaseEntryUpdate {
	reu.mutation.ClearArtifact()
	return reu
}

// ClearCodeScan clears the "code_scan" edge to the CodeScan entity.
func (reu *ReleaseEntryUpdate) ClearCodeScan() *ReleaseEntryUpdate {
	reu.mutation.ClearCodeScan()
	return reu
}

// ClearTestRun clears the "test_run" edge to the TestRun entity.
func (reu *ReleaseEntryUpdate) ClearTestRun() *ReleaseEntryUpdate {
	reu.mutation.ClearTestRun()
	return reu
}

// ClearRelease clears the "release" edge to the Release entity.
func (reu *ReleaseEntryUpdate) ClearRelease() *ReleaseEntryUpdate {
	reu.mutation.ClearRelease()
	return reu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (reu *ReleaseEntryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(reu.hooks) == 0 {
		if err = reu.check(); err != nil {
			return 0, err
		}
		affected, err = reu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseEntryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = reu.check(); err != nil {
				return 0, err
			}
			reu.mutation = mutation
			affected, err = reu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(reu.hooks) - 1; i >= 0; i-- {
			if reu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = reu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, reu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (reu *ReleaseEntryUpdate) SaveX(ctx context.Context) int {
	affected, err := reu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (reu *ReleaseEntryUpdate) Exec(ctx context.Context) error {
	_, err := reu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reu *ReleaseEntryUpdate) ExecX(ctx context.Context) {
	if err := reu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (reu *ReleaseEntryUpdate) check() error {
	if _, ok := reu.mutation.ReleaseID(); reu.mutation.ReleaseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"release\"")
	}
	return nil
}

func (reu *ReleaseEntryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releaseentry.Table,
			Columns: releaseentry.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releaseentry.FieldID,
			},
		},
	}
	if ps := reu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if reu.mutation.ArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   releaseentry.ArtifactTable,
			Columns: []string{releaseentry.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artifact.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reu.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   releaseentry.ArtifactTable,
			Columns: []string{releaseentry.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artifact.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if reu.mutation.CodeScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   releaseentry.CodeScanTable,
			Columns: []string{releaseentry.CodeScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reu.mutation.CodeScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   releaseentry.CodeScanTable,
			Columns: []string{releaseentry.CodeScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if reu.mutation.TestRunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   releaseentry.TestRunTable,
			Columns: []string{releaseentry.TestRunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testrun.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reu.mutation.TestRunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   releaseentry.TestRunTable,
			Columns: []string{releaseentry.TestRunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testrun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if reu.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaseentry.ReleaseTable,
			Columns: []string{releaseentry.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reu.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaseentry.ReleaseTable,
			Columns: []string{releaseentry.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, reu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releaseentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ReleaseEntryUpdateOne is the builder for updating a single ReleaseEntry entity.
type ReleaseEntryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReleaseEntryMutation
}

// SetArtifactID sets the "artifact" edge to the Artifact entity by ID.
func (reuo *ReleaseEntryUpdateOne) SetArtifactID(id int) *ReleaseEntryUpdateOne {
	reuo.mutation.SetArtifactID(id)
	return reuo
}

// SetNillableArtifactID sets the "artifact" edge to the Artifact entity by ID if the given value is not nil.
func (reuo *ReleaseEntryUpdateOne) SetNillableArtifactID(id *int) *ReleaseEntryUpdateOne {
	if id != nil {
		reuo = reuo.SetArtifactID(*id)
	}
	return reuo
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (reuo *ReleaseEntryUpdateOne) SetArtifact(a *Artifact) *ReleaseEntryUpdateOne {
	return reuo.SetArtifactID(a.ID)
}

// SetCodeScanID sets the "code_scan" edge to the CodeScan entity by ID.
func (reuo *ReleaseEntryUpdateOne) SetCodeScanID(id int) *ReleaseEntryUpdateOne {
	reuo.mutation.SetCodeScanID(id)
	return reuo
}

// SetNillableCodeScanID sets the "code_scan" edge to the CodeScan entity by ID if the given value is not nil.
func (reuo *ReleaseEntryUpdateOne) SetNillableCodeScanID(id *int) *ReleaseEntryUpdateOne {
	if id != nil {
		reuo = reuo.SetCodeScanID(*id)
	}
	return reuo
}

// SetCodeScan sets the "code_scan" edge to the CodeScan entity.
func (reuo *ReleaseEntryUpdateOne) SetCodeScan(c *CodeScan) *ReleaseEntryUpdateOne {
	return reuo.SetCodeScanID(c.ID)
}

// SetTestRunID sets the "test_run" edge to the TestRun entity by ID.
func (reuo *ReleaseEntryUpdateOne) SetTestRunID(id int) *ReleaseEntryUpdateOne {
	reuo.mutation.SetTestRunID(id)
	return reuo
}

// SetNillableTestRunID sets the "test_run" edge to the TestRun entity by ID if the given value is not nil.
func (reuo *ReleaseEntryUpdateOne) SetNillableTestRunID(id *int) *ReleaseEntryUpdateOne {
	if id != nil {
		reuo = reuo.SetTestRunID(*id)
	}
	return reuo
}

// SetTestRun sets the "test_run" edge to the TestRun entity.
func (reuo *ReleaseEntryUpdateOne) SetTestRun(t *TestRun) *ReleaseEntryUpdateOne {
	return reuo.SetTestRunID(t.ID)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (reuo *ReleaseEntryUpdateOne) SetReleaseID(id int) *ReleaseEntryUpdateOne {
	reuo.mutation.SetReleaseID(id)
	return reuo
}

// SetRelease sets the "release" edge to the Release entity.
func (reuo *ReleaseEntryUpdateOne) SetRelease(r *Release) *ReleaseEntryUpdateOne {
	return reuo.SetReleaseID(r.ID)
}

// Mutation returns the ReleaseEntryMutation object of the builder.
func (reuo *ReleaseEntryUpdateOne) Mutation() *ReleaseEntryMutation {
	return reuo.mutation
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (reuo *ReleaseEntryUpdateOne) ClearArtifact() *ReleaseEntryUpdateOne {
	reuo.mutation.ClearArtifact()
	return reuo
}

// ClearCodeScan clears the "code_scan" edge to the CodeScan entity.
func (reuo *ReleaseEntryUpdateOne) ClearCodeScan() *ReleaseEntryUpdateOne {
	reuo.mutation.ClearCodeScan()
	return reuo
}

// ClearTestRun clears the "test_run" edge to the TestRun entity.
func (reuo *ReleaseEntryUpdateOne) ClearTestRun() *ReleaseEntryUpdateOne {
	reuo.mutation.ClearTestRun()
	return reuo
}

// ClearRelease clears the "release" edge to the Release entity.
func (reuo *ReleaseEntryUpdateOne) ClearRelease() *ReleaseEntryUpdateOne {
	reuo.mutation.ClearRelease()
	return reuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (reuo *ReleaseEntryUpdateOne) Select(field string, fields ...string) *ReleaseEntryUpdateOne {
	reuo.fields = append([]string{field}, fields...)
	return reuo
}

// Save executes the query and returns the updated ReleaseEntry entity.
func (reuo *ReleaseEntryUpdateOne) Save(ctx context.Context) (*ReleaseEntry, error) {
	var (
		err  error
		node *ReleaseEntry
	)
	if len(reuo.hooks) == 0 {
		if err = reuo.check(); err != nil {
			return nil, err
		}
		node, err = reuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseEntryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = reuo.check(); err != nil {
				return nil, err
			}
			reuo.mutation = mutation
			node, err = reuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(reuo.hooks) - 1; i >= 0; i-- {
			if reuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = reuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, reuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (reuo *ReleaseEntryUpdateOne) SaveX(ctx context.Context) *ReleaseEntry {
	node, err := reuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (reuo *ReleaseEntryUpdateOne) Exec(ctx context.Context) error {
	_, err := reuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reuo *ReleaseEntryUpdateOne) ExecX(ctx context.Context) {
	if err := reuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (reuo *ReleaseEntryUpdateOne) check() error {
	if _, ok := reuo.mutation.ReleaseID(); reuo.mutation.ReleaseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"release\"")
	}
	return nil
}

func (reuo *ReleaseEntryUpdateOne) sqlSave(ctx context.Context) (_node *ReleaseEntry, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releaseentry.Table,
			Columns: releaseentry.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releaseentry.FieldID,
			},
		},
	}
	id, ok := reuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ReleaseEntry.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := reuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, releaseentry.FieldID)
		for _, f := range fields {
			if !releaseentry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != releaseentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := reuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if reuo.mutation.ArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   releaseentry.ArtifactTable,
			Columns: []string{releaseentry.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artifact.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reuo.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   releaseentry.ArtifactTable,
			Columns: []string{releaseentry.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artifact.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if reuo.mutation.CodeScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   releaseentry.CodeScanTable,
			Columns: []string{releaseentry.CodeScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reuo.mutation.CodeScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   releaseentry.CodeScanTable,
			Columns: []string{releaseentry.CodeScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if reuo.mutation.TestRunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   releaseentry.TestRunTable,
			Columns: []string{releaseentry.TestRunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testrun.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reuo.mutation.TestRunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   releaseentry.TestRunTable,
			Columns: []string{releaseentry.TestRunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: testrun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if reuo.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaseentry.ReleaseTable,
			Columns: []string{releaseentry.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reuo.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaseentry.ReleaseTable,
			Columns: []string{releaseentry.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReleaseEntry{config: reuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, reuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releaseentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
