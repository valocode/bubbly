// Code generated by entc, DO NOT EDIT.

package gitcommit

const (
	// Label holds the string label denoting the gitcommit type in the database.
	Label = "git_commit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldBranch holds the string denoting the branch field in the database.
	FieldBranch = "branch"
	// FieldTag holds the string denoting the tag field in the database.
	FieldTag = "tag"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// EdgeRepository holds the string denoting the repository edge name in mutations.
	EdgeRepository = "repository"
	// EdgeRelease holds the string denoting the release edge name in mutations.
	EdgeRelease = "release"
	// Table holds the table name of the gitcommit in the database.
	Table = "commit"
	// RepositoryTable is the table that holds the repository relation/edge.
	RepositoryTable = "commit"
	// RepositoryInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	RepositoryInverseTable = "repositories"
	// RepositoryColumn is the table column denoting the repository relation/edge.
	RepositoryColumn = "git_commit_repository"
	// ReleaseTable is the table that holds the release relation/edge.
	ReleaseTable = "release"
	// ReleaseInverseTable is the table name for the Release entity.
	// It exists in this package in order to avoid circular dependency with the "release" package.
	ReleaseInverseTable = "release"
	// ReleaseColumn is the table column denoting the release relation/edge.
	ReleaseColumn = "git_commit_release"
)

// Columns holds all SQL columns for gitcommit fields.
var Columns = []string{
	FieldID,
	FieldHash,
	FieldBranch,
	FieldTag,
	FieldTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "commit"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"git_commit_repository",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// HashValidator is a validator for the "hash" field. It is called by the builders before save.
	HashValidator func(string) error
	// BranchValidator is a validator for the "branch" field. It is called by the builders before save.
	BranchValidator func(string) error
)
