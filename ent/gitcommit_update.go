// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/gitcommit"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/repo"
)

// GitCommitUpdate is the builder for updating GitCommit entities.
type GitCommitUpdate struct {
	config
	hooks    []Hook
	mutation *GitCommitMutation
}

// Where appends a list predicates to the GitCommitUpdate builder.
func (gcu *GitCommitUpdate) Where(ps ...predicate.GitCommit) *GitCommitUpdate {
	gcu.mutation.Where(ps...)
	return gcu
}

// SetRepoID sets the "repo" edge to the Repo entity by ID.
func (gcu *GitCommitUpdate) SetRepoID(id int) *GitCommitUpdate {
	gcu.mutation.SetRepoID(id)
	return gcu
}

// SetRepo sets the "repo" edge to the Repo entity.
func (gcu *GitCommitUpdate) SetRepo(r *Repo) *GitCommitUpdate {
	return gcu.SetRepoID(r.ID)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (gcu *GitCommitUpdate) SetReleaseID(id int) *GitCommitUpdate {
	gcu.mutation.SetReleaseID(id)
	return gcu
}

// SetNillableReleaseID sets the "release" edge to the Release entity by ID if the given value is not nil.
func (gcu *GitCommitUpdate) SetNillableReleaseID(id *int) *GitCommitUpdate {
	if id != nil {
		gcu = gcu.SetReleaseID(*id)
	}
	return gcu
}

// SetRelease sets the "release" edge to the Release entity.
func (gcu *GitCommitUpdate) SetRelease(r *Release) *GitCommitUpdate {
	return gcu.SetReleaseID(r.ID)
}

// Mutation returns the GitCommitMutation object of the builder.
func (gcu *GitCommitUpdate) Mutation() *GitCommitMutation {
	return gcu.mutation
}

// ClearRepo clears the "repo" edge to the Repo entity.
func (gcu *GitCommitUpdate) ClearRepo() *GitCommitUpdate {
	gcu.mutation.ClearRepo()
	return gcu
}

// ClearRelease clears the "release" edge to the Release entity.
func (gcu *GitCommitUpdate) ClearRelease() *GitCommitUpdate {
	gcu.mutation.ClearRelease()
	return gcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gcu *GitCommitUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gcu.hooks) == 0 {
		if err = gcu.check(); err != nil {
			return 0, err
		}
		affected, err = gcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GitCommitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gcu.check(); err != nil {
				return 0, err
			}
			gcu.mutation = mutation
			affected, err = gcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gcu.hooks) - 1; i >= 0; i-- {
			if gcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gcu *GitCommitUpdate) SaveX(ctx context.Context) int {
	affected, err := gcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gcu *GitCommitUpdate) Exec(ctx context.Context) error {
	_, err := gcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcu *GitCommitUpdate) ExecX(ctx context.Context) {
	if err := gcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gcu *GitCommitUpdate) check() error {
	if _, ok := gcu.mutation.RepoID(); gcu.mutation.RepoCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"repo\"")
	}
	return nil
}

func (gcu *GitCommitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gitcommit.Table,
			Columns: gitcommit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: gitcommit.FieldID,
			},
		},
	}
	if ps := gcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gcu.mutation.TagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: gitcommit.FieldTag,
		})
	}
	if gcu.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gitcommit.RepoTable,
			Columns: []string{gitcommit.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcu.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gitcommit.RepoTable,
			Columns: []string{gitcommit.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gcu.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   gitcommit.ReleaseTable,
			Columns: []string{gitcommit.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcu.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   gitcommit.ReleaseTable,
			Columns: []string{gitcommit.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gitcommit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GitCommitUpdateOne is the builder for updating a single GitCommit entity.
type GitCommitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GitCommitMutation
}

// SetRepoID sets the "repo" edge to the Repo entity by ID.
func (gcuo *GitCommitUpdateOne) SetRepoID(id int) *GitCommitUpdateOne {
	gcuo.mutation.SetRepoID(id)
	return gcuo
}

// SetRepo sets the "repo" edge to the Repo entity.
func (gcuo *GitCommitUpdateOne) SetRepo(r *Repo) *GitCommitUpdateOne {
	return gcuo.SetRepoID(r.ID)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (gcuo *GitCommitUpdateOne) SetReleaseID(id int) *GitCommitUpdateOne {
	gcuo.mutation.SetReleaseID(id)
	return gcuo
}

// SetNillableReleaseID sets the "release" edge to the Release entity by ID if the given value is not nil.
func (gcuo *GitCommitUpdateOne) SetNillableReleaseID(id *int) *GitCommitUpdateOne {
	if id != nil {
		gcuo = gcuo.SetReleaseID(*id)
	}
	return gcuo
}

// SetRelease sets the "release" edge to the Release entity.
func (gcuo *GitCommitUpdateOne) SetRelease(r *Release) *GitCommitUpdateOne {
	return gcuo.SetReleaseID(r.ID)
}

// Mutation returns the GitCommitMutation object of the builder.
func (gcuo *GitCommitUpdateOne) Mutation() *GitCommitMutation {
	return gcuo.mutation
}

// ClearRepo clears the "repo" edge to the Repo entity.
func (gcuo *GitCommitUpdateOne) ClearRepo() *GitCommitUpdateOne {
	gcuo.mutation.ClearRepo()
	return gcuo
}

// ClearRelease clears the "release" edge to the Release entity.
func (gcuo *GitCommitUpdateOne) ClearRelease() *GitCommitUpdateOne {
	gcuo.mutation.ClearRelease()
	return gcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gcuo *GitCommitUpdateOne) Select(field string, fields ...string) *GitCommitUpdateOne {
	gcuo.fields = append([]string{field}, fields...)
	return gcuo
}

// Save executes the query and returns the updated GitCommit entity.
func (gcuo *GitCommitUpdateOne) Save(ctx context.Context) (*GitCommit, error) {
	var (
		err  error
		node *GitCommit
	)
	if len(gcuo.hooks) == 0 {
		if err = gcuo.check(); err != nil {
			return nil, err
		}
		node, err = gcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GitCommitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gcuo.check(); err != nil {
				return nil, err
			}
			gcuo.mutation = mutation
			node, err = gcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gcuo.hooks) - 1; i >= 0; i-- {
			if gcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gcuo *GitCommitUpdateOne) SaveX(ctx context.Context) *GitCommit {
	node, err := gcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gcuo *GitCommitUpdateOne) Exec(ctx context.Context) error {
	_, err := gcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcuo *GitCommitUpdateOne) ExecX(ctx context.Context) {
	if err := gcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gcuo *GitCommitUpdateOne) check() error {
	if _, ok := gcuo.mutation.RepoID(); gcuo.mutation.RepoCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"repo\"")
	}
	return nil
}

func (gcuo *GitCommitUpdateOne) sqlSave(ctx context.Context) (_node *GitCommit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gitcommit.Table,
			Columns: gitcommit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: gitcommit.FieldID,
			},
		},
	}
	id, ok := gcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GitCommit.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := gcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gitcommit.FieldID)
		for _, f := range fields {
			if !gitcommit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gitcommit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gcuo.mutation.TagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: gitcommit.FieldTag,
		})
	}
	if gcuo.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gitcommit.RepoTable,
			Columns: []string{gitcommit.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcuo.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gitcommit.RepoTable,
			Columns: []string{gitcommit.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gcuo.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   gitcommit.ReleaseTable,
			Columns: []string{gitcommit.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcuo.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   gitcommit.ReleaseTable,
			Columns: []string{gitcommit.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GitCommit{config: gcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gitcommit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
