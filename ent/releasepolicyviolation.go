// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasepolicy"
	"github.com/valocode/bubbly/ent/releasepolicyviolation"
)

// ReleasePolicyViolation is the model entity for the ReleasePolicyViolation schema.
type ReleasePolicyViolation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Severity holds the value of the "severity" field.
	Severity releasepolicyviolation.Severity `json:"severity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReleasePolicyViolationQuery when eager-loading is set.
	Edges                            ReleasePolicyViolationEdges `json:"edges"`
	release_policy_violation_policy  *int
	release_policy_violation_release *int
}

// ReleasePolicyViolationEdges holds the relations/edges for other nodes in the graph.
type ReleasePolicyViolationEdges struct {
	// Policy holds the value of the policy edge.
	Policy *ReleasePolicy `json:"policy,omitempty"`
	// Release holds the value of the release edge.
	Release *Release `json:"release,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PolicyOrErr returns the Policy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReleasePolicyViolationEdges) PolicyOrErr() (*ReleasePolicy, error) {
	if e.loadedTypes[0] {
		if e.Policy == nil {
			// The edge policy was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: releasepolicy.Label}
		}
		return e.Policy, nil
	}
	return nil, &NotLoadedError{edge: "policy"}
}

// ReleaseOrErr returns the Release value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReleasePolicyViolationEdges) ReleaseOrErr() (*Release, error) {
	if e.loadedTypes[1] {
		if e.Release == nil {
			// The edge release was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: release.Label}
		}
		return e.Release, nil
	}
	return nil, &NotLoadedError{edge: "release"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReleasePolicyViolation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case releasepolicyviolation.FieldID:
			values[i] = new(sql.NullInt64)
		case releasepolicyviolation.FieldMessage, releasepolicyviolation.FieldSeverity:
			values[i] = new(sql.NullString)
		case releasepolicyviolation.ForeignKeys[0]: // release_policy_violation_policy
			values[i] = new(sql.NullInt64)
		case releasepolicyviolation.ForeignKeys[1]: // release_policy_violation_release
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ReleasePolicyViolation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReleasePolicyViolation fields.
func (rpv *ReleasePolicyViolation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case releasepolicyviolation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rpv.ID = int(value.Int64)
		case releasepolicyviolation.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				rpv.Message = value.String
			}
		case releasepolicyviolation.FieldSeverity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field severity", values[i])
			} else if value.Valid {
				rpv.Severity = releasepolicyviolation.Severity(value.String)
			}
		case releasepolicyviolation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field release_policy_violation_policy", value)
			} else if value.Valid {
				rpv.release_policy_violation_policy = new(int)
				*rpv.release_policy_violation_policy = int(value.Int64)
			}
		case releasepolicyviolation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field release_policy_violation_release", value)
			} else if value.Valid {
				rpv.release_policy_violation_release = new(int)
				*rpv.release_policy_violation_release = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPolicy queries the "policy" edge of the ReleasePolicyViolation entity.
func (rpv *ReleasePolicyViolation) QueryPolicy() *ReleasePolicyQuery {
	return (&ReleasePolicyViolationClient{config: rpv.config}).QueryPolicy(rpv)
}

// QueryRelease queries the "release" edge of the ReleasePolicyViolation entity.
func (rpv *ReleasePolicyViolation) QueryRelease() *ReleaseQuery {
	return (&ReleasePolicyViolationClient{config: rpv.config}).QueryRelease(rpv)
}

// Update returns a builder for updating this ReleasePolicyViolation.
// Note that you need to call ReleasePolicyViolation.Unwrap() before calling this method if this ReleasePolicyViolation
// was returned from a transaction, and the transaction was committed or rolled back.
func (rpv *ReleasePolicyViolation) Update() *ReleasePolicyViolationUpdateOne {
	return (&ReleasePolicyViolationClient{config: rpv.config}).UpdateOne(rpv)
}

// Unwrap unwraps the ReleasePolicyViolation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rpv *ReleasePolicyViolation) Unwrap() *ReleasePolicyViolation {
	tx, ok := rpv.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReleasePolicyViolation is not a transactional entity")
	}
	rpv.config.driver = tx.drv
	return rpv
}

// String implements the fmt.Stringer.
func (rpv *ReleasePolicyViolation) String() string {
	var builder strings.Builder
	builder.WriteString("ReleasePolicyViolation(")
	builder.WriteString(fmt.Sprintf("id=%v", rpv.ID))
	builder.WriteString(", message=")
	builder.WriteString(rpv.Message)
	builder.WriteString(", severity=")
	builder.WriteString(fmt.Sprintf("%v", rpv.Severity))
	builder.WriteByte(')')
	return builder.String()
}

// ReleasePolicyViolations is a parsable slice of ReleasePolicyViolation.
type ReleasePolicyViolations []*ReleasePolicyViolation

func (rpv ReleasePolicyViolations) config(cfg config) {
	for _i := range rpv {
		rpv[_i].config = cfg
	}
}
