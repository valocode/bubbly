// Code generated by entc, DO NOT EDIT.

package project

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeRepos holds the string denoting the repos edge name in mutations.
	EdgeRepos = "repos"
	// EdgeVulnerabilityReviews holds the string denoting the vulnerability_reviews edge name in mutations.
	EdgeVulnerabilityReviews = "vulnerability_reviews"
	// EdgePolicies holds the string denoting the policies edge name in mutations.
	EdgePolicies = "policies"
	// Table holds the table name of the project in the database.
	Table = "project"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "project"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organization"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "project_owner"
	// ReposTable is the table that holds the repos relation/edge.
	ReposTable = "repo"
	// ReposInverseTable is the table name for the Repo entity.
	// It exists in this package in order to avoid circular dependency with the "repo" package.
	ReposInverseTable = "repo"
	// ReposColumn is the table column denoting the repos relation/edge.
	ReposColumn = "repo_project"
	// VulnerabilityReviewsTable is the table that holds the vulnerability_reviews relation/edge. The primary key declared below.
	VulnerabilityReviewsTable = "vulnerability_review_projects"
	// VulnerabilityReviewsInverseTable is the table name for the VulnerabilityReview entity.
	// It exists in this package in order to avoid circular dependency with the "vulnerabilityreview" package.
	VulnerabilityReviewsInverseTable = "vulnerability_review"
	// PoliciesTable is the table that holds the policies relation/edge. The primary key declared below.
	PoliciesTable = "release_policy_projects"
	// PoliciesInverseTable is the table name for the ReleasePolicy entity.
	// It exists in this package in order to avoid circular dependency with the "releasepolicy" package.
	PoliciesInverseTable = "release_policy"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "project"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_owner",
}

var (
	// VulnerabilityReviewsPrimaryKey and VulnerabilityReviewsColumn2 are the table columns denoting the
	// primary key for the vulnerability_reviews relation (M2M).
	VulnerabilityReviewsPrimaryKey = []string{"vulnerability_review_id", "project_id"}
	// PoliciesPrimaryKey and PoliciesColumn2 are the table columns denoting the
	// primary key for the policies relation (M2M).
	PoliciesPrimaryKey = []string{"release_policy_id", "project_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)
