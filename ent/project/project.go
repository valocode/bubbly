// Code generated by entc, DO NOT EDIT.

package project

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeRepos holds the string denoting the repos edge name in mutations.
	EdgeRepos = "repos"
	// EdgeVulnerabilityReviews holds the string denoting the vulnerability_reviews edge name in mutations.
	EdgeVulnerabilityReviews = "vulnerability_reviews"
	// Table holds the table name of the project in the database.
	Table = "project"
	// ReposTable is the table that holds the repos relation/edge. The primary key declared below.
	ReposTable = "repo_projects"
	// ReposInverseTable is the table name for the Repo entity.
	// It exists in this package in order to avoid circular dependency with the "repo" package.
	ReposInverseTable = "repo"
	// VulnerabilityReviewsTable is the table that holds the vulnerability_reviews relation/edge. The primary key declared below.
	VulnerabilityReviewsTable = "vulnerability_review_projects"
	// VulnerabilityReviewsInverseTable is the table name for the VulnerabilityReview entity.
	// It exists in this package in order to avoid circular dependency with the "vulnerabilityreview" package.
	VulnerabilityReviewsInverseTable = "vulnerability_review"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldName,
}

var (
	// ReposPrimaryKey and ReposColumn2 are the table columns denoting the
	// primary key for the repos relation (M2M).
	ReposPrimaryKey = []string{"repo_id", "project_id"}
	// VulnerabilityReviewsPrimaryKey and VulnerabilityReviewsColumn2 are the table columns denoting the
	// primary key for the vulnerability_reviews relation (M2M).
	VulnerabilityReviewsPrimaryKey = []string{"vulnerability_review_id", "project_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)
