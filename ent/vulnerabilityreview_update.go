// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/project"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasevulnerability"
	"github.com/valocode/bubbly/ent/repo"
	"github.com/valocode/bubbly/ent/vulnerability"
	"github.com/valocode/bubbly/ent/vulnerabilityreview"
)

// VulnerabilityReviewUpdate is the builder for updating VulnerabilityReview entities.
type VulnerabilityReviewUpdate struct {
	config
	hooks    []Hook
	mutation *VulnerabilityReviewMutation
}

// Where appends a list predicates to the VulnerabilityReviewUpdate builder.
func (vru *VulnerabilityReviewUpdate) Where(ps ...predicate.VulnerabilityReview) *VulnerabilityReviewUpdate {
	vru.mutation.Where(ps...)
	return vru
}

// SetNote sets the "note" field.
func (vru *VulnerabilityReviewUpdate) SetNote(s string) *VulnerabilityReviewUpdate {
	vru.mutation.SetNote(s)
	return vru
}

// SetDecision sets the "decision" field.
func (vru *VulnerabilityReviewUpdate) SetDecision(v vulnerabilityreview.Decision) *VulnerabilityReviewUpdate {
	vru.mutation.SetDecision(v)
	return vru
}

// SetNillableDecision sets the "decision" field if the given value is not nil.
func (vru *VulnerabilityReviewUpdate) SetNillableDecision(v *vulnerabilityreview.Decision) *VulnerabilityReviewUpdate {
	if v != nil {
		vru.SetDecision(*v)
	}
	return vru
}

// SetVulnerabilityID sets the "vulnerability" edge to the Vulnerability entity by ID.
func (vru *VulnerabilityReviewUpdate) SetVulnerabilityID(id int) *VulnerabilityReviewUpdate {
	vru.mutation.SetVulnerabilityID(id)
	return vru
}

// SetVulnerability sets the "vulnerability" edge to the Vulnerability entity.
func (vru *VulnerabilityReviewUpdate) SetVulnerability(v *Vulnerability) *VulnerabilityReviewUpdate {
	return vru.SetVulnerabilityID(v.ID)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (vru *VulnerabilityReviewUpdate) AddProjectIDs(ids ...int) *VulnerabilityReviewUpdate {
	vru.mutation.AddProjectIDs(ids...)
	return vru
}

// AddProjects adds the "projects" edges to the Project entity.
func (vru *VulnerabilityReviewUpdate) AddProjects(p ...*Project) *VulnerabilityReviewUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vru.AddProjectIDs(ids...)
}

// AddRepoIDs adds the "repos" edge to the Repo entity by IDs.
func (vru *VulnerabilityReviewUpdate) AddRepoIDs(ids ...int) *VulnerabilityReviewUpdate {
	vru.mutation.AddRepoIDs(ids...)
	return vru
}

// AddRepos adds the "repos" edges to the Repo entity.
func (vru *VulnerabilityReviewUpdate) AddRepos(r ...*Repo) *VulnerabilityReviewUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vru.AddRepoIDs(ids...)
}

// AddReleaseIDs adds the "releases" edge to the Release entity by IDs.
func (vru *VulnerabilityReviewUpdate) AddReleaseIDs(ids ...int) *VulnerabilityReviewUpdate {
	vru.mutation.AddReleaseIDs(ids...)
	return vru
}

// AddReleases adds the "releases" edges to the Release entity.
func (vru *VulnerabilityReviewUpdate) AddReleases(r ...*Release) *VulnerabilityReviewUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vru.AddReleaseIDs(ids...)
}

// AddInstanceIDs adds the "instances" edge to the ReleaseVulnerability entity by IDs.
func (vru *VulnerabilityReviewUpdate) AddInstanceIDs(ids ...int) *VulnerabilityReviewUpdate {
	vru.mutation.AddInstanceIDs(ids...)
	return vru
}

// AddInstances adds the "instances" edges to the ReleaseVulnerability entity.
func (vru *VulnerabilityReviewUpdate) AddInstances(r ...*ReleaseVulnerability) *VulnerabilityReviewUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vru.AddInstanceIDs(ids...)
}

// Mutation returns the VulnerabilityReviewMutation object of the builder.
func (vru *VulnerabilityReviewUpdate) Mutation() *VulnerabilityReviewMutation {
	return vru.mutation
}

// ClearVulnerability clears the "vulnerability" edge to the Vulnerability entity.
func (vru *VulnerabilityReviewUpdate) ClearVulnerability() *VulnerabilityReviewUpdate {
	vru.mutation.ClearVulnerability()
	return vru
}

// ClearProjects clears all "projects" edges to the Project entity.
func (vru *VulnerabilityReviewUpdate) ClearProjects() *VulnerabilityReviewUpdate {
	vru.mutation.ClearProjects()
	return vru
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (vru *VulnerabilityReviewUpdate) RemoveProjectIDs(ids ...int) *VulnerabilityReviewUpdate {
	vru.mutation.RemoveProjectIDs(ids...)
	return vru
}

// RemoveProjects removes "projects" edges to Project entities.
func (vru *VulnerabilityReviewUpdate) RemoveProjects(p ...*Project) *VulnerabilityReviewUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vru.RemoveProjectIDs(ids...)
}

// ClearRepos clears all "repos" edges to the Repo entity.
func (vru *VulnerabilityReviewUpdate) ClearRepos() *VulnerabilityReviewUpdate {
	vru.mutation.ClearRepos()
	return vru
}

// RemoveRepoIDs removes the "repos" edge to Repo entities by IDs.
func (vru *VulnerabilityReviewUpdate) RemoveRepoIDs(ids ...int) *VulnerabilityReviewUpdate {
	vru.mutation.RemoveRepoIDs(ids...)
	return vru
}

// RemoveRepos removes "repos" edges to Repo entities.
func (vru *VulnerabilityReviewUpdate) RemoveRepos(r ...*Repo) *VulnerabilityReviewUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vru.RemoveRepoIDs(ids...)
}

// ClearReleases clears all "releases" edges to the Release entity.
func (vru *VulnerabilityReviewUpdate) ClearReleases() *VulnerabilityReviewUpdate {
	vru.mutation.ClearReleases()
	return vru
}

// RemoveReleaseIDs removes the "releases" edge to Release entities by IDs.
func (vru *VulnerabilityReviewUpdate) RemoveReleaseIDs(ids ...int) *VulnerabilityReviewUpdate {
	vru.mutation.RemoveReleaseIDs(ids...)
	return vru
}

// RemoveReleases removes "releases" edges to Release entities.
func (vru *VulnerabilityReviewUpdate) RemoveReleases(r ...*Release) *VulnerabilityReviewUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vru.RemoveReleaseIDs(ids...)
}

// ClearInstances clears all "instances" edges to the ReleaseVulnerability entity.
func (vru *VulnerabilityReviewUpdate) ClearInstances() *VulnerabilityReviewUpdate {
	vru.mutation.ClearInstances()
	return vru
}

// RemoveInstanceIDs removes the "instances" edge to ReleaseVulnerability entities by IDs.
func (vru *VulnerabilityReviewUpdate) RemoveInstanceIDs(ids ...int) *VulnerabilityReviewUpdate {
	vru.mutation.RemoveInstanceIDs(ids...)
	return vru
}

// RemoveInstances removes "instances" edges to ReleaseVulnerability entities.
func (vru *VulnerabilityReviewUpdate) RemoveInstances(r ...*ReleaseVulnerability) *VulnerabilityReviewUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vru.RemoveInstanceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vru *VulnerabilityReviewUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vru.hooks) == 0 {
		if err = vru.check(); err != nil {
			return 0, err
		}
		affected, err = vru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VulnerabilityReviewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vru.check(); err != nil {
				return 0, err
			}
			vru.mutation = mutation
			affected, err = vru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vru.hooks) - 1; i >= 0; i-- {
			if vru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vru *VulnerabilityReviewUpdate) SaveX(ctx context.Context) int {
	affected, err := vru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vru *VulnerabilityReviewUpdate) Exec(ctx context.Context) error {
	_, err := vru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vru *VulnerabilityReviewUpdate) ExecX(ctx context.Context) {
	if err := vru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vru *VulnerabilityReviewUpdate) check() error {
	if v, ok := vru.mutation.Note(); ok {
		if err := vulnerabilityreview.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	if v, ok := vru.mutation.Decision(); ok {
		if err := vulnerabilityreview.DecisionValidator(v); err != nil {
			return &ValidationError{Name: "decision", err: fmt.Errorf("ent: validator failed for field \"decision\": %w", err)}
		}
	}
	if _, ok := vru.mutation.VulnerabilityID(); vru.mutation.VulnerabilityCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"vulnerability\"")
	}
	return nil
}

func (vru *VulnerabilityReviewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vulnerabilityreview.Table,
			Columns: vulnerabilityreview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vulnerabilityreview.FieldID,
			},
		},
	}
	if ps := vru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vru.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnerabilityreview.FieldNote,
		})
	}
	if value, ok := vru.mutation.Decision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: vulnerabilityreview.FieldDecision,
		})
	}
	if vru.mutation.VulnerabilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerabilityreview.VulnerabilityTable,
			Columns: []string{vulnerabilityreview.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerability.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.VulnerabilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerabilityreview.VulnerabilityTable,
			Columns: []string{vulnerabilityreview.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vru.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ProjectsTable,
			Columns: vulnerabilityreview.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !vru.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ProjectsTable,
			Columns: vulnerabilityreview.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ProjectsTable,
			Columns: vulnerabilityreview.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vru.mutation.ReposCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ReposTable,
			Columns: vulnerabilityreview.ReposPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.RemovedReposIDs(); len(nodes) > 0 && !vru.mutation.ReposCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ReposTable,
			Columns: vulnerabilityreview.ReposPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.ReposIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ReposTable,
			Columns: vulnerabilityreview.ReposPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vru.mutation.ReleasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ReleasesTable,
			Columns: vulnerabilityreview.ReleasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.RemovedReleasesIDs(); len(nodes) > 0 && !vru.mutation.ReleasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ReleasesTable,
			Columns: vulnerabilityreview.ReleasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.ReleasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ReleasesTable,
			Columns: vulnerabilityreview.ReleasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vru.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerabilityreview.InstancesTable,
			Columns: vulnerabilityreview.InstancesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !vru.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerabilityreview.InstancesTable,
			Columns: vulnerabilityreview.InstancesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerabilityreview.InstancesTable,
			Columns: vulnerabilityreview.InstancesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerabilityreview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VulnerabilityReviewUpdateOne is the builder for updating a single VulnerabilityReview entity.
type VulnerabilityReviewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VulnerabilityReviewMutation
}

// SetNote sets the "note" field.
func (vruo *VulnerabilityReviewUpdateOne) SetNote(s string) *VulnerabilityReviewUpdateOne {
	vruo.mutation.SetNote(s)
	return vruo
}

// SetDecision sets the "decision" field.
func (vruo *VulnerabilityReviewUpdateOne) SetDecision(v vulnerabilityreview.Decision) *VulnerabilityReviewUpdateOne {
	vruo.mutation.SetDecision(v)
	return vruo
}

// SetNillableDecision sets the "decision" field if the given value is not nil.
func (vruo *VulnerabilityReviewUpdateOne) SetNillableDecision(v *vulnerabilityreview.Decision) *VulnerabilityReviewUpdateOne {
	if v != nil {
		vruo.SetDecision(*v)
	}
	return vruo
}

// SetVulnerabilityID sets the "vulnerability" edge to the Vulnerability entity by ID.
func (vruo *VulnerabilityReviewUpdateOne) SetVulnerabilityID(id int) *VulnerabilityReviewUpdateOne {
	vruo.mutation.SetVulnerabilityID(id)
	return vruo
}

// SetVulnerability sets the "vulnerability" edge to the Vulnerability entity.
func (vruo *VulnerabilityReviewUpdateOne) SetVulnerability(v *Vulnerability) *VulnerabilityReviewUpdateOne {
	return vruo.SetVulnerabilityID(v.ID)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (vruo *VulnerabilityReviewUpdateOne) AddProjectIDs(ids ...int) *VulnerabilityReviewUpdateOne {
	vruo.mutation.AddProjectIDs(ids...)
	return vruo
}

// AddProjects adds the "projects" edges to the Project entity.
func (vruo *VulnerabilityReviewUpdateOne) AddProjects(p ...*Project) *VulnerabilityReviewUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vruo.AddProjectIDs(ids...)
}

// AddRepoIDs adds the "repos" edge to the Repo entity by IDs.
func (vruo *VulnerabilityReviewUpdateOne) AddRepoIDs(ids ...int) *VulnerabilityReviewUpdateOne {
	vruo.mutation.AddRepoIDs(ids...)
	return vruo
}

// AddRepos adds the "repos" edges to the Repo entity.
func (vruo *VulnerabilityReviewUpdateOne) AddRepos(r ...*Repo) *VulnerabilityReviewUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vruo.AddRepoIDs(ids...)
}

// AddReleaseIDs adds the "releases" edge to the Release entity by IDs.
func (vruo *VulnerabilityReviewUpdateOne) AddReleaseIDs(ids ...int) *VulnerabilityReviewUpdateOne {
	vruo.mutation.AddReleaseIDs(ids...)
	return vruo
}

// AddReleases adds the "releases" edges to the Release entity.
func (vruo *VulnerabilityReviewUpdateOne) AddReleases(r ...*Release) *VulnerabilityReviewUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vruo.AddReleaseIDs(ids...)
}

// AddInstanceIDs adds the "instances" edge to the ReleaseVulnerability entity by IDs.
func (vruo *VulnerabilityReviewUpdateOne) AddInstanceIDs(ids ...int) *VulnerabilityReviewUpdateOne {
	vruo.mutation.AddInstanceIDs(ids...)
	return vruo
}

// AddInstances adds the "instances" edges to the ReleaseVulnerability entity.
func (vruo *VulnerabilityReviewUpdateOne) AddInstances(r ...*ReleaseVulnerability) *VulnerabilityReviewUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vruo.AddInstanceIDs(ids...)
}

// Mutation returns the VulnerabilityReviewMutation object of the builder.
func (vruo *VulnerabilityReviewUpdateOne) Mutation() *VulnerabilityReviewMutation {
	return vruo.mutation
}

// ClearVulnerability clears the "vulnerability" edge to the Vulnerability entity.
func (vruo *VulnerabilityReviewUpdateOne) ClearVulnerability() *VulnerabilityReviewUpdateOne {
	vruo.mutation.ClearVulnerability()
	return vruo
}

// ClearProjects clears all "projects" edges to the Project entity.
func (vruo *VulnerabilityReviewUpdateOne) ClearProjects() *VulnerabilityReviewUpdateOne {
	vruo.mutation.ClearProjects()
	return vruo
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (vruo *VulnerabilityReviewUpdateOne) RemoveProjectIDs(ids ...int) *VulnerabilityReviewUpdateOne {
	vruo.mutation.RemoveProjectIDs(ids...)
	return vruo
}

// RemoveProjects removes "projects" edges to Project entities.
func (vruo *VulnerabilityReviewUpdateOne) RemoveProjects(p ...*Project) *VulnerabilityReviewUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vruo.RemoveProjectIDs(ids...)
}

// ClearRepos clears all "repos" edges to the Repo entity.
func (vruo *VulnerabilityReviewUpdateOne) ClearRepos() *VulnerabilityReviewUpdateOne {
	vruo.mutation.ClearRepos()
	return vruo
}

// RemoveRepoIDs removes the "repos" edge to Repo entities by IDs.
func (vruo *VulnerabilityReviewUpdateOne) RemoveRepoIDs(ids ...int) *VulnerabilityReviewUpdateOne {
	vruo.mutation.RemoveRepoIDs(ids...)
	return vruo
}

// RemoveRepos removes "repos" edges to Repo entities.
func (vruo *VulnerabilityReviewUpdateOne) RemoveRepos(r ...*Repo) *VulnerabilityReviewUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vruo.RemoveRepoIDs(ids...)
}

// ClearReleases clears all "releases" edges to the Release entity.
func (vruo *VulnerabilityReviewUpdateOne) ClearReleases() *VulnerabilityReviewUpdateOne {
	vruo.mutation.ClearReleases()
	return vruo
}

// RemoveReleaseIDs removes the "releases" edge to Release entities by IDs.
func (vruo *VulnerabilityReviewUpdateOne) RemoveReleaseIDs(ids ...int) *VulnerabilityReviewUpdateOne {
	vruo.mutation.RemoveReleaseIDs(ids...)
	return vruo
}

// RemoveReleases removes "releases" edges to Release entities.
func (vruo *VulnerabilityReviewUpdateOne) RemoveReleases(r ...*Release) *VulnerabilityReviewUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vruo.RemoveReleaseIDs(ids...)
}

// ClearInstances clears all "instances" edges to the ReleaseVulnerability entity.
func (vruo *VulnerabilityReviewUpdateOne) ClearInstances() *VulnerabilityReviewUpdateOne {
	vruo.mutation.ClearInstances()
	return vruo
}

// RemoveInstanceIDs removes the "instances" edge to ReleaseVulnerability entities by IDs.
func (vruo *VulnerabilityReviewUpdateOne) RemoveInstanceIDs(ids ...int) *VulnerabilityReviewUpdateOne {
	vruo.mutation.RemoveInstanceIDs(ids...)
	return vruo
}

// RemoveInstances removes "instances" edges to ReleaseVulnerability entities.
func (vruo *VulnerabilityReviewUpdateOne) RemoveInstances(r ...*ReleaseVulnerability) *VulnerabilityReviewUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vruo.RemoveInstanceIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vruo *VulnerabilityReviewUpdateOne) Select(field string, fields ...string) *VulnerabilityReviewUpdateOne {
	vruo.fields = append([]string{field}, fields...)
	return vruo
}

// Save executes the query and returns the updated VulnerabilityReview entity.
func (vruo *VulnerabilityReviewUpdateOne) Save(ctx context.Context) (*VulnerabilityReview, error) {
	var (
		err  error
		node *VulnerabilityReview
	)
	if len(vruo.hooks) == 0 {
		if err = vruo.check(); err != nil {
			return nil, err
		}
		node, err = vruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VulnerabilityReviewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vruo.check(); err != nil {
				return nil, err
			}
			vruo.mutation = mutation
			node, err = vruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vruo.hooks) - 1; i >= 0; i-- {
			if vruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vruo *VulnerabilityReviewUpdateOne) SaveX(ctx context.Context) *VulnerabilityReview {
	node, err := vruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vruo *VulnerabilityReviewUpdateOne) Exec(ctx context.Context) error {
	_, err := vruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vruo *VulnerabilityReviewUpdateOne) ExecX(ctx context.Context) {
	if err := vruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vruo *VulnerabilityReviewUpdateOne) check() error {
	if v, ok := vruo.mutation.Note(); ok {
		if err := vulnerabilityreview.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	if v, ok := vruo.mutation.Decision(); ok {
		if err := vulnerabilityreview.DecisionValidator(v); err != nil {
			return &ValidationError{Name: "decision", err: fmt.Errorf("ent: validator failed for field \"decision\": %w", err)}
		}
	}
	if _, ok := vruo.mutation.VulnerabilityID(); vruo.mutation.VulnerabilityCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"vulnerability\"")
	}
	return nil
}

func (vruo *VulnerabilityReviewUpdateOne) sqlSave(ctx context.Context) (_node *VulnerabilityReview, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vulnerabilityreview.Table,
			Columns: vulnerabilityreview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vulnerabilityreview.FieldID,
			},
		},
	}
	id, ok := vruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing VulnerabilityReview.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vulnerabilityreview.FieldID)
		for _, f := range fields {
			if !vulnerabilityreview.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vulnerabilityreview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vruo.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vulnerabilityreview.FieldNote,
		})
	}
	if value, ok := vruo.mutation.Decision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: vulnerabilityreview.FieldDecision,
		})
	}
	if vruo.mutation.VulnerabilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerabilityreview.VulnerabilityTable,
			Columns: []string{vulnerabilityreview.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerability.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.VulnerabilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerabilityreview.VulnerabilityTable,
			Columns: []string{vulnerabilityreview.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vruo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ProjectsTable,
			Columns: vulnerabilityreview.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !vruo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ProjectsTable,
			Columns: vulnerabilityreview.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ProjectsTable,
			Columns: vulnerabilityreview.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vruo.mutation.ReposCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ReposTable,
			Columns: vulnerabilityreview.ReposPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.RemovedReposIDs(); len(nodes) > 0 && !vruo.mutation.ReposCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ReposTable,
			Columns: vulnerabilityreview.ReposPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.ReposIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ReposTable,
			Columns: vulnerabilityreview.ReposPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vruo.mutation.ReleasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ReleasesTable,
			Columns: vulnerabilityreview.ReleasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.RemovedReleasesIDs(); len(nodes) > 0 && !vruo.mutation.ReleasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ReleasesTable,
			Columns: vulnerabilityreview.ReleasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.ReleasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerabilityreview.ReleasesTable,
			Columns: vulnerabilityreview.ReleasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vruo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerabilityreview.InstancesTable,
			Columns: vulnerabilityreview.InstancesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !vruo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerabilityreview.InstancesTable,
			Columns: vulnerabilityreview.InstancesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerabilityreview.InstancesTable,
			Columns: vulnerabilityreview.InstancesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: releasevulnerability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VulnerabilityReview{config: vruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerabilityreview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
