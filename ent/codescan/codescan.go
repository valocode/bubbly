// Code generated by entc, DO NOT EDIT.

package codescan

import (
	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the codescan type in the database.
	Label = "code_scan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTool holds the string denoting the tool field in the database.
	FieldTool = "tool"
	// EdgeRelease holds the string denoting the release edge name in mutations.
	EdgeRelease = "release"
	// EdgeEntry holds the string denoting the entry edge name in mutations.
	EdgeEntry = "entry"
	// EdgeIssues holds the string denoting the issues edge name in mutations.
	EdgeIssues = "issues"
	// EdgeVulnerabilities holds the string denoting the vulnerabilities edge name in mutations.
	EdgeVulnerabilities = "vulnerabilities"
	// EdgeComponents holds the string denoting the components edge name in mutations.
	EdgeComponents = "components"
	// Table holds the table name of the codescan in the database.
	Table = "code_scan"
	// ReleaseTable is the table that holds the release relation/edge.
	ReleaseTable = "code_scan"
	// ReleaseInverseTable is the table name for the Release entity.
	// It exists in this package in order to avoid circular dependency with the "release" package.
	ReleaseInverseTable = "release"
	// ReleaseColumn is the table column denoting the release relation/edge.
	ReleaseColumn = "code_scan_release"
	// EntryTable is the table that holds the entry relation/edge.
	EntryTable = "code_scan"
	// EntryInverseTable is the table name for the ReleaseEntry entity.
	// It exists in this package in order to avoid circular dependency with the "releaseentry" package.
	EntryInverseTable = "release_entry"
	// EntryColumn is the table column denoting the entry relation/edge.
	EntryColumn = "release_entry_code_scan"
	// IssuesTable is the table that holds the issues relation/edge.
	IssuesTable = "code_issue"
	// IssuesInverseTable is the table name for the CodeIssue entity.
	// It exists in this package in order to avoid circular dependency with the "codeissue" package.
	IssuesInverseTable = "code_issue"
	// IssuesColumn is the table column denoting the issues relation/edge.
	IssuesColumn = "code_issue_scan"
	// VulnerabilitiesTable is the table that holds the vulnerabilities relation/edge. The primary key declared below.
	VulnerabilitiesTable = "release_vulnerability_scans"
	// VulnerabilitiesInverseTable is the table name for the ReleaseVulnerability entity.
	// It exists in this package in order to avoid circular dependency with the "releasevulnerability" package.
	VulnerabilitiesInverseTable = "release_vulnerability"
	// ComponentsTable is the table that holds the components relation/edge. The primary key declared below.
	ComponentsTable = "release_component_scans"
	// ComponentsInverseTable is the table name for the ReleaseComponent entity.
	// It exists in this package in order to avoid circular dependency with the "releasecomponent" package.
	ComponentsInverseTable = "release_component"
)

// Columns holds all SQL columns for codescan fields.
var Columns = []string{
	FieldID,
	FieldTool,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "code_scan"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"code_scan_release",
	"release_entry_code_scan",
}

var (
	// VulnerabilitiesPrimaryKey and VulnerabilitiesColumn2 are the table columns denoting the
	// primary key for the vulnerabilities relation (M2M).
	VulnerabilitiesPrimaryKey = []string{"release_vulnerability_id", "code_scan_id"}
	// ComponentsPrimaryKey and ComponentsColumn2 are the table columns denoting the
	// primary key for the components relation (M2M).
	ComponentsPrimaryKey = []string{"release_component_id", "code_scan_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/valocode/bubbly/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// ToolValidator is a validator for the "tool" field. It is called by the builders before save.
	ToolValidator func(string) error
)
