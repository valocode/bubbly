// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/valocode/bubbly/ent/codescan"
	"github.com/valocode/bubbly/ent/component"
	"github.com/valocode/bubbly/ent/componentuse"
	"github.com/valocode/bubbly/ent/predicate"
	"github.com/valocode/bubbly/ent/release"
)

// ComponentUseUpdate is the builder for updating ComponentUse entities.
type ComponentUseUpdate struct {
	config
	hooks    []Hook
	mutation *ComponentUseMutation
}

// Where appends a list predicates to the ComponentUseUpdate builder.
func (cuu *ComponentUseUpdate) Where(ps ...predicate.ComponentUse) *ComponentUseUpdate {
	cuu.mutation.Where(ps...)
	return cuu
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (cuu *ComponentUseUpdate) SetReleaseID(id int) *ComponentUseUpdate {
	cuu.mutation.SetReleaseID(id)
	return cuu
}

// SetRelease sets the "release" edge to the Release entity.
func (cuu *ComponentUseUpdate) SetRelease(r *Release) *ComponentUseUpdate {
	return cuu.SetReleaseID(r.ID)
}

// AddScanIDs adds the "scans" edge to the CodeScan entity by IDs.
func (cuu *ComponentUseUpdate) AddScanIDs(ids ...int) *ComponentUseUpdate {
	cuu.mutation.AddScanIDs(ids...)
	return cuu
}

// AddScans adds the "scans" edges to the CodeScan entity.
func (cuu *ComponentUseUpdate) AddScans(c ...*CodeScan) *ComponentUseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuu.AddScanIDs(ids...)
}

// SetComponentID sets the "component" edge to the Component entity by ID.
func (cuu *ComponentUseUpdate) SetComponentID(id int) *ComponentUseUpdate {
	cuu.mutation.SetComponentID(id)
	return cuu
}

// SetComponent sets the "component" edge to the Component entity.
func (cuu *ComponentUseUpdate) SetComponent(c *Component) *ComponentUseUpdate {
	return cuu.SetComponentID(c.ID)
}

// Mutation returns the ComponentUseMutation object of the builder.
func (cuu *ComponentUseUpdate) Mutation() *ComponentUseMutation {
	return cuu.mutation
}

// ClearRelease clears the "release" edge to the Release entity.
func (cuu *ComponentUseUpdate) ClearRelease() *ComponentUseUpdate {
	cuu.mutation.ClearRelease()
	return cuu
}

// ClearScans clears all "scans" edges to the CodeScan entity.
func (cuu *ComponentUseUpdate) ClearScans() *ComponentUseUpdate {
	cuu.mutation.ClearScans()
	return cuu
}

// RemoveScanIDs removes the "scans" edge to CodeScan entities by IDs.
func (cuu *ComponentUseUpdate) RemoveScanIDs(ids ...int) *ComponentUseUpdate {
	cuu.mutation.RemoveScanIDs(ids...)
	return cuu
}

// RemoveScans removes "scans" edges to CodeScan entities.
func (cuu *ComponentUseUpdate) RemoveScans(c ...*CodeScan) *ComponentUseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuu.RemoveScanIDs(ids...)
}

// ClearComponent clears the "component" edge to the Component entity.
func (cuu *ComponentUseUpdate) ClearComponent() *ComponentUseUpdate {
	cuu.mutation.ClearComponent()
	return cuu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cuu *ComponentUseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cuu.hooks) == 0 {
		if err = cuu.check(); err != nil {
			return 0, err
		}
		affected, err = cuu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComponentUseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuu.check(); err != nil {
				return 0, err
			}
			cuu.mutation = mutation
			affected, err = cuu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cuu.hooks) - 1; i >= 0; i-- {
			if cuu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuu *ComponentUseUpdate) SaveX(ctx context.Context) int {
	affected, err := cuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cuu *ComponentUseUpdate) Exec(ctx context.Context) error {
	_, err := cuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuu *ComponentUseUpdate) ExecX(ctx context.Context) {
	if err := cuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuu *ComponentUseUpdate) check() error {
	if _, ok := cuu.mutation.ReleaseID(); cuu.mutation.ReleaseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"release\"")
	}
	if _, ok := cuu.mutation.ComponentID(); cuu.mutation.ComponentCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"component\"")
	}
	return nil
}

func (cuu *ComponentUseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   componentuse.Table,
			Columns: componentuse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: componentuse.FieldID,
			},
		},
	}
	if ps := cuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuu.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   componentuse.ReleaseTable,
			Columns: []string{componentuse.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuu.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   componentuse.ReleaseTable,
			Columns: []string{componentuse.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuu.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   componentuse.ScansTable,
			Columns: componentuse.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuu.mutation.RemovedScansIDs(); len(nodes) > 0 && !cuu.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   componentuse.ScansTable,
			Columns: componentuse.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuu.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   componentuse.ScansTable,
			Columns: componentuse.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuu.mutation.ComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   componentuse.ComponentTable,
			Columns: []string{componentuse.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuu.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   componentuse.ComponentTable,
			Columns: []string{componentuse.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{componentuse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ComponentUseUpdateOne is the builder for updating a single ComponentUse entity.
type ComponentUseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ComponentUseMutation
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (cuuo *ComponentUseUpdateOne) SetReleaseID(id int) *ComponentUseUpdateOne {
	cuuo.mutation.SetReleaseID(id)
	return cuuo
}

// SetRelease sets the "release" edge to the Release entity.
func (cuuo *ComponentUseUpdateOne) SetRelease(r *Release) *ComponentUseUpdateOne {
	return cuuo.SetReleaseID(r.ID)
}

// AddScanIDs adds the "scans" edge to the CodeScan entity by IDs.
func (cuuo *ComponentUseUpdateOne) AddScanIDs(ids ...int) *ComponentUseUpdateOne {
	cuuo.mutation.AddScanIDs(ids...)
	return cuuo
}

// AddScans adds the "scans" edges to the CodeScan entity.
func (cuuo *ComponentUseUpdateOne) AddScans(c ...*CodeScan) *ComponentUseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuuo.AddScanIDs(ids...)
}

// SetComponentID sets the "component" edge to the Component entity by ID.
func (cuuo *ComponentUseUpdateOne) SetComponentID(id int) *ComponentUseUpdateOne {
	cuuo.mutation.SetComponentID(id)
	return cuuo
}

// SetComponent sets the "component" edge to the Component entity.
func (cuuo *ComponentUseUpdateOne) SetComponent(c *Component) *ComponentUseUpdateOne {
	return cuuo.SetComponentID(c.ID)
}

// Mutation returns the ComponentUseMutation object of the builder.
func (cuuo *ComponentUseUpdateOne) Mutation() *ComponentUseMutation {
	return cuuo.mutation
}

// ClearRelease clears the "release" edge to the Release entity.
func (cuuo *ComponentUseUpdateOne) ClearRelease() *ComponentUseUpdateOne {
	cuuo.mutation.ClearRelease()
	return cuuo
}

// ClearScans clears all "scans" edges to the CodeScan entity.
func (cuuo *ComponentUseUpdateOne) ClearScans() *ComponentUseUpdateOne {
	cuuo.mutation.ClearScans()
	return cuuo
}

// RemoveScanIDs removes the "scans" edge to CodeScan entities by IDs.
func (cuuo *ComponentUseUpdateOne) RemoveScanIDs(ids ...int) *ComponentUseUpdateOne {
	cuuo.mutation.RemoveScanIDs(ids...)
	return cuuo
}

// RemoveScans removes "scans" edges to CodeScan entities.
func (cuuo *ComponentUseUpdateOne) RemoveScans(c ...*CodeScan) *ComponentUseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuuo.RemoveScanIDs(ids...)
}

// ClearComponent clears the "component" edge to the Component entity.
func (cuuo *ComponentUseUpdateOne) ClearComponent() *ComponentUseUpdateOne {
	cuuo.mutation.ClearComponent()
	return cuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuuo *ComponentUseUpdateOne) Select(field string, fields ...string) *ComponentUseUpdateOne {
	cuuo.fields = append([]string{field}, fields...)
	return cuuo
}

// Save executes the query and returns the updated ComponentUse entity.
func (cuuo *ComponentUseUpdateOne) Save(ctx context.Context) (*ComponentUse, error) {
	var (
		err  error
		node *ComponentUse
	)
	if len(cuuo.hooks) == 0 {
		if err = cuuo.check(); err != nil {
			return nil, err
		}
		node, err = cuuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComponentUseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuuo.check(); err != nil {
				return nil, err
			}
			cuuo.mutation = mutation
			node, err = cuuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuuo.hooks) - 1; i >= 0; i-- {
			if cuuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuuo *ComponentUseUpdateOne) SaveX(ctx context.Context) *ComponentUse {
	node, err := cuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuuo *ComponentUseUpdateOne) Exec(ctx context.Context) error {
	_, err := cuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuuo *ComponentUseUpdateOne) ExecX(ctx context.Context) {
	if err := cuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuuo *ComponentUseUpdateOne) check() error {
	if _, ok := cuuo.mutation.ReleaseID(); cuuo.mutation.ReleaseCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"release\"")
	}
	if _, ok := cuuo.mutation.ComponentID(); cuuo.mutation.ComponentCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"component\"")
	}
	return nil
}

func (cuuo *ComponentUseUpdateOne) sqlSave(ctx context.Context) (_node *ComponentUse, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   componentuse.Table,
			Columns: componentuse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: componentuse.FieldID,
			},
		},
	}
	id, ok := cuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ComponentUse.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, componentuse.FieldID)
		for _, f := range fields {
			if !componentuse.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != componentuse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuuo.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   componentuse.ReleaseTable,
			Columns: []string{componentuse.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuuo.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   componentuse.ReleaseTable,
			Columns: []string{componentuse.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuuo.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   componentuse.ScansTable,
			Columns: componentuse.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuuo.mutation.RemovedScansIDs(); len(nodes) > 0 && !cuuo.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   componentuse.ScansTable,
			Columns: componentuse.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuuo.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   componentuse.ScansTable,
			Columns: componentuse.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codescan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuuo.mutation.ComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   componentuse.ComponentTable,
			Columns: []string{componentuse.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuuo.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   componentuse.ComponentTable,
			Columns: []string{componentuse.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ComponentUse{config: cuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{componentuse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
