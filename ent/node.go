// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"fmt"
	"sync"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/schema"
	"github.com/99designs/gqlgen/graphql"
	"github.com/hashicorp/go-multierror"
	"github.com/valocode/bubbly/ent/artifact"
	"github.com/valocode/bubbly/ent/codeissue"
	"github.com/valocode/bubbly/ent/codescan"
	"github.com/valocode/bubbly/ent/component"
	"github.com/valocode/bubbly/ent/cve"
	"github.com/valocode/bubbly/ent/cverule"
	"github.com/valocode/bubbly/ent/cvescan"
	"github.com/valocode/bubbly/ent/cwe"
	"github.com/valocode/bubbly/ent/gitcommit"
	"github.com/valocode/bubbly/ent/license"
	"github.com/valocode/bubbly/ent/licensescan"
	"github.com/valocode/bubbly/ent/licenseusage"
	"github.com/valocode/bubbly/ent/project"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasecheck"
	"github.com/valocode/bubbly/ent/releaseentry"
	"github.com/valocode/bubbly/ent/repo"
	"github.com/valocode/bubbly/ent/testcase"
	"github.com/valocode/bubbly/ent/testrun"
	"github.com/valocode/bubbly/ent/vulnerability"
	"golang.org/x/sync/semaphore"
)

// Noder wraps the basic Node method.
type Noder interface {
	Node(context.Context) (*Node, error)
}

// Node in the graph.
type Node struct {
	ID     int      `json:"id,omitempty"`     // node id.
	Type   string   `json:"type,omitempty"`   // node type.
	Fields []*Field `json:"fields,omitempty"` // node fields.
	Edges  []*Edge  `json:"edges,omitempty"`  // node edges.
}

// Field of a node.
type Field struct {
	Type  string `json:"type,omitempty"`  // field type.
	Name  string `json:"name,omitempty"`  // field name (as in struct).
	Value string `json:"value,omitempty"` // stringified value.
}

// Edges between two nodes.
type Edge struct {
	Type string `json:"type,omitempty"` // edge type.
	Name string `json:"name,omitempty"` // edge name.
	IDs  []int  `json:"ids,omitempty"`  // node ids (where this edge point to).
}

func (a *Artifact) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     a.ID,
		Type:   "Artifact",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(a.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Sha256); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "sha256",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Type); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "artifact.Type",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.ID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Release",
		Name: "release",
	}
	node.Edges[0].IDs, err = a.QueryRelease().
		Select(release.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ReleaseEntry",
		Name: "entry",
	}
	node.Edges[1].IDs, err = a.QueryEntry().
		Select(releaseentry.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *CVE) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "CVE",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(c.CveID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "cve_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Description); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.SeverityScore); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "float64",
		Name:  "severity_score",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Severity); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "cve.Severity",
		Name:  "severity",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.PublishedData); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "published_data",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.ModifiedData); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "time.Time",
		Name:  "modified_data",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.ID); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Vulnerability",
		Name: "found",
	}
	node.Edges[0].IDs, err = c.QueryFound().
		Select(vulnerability.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "CVERule",
		Name: "rules",
	}
	node.Edges[1].IDs, err = c.QueryRules().
		Select(cverule.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (cr *CVERule) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     cr.ID,
		Type:   "CVERule",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(cr.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cr.ID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "CVE",
		Name: "cve",
	}
	node.Edges[0].IDs, err = cr.QueryCve().
		Select(cve.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Project",
		Name: "project",
	}
	node.Edges[1].IDs, err = cr.QueryProject().
		Select(project.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Repo",
		Name: "repo",
	}
	node.Edges[2].IDs, err = cr.QueryRepo().
		Select(repo.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (cs *CVEScan) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     cs.ID,
		Type:   "CVEScan",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(cs.Tool); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "tool",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cs.ID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Release",
		Name: "release",
	}
	node.Edges[0].IDs, err = cs.QueryRelease().
		Select(release.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ReleaseEntry",
		Name: "entry",
	}
	node.Edges[1].IDs, err = cs.QueryEntry().
		Select(releaseentry.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Vulnerability",
		Name: "vulnerabilities",
	}
	node.Edges[2].IDs, err = cs.QueryVulnerabilities().
		Select(vulnerability.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *CWE) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "CWE",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(c.CweID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "cwe_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Description); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.URL); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "float64",
		Name:  "url",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.ID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "CodeIssue",
		Name: "issues",
	}
	node.Edges[0].IDs, err = c.QueryIssues().
		Select(codeissue.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ci *CodeIssue) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ci.ID,
		Type:   "CodeIssue",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(ci.RuleID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "rule_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ci.Message); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "message",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ci.Severity); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "codeissue.Severity",
		Name:  "severity",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ci.Type); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "codeissue.Type",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ci.ID); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "CWE",
		Name: "cwe",
	}
	node.Edges[0].IDs, err = ci.QueryCwe().
		Select(cwe.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "CodeScan",
		Name: "scan",
	}
	node.Edges[1].IDs, err = ci.QueryScan().
		Select(codescan.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (cs *CodeScan) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     cs.ID,
		Type:   "CodeScan",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(cs.Tool); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "tool",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cs.ID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Release",
		Name: "release",
	}
	node.Edges[0].IDs, err = cs.QueryRelease().
		Select(release.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "CodeIssue",
		Name: "issues",
	}
	node.Edges[1].IDs, err = cs.QueryIssues().
		Select(codeissue.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "ReleaseEntry",
		Name: "entry",
	}
	node.Edges[2].IDs, err = cs.QueryEntry().
		Select(releaseentry.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Component) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "Component",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(c.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Vendor); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "vendor",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Version); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "version",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.URL); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "url",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.ID); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Vulnerability",
		Name: "vulnerabilities",
	}
	node.Edges[0].IDs, err = c.QueryVulnerabilities().
		Select(vulnerability.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "License",
		Name: "licenses",
	}
	node.Edges[1].IDs, err = c.QueryLicenses().
		Select(license.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Release",
		Name: "release",
	}
	node.Edges[2].IDs, err = c.QueryRelease().
		Select(release.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (gc *GitCommit) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     gc.ID,
		Type:   "GitCommit",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(gc.Hash); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hash",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gc.Branch); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "branch",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gc.Tag); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "tag",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gc.Time); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gc.ID); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Repo",
		Name: "repo",
	}
	node.Edges[0].IDs, err = gc.QueryRepo().
		Select(repo.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Release",
		Name: "release",
	}
	node.Edges[1].IDs, err = gc.QueryRelease().
		Select(release.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (l *License) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     l.ID,
		Type:   "License",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(l.SpdxID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "spdx_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.Name); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.Reference); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "reference",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.DetailsURL); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "details_url",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.IsOsiApproved); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "bool",
		Name:  "is_osi_approved",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.ID); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Component",
		Name: "components",
	}
	node.Edges[0].IDs, err = l.QueryComponents().
		Select(component.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "LicenseUsage",
		Name: "usages",
	}
	node.Edges[1].IDs, err = l.QueryUsages().
		Select(licenseusage.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ls *LicenseScan) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ls.ID,
		Type:   "LicenseScan",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(ls.Tool); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "tool",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ls.ID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Release",
		Name: "release",
	}
	node.Edges[0].IDs, err = ls.QueryRelease().
		Select(release.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ReleaseEntry",
		Name: "entry",
	}
	node.Edges[1].IDs, err = ls.QueryEntry().
		Select(releaseentry.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "LicenseUsage",
		Name: "licenses",
	}
	node.Edges[2].IDs, err = ls.QueryLicenses().
		Select(licenseusage.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (lu *LicenseUsage) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     lu.ID,
		Type:   "LicenseUsage",
		Fields: make([]*Field, 0),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(lu.ID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "License",
		Name: "license",
	}
	node.Edges[0].IDs, err = lu.QueryLicense().
		Select(license.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "LicenseScan",
		Name: "scan",
	}
	node.Edges[1].IDs, err = lu.QueryScan().
		Select(licensescan.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pr *Project) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pr.ID,
		Type:   "Project",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(pr.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.ID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Repo",
		Name: "repos",
	}
	node.Edges[0].IDs, err = pr.QueryRepos().
		Select(repo.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Release",
		Name: "releases",
	}
	node.Edges[1].IDs, err = pr.QueryReleases().
		Select(release.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "CVERule",
		Name: "cve_rules",
	}
	node.Edges[2].IDs, err = pr.QueryCveRules().
		Select(cverule.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (r *Release) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     r.ID,
		Type:   "Release",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 12),
	}
	var buf []byte
	if buf, err = json.Marshal(r.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Version); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "version",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Status); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "release.Status",
		Name:  "status",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.ID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Release",
		Name: "subreleases",
	}
	node.Edges[0].IDs, err = r.QuerySubreleases().
		Select(release.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Release",
		Name: "dependencies",
	}
	node.Edges[1].IDs, err = r.QueryDependencies().
		Select(release.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Project",
		Name: "project",
	}
	node.Edges[2].IDs, err = r.QueryProject().
		Select(project.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "GitCommit",
		Name: "commit",
	}
	node.Edges[3].IDs, err = r.QueryCommit().
		Select(gitcommit.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Artifact",
		Name: "artifacts",
	}
	node.Edges[4].IDs, err = r.QueryArtifacts().
		Select(artifact.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "ReleaseCheck",
		Name: "checks",
	}
	node.Edges[5].IDs, err = r.QueryChecks().
		Select(releasecheck.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "ReleaseEntry",
		Name: "log",
	}
	node.Edges[6].IDs, err = r.QueryLog().
		Select(releaseentry.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "CodeScan",
		Name: "code_scans",
	}
	node.Edges[7].IDs, err = r.QueryCodeScans().
		Select(codescan.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "CVEScan",
		Name: "cve_scans",
	}
	node.Edges[8].IDs, err = r.QueryCveScans().
		Select(cvescan.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[9] = &Edge{
		Type: "LicenseScan",
		Name: "license_scans",
	}
	node.Edges[9].IDs, err = r.QueryLicenseScans().
		Select(licensescan.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[10] = &Edge{
		Type: "TestRun",
		Name: "test_runs",
	}
	node.Edges[10].IDs, err = r.QueryTestRuns().
		Select(testrun.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[11] = &Edge{
		Type: "Component",
		Name: "components",
	}
	node.Edges[11].IDs, err = r.QueryComponents().
		Select(component.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (rc *ReleaseCheck) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     rc.ID,
		Type:   "ReleaseCheck",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(rc.Type); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "releasecheck.Type",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rc.ID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Release",
		Name: "release",
	}
	node.Edges[0].IDs, err = rc.QueryRelease().
		Select(release.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (re *ReleaseEntry) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     re.ID,
		Type:   "ReleaseEntry",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 6),
	}
	var buf []byte
	if buf, err = json.Marshal(re.Type); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "releaseentry.Type",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(re.Time); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(re.ID); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Artifact",
		Name: "artifact",
	}
	node.Edges[0].IDs, err = re.QueryArtifact().
		Select(artifact.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "CodeScan",
		Name: "code_scan",
	}
	node.Edges[1].IDs, err = re.QueryCodeScan().
		Select(codescan.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "TestRun",
		Name: "test_run",
	}
	node.Edges[2].IDs, err = re.QueryTestRun().
		Select(testrun.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "CVEScan",
		Name: "cve_scan",
	}
	node.Edges[3].IDs, err = re.QueryCveScan().
		Select(cvescan.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "LicenseScan",
		Name: "license_scan",
	}
	node.Edges[4].IDs, err = re.QueryLicenseScan().
		Select(licensescan.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "Release",
		Name: "release",
	}
	node.Edges[5].IDs, err = re.QueryRelease().
		Select(release.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (r *Repo) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     r.ID,
		Type:   "Repo",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(r.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.ID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Project",
		Name: "project",
	}
	node.Edges[0].IDs, err = r.QueryProject().
		Select(project.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "GitCommit",
		Name: "commits",
	}
	node.Edges[1].IDs, err = r.QueryCommits().
		Select(gitcommit.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "CVERule",
		Name: "cve_rules",
	}
	node.Edges[2].IDs, err = r.QueryCveRules().
		Select(cverule.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (tc *TestCase) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     tc.ID,
		Type:   "TestCase",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(tc.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(tc.Result); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "bool",
		Name:  "result",
		Value: string(buf),
	}
	if buf, err = json.Marshal(tc.Message); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "message",
		Value: string(buf),
	}
	if buf, err = json.Marshal(tc.Elapsed); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "float64",
		Name:  "elapsed",
		Value: string(buf),
	}
	if buf, err = json.Marshal(tc.ID); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "TestRun",
		Name: "run",
	}
	node.Edges[0].IDs, err = tc.QueryRun().
		Select(testrun.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (tr *TestRun) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     tr.ID,
		Type:   "TestRun",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(tr.Tool); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "tool",
		Value: string(buf),
	}
	if buf, err = json.Marshal(tr.ID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Release",
		Name: "release",
	}
	node.Edges[0].IDs, err = tr.QueryRelease().
		Select(release.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ReleaseEntry",
		Name: "entry",
	}
	node.Edges[1].IDs, err = tr.QueryEntry().
		Select(releaseentry.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "TestCase",
		Name: "tests",
	}
	node.Edges[2].IDs, err = tr.QueryTests().
		Select(testcase.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (v *Vulnerability) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     v.ID,
		Type:   "Vulnerability",
		Fields: make([]*Field, 0),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(v.ID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int",
		Name:  "id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "CVE",
		Name: "cve",
	}
	node.Edges[0].IDs, err = v.QueryCve().
		Select(cve.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "CVEScan",
		Name: "scan",
	}
	node.Edges[1].IDs, err = v.QueryScan().
		Select(cvescan.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Component",
		Name: "component",
	}
	node.Edges[2].IDs, err = v.QueryComponent().
		Select(component.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Client) Node(ctx context.Context, id int) (*Node, error) {
	n, err := c.Noder(ctx, id)
	if err != nil {
		return nil, err
	}
	return n.Node(ctx)
}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, int) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, int) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, int) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id int) (string, error) {
			return c.tables.nodeType(ctx, c.driver, id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//		c.Noder(ctx, id)
//		c.Noder(ctx, id, ent.WithNodeType(pet.Table))
//
func (c *Client) Noder(ctx context.Context, id int, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id int) (Noder, error) {
	switch table {
	case artifact.Table:
		n, err := c.Artifact.Query().
			Where(artifact.ID(id)).
			CollectFields(ctx, "Artifact").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case cve.Table:
		n, err := c.CVE.Query().
			Where(cve.ID(id)).
			CollectFields(ctx, "CVE").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case cverule.Table:
		n, err := c.CVERule.Query().
			Where(cverule.ID(id)).
			CollectFields(ctx, "CVERule").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case cvescan.Table:
		n, err := c.CVEScan.Query().
			Where(cvescan.ID(id)).
			CollectFields(ctx, "CVEScan").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case cwe.Table:
		n, err := c.CWE.Query().
			Where(cwe.ID(id)).
			CollectFields(ctx, "CWE").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case codeissue.Table:
		n, err := c.CodeIssue.Query().
			Where(codeissue.ID(id)).
			CollectFields(ctx, "CodeIssue").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case codescan.Table:
		n, err := c.CodeScan.Query().
			Where(codescan.ID(id)).
			CollectFields(ctx, "CodeScan").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case component.Table:
		n, err := c.Component.Query().
			Where(component.ID(id)).
			CollectFields(ctx, "Component").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case gitcommit.Table:
		n, err := c.GitCommit.Query().
			Where(gitcommit.ID(id)).
			CollectFields(ctx, "GitCommit").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case license.Table:
		n, err := c.License.Query().
			Where(license.ID(id)).
			CollectFields(ctx, "License").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case licensescan.Table:
		n, err := c.LicenseScan.Query().
			Where(licensescan.ID(id)).
			CollectFields(ctx, "LicenseScan").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case licenseusage.Table:
		n, err := c.LicenseUsage.Query().
			Where(licenseusage.ID(id)).
			CollectFields(ctx, "LicenseUsage").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case project.Table:
		n, err := c.Project.Query().
			Where(project.ID(id)).
			CollectFields(ctx, "Project").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case release.Table:
		n, err := c.Release.Query().
			Where(release.ID(id)).
			CollectFields(ctx, "Release").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case releasecheck.Table:
		n, err := c.ReleaseCheck.Query().
			Where(releasecheck.ID(id)).
			CollectFields(ctx, "ReleaseCheck").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case releaseentry.Table:
		n, err := c.ReleaseEntry.Query().
			Where(releaseentry.ID(id)).
			CollectFields(ctx, "ReleaseEntry").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case repo.Table:
		n, err := c.Repo.Query().
			Where(repo.ID(id)).
			CollectFields(ctx, "Repo").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case testcase.Table:
		n, err := c.TestCase.Query().
			Where(testcase.ID(id)).
			CollectFields(ctx, "TestCase").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case testrun.Table:
		n, err := c.TestRun.Query().
			Where(testrun.ID(id)).
			CollectFields(ctx, "TestRun").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case vulnerability.Table:
		n, err := c.Vulnerability.Query().
			Where(vulnerability.ID(id)).
			CollectFields(ctx, "Vulnerability").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []int, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]int)
	id2idx := make(map[int][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []int) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[int][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case artifact.Table:
		nodes, err := c.Artifact.Query().
			Where(artifact.IDIn(ids...)).
			CollectFields(ctx, "Artifact").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case cve.Table:
		nodes, err := c.CVE.Query().
			Where(cve.IDIn(ids...)).
			CollectFields(ctx, "CVE").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case cverule.Table:
		nodes, err := c.CVERule.Query().
			Where(cverule.IDIn(ids...)).
			CollectFields(ctx, "CVERule").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case cvescan.Table:
		nodes, err := c.CVEScan.Query().
			Where(cvescan.IDIn(ids...)).
			CollectFields(ctx, "CVEScan").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case cwe.Table:
		nodes, err := c.CWE.Query().
			Where(cwe.IDIn(ids...)).
			CollectFields(ctx, "CWE").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case codeissue.Table:
		nodes, err := c.CodeIssue.Query().
			Where(codeissue.IDIn(ids...)).
			CollectFields(ctx, "CodeIssue").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case codescan.Table:
		nodes, err := c.CodeScan.Query().
			Where(codescan.IDIn(ids...)).
			CollectFields(ctx, "CodeScan").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case component.Table:
		nodes, err := c.Component.Query().
			Where(component.IDIn(ids...)).
			CollectFields(ctx, "Component").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case gitcommit.Table:
		nodes, err := c.GitCommit.Query().
			Where(gitcommit.IDIn(ids...)).
			CollectFields(ctx, "GitCommit").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case license.Table:
		nodes, err := c.License.Query().
			Where(license.IDIn(ids...)).
			CollectFields(ctx, "License").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case licensescan.Table:
		nodes, err := c.LicenseScan.Query().
			Where(licensescan.IDIn(ids...)).
			CollectFields(ctx, "LicenseScan").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case licenseusage.Table:
		nodes, err := c.LicenseUsage.Query().
			Where(licenseusage.IDIn(ids...)).
			CollectFields(ctx, "LicenseUsage").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case project.Table:
		nodes, err := c.Project.Query().
			Where(project.IDIn(ids...)).
			CollectFields(ctx, "Project").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case release.Table:
		nodes, err := c.Release.Query().
			Where(release.IDIn(ids...)).
			CollectFields(ctx, "Release").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case releasecheck.Table:
		nodes, err := c.ReleaseCheck.Query().
			Where(releasecheck.IDIn(ids...)).
			CollectFields(ctx, "ReleaseCheck").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case releaseentry.Table:
		nodes, err := c.ReleaseEntry.Query().
			Where(releaseentry.IDIn(ids...)).
			CollectFields(ctx, "ReleaseEntry").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case repo.Table:
		nodes, err := c.Repo.Query().
			Where(repo.IDIn(ids...)).
			CollectFields(ctx, "Repo").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case testcase.Table:
		nodes, err := c.TestCase.Query().
			Where(testcase.IDIn(ids...)).
			CollectFields(ctx, "TestCase").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case testrun.Table:
		nodes, err := c.TestRun.Query().
			Where(testrun.IDIn(ids...)).
			CollectFields(ctx, "TestRun").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case vulnerability.Table:
		nodes, err := c.Vulnerability.Query().
			Where(vulnerability.IDIn(ids...)).
			CollectFields(ctx, "Vulnerability").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}

type tables struct {
	once  sync.Once
	sem   *semaphore.Weighted
	value atomic.Value
}

func (t *tables) nodeType(ctx context.Context, drv dialect.Driver, id int) (string, error) {
	tables, err := t.Load(ctx, drv)
	if err != nil {
		return "", err
	}
	idx := int(id / (1<<32 - 1))
	if idx < 0 || idx >= len(tables) {
		return "", fmt.Errorf("cannot resolve table from id %v: %w", id, errNodeInvalidID)
	}
	return tables[idx], nil
}

func (t *tables) Load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	t.once.Do(func() { t.sem = semaphore.NewWeighted(1) })
	if err := t.sem.Acquire(ctx, 1); err != nil {
		return nil, err
	}
	defer t.sem.Release(1)
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	tables, err := t.load(ctx, drv)
	if err == nil {
		t.value.Store(tables)
	}
	return tables, err
}

func (*tables) load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	rows := &sql.Rows{}
	query, args := sql.Dialect(drv.Dialect()).
		Select("type").
		From(sql.Table(schema.TypeTable)).
		OrderBy(sql.Asc("id")).
		Query()
	if err := drv.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var tables []string
	return tables, sql.ScanSlice(rows, &tables)
}
