// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/valocode/bubbly/ent/cvescan"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releaseentry"
)

// CVEScan is the model entity for the CVEScan schema.
type CVEScan struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Tool holds the value of the "tool" field.
	Tool string `json:"tool,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CVEScanQuery when eager-loading is set.
	Edges                  CVEScanEdges `json:"edges"`
	cve_scan_release       *int
	release_entry_cve_scan *int
}

// CVEScanEdges holds the relations/edges for other nodes in the graph.
type CVEScanEdges struct {
	// Release holds the value of the release edge.
	Release *Release `json:"release,omitempty"`
	// Entry holds the value of the entry edge.
	Entry *ReleaseEntry `json:"entry,omitempty"`
	// Vulnerabilities holds the value of the vulnerabilities edge.
	Vulnerabilities []*Vulnerability `json:"vulnerabilities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ReleaseOrErr returns the Release value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CVEScanEdges) ReleaseOrErr() (*Release, error) {
	if e.loadedTypes[0] {
		if e.Release == nil {
			// The edge release was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: release.Label}
		}
		return e.Release, nil
	}
	return nil, &NotLoadedError{edge: "release"}
}

// EntryOrErr returns the Entry value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CVEScanEdges) EntryOrErr() (*ReleaseEntry, error) {
	if e.loadedTypes[1] {
		if e.Entry == nil {
			// The edge entry was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: releaseentry.Label}
		}
		return e.Entry, nil
	}
	return nil, &NotLoadedError{edge: "entry"}
}

// VulnerabilitiesOrErr returns the Vulnerabilities value or an error if the edge
// was not loaded in eager-loading.
func (e CVEScanEdges) VulnerabilitiesOrErr() ([]*Vulnerability, error) {
	if e.loadedTypes[2] {
		return e.Vulnerabilities, nil
	}
	return nil, &NotLoadedError{edge: "vulnerabilities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CVEScan) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cvescan.FieldID:
			values[i] = new(sql.NullInt64)
		case cvescan.FieldTool:
			values[i] = new(sql.NullString)
		case cvescan.ForeignKeys[0]: // cve_scan_release
			values[i] = new(sql.NullInt64)
		case cvescan.ForeignKeys[1]: // release_entry_cve_scan
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CVEScan", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CVEScan fields.
func (cs *CVEScan) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cvescan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cs.ID = int(value.Int64)
		case cvescan.FieldTool:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tool", values[i])
			} else if value.Valid {
				cs.Tool = value.String
			}
		case cvescan.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field cve_scan_release", value)
			} else if value.Valid {
				cs.cve_scan_release = new(int)
				*cs.cve_scan_release = int(value.Int64)
			}
		case cvescan.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field release_entry_cve_scan", value)
			} else if value.Valid {
				cs.release_entry_cve_scan = new(int)
				*cs.release_entry_cve_scan = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRelease queries the "release" edge of the CVEScan entity.
func (cs *CVEScan) QueryRelease() *ReleaseQuery {
	return (&CVEScanClient{config: cs.config}).QueryRelease(cs)
}

// QueryEntry queries the "entry" edge of the CVEScan entity.
func (cs *CVEScan) QueryEntry() *ReleaseEntryQuery {
	return (&CVEScanClient{config: cs.config}).QueryEntry(cs)
}

// QueryVulnerabilities queries the "vulnerabilities" edge of the CVEScan entity.
func (cs *CVEScan) QueryVulnerabilities() *VulnerabilityQuery {
	return (&CVEScanClient{config: cs.config}).QueryVulnerabilities(cs)
}

// Update returns a builder for updating this CVEScan.
// Note that you need to call CVEScan.Unwrap() before calling this method if this CVEScan
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CVEScan) Update() *CVEScanUpdateOne {
	return (&CVEScanClient{config: cs.config}).UpdateOne(cs)
}

// Unwrap unwraps the CVEScan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CVEScan) Unwrap() *CVEScan {
	tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CVEScan is not a transactional entity")
	}
	cs.config.driver = tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CVEScan) String() string {
	var builder strings.Builder
	builder.WriteString("CVEScan(")
	builder.WriteString(fmt.Sprintf("id=%v", cs.ID))
	builder.WriteString(", tool=")
	builder.WriteString(cs.Tool)
	builder.WriteByte(')')
	return builder.String()
}

// CVEScans is a parsable slice of CVEScan.
type CVEScans []*CVEScan

func (cs CVEScans) config(cfg config) {
	for _i := range cs {
		cs[_i].config = cfg
	}
}
