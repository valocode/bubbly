// Code generated by entc, DO NOT EDIT.

package vulnerability

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/valocode/bubbly/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Vid applies equality check predicate on the "vid" field. It's identical to VidEQ.
func Vid(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVid), v))
	})
}

// Summary applies equality check predicate on the "summary" field. It's identical to SummaryEQ.
func Summary(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// SeverityScore applies equality check predicate on the "severity_score" field. It's identical to SeverityScoreEQ.
func SeverityScore(v float64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeverityScore), v))
	})
}

// Published applies equality check predicate on the "published" field. It's identical to PublishedEQ.
func Published(v time.Time) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublished), v))
	})
}

// Modified applies equality check predicate on the "modified" field. It's identical to ModifiedEQ.
func Modified(v time.Time) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModified), v))
	})
}

// VidEQ applies the EQ predicate on the "vid" field.
func VidEQ(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVid), v))
	})
}

// VidNEQ applies the NEQ predicate on the "vid" field.
func VidNEQ(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVid), v))
	})
}

// VidIn applies the In predicate on the "vid" field.
func VidIn(vs ...string) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVid), v...))
	})
}

// VidNotIn applies the NotIn predicate on the "vid" field.
func VidNotIn(vs ...string) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVid), v...))
	})
}

// VidGT applies the GT predicate on the "vid" field.
func VidGT(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVid), v))
	})
}

// VidGTE applies the GTE predicate on the "vid" field.
func VidGTE(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVid), v))
	})
}

// VidLT applies the LT predicate on the "vid" field.
func VidLT(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVid), v))
	})
}

// VidLTE applies the LTE predicate on the "vid" field.
func VidLTE(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVid), v))
	})
}

// VidContains applies the Contains predicate on the "vid" field.
func VidContains(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVid), v))
	})
}

// VidHasPrefix applies the HasPrefix predicate on the "vid" field.
func VidHasPrefix(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVid), v))
	})
}

// VidHasSuffix applies the HasSuffix predicate on the "vid" field.
func VidHasSuffix(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVid), v))
	})
}

// VidEqualFold applies the EqualFold predicate on the "vid" field.
func VidEqualFold(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVid), v))
	})
}

// VidContainsFold applies the ContainsFold predicate on the "vid" field.
func VidContainsFold(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVid), v))
	})
}

// SummaryEQ applies the EQ predicate on the "summary" field.
func SummaryEQ(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// SummaryNEQ applies the NEQ predicate on the "summary" field.
func SummaryNEQ(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSummary), v))
	})
}

// SummaryIn applies the In predicate on the "summary" field.
func SummaryIn(vs ...string) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSummary), v...))
	})
}

// SummaryNotIn applies the NotIn predicate on the "summary" field.
func SummaryNotIn(vs ...string) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSummary), v...))
	})
}

// SummaryGT applies the GT predicate on the "summary" field.
func SummaryGT(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSummary), v))
	})
}

// SummaryGTE applies the GTE predicate on the "summary" field.
func SummaryGTE(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSummary), v))
	})
}

// SummaryLT applies the LT predicate on the "summary" field.
func SummaryLT(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSummary), v))
	})
}

// SummaryLTE applies the LTE predicate on the "summary" field.
func SummaryLTE(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSummary), v))
	})
}

// SummaryContains applies the Contains predicate on the "summary" field.
func SummaryContains(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSummary), v))
	})
}

// SummaryHasPrefix applies the HasPrefix predicate on the "summary" field.
func SummaryHasPrefix(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSummary), v))
	})
}

// SummaryHasSuffix applies the HasSuffix predicate on the "summary" field.
func SummaryHasSuffix(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSummary), v))
	})
}

// SummaryIsNil applies the IsNil predicate on the "summary" field.
func SummaryIsNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSummary)))
	})
}

// SummaryNotNil applies the NotNil predicate on the "summary" field.
func SummaryNotNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSummary)))
	})
}

// SummaryEqualFold applies the EqualFold predicate on the "summary" field.
func SummaryEqualFold(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSummary), v))
	})
}

// SummaryContainsFold applies the ContainsFold predicate on the "summary" field.
func SummaryContainsFold(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSummary), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// SeverityScoreEQ applies the EQ predicate on the "severity_score" field.
func SeverityScoreEQ(v float64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeverityScore), v))
	})
}

// SeverityScoreNEQ applies the NEQ predicate on the "severity_score" field.
func SeverityScoreNEQ(v float64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSeverityScore), v))
	})
}

// SeverityScoreIn applies the In predicate on the "severity_score" field.
func SeverityScoreIn(vs ...float64) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSeverityScore), v...))
	})
}

// SeverityScoreNotIn applies the NotIn predicate on the "severity_score" field.
func SeverityScoreNotIn(vs ...float64) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSeverityScore), v...))
	})
}

// SeverityScoreGT applies the GT predicate on the "severity_score" field.
func SeverityScoreGT(v float64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSeverityScore), v))
	})
}

// SeverityScoreGTE applies the GTE predicate on the "severity_score" field.
func SeverityScoreGTE(v float64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSeverityScore), v))
	})
}

// SeverityScoreLT applies the LT predicate on the "severity_score" field.
func SeverityScoreLT(v float64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSeverityScore), v))
	})
}

// SeverityScoreLTE applies the LTE predicate on the "severity_score" field.
func SeverityScoreLTE(v float64) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSeverityScore), v))
	})
}

// SeverityEQ applies the EQ predicate on the "severity" field.
func SeverityEQ(v Severity) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeverity), v))
	})
}

// SeverityNEQ applies the NEQ predicate on the "severity" field.
func SeverityNEQ(v Severity) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSeverity), v))
	})
}

// SeverityIn applies the In predicate on the "severity" field.
func SeverityIn(vs ...Severity) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSeverity), v...))
	})
}

// SeverityNotIn applies the NotIn predicate on the "severity" field.
func SeverityNotIn(vs ...Severity) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSeverity), v...))
	})
}

// PublishedEQ applies the EQ predicate on the "published" field.
func PublishedEQ(v time.Time) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublished), v))
	})
}

// PublishedNEQ applies the NEQ predicate on the "published" field.
func PublishedNEQ(v time.Time) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPublished), v))
	})
}

// PublishedIn applies the In predicate on the "published" field.
func PublishedIn(vs ...time.Time) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPublished), v...))
	})
}

// PublishedNotIn applies the NotIn predicate on the "published" field.
func PublishedNotIn(vs ...time.Time) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPublished), v...))
	})
}

// PublishedGT applies the GT predicate on the "published" field.
func PublishedGT(v time.Time) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPublished), v))
	})
}

// PublishedGTE applies the GTE predicate on the "published" field.
func PublishedGTE(v time.Time) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPublished), v))
	})
}

// PublishedLT applies the LT predicate on the "published" field.
func PublishedLT(v time.Time) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPublished), v))
	})
}

// PublishedLTE applies the LTE predicate on the "published" field.
func PublishedLTE(v time.Time) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPublished), v))
	})
}

// PublishedIsNil applies the IsNil predicate on the "published" field.
func PublishedIsNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPublished)))
	})
}

// PublishedNotNil applies the NotNil predicate on the "published" field.
func PublishedNotNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPublished)))
	})
}

// ModifiedEQ applies the EQ predicate on the "modified" field.
func ModifiedEQ(v time.Time) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModified), v))
	})
}

// ModifiedNEQ applies the NEQ predicate on the "modified" field.
func ModifiedNEQ(v time.Time) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModified), v))
	})
}

// ModifiedIn applies the In predicate on the "modified" field.
func ModifiedIn(vs ...time.Time) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldModified), v...))
	})
}

// ModifiedNotIn applies the NotIn predicate on the "modified" field.
func ModifiedNotIn(vs ...time.Time) predicate.Vulnerability {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vulnerability(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldModified), v...))
	})
}

// ModifiedGT applies the GT predicate on the "modified" field.
func ModifiedGT(v time.Time) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModified), v))
	})
}

// ModifiedGTE applies the GTE predicate on the "modified" field.
func ModifiedGTE(v time.Time) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModified), v))
	})
}

// ModifiedLT applies the LT predicate on the "modified" field.
func ModifiedLT(v time.Time) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModified), v))
	})
}

// ModifiedLTE applies the LTE predicate on the "modified" field.
func ModifiedLTE(v time.Time) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModified), v))
	})
}

// ModifiedIsNil applies the IsNil predicate on the "modified" field.
func ModifiedIsNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldModified)))
	})
}

// ModifiedNotNil applies the NotNil predicate on the "modified" field.
func ModifiedNotNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldModified)))
	})
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMetadata)))
	})
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMetadata)))
	})
}

// HasComponents applies the HasEdge predicate on the "components" edge.
func HasComponents() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ComponentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ComponentsTable, ComponentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasComponentsWith applies the HasEdge predicate on the "components" edge with a given conditions (other predicates).
func HasComponentsWith(preds ...predicate.Component) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ComponentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ComponentsTable, ComponentsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReviews applies the HasEdge predicate on the "reviews" edge.
func HasReviews() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReviewsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReviewsTable, ReviewsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReviewsWith applies the HasEdge predicate on the "reviews" edge with a given conditions (other predicates).
func HasReviewsWith(preds ...predicate.VulnerabilityReview) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReviewsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReviewsTable, ReviewsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInstances applies the HasEdge predicate on the "instances" edge.
func HasInstances() predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InstancesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, InstancesTable, InstancesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstancesWith applies the HasEdge predicate on the "instances" edge with a given conditions (other predicates).
func HasInstancesWith(preds ...predicate.ReleaseVulnerability) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InstancesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, InstancesTable, InstancesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Vulnerability) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Vulnerability) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Vulnerability) predicate.Vulnerability {
	return predicate.Vulnerability(func(s *sql.Selector) {
		p(s.Not())
	})
}
