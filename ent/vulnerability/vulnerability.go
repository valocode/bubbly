// Code generated by entc, DO NOT EDIT.

package vulnerability

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the vulnerability type in the database.
	Label = "vulnerability"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVid holds the string denoting the vid field in the database.
	FieldVid = "vid"
	// FieldSummary holds the string denoting the summary field in the database.
	FieldSummary = "summary"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSeverityScore holds the string denoting the severity_score field in the database.
	FieldSeverityScore = "severity_score"
	// FieldSeverity holds the string denoting the severity field in the database.
	FieldSeverity = "severity"
	// FieldPublished holds the string denoting the published field in the database.
	FieldPublished = "published"
	// FieldModified holds the string denoting the modified field in the database.
	FieldModified = "modified"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeComponents holds the string denoting the components edge name in mutations.
	EdgeComponents = "components"
	// EdgeReviews holds the string denoting the reviews edge name in mutations.
	EdgeReviews = "reviews"
	// EdgeInstances holds the string denoting the instances edge name in mutations.
	EdgeInstances = "instances"
	// Table holds the table name of the vulnerability in the database.
	Table = "vulnerability"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "vulnerability"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organization"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "vulnerability_owner"
	// ComponentsTable is the table that holds the components relation/edge. The primary key declared below.
	ComponentsTable = "component_vulnerabilities"
	// ComponentsInverseTable is the table name for the Component entity.
	// It exists in this package in order to avoid circular dependency with the "component" package.
	ComponentsInverseTable = "component"
	// ReviewsTable is the table that holds the reviews relation/edge.
	ReviewsTable = "vulnerability_review"
	// ReviewsInverseTable is the table name for the VulnerabilityReview entity.
	// It exists in this package in order to avoid circular dependency with the "vulnerabilityreview" package.
	ReviewsInverseTable = "vulnerability_review"
	// ReviewsColumn is the table column denoting the reviews relation/edge.
	ReviewsColumn = "vulnerability_review_vulnerability"
	// InstancesTable is the table that holds the instances relation/edge.
	InstancesTable = "release_vulnerability"
	// InstancesInverseTable is the table name for the ReleaseVulnerability entity.
	// It exists in this package in order to avoid circular dependency with the "releasevulnerability" package.
	InstancesInverseTable = "release_vulnerability"
	// InstancesColumn is the table column denoting the instances relation/edge.
	InstancesColumn = "release_vulnerability_vulnerability"
)

// Columns holds all SQL columns for vulnerability fields.
var Columns = []string{
	FieldID,
	FieldVid,
	FieldSummary,
	FieldDescription,
	FieldSeverityScore,
	FieldSeverity,
	FieldPublished,
	FieldModified,
	FieldMetadata,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "vulnerability"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"vulnerability_owner",
}

var (
	// ComponentsPrimaryKey and ComponentsColumn2 are the table columns denoting the
	// primary key for the components relation (M2M).
	ComponentsPrimaryKey = []string{"component_id", "vulnerability_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/valocode/bubbly/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// VidValidator is a validator for the "vid" field. It is called by the builders before save.
	VidValidator func(string) error
	// DefaultSeverityScore holds the default value on creation for the "severity_score" field.
	DefaultSeverityScore float64
)

// Severity defines the type for the "severity" enum field.
type Severity string

// SeverityNone is the default value of the Severity enum.
const DefaultSeverity = SeverityNone

// Severity values.
const (
	SeverityNone     Severity = "None"
	SeverityLow      Severity = "Low"
	SeverityMedium   Severity = "Medium"
	SeverityHigh     Severity = "High"
	SeverityCritical Severity = "Critical"
)

func (s Severity) String() string {
	return string(s)
}

// SeverityValidator is a validator for the "severity" field enum values. It is called by the builders before save.
func SeverityValidator(s Severity) error {
	switch s {
	case SeverityNone, SeverityLow, SeverityMedium, SeverityHigh, SeverityCritical:
		return nil
	default:
		return fmt.Errorf("vulnerability: invalid enum value for severity field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (s Severity) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(s.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (s *Severity) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*s = Severity(str)
	if err := SeverityValidator(*s); err != nil {
		return fmt.Errorf("%s is not a valid Severity", str)
	}
	return nil
}
