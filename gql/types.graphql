# #######################################
# Code is generated using a custom ent extension.
# DO NOT MODIFY.
# #######################################

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
	| FIELD_DEFINITION

scalar Map

"""
Maps a Time GraphQL scalar to a Go time.Time struct.
Generated by ent.
"""
scalar Time

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
Generated by ent.
"""
scalar Cursor

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

enum OrderDirection {
	ASC
	DESC
  }

"""
Adapter
"""
type AdapterBase {
	id: ID!
	name: String
	tag: String
	module: String
}

enum AdapterOrderField {
	name
	tag
}

input AdapterOrder {
	direction: OrderDirection!
	field: AdapterOrderField!
}

"""
Artifact
"""
type ArtifactBase {
	id: ID!
	name: String
	sha256: String
	type: ArtifactType
	time: Time
	metadata: Map
}

enum ArtifactOrderField {
	name
	sha256
	type
	time
}

input ArtifactOrder {
	direction: OrderDirection!
	field: ArtifactOrderField!
}

enum ArtifactType {
	docker
	file
}

"""
CodeIssue
"""
type CodeIssueBase {
	id: ID!
	rule_id: String
	message: String
	severity: CodeIssueSeverity
	type: CodeIssueType
	metadata: Map
}

enum CodeIssueOrderField {
	rule_id
	severity
	type
}

input CodeIssueOrder {
	direction: OrderDirection!
	field: CodeIssueOrderField!
}

enum CodeIssueSeverity {
	low
	medium
	high
}

enum CodeIssueType {
	style
	security
	bug
}

"""
CodeScan
"""
type CodeScanBase {
	id: ID!
	tool: String
	time: Time
	metadata: Map
}

enum CodeScanOrderField {
	tool
	time
}

input CodeScanOrder {
	direction: OrderDirection!
	field: CodeScanOrderField!
}

"""
Component
"""
type ComponentBase {
	id: ID!
	name: String
	vendor: String
	version: String
	description: String
	url: String
	metadata: Map
}

enum ComponentOrderField {
	name
	vendor
	version
}

input ComponentOrder {
	direction: OrderDirection!
	field: ComponentOrderField!
}

"""
Event
"""
type EventBase {
	id: ID!
	message: String
	status: EventStatus
	type: EventType
	time: Time
}

enum EventOrderField {
	type
	time
}

input EventOrder {
	direction: OrderDirection!
	field: EventOrderField!
}

enum EventStatus {
	ok
	error
}

enum EventType {
	evaluate_release
	monitor
}

"""
GitCommit
"""
type GitCommitBase {
	id: ID!
	hash: String
	branch: String
	tag: String
	time: Time
}

enum GitCommitOrderField {
	hash
	branch
	tag
	time
}

input GitCommitOrder {
	direction: OrderDirection!
	field: GitCommitOrderField!
}

"""
License
"""
type LicenseBase {
	id: ID!
	license_id: String
	name: String
}

enum LicenseOrderField {
	license_id
	name
}

input LicenseOrder {
	direction: OrderDirection!
	field: LicenseOrderField!
}

"""
Organization
"""
type OrganizationBase {
	id: ID!
	name: String
}

"""
Project
"""
type ProjectBase {
	id: ID!
	name: String
}

enum ProjectOrderField {
	name
}

input ProjectOrder {
	direction: OrderDirection!
	field: ProjectOrderField!
}

"""
Release
"""
type ReleaseBase {
	id: ID!
	name: String
	version: String
}

enum ReleaseOrderField {
	name
	version
}

input ReleaseOrder {
	direction: OrderDirection!
	field: ReleaseOrderField!
}

"""
ReleaseComponent
"""
type ReleaseComponentBase {
	id: ID!
	type: ReleaseComponentType
}

enum ReleaseComponentType {
	embedded
	distributed
	development
}

"""
ReleaseEntry
"""
type ReleaseEntryBase {
	id: ID!
	type: ReleaseEntryType
	time: Time
}

enum ReleaseEntryOrderField {
	type
	time
}

input ReleaseEntryOrder {
	direction: OrderDirection!
	field: ReleaseEntryOrderField!
}

enum ReleaseEntryType {
	artifact
	deploy
	code_scan
	test_run
}

"""
ReleaseLicense
"""
type ReleaseLicenseBase {
	id: ID!
}

"""
ReleasePolicy
"""
type ReleasePolicyBase {
	id: ID!
	name: String
	module: String
}

enum ReleasePolicyOrderField {
	name
}

input ReleasePolicyOrder {
	direction: OrderDirection!
	field: ReleasePolicyOrderField!
}

"""
ReleasePolicyViolation
"""
type ReleasePolicyViolationBase {
	id: ID!
	message: String
	type: ReleasePolicyViolationType
	severity: ReleasePolicyViolationSeverity
}

enum ReleasePolicyViolationType {
	require
	deny
}

enum ReleasePolicyViolationSeverity {
	suggestion
	warning
	blocking
}

"""
ReleaseVulnerability
"""
type ReleaseVulnerabilityBase {
	id: ID!
}

"""
Repo
"""
type RepoBase {
	id: ID!
	name: String
	default_branch: String
}

enum RepoOrderField {
	name
}

input RepoOrder {
	direction: OrderDirection!
	field: RepoOrderField!
}

"""
SPDXLicense
"""
type SPDXLicenseBase {
	id: ID!
	license_id: String
	name: String
	reference: String
	details_url: String
	is_osi_approved: Boolean
}

"""
TestCase
"""
type TestCaseBase {
	id: ID!
	name: String
	result: Boolean
	message: String
	elapsed: Float
	metadata: Map
}

enum TestCaseOrderField {
	name
}

input TestCaseOrder {
	direction: OrderDirection!
	field: TestCaseOrderField!
}

"""
TestRun
"""
type TestRunBase {
	id: ID!
	tool: String
	time: Time
	metadata: Map
}

enum TestRunOrderField {
	tool
	time
}

input TestRunOrder {
	direction: OrderDirection!
	field: TestRunOrderField!
}

"""
Vulnerability
"""
type VulnerabilityBase {
	id: ID!
	vid: String
	summary: String
	description: String
	severity_score: Float
	severity: VulnerabilitySeverity
	published: Time
	modified: Time
	metadata: Map
}

enum VulnerabilityOrderField {
	vid
	severity_score
	severity
	published
	modified
}

input VulnerabilityOrder {
	direction: OrderDirection!
	field: VulnerabilityOrderField!
}

enum VulnerabilitySeverity {
	None
	Low
	Medium
	High
	Critical
}

"""
VulnerabilityReview
"""
type VulnerabilityReviewBase {
	id: ID!
	note: String
	decision: VulnerabilityReviewDecision
}

enum VulnerabilityReviewOrderField {
	note
}

input VulnerabilityReviewOrder {
	direction: OrderDirection!
	field: VulnerabilityReviewOrderField!
}

enum VulnerabilityReviewDecision {
	exploitable
	in_progress
	invalid
	mitigated
	ineffective
	patched
}

