// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"time"

	"github.com/valocode/bubbly/ent/artifact"
	"github.com/valocode/bubbly/ent/codeissue"
	"github.com/valocode/bubbly/ent/event"
	"github.com/valocode/bubbly/ent/releasecomponent"
	"github.com/valocode/bubbly/ent/releaseentry"
	"github.com/valocode/bubbly/ent/releasepolicyviolation"
	"github.com/valocode/bubbly/ent/vulnerability"
	"github.com/valocode/bubbly/ent/vulnerabilityreview"
)

// Adapter
type AdapterBase struct {
	ID     int     `json:"id"`
	Name   *string `json:"name"`
	Tag    *string `json:"tag"`
	Module *string `json:"module"`
}

// Artifact
type ArtifactBase struct {
	ID       int                    `json:"id"`
	Name     *string                `json:"name"`
	Sha256   *string                `json:"sha256"`
	Type     *artifact.Type         `json:"type"`
	Time     *time.Time             `json:"time"`
	Metadata map[string]interface{} `json:"metadata"`
}

// CodeIssue
type CodeIssueBase struct {
	ID       int                    `json:"id"`
	RuleID   *string                `json:"rule_id"`
	Message  *string                `json:"message"`
	Severity *codeissue.Severity    `json:"severity"`
	Type     *codeissue.Type        `json:"type"`
	Metadata map[string]interface{} `json:"metadata"`
}

// CodeScan
type CodeScanBase struct {
	ID       int                    `json:"id"`
	Tool     *string                `json:"tool"`
	Time     *time.Time             `json:"time"`
	Metadata map[string]interface{} `json:"metadata"`
}

// Component
type ComponentBase struct {
	ID          int                    `json:"id"`
	Name        *string                `json:"name"`
	Vendor      *string                `json:"vendor"`
	Version     *string                `json:"version"`
	Description *string                `json:"description"`
	URL         *string                `json:"url"`
	Metadata    map[string]interface{} `json:"metadata"`
}

// Event
type EventBase struct {
	ID      int           `json:"id"`
	Message *string       `json:"message"`
	Status  *event.Status `json:"status"`
	Type    *event.Type   `json:"type"`
	Time    *time.Time    `json:"time"`
}

// GitCommit
type GitCommitBase struct {
	ID     int        `json:"id"`
	Hash   *string    `json:"hash"`
	Branch *string    `json:"branch"`
	Tag    *string    `json:"tag"`
	Time   *time.Time `json:"time"`
}

// License
type LicenseBase struct {
	ID        int     `json:"id"`
	LicenseID *string `json:"license_id"`
	Name      *string `json:"name"`
}

// Organization
type OrganizationBase struct {
	ID   int     `json:"id"`
	Name *string `json:"name"`
}

// Project
type ProjectBase struct {
	ID   int     `json:"id"`
	Name *string `json:"name"`
}

// Release
type ReleaseBase struct {
	ID      int     `json:"id"`
	Name    *string `json:"name"`
	Version *string `json:"version"`
}

// ReleaseComponent
type ReleaseComponentBase struct {
	ID   int                    `json:"id"`
	Type *releasecomponent.Type `json:"type"`
}

// ReleaseEntry
type ReleaseEntryBase struct {
	ID   int                `json:"id"`
	Type *releaseentry.Type `json:"type"`
	Time *time.Time         `json:"time"`
}

// ReleaseLicense
type ReleaseLicenseBase struct {
	ID int `json:"id"`
}

// ReleasePolicy
type ReleasePolicyBase struct {
	ID     int     `json:"id"`
	Name   *string `json:"name"`
	Module *string `json:"module"`
}

// ReleasePolicyViolation
type ReleasePolicyViolationBase struct {
	ID       int                              `json:"id"`
	Message  *string                          `json:"message"`
	Type     *releasepolicyviolation.Type     `json:"type"`
	Severity *releasepolicyviolation.Severity `json:"severity"`
}

// ReleaseVulnerability
type ReleaseVulnerabilityBase struct {
	ID int `json:"id"`
}

// Repo
type RepoBase struct {
	ID            int     `json:"id"`
	Name          *string `json:"name"`
	DefaultBranch *string `json:"default_branch"`
}

// SPDXLicense
type SPDXLicenseBase struct {
	ID            int     `json:"id"`
	LicenseID     *string `json:"license_id"`
	Name          *string `json:"name"`
	Reference     *string `json:"reference"`
	DetailsURL    *string `json:"details_url"`
	IsOsiApproved *bool   `json:"is_osi_approved"`
}

// TestCase
type TestCaseBase struct {
	ID       int                    `json:"id"`
	Name     *string                `json:"name"`
	Result   *bool                  `json:"result"`
	Message  *string                `json:"message"`
	Elapsed  *float64               `json:"elapsed"`
	Metadata map[string]interface{} `json:"metadata"`
}

// TestRun
type TestRunBase struct {
	ID       int                    `json:"id"`
	Tool     *string                `json:"tool"`
	Time     *time.Time             `json:"time"`
	Metadata map[string]interface{} `json:"metadata"`
}

// Vulnerability
type VulnerabilityBase struct {
	ID            int                     `json:"id"`
	Vid           *string                 `json:"vid"`
	Summary       *string                 `json:"summary"`
	Description   *string                 `json:"description"`
	SeverityScore *float64                `json:"severity_score"`
	Severity      *vulnerability.Severity `json:"severity"`
	Published     *time.Time              `json:"published"`
	Modified      *time.Time              `json:"modified"`
	Metadata      map[string]interface{}  `json:"metadata"`
}

// VulnerabilityReview
type VulnerabilityReviewBase struct {
	ID       int                           `json:"id"`
	Note     *string                       `json:"note"`
	Decision *vulnerabilityreview.Decision `json:"decision"`
}
