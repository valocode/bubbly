"""
Maps a Time GraphQL scalar to a Go time.Time struct.
Generated by ent.
"""
scalar Time

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
Generated by ent.
"""
scalar Cursor

interface Node {
  id: ID!
}

enum ReleaseEntryType {
  artifact
  deploy
  code_scan
  test_run
}

enum ReleaseEntryOrderField {
  type
  time
}

enum ReleasePolicyOrderField {
  name
}

enum CodeIssueType {
  style
  security
  bug
}

enum ComponentOrderField {
  name
  vendor
  version
}

enum ReleasePolicyViolationType {
  require
  deny
}

enum ReleasePolicyViolationSeverity {
  suggestion
  warning
  blocking
}

enum VulnerabilityReviewDecision {
  exploitable
  in_progress
  invalid
  mitigated
  ineffective
  patched
}

enum VulnerabilityReviewOrderField {
  name
}

enum OrderDirection {
  ASC
  DESC
}

enum CodeScanOrderField {
  tool
  time
}

enum ReleaseStatus {
  pending
  ready
  blocked
}

enum ProjectOrderField {
  name
}

enum GitCommitOrderField {
  hash
  branch
  tag
  time
}

enum LicenseOrderField {
  spdx_id
  name
}

enum TestCaseOrderField {
  name
}

enum TestRunOrderField {
  tool
  time
}

enum VulnerabilityOrderField {
  vid
  severity_score
  severity
  published
  modified
}

enum ArtifactType {
  docker
  file
}

enum ReleaseComponentType {
  embedded
  distributed
  development
}

enum ArtifactOrderField {
  name
  sha256
  type
  time
}

enum CodeIssueSeverity {
  low
  medium
  high
}

enum ReleaseOrderField {
  name
  version
}

enum RepoOrderField {
  name
}

enum VulnerabilitySeverity {
  None
  Low
  Medium
  High
  Critical
}

enum AdapterOrderField {
  name
  tag
}

enum CodeIssueOrderField {
  rule_id
  severity
  type
}

"""
ProjectConnection supports the relay edge specification for node Project in the ent schema.
Generated by ent.
"""
type ProjectEdge {
  node: Project
  cursor: Cursor!
}

"""
ReleaseEntryConnection supports the relay connection specification for node ReleaseEntry in the ent schema.
Generated by ent.
"""
type ReleaseEntryConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseEntryEdge]
}

"""
CodeIssue represents the node CodeIssue in the ent schema.
Generated by ent.
"""
type CodeIssue implements Node {
  id: ID!
  rule_id: String
  message: String
  severity: CodeIssueSeverity
  type: CodeIssueType
  metadata: Map
  scan: CodeScan!
}

"""
CodeIssueConnection supports the relay connection specification for node CodeIssue in the ent schema.
Generated by ent.
"""
type CodeIssueConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CodeIssueEdge]
}

"""
ReleaseVulnerabilityConnection supports the relay connection specification for node ReleaseVulnerability in the ent schema.
Generated by ent.
"""
type ReleaseVulnerabilityConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseVulnerabilityEdge]
}

"""
VulnerabilityReview represents the node VulnerabilityReview in the ent schema.
Generated by ent.
"""
type VulnerabilityReview implements Node {
  id: ID!
  name: String
  decision: VulnerabilityReviewDecision
  vulnerability: Vulnerability!
  projects: [Project]
  repos: [Repo]
  releases: [Release]
  instances: [ReleaseVulnerability]
}

"""
ProjectConnection supports the relay connection specification for node Project in the ent schema.
Generated by ent.
"""
type ProjectConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ProjectEdge]
}

"""
ReleasePolicyConnection supports the relay connection specification for node ReleasePolicy in the ent schema.
Generated by ent.
"""
type ReleasePolicyConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleasePolicyEdge]
}

"""
ReleasePolicyViolationConnection supports the relay edge specification for node ReleasePolicyViolation in the ent schema.
Generated by ent.
"""
type ReleasePolicyViolationEdge {
  node: ReleasePolicyViolation
  cursor: Cursor!
}

"""
TestRunConnection supports the relay edge specification for node TestRun in the ent schema.
Generated by ent.
"""
type TestRunEdge {
  node: TestRun
  cursor: Cursor!
}

"""
ReleaseVulnerabilityConnection supports the relay edge specification for node ReleaseVulnerability in the ent schema.
Generated by ent.
"""
type ReleaseVulnerabilityEdge {
  node: ReleaseVulnerability
  cursor: Cursor!
}

"""
AdapterConnection supports the relay edge specification for node Adapter in the ent schema.
Generated by ent.
"""
type AdapterEdge {
  node: Adapter
  cursor: Cursor!
}

"""
ReleaseConnection supports the relay edge specification for node Release in the ent schema.
Generated by ent.
"""
type ReleaseEdge {
  node: Release
  cursor: Cursor!
}

"""
ReleaseLicense represents the node ReleaseLicense in the ent schema.
Generated by ent.
"""
type ReleaseLicense implements Node {
  id: ID!
  license: License!
  component: ReleaseComponent
  release: Release!
  scans: [CodeScan]
}

"""
ReleaseLicenseConnection supports the relay edge specification for node ReleaseLicense in the ent schema.
Generated by ent.
"""
type ReleaseLicenseEdge {
  node: ReleaseLicense
  cursor: Cursor!
}

"""
ReleasePolicy represents the node ReleasePolicy in the ent schema.
Generated by ent.
"""
type ReleasePolicy implements Node {
  id: ID!
  name: String
  module: String
  owner: Organization!
  projects: [Project]
  repos: [Repo]
  violations: [ReleasePolicyViolation]
}

"""
ArtifactConnection supports the relay connection specification for node Artifact in the ent schema.
Generated by ent.
"""
type ArtifactConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ArtifactEdge]
}

"""
CodeIssueConnection supports the relay edge specification for node CodeIssue in the ent schema.
Generated by ent.
"""
type CodeIssueEdge {
  node: CodeIssue
  cursor: Cursor!
}

"""
TestCaseConnection supports the relay edge specification for node TestCase in the ent schema.
Generated by ent.
"""
type TestCaseEdge {
  node: TestCase
  cursor: Cursor!
}

"""
VulnerabilityReviewConnection supports the relay edge specification for node VulnerabilityReview in the ent schema.
Generated by ent.
"""
type VulnerabilityReviewEdge {
  node: VulnerabilityReview
  cursor: Cursor!
}

"""
LicenseUse represents the node LicenseUse in the ent schema.
Generated by ent.
"""
type LicenseUse implements Node {
  id: ID!
  license: License!
}

"""
TestCase represents the node TestCase in the ent schema.
Generated by ent.
"""
type TestCase implements Node {
  id: ID!
  name: String
  result: Boolean
  message: String
  elapsed: Float
  metadata: Map
  run: TestRun!
}

"""
TestRunConnection supports the relay connection specification for node TestRun in the ent schema.
Generated by ent.
"""
type TestRunConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TestRunEdge]
}

"""
VulnerabilityConnection supports the relay edge specification for node Vulnerability in the ent schema.
Generated by ent.
"""
type VulnerabilityEdge {
  node: Vulnerability
  cursor: Cursor!
}

"""
VulnerabilityReviewConnection supports the relay connection specification for node VulnerabilityReview in the ent schema.
Generated by ent.
"""
type VulnerabilityReviewConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [VulnerabilityReviewEdge]
}

"""
AdapterConnection supports the relay connection specification for node Adapter in the ent schema.
Generated by ent.
"""
type AdapterConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AdapterEdge]
}

"""
ComponentConnection supports the relay connection specification for node Component in the ent schema.
Generated by ent.
"""
type ComponentConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ComponentEdge]
}

"""
LicenseConnection supports the relay edge specification for node License in the ent schema.
Generated by ent.
"""
type LicenseEdge {
  node: License
  cursor: Cursor!
}

"""
Release represents the node Release in the ent schema.
Generated by ent.
"""
type Release implements Node {
  id: ID!
  name: String
  version: String
  status: ReleaseStatus
  subreleases: [Release]
  dependencies: [Release]
  commit: GitCommit!
  head_of: Repo
  log: [ReleaseEntry]
  violations: [ReleasePolicyViolation]
  artifacts: [Artifact]
  components: [ReleaseComponent]
  vulnerabilities: [ReleaseVulnerability]
  code_scans: [CodeScan]
  test_runs: [TestRun]
  vulnerability_reviews: [VulnerabilityReview]
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

"""
RepoConnection supports the relay connection specification for node Repo in the ent schema.
Generated by ent.
"""
type RepoConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [RepoEdge]
}

"""
ReleaseLicenseConnection supports the relay connection specification for node ReleaseLicense in the ent schema.
Generated by ent.
"""
type ReleaseLicenseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseLicenseEdge]
}

"""
ReleaseVulnerability represents the node ReleaseVulnerability in the ent schema.
Generated by ent.
"""
type ReleaseVulnerability implements Node {
  id: ID!
  vulnerability: Vulnerability!
  component: ReleaseComponent
  release: Release!
  reviews: [VulnerabilityReview]
  scan: CodeScan
}

"""
Repo represents the node Repo in the ent schema.
Generated by ent.
"""
type Repo implements Node {
  id: ID!
  name: String
  default_branch: String
  owner: Organization!
  project: Project!
  head: Release
  commits: [GitCommit]
  vulnerability_reviews: [VulnerabilityReview]
  policies: [ReleasePolicy]
}

"""
CodeScanConnection supports the relay connection specification for node CodeScan in the ent schema.
Generated by ent.
"""
type CodeScanConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CodeScanEdge]
}

"""
CodeScanConnection supports the relay edge specification for node CodeScan in the ent schema.
Generated by ent.
"""
type CodeScanEdge {
  node: CodeScan
  cursor: Cursor!
}

"""
ComponentConnection supports the relay edge specification for node Component in the ent schema.
Generated by ent.
"""
type ComponentEdge {
  node: Component
  cursor: Cursor!
}

"""
OrganizationConnection supports the relay connection specification for node Organization in the ent schema.
Generated by ent.
"""
type OrganizationConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [OrganizationEdge]
}

"""
Project represents the node Project in the ent schema.
Generated by ent.
"""
type Project implements Node {
  id: ID!
  name: String
  owner: Organization!
  repos: [Repo]
  vulnerability_reviews: [VulnerabilityReview]
  policies: [ReleasePolicy]
}

"""
TestCaseConnection supports the relay connection specification for node TestCase in the ent schema.
Generated by ent.
"""
type TestCaseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TestCaseEdge]
}

"""
CodeScan represents the node CodeScan in the ent schema.
Generated by ent.
"""
type CodeScan implements Node {
  id: ID!
  tool: String
  time: Time
  metadata: Map
  release: Release!
  entry: ReleaseEntry
  issues: [CodeIssue]
  vulnerabilities: [ReleaseVulnerability]
  components: [ReleaseComponent]
}

"""
GitCommitConnection supports the relay edge specification for node GitCommit in the ent schema.
Generated by ent.
"""
type GitCommitEdge {
  node: GitCommit
  cursor: Cursor!
}

"""
ReleaseConnection supports the relay connection specification for node Release in the ent schema.
Generated by ent.
"""
type ReleaseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseEdge]
}

"""
ReleasePolicyViolation represents the node ReleasePolicyViolation in the ent schema.
Generated by ent.
"""
type ReleasePolicyViolation implements Node {
  id: ID!
  message: String
  type: ReleasePolicyViolationType
  severity: ReleasePolicyViolationSeverity
  policy: ReleasePolicy!
  release: Release!
}

"""
ReleasePolicyViolationConnection supports the relay connection specification for node ReleasePolicyViolation in the ent schema.
Generated by ent.
"""
type ReleasePolicyViolationConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleasePolicyViolationEdge]
}

"""
GitCommit represents the node GitCommit in the ent schema.
Generated by ent.
"""
type GitCommit implements Node {
  id: ID!
  hash: String
  branch: String
  tag: String
  time: Time
  repo: Repo!
  release: Release
}

"""
OrganizationConnection supports the relay edge specification for node Organization in the ent schema.
Generated by ent.
"""
type OrganizationEdge {
  node: Organization
  cursor: Cursor!
}

"""
ReleaseEntry represents the node ReleaseEntry in the ent schema.
Generated by ent.
"""
type ReleaseEntry implements Node {
  id: ID!
  type: ReleaseEntryType
  time: Time
  artifact: Artifact
  code_scan: CodeScan
  test_run: TestRun
  release: Release!
}

"""
RepoConnection supports the relay edge specification for node Repo in the ent schema.
Generated by ent.
"""
type RepoEdge {
  node: Repo
  cursor: Cursor!
}

"""
Adapter represents the node Adapter in the ent schema.
Generated by ent.
"""
type Adapter implements Node {
  id: ID!
  name: String
  tag: String
  module: String
  owner: Organization!
}

"""
ReleaseComponent represents the node ReleaseComponent in the ent schema.
Generated by ent.
"""
type ReleaseComponent implements Node {
  id: ID!
  type: ReleaseComponentType
  release: Release!
  scans: [CodeScan!]
  component: Component!
  vulnerabilities: [ReleaseVulnerability]
}

"""
Vulnerability represents the node Vulnerability in the ent schema.
Generated by ent.
"""
type Vulnerability implements Node {
  id: ID!
  vid: String
  summary: String
  description: String
  severity_score: Float
  severity: VulnerabilitySeverity
  published: Time
  modified: Time
  metadata: Map
  owner: Organization!
  components: [Component]
  reviews: [VulnerabilityReview]
  instances: [ReleaseVulnerability]
}

"""
GitCommitConnection supports the relay connection specification for node GitCommit in the ent schema.
Generated by ent.
"""
type GitCommitConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [GitCommitEdge]
}

"""
LicenseUseConnection supports the relay edge specification for node LicenseUse in the ent schema.
Generated by ent.
"""
type LicenseUseEdge {
  node: LicenseUse
  cursor: Cursor!
}

"""
Artifact represents the node Artifact in the ent schema.
Generated by ent.
"""
type Artifact implements Node {
  id: ID!
  name: String
  sha256: String
  type: ArtifactType
  time: Time
  metadata: Map
  release: Release
  entry: ReleaseEntry
}

"""
ReleaseComponentConnection supports the relay edge specification for node ReleaseComponent in the ent schema.
Generated by ent.
"""
type ReleaseComponentEdge {
  node: ReleaseComponent
  cursor: Cursor!
}

"""
ReleasePolicyConnection supports the relay edge specification for node ReleasePolicy in the ent schema.
Generated by ent.
"""
type ReleasePolicyEdge {
  node: ReleasePolicy
  cursor: Cursor!
}

"""
TestRun represents the node TestRun in the ent schema.
Generated by ent.
"""
type TestRun implements Node {
  id: ID!
  tool: String
  time: Time
  metadata: Map
  release: Release!
  entry: ReleaseEntry
  tests: [TestCase]
}

"""
VulnerabilityConnection supports the relay connection specification for node Vulnerability in the ent schema.
Generated by ent.
"""
type VulnerabilityConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [VulnerabilityEdge]
}

"""
ArtifactConnection supports the relay edge specification for node Artifact in the ent schema.
Generated by ent.
"""
type ArtifactEdge {
  node: Artifact
  cursor: Cursor!
}

"""
Component represents the node Component in the ent schema.
Generated by ent.
"""
type Component implements Node {
  id: ID!
  name: String
  vendor: String
  version: String
  description: String
  url: String
  metadata: Map
  owner: Organization!
  vulnerabilities: [Vulnerability]
  licenses: [License]
  uses: [ReleaseComponent]
}

"""
ReleaseEntryConnection supports the relay edge specification for node ReleaseEntry in the ent schema.
Generated by ent.
"""
type ReleaseEntryEdge {
  node: ReleaseEntry
  cursor: Cursor!
}

"""
License represents the node License in the ent schema.
Generated by ent.
"""
type License implements Node {
  id: ID!
  spdx_id: String
  name: String
  reference: String
  details_url: String
  is_osi_approved: Boolean
  components: [Component]
  uses: [LicenseUse]
}

"""
LicenseConnection supports the relay connection specification for node License in the ent schema.
Generated by ent.
"""
type LicenseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [LicenseEdge]
}

"""
LicenseUseConnection supports the relay connection specification for node LicenseUse in the ent schema.
Generated by ent.
"""
type LicenseUseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [LicenseUseEdge]
}

"""
Organization represents the node Organization in the ent schema.
Generated by ent.
"""
type Organization implements Node {
  id: ID!
  name: String
  projects: [Project]
  repos: [Repo]
}

"""
ReleaseComponentConnection supports the relay connection specification for node ReleaseComponent in the ent schema.
Generated by ent.
"""
type ReleaseComponentConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseComponentEdge]
}

input AdapterOrder {
  direction: OrderDirection!
  field: AdapterOrderField
}

"""
CodeScanWhereInput is used for filtering CodeScan objects.
Input was generated by ent.
"""
input CodeScanWhereInput {
  not: CodeScanWhereInput
  and: [CodeScanWhereInput!]
  or: [CodeScanWhereInput!]
  
  """tool field predicates"""
  tool: String
  toolNEQ: String
  toolIn: [String!]
  toolNotIn: [String!]
  toolGT: String
  toolGTE: String
  toolLT: String
  toolLTE: String
  toolContains: String
  toolHasPrefix: String
  toolHasSuffix: String
  toolEqualFold: String
  toolContainsFold: String
  
  """time field predicates"""
  time: Time
  timeNEQ: Time
  timeIn: [Time!]
  timeNotIn: [Time!]
  timeGT: Time
  timeGTE: Time
  timeLT: Time
  timeLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
  
  """entry edge predicates"""
  hasEntry: Boolean
  hasEntryWith: [ReleaseEntryWhereInput!]
  
  """issues edge predicates"""
  hasIssues: Boolean
  hasIssuesWith: [CodeIssueWhereInput!]
  
  """vulnerabilities edge predicates"""
  hasVulnerabilities: Boolean
  hasVulnerabilitiesWith: [ReleaseVulnerabilityWhereInput!]
  
  """components edge predicates"""
  hasComponents: Boolean
  hasComponentsWith: [ReleaseComponentWhereInput!]
}

input ReleaseEntryOrder {
  direction: OrderDirection!
  field: ReleaseEntryOrderField
}

"""
RepoWhereInput is used for filtering Repo objects.
Input was generated by ent.
"""
input RepoWhereInput {
  not: RepoWhereInput
  and: [RepoWhereInput!]
  or: [RepoWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """default_branch field predicates"""
  defaultBranch: String
  defaultBranchNEQ: String
  defaultBranchIn: [String!]
  defaultBranchNotIn: [String!]
  defaultBranchGT: String
  defaultBranchGTE: String
  defaultBranchLT: String
  defaultBranchLTE: String
  defaultBranchContains: String
  defaultBranchHasPrefix: String
  defaultBranchHasSuffix: String
  defaultBranchEqualFold: String
  defaultBranchContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  
  """project edge predicates"""
  hasProject: Boolean
  hasProjectWith: [ProjectWhereInput!]
  
  """head edge predicates"""
  hasHead: Boolean
  hasHeadWith: [ReleaseWhereInput!]
  
  """commits edge predicates"""
  hasCommits: Boolean
  hasCommitsWith: [GitCommitWhereInput!]
  
  """vulnerability_reviews edge predicates"""
  hasVulnerabilityReviews: Boolean
  hasVulnerabilityReviewsWith: [VulnerabilityReviewWhereInput!]
  
  """policies edge predicates"""
  hasPolicies: Boolean
  hasPoliciesWith: [ReleasePolicyWhereInput!]
}

input ArtifactOrder {
  direction: OrderDirection!
  field: ArtifactOrderField
}

"""
AdapterWhereInput is used for filtering Adapter objects.
Input was generated by ent.
"""
input AdapterWhereInput {
  not: AdapterWhereInput
  and: [AdapterWhereInput!]
  or: [AdapterWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """tag field predicates"""
  tag: String
  tagNEQ: String
  tagIn: [String!]
  tagNotIn: [String!]
  tagGT: String
  tagGTE: String
  tagLT: String
  tagLTE: String
  tagContains: String
  tagHasPrefix: String
  tagHasSuffix: String
  tagEqualFold: String
  tagContainsFold: String
  
  """module field predicates"""
  module: String
  moduleNEQ: String
  moduleIn: [String!]
  moduleNotIn: [String!]
  moduleGT: String
  moduleGTE: String
  moduleLT: String
  moduleLTE: String
  moduleContains: String
  moduleHasPrefix: String
  moduleHasSuffix: String
  moduleEqualFold: String
  moduleContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
}

input ProjectOrder {
  direction: OrderDirection!
  field: ProjectOrderField
}

input TestCaseOrder {
  direction: OrderDirection!
  field: TestCaseOrderField
}

input LicenseOrder {
  direction: OrderDirection!
  field: LicenseOrderField
}

"""
ReleaseWhereInput is used for filtering Release objects.
Input was generated by ent.
"""
input ReleaseWhereInput {
  not: ReleaseWhereInput
  and: [ReleaseWhereInput!]
  or: [ReleaseWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """version field predicates"""
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionEqualFold: String
  versionContainsFold: String
  
  """status field predicates"""
  status: ReleaseStatus
  statusNEQ: ReleaseStatus
  statusIn: [ReleaseStatus!]
  statusNotIn: [ReleaseStatus!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """subreleases edge predicates"""
  hasSubreleases: Boolean
  hasSubreleasesWith: [ReleaseWhereInput!]
  
  """dependencies edge predicates"""
  hasDependencies: Boolean
  hasDependenciesWith: [ReleaseWhereInput!]
  
  """commit edge predicates"""
  hasCommit: Boolean
  hasCommitWith: [GitCommitWhereInput!]
  
  """head_of edge predicates"""
  hasHeadOf: Boolean
  hasHeadOfWith: [RepoWhereInput!]
  
  """log edge predicates"""
  hasLog: Boolean
  hasLogWith: [ReleaseEntryWhereInput!]
  
  """violations edge predicates"""
  hasViolations: Boolean
  hasViolationsWith: [ReleasePolicyViolationWhereInput!]
  
  """artifacts edge predicates"""
  hasArtifacts: Boolean
  hasArtifactsWith: [ArtifactWhereInput!]
  
  """components edge predicates"""
  hasComponents: Boolean
  hasComponentsWith: [ReleaseComponentWhereInput!]
  
  """vulnerabilities edge predicates"""
  hasVulnerabilities: Boolean
  hasVulnerabilitiesWith: [ReleaseVulnerabilityWhereInput!]
  
  """code_scans edge predicates"""
  hasCodeScans: Boolean
  hasCodeScansWith: [CodeScanWhereInput!]
  
  """test_runs edge predicates"""
  hasTestRuns: Boolean
  hasTestRunsWith: [TestRunWhereInput!]
  
  """vulnerability_reviews edge predicates"""
  hasVulnerabilityReviews: Boolean
  hasVulnerabilityReviewsWith: [VulnerabilityReviewWhereInput!]
}

"""
ReleaseVulnerabilityWhereInput is used for filtering ReleaseVulnerability objects.
Input was generated by ent.
"""
input ReleaseVulnerabilityWhereInput {
  not: ReleaseVulnerabilityWhereInput
  and: [ReleaseVulnerabilityWhereInput!]
  or: [ReleaseVulnerabilityWhereInput!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """vulnerability edge predicates"""
  hasVulnerability: Boolean
  hasVulnerabilityWith: [VulnerabilityWhereInput!]
  
  """component edge predicates"""
  hasComponent: Boolean
  hasComponentWith: [ReleaseComponentWhereInput!]
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
  
  """reviews edge predicates"""
  hasReviews: Boolean
  hasReviewsWith: [VulnerabilityReviewWhereInput!]
  
  """scan edge predicates"""
  hasScan: Boolean
  hasScanWith: [CodeScanWhereInput!]
}

input TestRunOrder {
  direction: OrderDirection!
  field: TestRunOrderField
}

"""
ReleaseLicenseWhereInput is used for filtering ReleaseLicense objects.
Input was generated by ent.
"""
input ReleaseLicenseWhereInput {
  not: ReleaseLicenseWhereInput
  and: [ReleaseLicenseWhereInput!]
  or: [ReleaseLicenseWhereInput!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """license edge predicates"""
  hasLicense: Boolean
  hasLicenseWith: [LicenseWhereInput!]
  
  """component edge predicates"""
  hasComponent: Boolean
  hasComponentWith: [ReleaseComponentWhereInput!]
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
  
  """scans edge predicates"""
  hasScans: Boolean
  hasScansWith: [CodeScanWhereInput!]
}

"""
ReleasePolicyWhereInput is used for filtering ReleasePolicy objects.
Input was generated by ent.
"""
input ReleasePolicyWhereInput {
  not: ReleasePolicyWhereInput
  and: [ReleasePolicyWhereInput!]
  or: [ReleasePolicyWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """module field predicates"""
  module: String
  moduleNEQ: String
  moduleIn: [String!]
  moduleNotIn: [String!]
  moduleGT: String
  moduleGTE: String
  moduleLT: String
  moduleLTE: String
  moduleContains: String
  moduleHasPrefix: String
  moduleHasSuffix: String
  moduleEqualFold: String
  moduleContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  
  """projects edge predicates"""
  hasProjects: Boolean
  hasProjectsWith: [ProjectWhereInput!]
  
  """repos edge predicates"""
  hasRepos: Boolean
  hasReposWith: [RepoWhereInput!]
  
  """violations edge predicates"""
  hasViolations: Boolean
  hasViolationsWith: [ReleasePolicyViolationWhereInput!]
}

input RepoOrder {
  direction: OrderDirection!
  field: RepoOrderField
}

input CodeIssueOrder {
  direction: OrderDirection!
  field: CodeIssueOrderField
}

input ComponentOrder {
  direction: OrderDirection!
  field: ComponentOrderField
}

input GitCommitOrder {
  direction: OrderDirection!
  field: GitCommitOrderField
}

"""
ProjectWhereInput is used for filtering Project objects.
Input was generated by ent.
"""
input ProjectWhereInput {
  not: ProjectWhereInput
  and: [ProjectWhereInput!]
  or: [ProjectWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  
  """repos edge predicates"""
  hasRepos: Boolean
  hasReposWith: [RepoWhereInput!]
  
  """vulnerability_reviews edge predicates"""
  hasVulnerabilityReviews: Boolean
  hasVulnerabilityReviewsWith: [VulnerabilityReviewWhereInput!]
  
  """policies edge predicates"""
  hasPolicies: Boolean
  hasPoliciesWith: [ReleasePolicyWhereInput!]
}

"""
ReleaseEntryWhereInput is used for filtering ReleaseEntry objects.
Input was generated by ent.
"""
input ReleaseEntryWhereInput {
  not: ReleaseEntryWhereInput
  and: [ReleaseEntryWhereInput!]
  or: [ReleaseEntryWhereInput!]
  
  """type field predicates"""
  type: ReleaseEntryType
  typeNEQ: ReleaseEntryType
  typeIn: [ReleaseEntryType!]
  typeNotIn: [ReleaseEntryType!]
  
  """time field predicates"""
  time: Time
  timeNEQ: Time
  timeIn: [Time!]
  timeNotIn: [Time!]
  timeGT: Time
  timeGTE: Time
  timeLT: Time
  timeLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """artifact edge predicates"""
  hasArtifact: Boolean
  hasArtifactWith: [ArtifactWhereInput!]
  
  """code_scan edge predicates"""
  hasCodeScan: Boolean
  hasCodeScanWith: [CodeScanWhereInput!]
  
  """test_run edge predicates"""
  hasTestRun: Boolean
  hasTestRunWith: [TestRunWhereInput!]
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
}

"""
VulnerabilityWhereInput is used for filtering Vulnerability objects.
Input was generated by ent.
"""
input VulnerabilityWhereInput {
  not: VulnerabilityWhereInput
  and: [VulnerabilityWhereInput!]
  or: [VulnerabilityWhereInput!]
  
  """vid field predicates"""
  vid: String
  vidNEQ: String
  vidIn: [String!]
  vidNotIn: [String!]
  vidGT: String
  vidGTE: String
  vidLT: String
  vidLTE: String
  vidContains: String
  vidHasPrefix: String
  vidHasSuffix: String
  vidEqualFold: String
  vidContainsFold: String
  
  """summary field predicates"""
  summary: String
  summaryNEQ: String
  summaryIn: [String!]
  summaryNotIn: [String!]
  summaryGT: String
  summaryGTE: String
  summaryLT: String
  summaryLTE: String
  summaryContains: String
  summaryHasPrefix: String
  summaryHasSuffix: String
  summaryIsNil: Boolean
  summaryNotNil: Boolean
  summaryEqualFold: String
  summaryContainsFold: String
  
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  
  """severity_score field predicates"""
  severityScore: Float
  severityScoreNEQ: Float
  severityScoreIn: [Float!]
  severityScoreNotIn: [Float!]
  severityScoreGT: Float
  severityScoreGTE: Float
  severityScoreLT: Float
  severityScoreLTE: Float
  
  """severity field predicates"""
  severity: VulnerabilitySeverity
  severityNEQ: VulnerabilitySeverity
  severityIn: [VulnerabilitySeverity!]
  severityNotIn: [VulnerabilitySeverity!]
  
  """published field predicates"""
  published: Time
  publishedNEQ: Time
  publishedIn: [Time!]
  publishedNotIn: [Time!]
  publishedGT: Time
  publishedGTE: Time
  publishedLT: Time
  publishedLTE: Time
  publishedIsNil: Boolean
  publishedNotNil: Boolean
  
  """modified field predicates"""
  modified: Time
  modifiedNEQ: Time
  modifiedIn: [Time!]
  modifiedNotIn: [Time!]
  modifiedGT: Time
  modifiedGTE: Time
  modifiedLT: Time
  modifiedLTE: Time
  modifiedIsNil: Boolean
  modifiedNotNil: Boolean
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  
  """components edge predicates"""
  hasComponents: Boolean
  hasComponentsWith: [ComponentWhereInput!]
  
  """reviews edge predicates"""
  hasReviews: Boolean
  hasReviewsWith: [VulnerabilityReviewWhereInput!]
  
  """instances edge predicates"""
  hasInstances: Boolean
  hasInstancesWith: [ReleaseVulnerabilityWhereInput!]
}

input VulnerabilityReviewOrder {
  direction: OrderDirection!
  field: VulnerabilityReviewOrderField
}

"""
ComponentWhereInput is used for filtering Component objects.
Input was generated by ent.
"""
input ComponentWhereInput {
  not: ComponentWhereInput
  and: [ComponentWhereInput!]
  or: [ComponentWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """vendor field predicates"""
  vendor: String
  vendorNEQ: String
  vendorIn: [String!]
  vendorNotIn: [String!]
  vendorGT: String
  vendorGTE: String
  vendorLT: String
  vendorLTE: String
  vendorContains: String
  vendorHasPrefix: String
  vendorHasSuffix: String
  vendorEqualFold: String
  vendorContainsFold: String
  
  """version field predicates"""
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionEqualFold: String
  versionContainsFold: String
  
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  
  """url field predicates"""
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlIsNil: Boolean
  urlNotNil: Boolean
  urlEqualFold: String
  urlContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  
  """vulnerabilities edge predicates"""
  hasVulnerabilities: Boolean
  hasVulnerabilitiesWith: [VulnerabilityWhereInput!]
  
  """licenses edge predicates"""
  hasLicenses: Boolean
  hasLicensesWith: [LicenseWhereInput!]
  
  """uses edge predicates"""
  hasUses: Boolean
  hasUsesWith: [ReleaseComponentWhereInput!]
}

input ReleaseOrder {
  direction: OrderDirection!
  field: ReleaseOrderField
}

input ReleasePolicyOrder {
  direction: OrderDirection!
  field: ReleasePolicyOrderField
}

"""
TestRunWhereInput is used for filtering TestRun objects.
Input was generated by ent.
"""
input TestRunWhereInput {
  not: TestRunWhereInput
  and: [TestRunWhereInput!]
  or: [TestRunWhereInput!]
  
  """tool field predicates"""
  tool: String
  toolNEQ: String
  toolIn: [String!]
  toolNotIn: [String!]
  toolGT: String
  toolGTE: String
  toolLT: String
  toolLTE: String
  toolContains: String
  toolHasPrefix: String
  toolHasSuffix: String
  toolEqualFold: String
  toolContainsFold: String
  
  """time field predicates"""
  time: Time
  timeNEQ: Time
  timeIn: [Time!]
  timeNotIn: [Time!]
  timeGT: Time
  timeGTE: Time
  timeLT: Time
  timeLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
  
  """entry edge predicates"""
  hasEntry: Boolean
  hasEntryWith: [ReleaseEntryWhereInput!]
  
  """tests edge predicates"""
  hasTests: Boolean
  hasTestsWith: [TestCaseWhereInput!]
}

"""
CodeIssueWhereInput is used for filtering CodeIssue objects.
Input was generated by ent.
"""
input CodeIssueWhereInput {
  not: CodeIssueWhereInput
  and: [CodeIssueWhereInput!]
  or: [CodeIssueWhereInput!]
  
  """rule_id field predicates"""
  ruleID: String
  ruleIDNEQ: String
  ruleIDIn: [String!]
  ruleIDNotIn: [String!]
  ruleIDGT: String
  ruleIDGTE: String
  ruleIDLT: String
  ruleIDLTE: String
  ruleIDContains: String
  ruleIDHasPrefix: String
  ruleIDHasSuffix: String
  ruleIDEqualFold: String
  ruleIDContainsFold: String
  
  """message field predicates"""
  message: String
  messageNEQ: String
  messageIn: [String!]
  messageNotIn: [String!]
  messageGT: String
  messageGTE: String
  messageLT: String
  messageLTE: String
  messageContains: String
  messageHasPrefix: String
  messageHasSuffix: String
  messageEqualFold: String
  messageContainsFold: String
  
  """severity field predicates"""
  severity: CodeIssueSeverity
  severityNEQ: CodeIssueSeverity
  severityIn: [CodeIssueSeverity!]
  severityNotIn: [CodeIssueSeverity!]
  
  """type field predicates"""
  type: CodeIssueType
  typeNEQ: CodeIssueType
  typeIn: [CodeIssueType!]
  typeNotIn: [CodeIssueType!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """scan edge predicates"""
  hasScan: Boolean
  hasScanWith: [CodeScanWhereInput!]
}

input CodeScanOrder {
  direction: OrderDirection!
  field: CodeScanOrderField
}

"""
LicenseWhereInput is used for filtering License objects.
Input was generated by ent.
"""
input LicenseWhereInput {
  not: LicenseWhereInput
  and: [LicenseWhereInput!]
  or: [LicenseWhereInput!]
  
  """spdx_id field predicates"""
  spdxID: String
  spdxIDNEQ: String
  spdxIDIn: [String!]
  spdxIDNotIn: [String!]
  spdxIDGT: String
  spdxIDGTE: String
  spdxIDLT: String
  spdxIDLTE: String
  spdxIDContains: String
  spdxIDHasPrefix: String
  spdxIDHasSuffix: String
  spdxIDEqualFold: String
  spdxIDContainsFold: String
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """reference field predicates"""
  reference: String
  referenceNEQ: String
  referenceIn: [String!]
  referenceNotIn: [String!]
  referenceGT: String
  referenceGTE: String
  referenceLT: String
  referenceLTE: String
  referenceContains: String
  referenceHasPrefix: String
  referenceHasSuffix: String
  referenceIsNil: Boolean
  referenceNotNil: Boolean
  referenceEqualFold: String
  referenceContainsFold: String
  
  """details_url field predicates"""
  detailsURL: String
  detailsURLNEQ: String
  detailsURLIn: [String!]
  detailsURLNotIn: [String!]
  detailsURLGT: String
  detailsURLGTE: String
  detailsURLLT: String
  detailsURLLTE: String
  detailsURLContains: String
  detailsURLHasPrefix: String
  detailsURLHasSuffix: String
  detailsURLIsNil: Boolean
  detailsURLNotNil: Boolean
  detailsURLEqualFold: String
  detailsURLContainsFold: String
  
  """is_osi_approved field predicates"""
  isOsiApproved: Boolean
  isOsiApprovedNEQ: Boolean
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """components edge predicates"""
  hasComponents: Boolean
  hasComponentsWith: [ComponentWhereInput!]
  
  """uses edge predicates"""
  hasUses: Boolean
  hasUsesWith: [LicenseUseWhereInput!]
}

"""
LicenseUseWhereInput is used for filtering LicenseUse objects.
Input was generated by ent.
"""
input LicenseUseWhereInput {
  not: LicenseUseWhereInput
  and: [LicenseUseWhereInput!]
  or: [LicenseUseWhereInput!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """license edge predicates"""
  hasLicense: Boolean
  hasLicenseWith: [LicenseWhereInput!]
}

"""
OrganizationWhereInput is used for filtering Organization objects.
Input was generated by ent.
"""
input OrganizationWhereInput {
  not: OrganizationWhereInput
  and: [OrganizationWhereInput!]
  or: [OrganizationWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """projects edge predicates"""
  hasProjects: Boolean
  hasProjectsWith: [ProjectWhereInput!]
  
  """repos edge predicates"""
  hasRepos: Boolean
  hasReposWith: [RepoWhereInput!]
}

input VulnerabilityOrder {
  direction: OrderDirection!
  field: VulnerabilityOrderField
}

"""
VulnerabilityReviewWhereInput is used for filtering VulnerabilityReview objects.
Input was generated by ent.
"""
input VulnerabilityReviewWhereInput {
  not: VulnerabilityReviewWhereInput
  and: [VulnerabilityReviewWhereInput!]
  or: [VulnerabilityReviewWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """decision field predicates"""
  decision: VulnerabilityReviewDecision
  decisionNEQ: VulnerabilityReviewDecision
  decisionIn: [VulnerabilityReviewDecision!]
  decisionNotIn: [VulnerabilityReviewDecision!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """vulnerability edge predicates"""
  hasVulnerability: Boolean
  hasVulnerabilityWith: [VulnerabilityWhereInput!]
  
  """projects edge predicates"""
  hasProjects: Boolean
  hasProjectsWith: [ProjectWhereInput!]
  
  """repos edge predicates"""
  hasRepos: Boolean
  hasReposWith: [RepoWhereInput!]
  
  """releases edge predicates"""
  hasReleases: Boolean
  hasReleasesWith: [ReleaseWhereInput!]
  
  """instances edge predicates"""
  hasInstances: Boolean
  hasInstancesWith: [ReleaseVulnerabilityWhereInput!]
}

"""
ArtifactWhereInput is used for filtering Artifact objects.
Input was generated by ent.
"""
input ArtifactWhereInput {
  not: ArtifactWhereInput
  and: [ArtifactWhereInput!]
  or: [ArtifactWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """sha256 field predicates"""
  sha256: String
  sha256NEQ: String
  sha256In: [String!]
  sha256NotIn: [String!]
  sha256GT: String
  sha256GTE: String
  sha256LT: String
  sha256LTE: String
  sha256Contains: String
  sha256HasPrefix: String
  sha256HasSuffix: String
  sha256EqualFold: String
  sha256ContainsFold: String
  
  """type field predicates"""
  type: ArtifactType
  typeNEQ: ArtifactType
  typeIn: [ArtifactType!]
  typeNotIn: [ArtifactType!]
  
  """time field predicates"""
  time: Time
  timeNEQ: Time
  timeIn: [Time!]
  timeNotIn: [Time!]
  timeGT: Time
  timeGTE: Time
  timeLT: Time
  timeLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
  
  """entry edge predicates"""
  hasEntry: Boolean
  hasEntryWith: [ReleaseEntryWhereInput!]
}

"""
GitCommitWhereInput is used for filtering GitCommit objects.
Input was generated by ent.
"""
input GitCommitWhereInput {
  not: GitCommitWhereInput
  and: [GitCommitWhereInput!]
  or: [GitCommitWhereInput!]
  
  """hash field predicates"""
  hash: String
  hashNEQ: String
  hashIn: [String!]
  hashNotIn: [String!]
  hashGT: String
  hashGTE: String
  hashLT: String
  hashLTE: String
  hashContains: String
  hashHasPrefix: String
  hashHasSuffix: String
  hashEqualFold: String
  hashContainsFold: String
  
  """branch field predicates"""
  branch: String
  branchNEQ: String
  branchIn: [String!]
  branchNotIn: [String!]
  branchGT: String
  branchGTE: String
  branchLT: String
  branchLTE: String
  branchContains: String
  branchHasPrefix: String
  branchHasSuffix: String
  branchEqualFold: String
  branchContainsFold: String
  
  """tag field predicates"""
  tag: String
  tagNEQ: String
  tagIn: [String!]
  tagNotIn: [String!]
  tagGT: String
  tagGTE: String
  tagLT: String
  tagLTE: String
  tagContains: String
  tagHasPrefix: String
  tagHasSuffix: String
  tagIsNil: Boolean
  tagNotNil: Boolean
  tagEqualFold: String
  tagContainsFold: String
  
  """time field predicates"""
  time: Time
  timeNEQ: Time
  timeIn: [Time!]
  timeNotIn: [Time!]
  timeGT: Time
  timeGTE: Time
  timeLT: Time
  timeLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """repo edge predicates"""
  hasRepo: Boolean
  hasRepoWith: [RepoWhereInput!]
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
}

"""
ReleaseComponentWhereInput is used for filtering ReleaseComponent objects.
Input was generated by ent.
"""
input ReleaseComponentWhereInput {
  not: ReleaseComponentWhereInput
  and: [ReleaseComponentWhereInput!]
  or: [ReleaseComponentWhereInput!]
  
  """type field predicates"""
  type: ReleaseComponentType
  typeNEQ: ReleaseComponentType
  typeIn: [ReleaseComponentType!]
  typeNotIn: [ReleaseComponentType!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
  
  """scans edge predicates"""
  hasScans: Boolean
  hasScansWith: [CodeScanWhereInput!]
  
  """component edge predicates"""
  hasComponent: Boolean
  hasComponentWith: [ComponentWhereInput!]
  
  """vulnerabilities edge predicates"""
  hasVulnerabilities: Boolean
  hasVulnerabilitiesWith: [ReleaseVulnerabilityWhereInput!]
}

"""
ReleasePolicyViolationWhereInput is used for filtering ReleasePolicyViolation objects.
Input was generated by ent.
"""
input ReleasePolicyViolationWhereInput {
  not: ReleasePolicyViolationWhereInput
  and: [ReleasePolicyViolationWhereInput!]
  or: [ReleasePolicyViolationWhereInput!]
  
  """message field predicates"""
  message: String
  messageNEQ: String
  messageIn: [String!]
  messageNotIn: [String!]
  messageGT: String
  messageGTE: String
  messageLT: String
  messageLTE: String
  messageContains: String
  messageHasPrefix: String
  messageHasSuffix: String
  messageEqualFold: String
  messageContainsFold: String
  
  """type field predicates"""
  type: ReleasePolicyViolationType
  typeNEQ: ReleasePolicyViolationType
  typeIn: [ReleasePolicyViolationType!]
  typeNotIn: [ReleasePolicyViolationType!]
  
  """severity field predicates"""
  severity: ReleasePolicyViolationSeverity
  severityNEQ: ReleasePolicyViolationSeverity
  severityIn: [ReleasePolicyViolationSeverity!]
  severityNotIn: [ReleasePolicyViolationSeverity!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """policy edge predicates"""
  hasPolicy: Boolean
  hasPolicyWith: [ReleasePolicyWhereInput!]
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
}

"""
TestCaseWhereInput is used for filtering TestCase objects.
Input was generated by ent.
"""
input TestCaseWhereInput {
  not: TestCaseWhereInput
  and: [TestCaseWhereInput!]
  or: [TestCaseWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """result field predicates"""
  result: Boolean
  resultNEQ: Boolean
  
  """message field predicates"""
  message: String
  messageNEQ: String
  messageIn: [String!]
  messageNotIn: [String!]
  messageGT: String
  messageGTE: String
  messageLT: String
  messageLTE: String
  messageContains: String
  messageHasPrefix: String
  messageHasSuffix: String
  messageEqualFold: String
  messageContainsFold: String
  
  """elapsed field predicates"""
  elapsed: Float
  elapsedNEQ: Float
  elapsedIn: [Float!]
  elapsedNotIn: [Float!]
  elapsedGT: Float
  elapsedGTE: Float
  elapsedLT: Float
  elapsedLTE: Float
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """run edge predicates"""
  hasRun: Boolean
  hasRunWith: [TestRunWhereInput!]
}

"""Query generated by ent."""
type Query {
  release_license_connection(first: Int, last: Int, before: Cursor, after: Cursor, where: ReleaseLicenseWhereInput): ReleaseLicenseConnection
  release_policy_violation(first: Int, last: Int, where: ReleasePolicyViolationWhereInput): [ReleasePolicyViolation]
  repo_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: RepoOrder, where: RepoWhereInput): RepoConnection
  test_case_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: TestCaseOrder, where: TestCaseWhereInput): TestCaseConnection
  component(first: Int, last: Int, order_by: ComponentOrder, where: ComponentWhereInput): [Component]
  license_use(first: Int, last: Int, where: LicenseUseWhereInput): [LicenseUse]
  release_entry(first: Int, last: Int, order_by: ReleaseEntryOrder, where: ReleaseEntryWhereInput): [ReleaseEntry]
  code_issue(first: Int, last: Int, order_by: CodeIssueOrder, where: CodeIssueWhereInput): [CodeIssue]
  component_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ComponentOrder, where: ComponentWhereInput): ComponentConnection
  project(first: Int, last: Int, order_by: ProjectOrder, where: ProjectWhereInput): [Project]
  release_policy_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ReleasePolicyOrder, where: ReleasePolicyWhereInput): ReleasePolicyConnection
  release_policy_violation_connection(first: Int, last: Int, before: Cursor, after: Cursor, where: ReleasePolicyViolationWhereInput): ReleasePolicyViolationConnection
  vulnerability_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: VulnerabilityOrder, where: VulnerabilityWhereInput): VulnerabilityConnection
  adapter_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: AdapterOrder, where: AdapterWhereInput): AdapterConnection
  artifact_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ArtifactOrder, where: ArtifactWhereInput): ArtifactConnection
  artifact(first: Int, last: Int, order_by: ArtifactOrder, where: ArtifactWhereInput): [Artifact]
  commit(first: Int, last: Int, order_by: GitCommitOrder, where: GitCommitWhereInput): [GitCommit]
  license(first: Int, last: Int, order_by: LicenseOrder, where: LicenseWhereInput): [License]
  license_use_connection(first: Int, last: Int, before: Cursor, after: Cursor, where: LicenseUseWhereInput): LicenseUseConnection
  organization_connection(first: Int, last: Int, before: Cursor, after: Cursor, where: OrganizationWhereInput): OrganizationConnection
  organization(first: Int, last: Int, where: OrganizationWhereInput): [Organization]
  release_policy(first: Int, last: Int, order_by: ReleasePolicyOrder, where: ReleasePolicyWhereInput): [ReleasePolicy]
  repo(first: Int, last: Int, order_by: RepoOrder, where: RepoWhereInput): [Repo]
  code_scan(first: Int, last: Int, order_by: CodeScanOrder, where: CodeScanWhereInput): [CodeScan]
  commit_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: GitCommitOrder, where: GitCommitWhereInput): GitCommitConnection
  project_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ProjectOrder, where: ProjectWhereInput): ProjectConnection
  release_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ReleaseOrder, where: ReleaseWhereInput): ReleaseConnection
  release_component_connection(first: Int, last: Int, before: Cursor, after: Cursor, where: ReleaseComponentWhereInput): ReleaseComponentConnection
  release_entry_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ReleaseEntryOrder, where: ReleaseEntryWhereInput): ReleaseEntryConnection
  release_vulnerability_connection(first: Int, last: Int, before: Cursor, after: Cursor, where: ReleaseVulnerabilityWhereInput): ReleaseVulnerabilityConnection
  test_run(first: Int, last: Int, order_by: TestRunOrder, where: TestRunWhereInput): [TestRun]
  vulnerability_review_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: VulnerabilityReviewOrder, where: VulnerabilityReviewWhereInput): VulnerabilityReviewConnection
  code_scan_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: CodeScanOrder, where: CodeScanWhereInput): CodeScanConnection
  release(first: Int, last: Int, order_by: ReleaseOrder, where: ReleaseWhereInput): [Release]
  release_component(first: Int, last: Int, where: ReleaseComponentWhereInput): [ReleaseComponent]
  test_run_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: TestRunOrder, where: TestRunWhereInput): TestRunConnection
  adapter(first: Int, last: Int, order_by: AdapterOrder, where: AdapterWhereInput): [Adapter]
  code_issue_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: CodeIssueOrder, where: CodeIssueWhereInput): CodeIssueConnection
  license_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: LicenseOrder, where: LicenseWhereInput): LicenseConnection
  release_vulnerability(first: Int, last: Int, where: ReleaseVulnerabilityWhereInput): [ReleaseVulnerability]
  test_case(first: Int, last: Int, order_by: TestCaseOrder, where: TestCaseWhereInput): [TestCase]
  vulnerability_review(first: Int, last: Int, order_by: VulnerabilityReviewOrder, where: VulnerabilityReviewWhereInput): [VulnerabilityReview]
  release_license(first: Int, last: Int, where: ReleaseLicenseWhereInput): [ReleaseLicense]
  vulnerability(first: Int, last: Int, order_by: VulnerabilityOrder, where: VulnerabilityWhereInput): [Vulnerability]
}
