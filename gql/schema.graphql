
directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

"""Query generated by ent."""
type Query {
  artifact_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ArtifactOrder, where: ArtifactWhereInput): ArtifactConnection
  artifact(first: Int, last: Int, order_by: ArtifactOrder, where: ArtifactWhereInput): [Artifact]
  code_issue_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: CodeIssueOrder, where: CodeIssueWhereInput): CodeIssueConnection
  component_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ComponentOrder, where: ComponentWhereInput): ComponentConnection
  test_case_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: TestCaseOrder, where: TestCaseWhereInput): TestCaseConnection
  vulnerability_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: VulnerabilityOrder, where: VulnerabilityWhereInput): VulnerabilityConnection
  component(first: Int, last: Int, order_by: ComponentOrder, where: ComponentWhereInput): [Component]
  commit_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: GitCommitOrder, where: GitCommitWhereInput): GitCommitConnection
  test_case(first: Int, last: Int, order_by: TestCaseOrder, where: TestCaseWhereInput): [TestCase]
  cwe_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: CWEOrder, where: CWEWhereInput): CWEConnection
  license_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: LicenseOrder, where: LicenseWhereInput): LicenseConnection
  release_entry_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ReleaseEntryOrder, where: ReleaseEntryWhereInput): ReleaseEntryConnection
  test_run(first: Int, last: Int, order_by: TestRunOrder, where: TestRunWhereInput): [TestRun]
  vulnerability_review(first: Int, last: Int, order_by: VulnerabilityReviewOrder, where: VulnerabilityReviewWhereInput): [VulnerabilityReview]
  license(first: Int, last: Int, order_by: LicenseOrder, where: LicenseWhereInput): [License]
  release_vulnerability(first: Int, last: Int, where: ReleaseVulnerabilityWhereInput): [ReleaseVulnerability]
  repo(first: Int, last: Int, order_by: RepoOrder, where: RepoWhereInput): [Repo]
  test_run_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: TestRunOrder, where: TestRunWhereInput): TestRunConnection
  license_use_connection(first: Int, last: Int, before: Cursor, after: Cursor, where: LicenseUseWhereInput): LicenseUseConnection
  license_use(first: Int, last: Int, where: LicenseUseWhereInput): [LicenseUse]
  project(first: Int, last: Int, order_by: ProjectOrder, where: ProjectWhereInput): [Project]
  release(first: Int, last: Int, order_by: ReleaseOrder, where: ReleaseWhereInput): [Release]
  repo_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: RepoOrder, where: RepoWhereInput): RepoConnection
  vulnerability_review_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: VulnerabilityReviewOrder, where: VulnerabilityReviewWhereInput): VulnerabilityReviewConnection
  code_scan_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: CodeScanOrder, where: CodeScanWhereInput): CodeScanConnection
  commit(first: Int, last: Int, order_by: GitCommitOrder, where: GitCommitWhereInput): [GitCommit]
  code_scan(first: Int, last: Int, order_by: CodeScanOrder, where: CodeScanWhereInput): [CodeScan]
  release_component_connection(first: Int, last: Int, before: Cursor, after: Cursor, where: ReleaseComponentWhereInput): ReleaseComponentConnection
  release_entry(first: Int, last: Int, order_by: ReleaseEntryOrder, where: ReleaseEntryWhereInput): [ReleaseEntry]
  cwe(first: Int, last: Int, order_by: CWEOrder, where: CWEWhereInput): [CWE]
  code_issue(first: Int, last: Int, order_by: CodeIssueOrder, where: CodeIssueWhereInput): [CodeIssue]
  project_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ProjectOrder, where: ProjectWhereInput): ProjectConnection
  release_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ReleaseOrder, where: ReleaseWhereInput): ReleaseConnection
  release_component(first: Int, last: Int, where: ReleaseComponentWhereInput): [ReleaseComponent]
  release_vulnerability_connection(first: Int, last: Int, before: Cursor, after: Cursor, where: ReleaseVulnerabilityWhereInput): ReleaseVulnerabilityConnection
  vulnerability(first: Int, last: Int, order_by: VulnerabilityOrder, where: VulnerabilityWhereInput): [Vulnerability]
}

"""
Maps a Time GraphQL scalar to a Go time.Time struct.
Generated by ent.
"""
scalar Time

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
Generated by ent.
"""
scalar Cursor

interface Node {
  id: ID!
}

enum ResultsType {
  code_scan
  test_run
}

enum ArtifactOrderField {
  name
  sha256
  type
}

enum CodeIssueSeverity {
  low
  medium
  high
}

enum CodeIssueOrderField {
  rule_id
  severity
  type
}

enum VulnerabilityReviewOrderField {
  name
}

enum OrderDirection {
  ASC
  DESC
}

enum Type {
  json
  csv
  xml
  yaml
  http
}

enum ArtifactType {
  docker
  file
}

enum ComponentOrderField {
  name
  vendor
  version
}

enum GitCommitOrderField {
  hash
  branch
  tag
  time
}

enum LicenseOrderField {
  spdx_id
  name
}

enum ReleaseOrderField {
  name
  version
}

enum RepoOrderField {
  name
}

enum TestRunOrderField {
  tool
}

enum CodeIssueType {
  style
  security
  bug
}

enum CodeScanOrderField {
  tool
}

enum ReleaseStatus {
  pending
  ready
  blocked
}

enum TestCaseOrderField {
  name
}

enum CWEOrderField {
  cwe_id
  description
}

enum ReleaseEntryType {
  artifact
  deploy
  code_scan
  test_run
}

enum ReleaseEntryOrderField {
  type
  time
}

enum VulnerabilitySeverity {
  None
  Low
  Medium
  High
  Critical
}

enum VulnerabilityOrderField {
  vid
  severity_score
  severity
  published
  modified
}

enum VulnerabilityReviewDecision {
  exploitable
  in_progress
  invalid
  mitigated
  ineffective
}

enum ProjectOrderField {
  name
}

"""
CWEConnection supports the relay connection specification for node CWE in the ent schema.
Generated by ent.
"""
type CWEConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CWEEdge]
}

"""
CodeIssueConnection supports the relay edge specification for node CodeIssue in the ent schema.
Generated by ent.
"""
type CodeIssueEdge {
  node: CodeIssue
  cursor: Cursor!
}

"""
CWE represents the node CWE in the ent schema.
Generated by ent.
"""
type CWE implements Node {
  id: ID!
  cwe_id: String
  description: String
  url: Float
  issues(first: Int, last: Int, where: CodeIssueWhereInput, order_by: CodeIssueOrder): [CodeIssue] @goField(forceResolver: true)
}

"""
CWEConnection supports the relay edge specification for node CWE in the ent schema.
Generated by ent.
"""
type CWEEdge {
  node: CWE
  cursor: Cursor!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

"""
ReleaseEntryConnection supports the relay connection specification for node ReleaseEntry in the ent schema.
Generated by ent.
"""
type ReleaseEntryConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseEntryEdge]
}

"""
VulnerabilityConnection supports the relay connection specification for node Vulnerability in the ent schema.
Generated by ent.
"""
type VulnerabilityConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [VulnerabilityEdge]
}

"""
ReleaseVulnerabilityConnection supports the relay connection specification for node ReleaseVulnerability in the ent schema.
Generated by ent.
"""
type ReleaseVulnerabilityConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseVulnerabilityEdge]
}

"""
VulnerabilityReview represents the node VulnerabilityReview in the ent schema.
Generated by ent.
"""
type VulnerabilityReview implements Node {
  id: ID!
  name: String
  decision: VulnerabilityReviewDecision
  vulnerability: Vulnerability!
  projects(first: Int, last: Int, where: ProjectWhereInput, order_by: ProjectOrder): [Project] @goField(forceResolver: true)
  repos(first: Int, last: Int, where: RepoWhereInput, order_by: RepoOrder): [Repo] @goField(forceResolver: true)
  releases(first: Int, last: Int, where: ReleaseWhereInput, order_by: ReleaseOrder): [Release] @goField(forceResolver: true)
  instances(first: Int, last: Int, where: ReleaseVulnerabilityWhereInput): [ReleaseVulnerability] @goField(forceResolver: true)
}

"""
ReleaseVulnerability represents the node ReleaseVulnerability in the ent schema.
Generated by ent.
"""
type ReleaseVulnerability implements Node {
  id: ID!
  vulnerability: Vulnerability!
  components(first: Int, last: Int, where: ReleaseComponentWhereInput): [ReleaseComponent] @goField(forceResolver: true)
  release: Release!
  reviews(first: Int, last: Int, where: VulnerabilityReviewWhereInput, order_by: VulnerabilityReviewOrder): [VulnerabilityReview] @goField(forceResolver: true)
  scans(first: Int, last: Int, where: CodeScanWhereInput, order_by: CodeScanOrder): [CodeScan] @goField(forceResolver: true)
}

"""
ArtifactConnection supports the relay connection specification for node Artifact in the ent schema.
Generated by ent.
"""
type ArtifactConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ArtifactEdge]
}

"""
ArtifactConnection supports the relay edge specification for node Artifact in the ent schema.
Generated by ent.
"""
type ArtifactEdge {
  node: Artifact
  cursor: Cursor!
}

"""
LicenseUse represents the node LicenseUse in the ent schema.
Generated by ent.
"""
type LicenseUse implements Node {
  id: ID!
  license: License!
}

"""
ProjectConnection supports the relay edge specification for node Project in the ent schema.
Generated by ent.
"""
type ProjectEdge {
  node: Project
  cursor: Cursor!
}

"""
ReleaseComponentConnection supports the relay connection specification for node ReleaseComponent in the ent schema.
Generated by ent.
"""
type ReleaseComponentConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseComponentEdge]
}

"""
ReleaseComponentConnection supports the relay edge specification for node ReleaseComponent in the ent schema.
Generated by ent.
"""
type ReleaseComponentEdge {
  node: ReleaseComponent
  cursor: Cursor!
}

"""
ReleaseEntry represents the node ReleaseEntry in the ent schema.
Generated by ent.
"""
type ReleaseEntry implements Node {
  id: ID!
  type: ReleaseEntryType
  time: Time
  artifact: Artifact
  code_scan: CodeScan
  test_run: TestRun
  release: Release!
}

"""
Repo represents the node Repo in the ent schema.
Generated by ent.
"""
type Repo implements Node {
  id: ID!
  name: String
  projects(first: Int, last: Int, where: ProjectWhereInput, order_by: ProjectOrder): [Project] @goField(forceResolver: true)
  commits(first: Int, last: Int, where: GitCommitWhereInput, order_by: GitCommitOrder): [GitCommit] @goField(forceResolver: true)
  vulnerability_reviews(first: Int, last: Int, where: VulnerabilityReviewWhereInput, order_by: VulnerabilityReviewOrder): [VulnerabilityReview] @goField(forceResolver: true)
}

"""
Artifact represents the node Artifact in the ent schema.
Generated by ent.
"""
type Artifact implements Node {
  id: ID!
  name: String
  sha256: String
  type: ArtifactType
  release: Release
  entry: ReleaseEntry
}

"""
LicenseUseConnection supports the relay connection specification for node LicenseUse in the ent schema.
Generated by ent.
"""
type LicenseUseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [LicenseUseEdge]
}

"""
TestRunConnection supports the relay edge specification for node TestRun in the ent schema.
Generated by ent.
"""
type TestRunEdge {
  node: TestRun
  cursor: Cursor!
}

"""
VulnerabilityConnection supports the relay edge specification for node Vulnerability in the ent schema.
Generated by ent.
"""
type VulnerabilityEdge {
  node: Vulnerability
  cursor: Cursor!
}

"""
CodeScan represents the node CodeScan in the ent schema.
Generated by ent.
"""
type CodeScan implements Node {
  id: ID!
  tool: String
  release: Release!
  entry: ReleaseEntry
  issues(first: Int, last: Int, where: CodeIssueWhereInput, order_by: CodeIssueOrder): [CodeIssue] @goField(forceResolver: true)
  vulnerabilities(first: Int, last: Int, where: ReleaseVulnerabilityWhereInput): [ReleaseVulnerability] @goField(forceResolver: true)
  components(first: Int, last: Int, where: ReleaseComponentWhereInput): [ReleaseComponent] @goField(forceResolver: true)
}

"""
LicenseConnection supports the relay connection specification for node License in the ent schema.
Generated by ent.
"""
type LicenseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [LicenseEdge]
}

"""
TestCase represents the node TestCase in the ent schema.
Generated by ent.
"""
type TestCase implements Node {
  id: ID!
  name: String
  result: Boolean
  message: String
  elapsed: Float
  run: TestRun!
}

"""
ComponentConnection supports the relay connection specification for node Component in the ent schema.
Generated by ent.
"""
type ComponentConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ComponentEdge]
}

"""
License represents the node License in the ent schema.
Generated by ent.
"""
type License implements Node {
  id: ID!
  spdx_id: String
  name: String
  reference: String
  details_url: String
  is_osi_approved: Boolean
  components(first: Int, last: Int, where: ComponentWhereInput, order_by: ComponentOrder): [Component] @goField(forceResolver: true)
  uses(first: Int, last: Int, where: LicenseUseWhereInput): [LicenseUse] @goField(forceResolver: true)
}

"""
ReleaseConnection supports the relay connection specification for node Release in the ent schema.
Generated by ent.
"""
type ReleaseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseEdge]
}

"""
CodeIssueConnection supports the relay connection specification for node CodeIssue in the ent schema.
Generated by ent.
"""
type CodeIssueConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CodeIssueEdge]
}

"""
CodeScanConnection supports the relay edge specification for node CodeScan in the ent schema.
Generated by ent.
"""
type CodeScanEdge {
  node: CodeScan
  cursor: Cursor!
}

"""
Project represents the node Project in the ent schema.
Generated by ent.
"""
type Project implements Node {
  id: ID!
  name: String
  repos(first: Int, last: Int, where: RepoWhereInput, order_by: RepoOrder): [Repo] @goField(forceResolver: true)
  vulnerability_reviews(first: Int, last: Int, where: VulnerabilityReviewWhereInput, order_by: VulnerabilityReviewOrder): [VulnerabilityReview] @goField(forceResolver: true)
}

"""
ReleaseEntryConnection supports the relay edge specification for node ReleaseEntry in the ent schema.
Generated by ent.
"""
type ReleaseEntryEdge {
  node: ReleaseEntry
  cursor: Cursor!
}

"""
TestCaseConnection supports the relay connection specification for node TestCase in the ent schema.
Generated by ent.
"""
type TestCaseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TestCaseEdge]
}

"""
CodeScanConnection supports the relay connection specification for node CodeScan in the ent schema.
Generated by ent.
"""
type CodeScanConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CodeScanEdge]
}

"""
GitCommit represents the node GitCommit in the ent schema.
Generated by ent.
"""
type GitCommit implements Node {
  id: ID!
  hash: String
  branch: String
  tag: String
  time: Time
  repo: Repo!
  release: Release
}

"""
GitCommitConnection supports the relay edge specification for node GitCommit in the ent schema.
Generated by ent.
"""
type GitCommitEdge {
  node: GitCommit
  cursor: Cursor!
}

"""
VulnerabilityReviewConnection supports the relay connection specification for node VulnerabilityReview in the ent schema.
Generated by ent.
"""
type VulnerabilityReviewConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [VulnerabilityReviewEdge]
}

"""
TestRun represents the node TestRun in the ent schema.
Generated by ent.
"""
type TestRun implements Node {
  id: ID!
  tool: String
  release: Release!
  entry: ReleaseEntry
  tests(first: Int, last: Int, where: TestCaseWhereInput, order_by: TestCaseOrder): [TestCase] @goField(forceResolver: true)
}


"""
Component represents the node Component in the ent schema.
Generated by ent.
"""
type Component implements Node {
  id: ID!
  name: String
  vendor: String
  version: String
  description: String
  url: String
  vulnerabilities(first: Int, last: Int, where: VulnerabilityWhereInput, order_by: VulnerabilityOrder): [Vulnerability] @goField(forceResolver: true)
  licenses(first: Int, last: Int, where: LicenseWhereInput, order_by: LicenseOrder): [License] @goField(forceResolver: true)
  uses(first: Int, last: Int, where: ReleaseComponentWhereInput): [ReleaseComponent] @goField(forceResolver: true)
}

"""
ComponentConnection supports the relay edge specification for node Component in the ent schema.
Generated by ent.
"""
type ComponentEdge {
  node: Component
  cursor: Cursor!
}

"""
LicenseConnection supports the relay edge specification for node License in the ent schema.
Generated by ent.
"""
type LicenseEdge {
  node: License
  cursor: Cursor!
}

"""
ReleaseConnection supports the relay edge specification for node Release in the ent schema.
Generated by ent.
"""
type ReleaseEdge {
  node: Release
  cursor: Cursor!
}

"""
RepoConnection supports the relay edge specification for node Repo in the ent schema.
Generated by ent.
"""
type RepoEdge {
  node: Repo
  cursor: Cursor!
}

"""
Vulnerability represents the node Vulnerability in the ent schema.
Generated by ent.
"""
type Vulnerability implements Node {
  id: ID!
  vid: String
  summary: String
  description: String
  severity_score: Float
  severity: VulnerabilitySeverity
  published: Time
  modified: Time
  components(first: Int, last: Int, where: ComponentWhereInput, order_by: ComponentOrder): [Component] @goField(forceResolver: true)
  reviews(first: Int, last: Int, where: VulnerabilityReviewWhereInput, order_by: VulnerabilityReviewOrder): [VulnerabilityReview] @goField(forceResolver: true)
  instances(first: Int, last: Int, where: ReleaseVulnerabilityWhereInput): [ReleaseVulnerability] @goField(forceResolver: true)
}

"""
VulnerabilityReviewConnection supports the relay edge specification for node VulnerabilityReview in the ent schema.
Generated by ent.
"""
type VulnerabilityReviewEdge {
  node: VulnerabilityReview
  cursor: Cursor!
}

"""
CodeIssue represents the node CodeIssue in the ent schema.
Generated by ent.
"""
type CodeIssue implements Node {
  id: ID!
  rule_id: String
  message: String
  severity: CodeIssueSeverity
  type: CodeIssueType
  cwe(first: Int, last: Int, where: CWEWhereInput, order_by: CWEOrder): [CWE] @goField(forceResolver: true)
  scan: CodeScan!
}

"""
LicenseUseConnection supports the relay edge specification for node LicenseUse in the ent schema.
Generated by ent.
"""
type LicenseUseEdge {
  node: LicenseUse
  cursor: Cursor!
}

"""
ProjectConnection supports the relay connection specification for node Project in the ent schema.
Generated by ent.
"""
type ProjectConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ProjectEdge]
}

"""
RepoConnection supports the relay connection specification for node Repo in the ent schema.
Generated by ent.
"""
type RepoConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [RepoEdge]
}

"""
TestCaseConnection supports the relay edge specification for node TestCase in the ent schema.
Generated by ent.
"""
type TestCaseEdge {
  node: TestCase
  cursor: Cursor!
}

"""
TestRunConnection supports the relay connection specification for node TestRun in the ent schema.
Generated by ent.
"""
type TestRunConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TestRunEdge]
}

"""
GitCommitConnection supports the relay connection specification for node GitCommit in the ent schema.
Generated by ent.
"""
type GitCommitConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [GitCommitEdge]
}

"""
Release represents the node Release in the ent schema.
Generated by ent.
"""
type Release implements Node {
  id: ID!
  name: String
  version: String
  status: ReleaseStatus
  subreleases(first: Int, last: Int, where: ReleaseWhereInput, order_by: ReleaseOrder): [Release] @goField(forceResolver: true)
  dependencies(first: Int, last: Int, where: ReleaseWhereInput, order_by: ReleaseOrder): [Release] @goField(forceResolver: true)
  commit: GitCommit!
  log(first: Int, last: Int, where: ReleaseEntryWhereInput, order_by: ReleaseEntryOrder): [ReleaseEntry] @goField(forceResolver: true)
  artifacts(first: Int, last: Int, where: ArtifactWhereInput, order_by: ArtifactOrder): [Artifact] @goField(forceResolver: true)
  components(first: Int, last: Int, where: ReleaseComponentWhereInput): [ReleaseComponent] @goField(forceResolver: true)
  vulnerabilities(first: Int, last: Int, where: ReleaseVulnerabilityWhereInput): [ReleaseVulnerability] @goField(forceResolver: true)
  code_scans(first: Int, last: Int, where: CodeScanWhereInput, order_by: CodeScanOrder): [CodeScan] @goField(forceResolver: true)
  test_runs(first: Int, last: Int, where: TestRunWhereInput, order_by: TestRunOrder): [TestRun] @goField(forceResolver: true)
  vulnerability_reviews(first: Int, last: Int, where: VulnerabilityReviewWhereInput, order_by: VulnerabilityReviewOrder): [VulnerabilityReview] @goField(forceResolver: true)
}

"""
ReleaseComponent represents the node ReleaseComponent in the ent schema.
Generated by ent.
"""
type ReleaseComponent implements Node {
  id: ID!
  release: Release!
  scans(first: Int, last: Int, where: CodeScanWhereInput, order_by: CodeScanOrder): [CodeScan!] @goField(forceResolver: true)
  component: Component!
  vulnerabilities(first: Int, last: Int, where: ReleaseVulnerabilityWhereInput): [ReleaseVulnerability] @goField(forceResolver: true)
}

"""
ReleaseVulnerabilityConnection supports the relay edge specification for node ReleaseVulnerability in the ent schema.
Generated by ent.
"""
type ReleaseVulnerabilityEdge {
  node: ReleaseVulnerability
  cursor: Cursor!
}

"""
CodeScanWhereInput is used for filtering CodeScan objects.
Input was generated by ent.
"""
input CodeScanWhereInput {
  not: CodeScanWhereInput
  and: [CodeScanWhereInput!]
  or: [CodeScanWhereInput!]
  
  """tool field predicates"""
  tool: String
  tool_neq: String
  tool_in: [String!]
  tool_not_in: [String!]
  tool_gt: String
  tool_gte: String
  tool_lt: String
  tool_lte: String
  tool_contains: String
  tool_has_prefix: String
  tool_has_suffix: String
  tool_equal_fold: String
  tool_contains_fold: String
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """release edge predicates"""
  has_release: Boolean
  has_release_with: [ReleaseWhereInput!]
  
  """entry edge predicates"""
  has_entry: Boolean
  has_entry_with: [ReleaseEntryWhereInput!]
  
  """issues edge predicates"""
  has_issues: Boolean
  has_issues_with: [CodeIssueWhereInput!]
  
  """vulnerabilities edge predicates"""
  has_vulnerabilities: Boolean
  has_vulnerabilities_with: [ReleaseVulnerabilityWhereInput!]
  
  """components edge predicates"""
  has_components: Boolean
  has_components_with: [ReleaseComponentWhereInput!]
}

"""
GitCommitWhereInput is used for filtering GitCommit objects.
Input was generated by ent.
"""
input GitCommitWhereInput {
  not: GitCommitWhereInput
  and: [GitCommitWhereInput!]
  or: [GitCommitWhereInput!]
  
  """hash field predicates"""
  hash: String
  hash_neq: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_gt: String
  hash_gte: String
  hash_lt: String
  hash_lte: String
  hash_contains: String
  hash_has_prefix: String
  hash_has_suffix: String
  hash_equal_fold: String
  hash_contains_fold: String
  
  """branch field predicates"""
  branch: String
  branch_neq: String
  branch_in: [String!]
  branch_not_in: [String!]
  branch_gt: String
  branch_gte: String
  branch_lt: String
  branch_lte: String
  branch_contains: String
  branch_has_prefix: String
  branch_has_suffix: String
  branch_equal_fold: String
  branch_contains_fold: String
  
  """tag field predicates"""
  tag: String
  tag_neq: String
  tag_in: [String!]
  tag_not_in: [String!]
  tag_gt: String
  tag_gte: String
  tag_lt: String
  tag_lte: String
  tag_contains: String
  tag_has_prefix: String
  tag_has_suffix: String
  tag_is_nil: Boolean
  tag_not_nil: Boolean
  tag_equal_fold: String
  tag_contains_fold: String
  
  """time field predicates"""
  time: Time
  time_neq: Time
  time_in: [Time!]
  time_not_in: [Time!]
  time_gt: Time
  time_gte: Time
  time_lt: Time
  time_lte: Time
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """repo edge predicates"""
  has_repo: Boolean
  has_repo_with: [RepoWhereInput!]
  
  """release edge predicates"""
  has_release: Boolean
  has_release_with: [ReleaseWhereInput!]
}

"""
ReleaseComponentWhereInput is used for filtering ReleaseComponent objects.
Input was generated by ent.
"""
input ReleaseComponentWhereInput {
  not: ReleaseComponentWhereInput
  and: [ReleaseComponentWhereInput!]
  or: [ReleaseComponentWhereInput!]
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """release edge predicates"""
  has_release: Boolean
  has_release_with: [ReleaseWhereInput!]
  
  """scans edge predicates"""
  has_scans: Boolean
  has_scans_with: [CodeScanWhereInput!]
  
  """component edge predicates"""
  has_component: Boolean
  has_component_with: [ComponentWhereInput!]
  
  """vulnerabilities edge predicates"""
  has_vulnerabilities: Boolean
  has_vulnerabilities_with: [ReleaseVulnerabilityWhereInput!]
}

"""
TestCaseWhereInput is used for filtering TestCase objects.
Input was generated by ent.
"""
input TestCaseWhereInput {
  not: TestCaseWhereInput
  and: [TestCaseWhereInput!]
  or: [TestCaseWhereInput!]
  
  """name field predicates"""
  name: String
  name_neq: String
  name_in: [String!]
  name_not_in: [String!]
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_contains: String
  name_has_prefix: String
  name_has_suffix: String
  name_equal_fold: String
  name_contains_fold: String
  
  """result field predicates"""
  result: Boolean
  result_neq: Boolean
  
  """message field predicates"""
  message: String
  message_neq: String
  message_in: [String!]
  message_not_in: [String!]
  message_gt: String
  message_gte: String
  message_lt: String
  message_lte: String
  message_contains: String
  message_has_prefix: String
  message_has_suffix: String
  message_equal_fold: String
  message_contains_fold: String
  
  """elapsed field predicates"""
  elapsed: Float
  elapsed_neq: Float
  elapsed_in: [Float!]
  elapsed_not_in: [Float!]
  elapsed_gt: Float
  elapsed_gte: Float
  elapsed_lt: Float
  elapsed_lte: Float
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """run edge predicates"""
  has_run: Boolean
  has_run_with: [TestRunWhereInput!]
}

input TestRunOrder {
  direction: OrderDirection!
  field: TestRunOrderField
}

input ArtifactOrder {
  direction: OrderDirection!
  field: ArtifactOrderField
}

input GitCommitOrder {
  direction: OrderDirection!
  field: GitCommitOrderField
}

"""
LicenseWhereInput is used for filtering License objects.
Input was generated by ent.
"""
input LicenseWhereInput {
  not: LicenseWhereInput
  and: [LicenseWhereInput!]
  or: [LicenseWhereInput!]
  
  """spdx_id field predicates"""
  spdx_id: String
  spdx_id_neq: String
  spdx_id_in: [String!]
  spdx_id_not_in: [String!]
  spdx_id_gt: String
  spdx_id_gte: String
  spdx_id_lt: String
  spdx_id_lte: String
  spdx_id_contains: String
  spdx_id_has_prefix: String
  spdx_id_has_suffix: String
  spdx_id_equal_fold: String
  spdx_id_contains_fold: String
  
  """name field predicates"""
  name: String
  name_neq: String
  name_in: [String!]
  name_not_in: [String!]
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_contains: String
  name_has_prefix: String
  name_has_suffix: String
  name_equal_fold: String
  name_contains_fold: String
  
  """reference field predicates"""
  reference: String
  reference_neq: String
  reference_in: [String!]
  reference_not_in: [String!]
  reference_gt: String
  reference_gte: String
  reference_lt: String
  reference_lte: String
  reference_contains: String
  reference_has_prefix: String
  reference_has_suffix: String
  reference_is_nil: Boolean
  reference_not_nil: Boolean
  reference_equal_fold: String
  reference_contains_fold: String
  
  """details_url field predicates"""
  details_url: String
  details_url_neq: String
  details_url_in: [String!]
  details_url_not_in: [String!]
  details_url_gt: String
  details_url_gte: String
  details_url_lt: String
  details_url_lte: String
  details_url_contains: String
  details_url_has_prefix: String
  details_url_has_suffix: String
  details_url_is_nil: Boolean
  details_url_not_nil: Boolean
  details_url_equal_fold: String
  details_url_contains_fold: String
  
  """is_osi_approved field predicates"""
  is_osi_approved: Boolean
  is_osi_approved_neq: Boolean
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """components edge predicates"""
  has_components: Boolean
  has_components_with: [ComponentWhereInput!]
  
  """uses edge predicates"""
  has_uses: Boolean
  has_uses_with: [LicenseUseWhereInput!]
}

"""
ReleaseVulnerabilityWhereInput is used for filtering ReleaseVulnerability objects.
Input was generated by ent.
"""
input ReleaseVulnerabilityWhereInput {
  not: ReleaseVulnerabilityWhereInput
  and: [ReleaseVulnerabilityWhereInput!]
  or: [ReleaseVulnerabilityWhereInput!]
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """vulnerability edge predicates"""
  has_vulnerability: Boolean
  has_vulnerability_with: [VulnerabilityWhereInput!]
  
  """components edge predicates"""
  has_components: Boolean
  has_components_with: [ReleaseComponentWhereInput!]
  
  """release edge predicates"""
  has_release: Boolean
  has_release_with: [ReleaseWhereInput!]
  
  """reviews edge predicates"""
  has_reviews: Boolean
  has_reviews_with: [VulnerabilityReviewWhereInput!]
  
  """scans edge predicates"""
  has_scans: Boolean
  has_scans_with: [CodeScanWhereInput!]
}

"""
LicenseUseWhereInput is used for filtering LicenseUse objects.
Input was generated by ent.
"""
input LicenseUseWhereInput {
  not: LicenseUseWhereInput
  and: [LicenseUseWhereInput!]
  or: [LicenseUseWhereInput!]
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """license edge predicates"""
  has_license: Boolean
  has_license_with: [LicenseWhereInput!]
}

input ReleaseEntryOrder {
  direction: OrderDirection!
  field: ReleaseEntryOrderField
}

input TestCaseOrder {
  direction: OrderDirection!
  field: TestCaseOrderField
}

input VulnerabilityReviewOrder {
  direction: OrderDirection!
  field: VulnerabilityReviewOrderField
}

"""
VulnerabilityReviewWhereInput is used for filtering VulnerabilityReview objects.
Input was generated by ent.
"""
input VulnerabilityReviewWhereInput {
  not: VulnerabilityReviewWhereInput
  and: [VulnerabilityReviewWhereInput!]
  or: [VulnerabilityReviewWhereInput!]
  
  """name field predicates"""
  name: String
  name_neq: String
  name_in: [String!]
  name_not_in: [String!]
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_contains: String
  name_has_prefix: String
  name_has_suffix: String
  name_is_nil: Boolean
  name_not_nil: Boolean
  name_equal_fold: String
  name_contains_fold: String
  
  """decision field predicates"""
  decision: VulnerabilityReviewDecision
  decision_neq: VulnerabilityReviewDecision
  decision_in: [VulnerabilityReviewDecision!]
  decision_not_in: [VulnerabilityReviewDecision!]
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """vulnerability edge predicates"""
  has_vulnerability: Boolean
  has_vulnerability_with: [VulnerabilityWhereInput!]
  
  """projects edge predicates"""
  has_projects: Boolean
  has_projects_with: [ProjectWhereInput!]
  
  """repos edge predicates"""
  has_repos: Boolean
  has_repos_with: [RepoWhereInput!]
  
  """releases edge predicates"""
  has_releases: Boolean
  has_releases_with: [ReleaseWhereInput!]
  
  """instances edge predicates"""
  has_instances: Boolean
  has_instances_with: [ReleaseVulnerabilityWhereInput!]
}

input CWEOrder {
  direction: OrderDirection!
  field: CWEOrderField
}

input LicenseOrder {
  direction: OrderDirection!
  field: LicenseOrderField
}

"""
RepoWhereInput is used for filtering Repo objects.
Input was generated by ent.
"""
input RepoWhereInput {
  not: RepoWhereInput
  and: [RepoWhereInput!]
  or: [RepoWhereInput!]
  
  """name field predicates"""
  name: String
  name_neq: String
  name_in: [String!]
  name_not_in: [String!]
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_contains: String
  name_has_prefix: String
  name_has_suffix: String
  name_equal_fold: String
  name_contains_fold: String
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """projects edge predicates"""
  has_projects: Boolean
  has_projects_with: [ProjectWhereInput!]
  
  """commits edge predicates"""
  has_commits: Boolean
  has_commits_with: [GitCommitWhereInput!]
  
  """vulnerability_reviews edge predicates"""
  has_vulnerability_reviews: Boolean
  has_vulnerability_reviews_with: [VulnerabilityReviewWhereInput!]
}

input VulnerabilityOrder {
  direction: OrderDirection!
  field: VulnerabilityOrderField
}

"""
CWEWhereInput is used for filtering CWE objects.
Input was generated by ent.
"""
input CWEWhereInput {
  not: CWEWhereInput
  and: [CWEWhereInput!]
  or: [CWEWhereInput!]
  
  """cwe_id field predicates"""
  cwe_id: String
  cwe_id_neq: String
  cwe_id_in: [String!]
  cwe_id_not_in: [String!]
  cwe_id_gt: String
  cwe_id_gte: String
  cwe_id_lt: String
  cwe_id_lte: String
  cwe_id_contains: String
  cwe_id_has_prefix: String
  cwe_id_has_suffix: String
  cwe_id_equal_fold: String
  cwe_id_contains_fold: String
  
  """description field predicates"""
  description: String
  description_neq: String
  description_in: [String!]
  description_not_in: [String!]
  description_gt: String
  description_gte: String
  description_lt: String
  description_lte: String
  description_contains: String
  description_has_prefix: String
  description_has_suffix: String
  description_is_nil: Boolean
  description_not_nil: Boolean
  description_equal_fold: String
  description_contains_fold: String
  
  """url field predicates"""
  url: Float
  url_neq: Float
  url_in: [Float!]
  url_not_in: [Float!]
  url_gt: Float
  url_gte: Float
  url_lt: Float
  url_lte: Float
  url_is_nil: Boolean
  url_not_nil: Boolean
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """issues edge predicates"""
  has_issues: Boolean
  has_issues_with: [CodeIssueWhereInput!]
}

"""
CodeIssueWhereInput is used for filtering CodeIssue objects.
Input was generated by ent.
"""
input CodeIssueWhereInput {
  not: CodeIssueWhereInput
  and: [CodeIssueWhereInput!]
  or: [CodeIssueWhereInput!]
  
  """rule_id field predicates"""
  rule_id: String
  rule_id_neq: String
  rule_id_in: [String!]
  rule_id_not_in: [String!]
  rule_id_gt: String
  rule_id_gte: String
  rule_id_lt: String
  rule_id_lte: String
  rule_id_contains: String
  rule_id_has_prefix: String
  rule_id_has_suffix: String
  rule_id_equal_fold: String
  rule_id_contains_fold: String
  
  """message field predicates"""
  message: String
  message_neq: String
  message_in: [String!]
  message_not_in: [String!]
  message_gt: String
  message_gte: String
  message_lt: String
  message_lte: String
  message_contains: String
  message_has_prefix: String
  message_has_suffix: String
  message_equal_fold: String
  message_contains_fold: String
  
  """severity field predicates"""
  severity: CodeIssueSeverity
  severity_neq: CodeIssueSeverity
  severity_in: [CodeIssueSeverity!]
  severity_not_in: [CodeIssueSeverity!]
  
  """type field predicates"""
  type: CodeIssueType
  type_neq: CodeIssueType
  type_in: [CodeIssueType!]
  type_not_in: [CodeIssueType!]
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """cwe edge predicates"""
  has_cwe: Boolean
  has_cwe_with: [CWEWhereInput!]
  
  """scan edge predicates"""
  has_scan: Boolean
  has_scan_with: [CodeScanWhereInput!]
}

input CodeScanOrder {
  direction: OrderDirection!
  field: CodeScanOrderField
}

"""
ComponentWhereInput is used for filtering Component objects.
Input was generated by ent.
"""
input ComponentWhereInput {
  not: ComponentWhereInput
  and: [ComponentWhereInput!]
  or: [ComponentWhereInput!]
  
  """name field predicates"""
  name: String
  name_neq: String
  name_in: [String!]
  name_not_in: [String!]
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_contains: String
  name_has_prefix: String
  name_has_suffix: String
  name_equal_fold: String
  name_contains_fold: String
  
  """vendor field predicates"""
  vendor: String
  vendor_neq: String
  vendor_in: [String!]
  vendor_not_in: [String!]
  vendor_gt: String
  vendor_gte: String
  vendor_lt: String
  vendor_lte: String
  vendor_contains: String
  vendor_has_prefix: String
  vendor_has_suffix: String
  vendor_equal_fold: String
  vendor_contains_fold: String
  
  """version field predicates"""
  version: String
  version_neq: String
  version_in: [String!]
  version_not_in: [String!]
  version_gt: String
  version_gte: String
  version_lt: String
  version_lte: String
  version_contains: String
  version_has_prefix: String
  version_has_suffix: String
  version_equal_fold: String
  version_contains_fold: String
  
  """description field predicates"""
  description: String
  description_neq: String
  description_in: [String!]
  description_not_in: [String!]
  description_gt: String
  description_gte: String
  description_lt: String
  description_lte: String
  description_contains: String
  description_has_prefix: String
  description_has_suffix: String
  description_is_nil: Boolean
  description_not_nil: Boolean
  description_equal_fold: String
  description_contains_fold: String
  
  """url field predicates"""
  url: String
  url_neq: String
  url_in: [String!]
  url_not_in: [String!]
  url_gt: String
  url_gte: String
  url_lt: String
  url_lte: String
  url_contains: String
  url_has_prefix: String
  url_has_suffix: String
  url_is_nil: Boolean
  url_not_nil: Boolean
  url_equal_fold: String
  url_contains_fold: String
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """vulnerabilities edge predicates"""
  has_vulnerabilities: Boolean
  has_vulnerabilities_with: [VulnerabilityWhereInput!]
  
  """licenses edge predicates"""
  has_licenses: Boolean
  has_licenses_with: [LicenseWhereInput!]
  
  """uses edge predicates"""
  has_uses: Boolean
  has_uses_with: [ReleaseComponentWhereInput!]
}

"""
TestRunWhereInput is used for filtering TestRun objects.
Input was generated by ent.
"""
input TestRunWhereInput {
  not: TestRunWhereInput
  and: [TestRunWhereInput!]
  or: [TestRunWhereInput!]
  
  """tool field predicates"""
  tool: String
  tool_neq: String
  tool_in: [String!]
  tool_not_in: [String!]
  tool_gt: String
  tool_gte: String
  tool_lt: String
  tool_lte: String
  tool_contains: String
  tool_has_prefix: String
  tool_has_suffix: String
  tool_equal_fold: String
  tool_contains_fold: String
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """release edge predicates"""
  has_release: Boolean
  has_release_with: [ReleaseWhereInput!]
  
  """entry edge predicates"""
  has_entry: Boolean
  has_entry_with: [ReleaseEntryWhereInput!]
  
  """tests edge predicates"""
  has_tests: Boolean
  has_tests_with: [TestCaseWhereInput!]
}

"""
ArtifactWhereInput is used for filtering Artifact objects.
Input was generated by ent.
"""
input ArtifactWhereInput {
  not: ArtifactWhereInput
  and: [ArtifactWhereInput!]
  or: [ArtifactWhereInput!]
  
  """name field predicates"""
  name: String
  name_neq: String
  name_in: [String!]
  name_not_in: [String!]
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_contains: String
  name_has_prefix: String
  name_has_suffix: String
  name_equal_fold: String
  name_contains_fold: String
  
  """sha256 field predicates"""
  sha256: String
  sha256_neq: String
  sha256_in: [String!]
  sha256_not_in: [String!]
  sha256_gt: String
  sha256_gte: String
  sha256_lt: String
  sha256_lte: String
  sha256_contains: String
  sha256_has_prefix: String
  sha256_has_suffix: String
  sha256_equal_fold: String
  sha256_contains_fold: String
  
  """type field predicates"""
  type: ArtifactType
  type_neq: ArtifactType
  type_in: [ArtifactType!]
  type_not_in: [ArtifactType!]
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """release edge predicates"""
  has_release: Boolean
  has_release_with: [ReleaseWhereInput!]
  
  """entry edge predicates"""
  has_entry: Boolean
  has_entry_with: [ReleaseEntryWhereInput!]
}

input CodeIssueOrder {
  direction: OrderDirection!
  field: CodeIssueOrderField
}

input ProjectOrder {
  direction: OrderDirection!
  field: ProjectOrderField
}

"""
VulnerabilityWhereInput is used for filtering Vulnerability objects.
Input was generated by ent.
"""
input VulnerabilityWhereInput {
  not: VulnerabilityWhereInput
  and: [VulnerabilityWhereInput!]
  or: [VulnerabilityWhereInput!]
  
  """vid field predicates"""
  vid: String
  vid_neq: String
  vid_in: [String!]
  vid_not_in: [String!]
  vid_gt: String
  vid_gte: String
  vid_lt: String
  vid_lte: String
  vid_contains: String
  vid_has_prefix: String
  vid_has_suffix: String
  vid_equal_fold: String
  vid_contains_fold: String
  
  """summary field predicates"""
  summary: String
  summary_neq: String
  summary_in: [String!]
  summary_not_in: [String!]
  summary_gt: String
  summary_gte: String
  summary_lt: String
  summary_lte: String
  summary_contains: String
  summary_has_prefix: String
  summary_has_suffix: String
  summary_is_nil: Boolean
  summary_not_nil: Boolean
  summary_equal_fold: String
  summary_contains_fold: String
  
  """description field predicates"""
  description: String
  description_neq: String
  description_in: [String!]
  description_not_in: [String!]
  description_gt: String
  description_gte: String
  description_lt: String
  description_lte: String
  description_contains: String
  description_has_prefix: String
  description_has_suffix: String
  description_is_nil: Boolean
  description_not_nil: Boolean
  description_equal_fold: String
  description_contains_fold: String
  
  """severity_score field predicates"""
  severity_score: Float
  severity_score_neq: Float
  severity_score_in: [Float!]
  severity_score_not_in: [Float!]
  severity_score_gt: Float
  severity_score_gte: Float
  severity_score_lt: Float
  severity_score_lte: Float
  
  """severity field predicates"""
  severity: VulnerabilitySeverity
  severity_neq: VulnerabilitySeverity
  severity_in: [VulnerabilitySeverity!]
  severity_not_in: [VulnerabilitySeverity!]
  
  """published field predicates"""
  published: Time
  published_neq: Time
  published_in: [Time!]
  published_not_in: [Time!]
  published_gt: Time
  published_gte: Time
  published_lt: Time
  published_lte: Time
  published_is_nil: Boolean
  published_not_nil: Boolean
  
  """modified field predicates"""
  modified: Time
  modified_neq: Time
  modified_in: [Time!]
  modified_not_in: [Time!]
  modified_gt: Time
  modified_gte: Time
  modified_lt: Time
  modified_lte: Time
  modified_is_nil: Boolean
  modified_not_nil: Boolean
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """components edge predicates"""
  has_components: Boolean
  has_components_with: [ComponentWhereInput!]
  
  """reviews edge predicates"""
  has_reviews: Boolean
  has_reviews_with: [VulnerabilityReviewWhereInput!]
  
  """instances edge predicates"""
  has_instances: Boolean
  has_instances_with: [ReleaseVulnerabilityWhereInput!]
}

"""
ProjectWhereInput is used for filtering Project objects.
Input was generated by ent.
"""
input ProjectWhereInput {
  not: ProjectWhereInput
  and: [ProjectWhereInput!]
  or: [ProjectWhereInput!]
  
  """name field predicates"""
  name: String
  name_neq: String
  name_in: [String!]
  name_not_in: [String!]
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_contains: String
  name_has_prefix: String
  name_has_suffix: String
  name_equal_fold: String
  name_contains_fold: String
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """repos edge predicates"""
  has_repos: Boolean
  has_repos_with: [RepoWhereInput!]
  
  """vulnerability_reviews edge predicates"""
  has_vulnerability_reviews: Boolean
  has_vulnerability_reviews_with: [VulnerabilityReviewWhereInput!]
}

input ReleaseOrder {
  direction: OrderDirection!
  field: ReleaseOrderField
}

"""
ReleaseWhereInput is used for filtering Release objects.
Input was generated by ent.
"""
input ReleaseWhereInput {
  not: ReleaseWhereInput
  and: [ReleaseWhereInput!]
  or: [ReleaseWhereInput!]
  
  """name field predicates"""
  name: String
  name_neq: String
  name_in: [String!]
  name_not_in: [String!]
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_contains: String
  name_has_prefix: String
  name_has_suffix: String
  name_equal_fold: String
  name_contains_fold: String
  
  """version field predicates"""
  version: String
  version_neq: String
  version_in: [String!]
  version_not_in: [String!]
  version_gt: String
  version_gte: String
  version_lt: String
  version_lte: String
  version_contains: String
  version_has_prefix: String
  version_has_suffix: String
  version_equal_fold: String
  version_contains_fold: String
  
  """status field predicates"""
  status: ReleaseStatus
  status_neq: ReleaseStatus
  status_in: [ReleaseStatus!]
  status_not_in: [ReleaseStatus!]
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """subreleases edge predicates"""
  has_subreleases: Boolean
  has_subreleases_with: [ReleaseWhereInput!]
  
  """dependencies edge predicates"""
  has_dependencies: Boolean
  has_dependencies_with: [ReleaseWhereInput!]
  
  """commit edge predicates"""
  has_commit: Boolean
  has_commit_with: [GitCommitWhereInput!]
  
  """log edge predicates"""
  has_log: Boolean
  has_log_with: [ReleaseEntryWhereInput!]
  
  """artifacts edge predicates"""
  has_artifacts: Boolean
  has_artifacts_with: [ArtifactWhereInput!]
  
  """components edge predicates"""
  has_components: Boolean
  has_components_with: [ReleaseComponentWhereInput!]
  
  """vulnerabilities edge predicates"""
  has_vulnerabilities: Boolean
  has_vulnerabilities_with: [ReleaseVulnerabilityWhereInput!]
  
  """code_scans edge predicates"""
  has_code_scans: Boolean
  has_code_scans_with: [CodeScanWhereInput!]
  
  """test_runs edge predicates"""
  has_test_runs: Boolean
  has_test_runs_with: [TestRunWhereInput!]
  
  """vulnerability_reviews edge predicates"""
  has_vulnerability_reviews: Boolean
  has_vulnerability_reviews_with: [VulnerabilityReviewWhereInput!]
}


input ComponentOrder {
  direction: OrderDirection!
  field: ComponentOrderField
}

"""
ReleaseEntryWhereInput is used for filtering ReleaseEntry objects.
Input was generated by ent.
"""
input ReleaseEntryWhereInput {
  not: ReleaseEntryWhereInput
  and: [ReleaseEntryWhereInput!]
  or: [ReleaseEntryWhereInput!]
  
  """type field predicates"""
  type: ReleaseEntryType
  type_neq: ReleaseEntryType
  type_in: [ReleaseEntryType!]
  type_not_in: [ReleaseEntryType!]
  
  """time field predicates"""
  time: Time
  time_neq: Time
  time_in: [Time!]
  time_not_in: [Time!]
  time_gt: Time
  time_gte: Time
  time_lt: Time
  time_lte: Time
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """artifact edge predicates"""
  has_artifact: Boolean
  has_artifact_with: [ArtifactWhereInput!]
  
  """code_scan edge predicates"""
  has_code_scan: Boolean
  has_code_scan_with: [CodeScanWhereInput!]
  
  """test_run edge predicates"""
  has_test_run: Boolean
  has_test_run_with: [TestRunWhereInput!]
  
  """release edge predicates"""
  has_release: Boolean
  has_release_with: [ReleaseWhereInput!]
}

input RepoOrder {
  direction: OrderDirection!
  field: RepoOrderField
}
