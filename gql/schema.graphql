
directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

scalar Map

"""Query generated by ent."""
type Query {
  policy(first: Int, last: Int, order_by: ReleasePolicyOrder, where: ReleasePolicyWhereInput): [ReleasePolicy]
  artifact(first: Int, last: Int, order_by: ArtifactOrder, where: ArtifactWhereInput): [Artifact]
  component(first: Int, last: Int, order_by: ComponentOrder, where: ComponentWhereInput): [Component]
  license_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: LicenseOrder, where: LicenseWhereInput): LicenseConnection
  vulnerability_review(first: Int, last: Int, order_by: VulnerabilityReviewOrder, where: VulnerabilityReviewWhereInput): [VulnerabilityReview]
  license(first: Int, last: Int, order_by: LicenseOrder, where: LicenseWhereInput): [License]
  repo(first: Int, last: Int, order_by: RepoOrder, where: RepoWhereInput): [Repo]
  project(first: Int, last: Int, order_by: ProjectOrder, where: ProjectWhereInput): [Project]
  release(first: Int, last: Int, order_by: ReleaseOrder, where: ReleaseWhereInput): [Release]
  repo_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: RepoOrder, where: RepoWhereInput): RepoConnection
  commit(first: Int, last: Int, order_by: GitCommitOrder, where: GitCommitWhereInput): [GitCommit]
  project_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ProjectOrder, where: ProjectWhereInput): ProjectConnection
  release_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ReleaseOrder, where: ReleaseWhereInput): ReleaseConnection
  vulnerability(first: Int, last: Int, order_by: VulnerabilityOrder, where: VulnerabilityWhereInput): [Vulnerability]
}

"""
Maps a Time GraphQL scalar to a Go time.Time struct.
Generated by ent.
"""
scalar Time

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
Generated by ent.
"""
scalar Cursor

interface Node {
  id: ID!
}

enum ReleaseEntryType {
  artifact
  deploy
  code_scan
  test_run
}

enum ReleaseEntryOrderField {
  type
  time
}

enum ReleasePolicyOrderField {
  name
}

enum CodeIssueType {
  style
  security
  bug
}

enum ComponentOrderField {
  name
  vendor
  version
}

enum ReleasePolicyViolationType {
  require
  deny
}

enum ReleasePolicyViolationSeverity {
  suggestion
  warning
  blocking
}

enum VulnerabilityReviewDecision {
  exploitable
  in_progress
  invalid
  mitigated
  ineffective
}

enum VulnerabilityReviewOrderField {
  name
}

enum OrderDirection {
  ASC
  DESC
}

enum CodeScanOrderField {
  tool
  time
}

enum ReleaseStatus {
  pending
  ready
  blocked
}

enum ProjectOrderField {
  name
}

enum GitCommitOrderField {
  hash
  branch
  tag
  time
}

enum LicenseOrderField {
  spdx_id
  name
}

enum TestCaseOrderField {
  name
}

enum TestRunOrderField {
  tool
  time
}

enum VulnerabilityOrderField {
  vid
  severity_score
  severity
  published
  modified
}

enum ArtifactType {
  docker
  file
}

enum EventType {
  evaluate_release
}

enum ReleaseComponentType {
  embedded
  distributed
  development
}

enum ArtifactOrderField {
  name
  sha256
  type
  time
}

enum CodeIssueSeverity {
  low
  medium
  high
}

enum ReleaseOrderField {
  name
  version
}

enum RepoOrderField {
  name
}

enum VulnerabilitySeverity {
  None
  Low
  Medium
  High
  Critical
}

enum AdapterOrderField {
  name
  tag
}

enum CodeIssueOrderField {
  rule_id
  severity
  type
}

"""
ProjectConnection supports the relay edge specification for node Project in the ent schema.
Generated by ent.
"""
type ProjectEdge {
  node: Project
  cursor: Cursor!
}

"""
ReleaseEntryConnection supports the relay connection specification for node ReleaseEntry in the ent schema.
Generated by ent.
"""
type ReleaseEntryConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseEntryEdge]
}

"""
CodeIssue represents the node CodeIssue in the ent schema.
Generated by ent.
"""
type CodeIssue implements Node {
  id: ID!
  rule_id: String
  message: String
  severity: CodeIssueSeverity
  type: CodeIssueType
  metadata: Map
  scan: CodeScan!
}

"""
CodeIssueConnection supports the relay connection specification for node CodeIssue in the ent schema.
Generated by ent.
"""
type CodeIssueConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CodeIssueEdge]
}

"""
ReleaseVulnerabilityConnection supports the relay connection specification for node ReleaseVulnerability in the ent schema.
Generated by ent.
"""
type ReleaseVulnerabilityConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseVulnerabilityEdge]
}

"""
VulnerabilityReview represents the node VulnerabilityReview in the ent schema.
Generated by ent.
"""
type VulnerabilityReview implements Node {
  id: ID!
  note: String
  decision: VulnerabilityReviewDecision
  vulnerability: Vulnerability!
  projects(first: Int, last: Int, where: ProjectWhereInput, order_by: ProjectOrder): [Project] @goField(forceResolver: true)
  repos(first: Int, last: Int, where: RepoWhereInput, order_by: RepoOrder): [Repo] @goField(forceResolver: true)
  releases(first: Int, last: Int, where: ReleaseWhereInput, order_by: ReleaseOrder): [Release] @goField(forceResolver: true)
  instances(first: Int, last: Int, where: ReleaseVulnerabilityWhereInput): [ReleaseVulnerability] @goField(forceResolver: true)
}

"""
ProjectConnection supports the relay connection specification for node Project in the ent schema.
Generated by ent.
"""
type ProjectConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ProjectEdge]
}

"""
ReleasePolicyConnection supports the relay connection specification for node ReleasePolicy in the ent schema.
Generated by ent.
"""
type ReleasePolicyConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleasePolicyEdge]
}

"""
ReleasePolicyViolationConnection supports the relay edge specification for node ReleasePolicyViolation in the ent schema.
Generated by ent.
"""
type ReleasePolicyViolationEdge {
  node: ReleasePolicyViolation
  cursor: Cursor!
}

"""
TestRunConnection supports the relay edge specification for node TestRun in the ent schema.
Generated by ent.
"""
type TestRunEdge {
  node: TestRun
  cursor: Cursor!
}

"""
ReleaseVulnerabilityConnection supports the relay edge specification for node ReleaseVulnerability in the ent schema.
Generated by ent.
"""
type ReleaseVulnerabilityEdge {
  node: ReleaseVulnerability
  cursor: Cursor!
}

"""
AdapterConnection supports the relay edge specification for node Adapter in the ent schema.
Generated by ent.
"""
type AdapterEdge {
  node: Adapter
  cursor: Cursor!
}

"""
ReleaseConnection supports the relay edge specification for node Release in the ent schema.
Generated by ent.
"""
type ReleaseEdge {
  node: Release
  cursor: Cursor!
}

"""
ReleaseLicense represents the node ReleaseLicense in the ent schema.
Generated by ent.
"""
type ReleaseLicense implements Node {
  id: ID!
  license: License!
  component: ReleaseComponent
  release: Release!
  scans(first: Int, last: Int, where: CodeScanWhereInput, order_by: CodeScanOrder): [CodeScan] @goField(forceResolver: true)
}

"""
ReleaseLicenseConnection supports the relay edge specification for node ReleaseLicense in the ent schema.
Generated by ent.
"""
type ReleaseLicenseEdge {
  node: ReleaseLicense
  cursor: Cursor!
}

"""
ReleasePolicy represents the node ReleasePolicy in the ent schema.
Generated by ent.
"""
type ReleasePolicy implements Node {
  id: ID!
  name: String
  module: String
  projects(first: Int, last: Int, where: ProjectWhereInput, order_by: ProjectOrder): [Project] @goField(forceResolver: true)
  repos(first: Int, last: Int, where: RepoWhereInput, order_by: RepoOrder): [Repo] @goField(forceResolver: true)
  violations(first: Int, last: Int, where: ReleasePolicyViolationWhereInput): [ReleasePolicyViolation] @goField(forceResolver: true)
}

"""
ArtifactConnection supports the relay connection specification for node Artifact in the ent schema.
Generated by ent.
"""
type ArtifactConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ArtifactEdge]
}

"""
CodeIssueConnection supports the relay edge specification for node CodeIssue in the ent schema.
Generated by ent.
"""
type CodeIssueEdge {
  node: CodeIssue
  cursor: Cursor!
}

"""
TestCaseConnection supports the relay edge specification for node TestCase in the ent schema.
Generated by ent.
"""
type TestCaseEdge {
  node: TestCase
  cursor: Cursor!
}

"""
VulnerabilityReviewConnection supports the relay edge specification for node VulnerabilityReview in the ent schema.
Generated by ent.
"""
type VulnerabilityReviewEdge {
  node: VulnerabilityReview
  cursor: Cursor!
}

"""
TestCase represents the node TestCase in the ent schema.
Generated by ent.
"""
type TestCase implements Node {
  id: ID!
  name: String
  result: Boolean
  message: String
  elapsed: Float
  metadata: Map
  run: TestRun!
}

"""
TestRunConnection supports the relay connection specification for node TestRun in the ent schema.
Generated by ent.
"""
type TestRunConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TestRunEdge]
}

"""
VulnerabilityConnection supports the relay edge specification for node Vulnerability in the ent schema.
Generated by ent.
"""
type VulnerabilityEdge {
  node: Vulnerability
  cursor: Cursor!
}

"""
VulnerabilityReviewConnection supports the relay connection specification for node VulnerabilityReview in the ent schema.
Generated by ent.
"""
type VulnerabilityReviewConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [VulnerabilityReviewEdge]
}

"""
AdapterConnection supports the relay connection specification for node Adapter in the ent schema.
Generated by ent.
"""
type AdapterConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AdapterEdge]
}

"""
ComponentConnection supports the relay connection specification for node Component in the ent schema.
Generated by ent.
"""
type ComponentConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ComponentEdge]
}

"""
LicenseConnection supports the relay edge specification for node License in the ent schema.
Generated by ent.
"""
type LicenseEdge {
  node: License
  cursor: Cursor!
}

"""
Release represents the node Release in the ent schema.
Generated by ent.
"""
type Release implements Node {
  id: ID!
  name: String
  version: String
  status: ReleaseStatus
  subreleases(first: Int, last: Int, where: ReleaseWhereInput, order_by: ReleaseOrder): [Release] @goField(forceResolver: true)
  dependencies(first: Int, last: Int, where: ReleaseWhereInput, order_by: ReleaseOrder): [Release] @goField(forceResolver: true)
  commit: GitCommit!
  head_of: Repo
  log(first: Int, last: Int, where: ReleaseEntryWhereInput, order_by: ReleaseEntryOrder): [ReleaseEntry] @goField(forceResolver: true)
  violations(first: Int, last: Int, where: ReleasePolicyViolationWhereInput): [ReleasePolicyViolation] @goField(forceResolver: true)
  artifacts(first: Int, last: Int, where: ArtifactWhereInput, order_by: ArtifactOrder): [Artifact] @goField(forceResolver: true)
  components(first: Int, last: Int, where: ReleaseComponentWhereInput): [ReleaseComponent] @goField(forceResolver: true)
  licenses(first: Int, last: Int, where: ReleaseLicenseWhereInput): [ReleaseLicense] @goField(forceResolver: true)
  vulnerabilities(first: Int, last: Int, where: ReleaseVulnerabilityWhereInput): [ReleaseVulnerability] @goField(forceResolver: true)
  code_scans(first: Int, last: Int, where: CodeScanWhereInput, order_by: CodeScanOrder): [CodeScan] @goField(forceResolver: true)
  test_runs(first: Int, last: Int, where: TestRunWhereInput, order_by: TestRunOrder): [TestRun] @goField(forceResolver: true)
  vulnerability_reviews(first: Int, last: Int, where: VulnerabilityReviewWhereInput, order_by: VulnerabilityReviewOrder): [VulnerabilityReview] @goField(forceResolver: true)
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

"""
RepoConnection supports the relay connection specification for node Repo in the ent schema.
Generated by ent.
"""
type RepoConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [RepoEdge]
}

"""
ReleaseLicenseConnection supports the relay connection specification for node ReleaseLicense in the ent schema.
Generated by ent.
"""
type ReleaseLicenseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseLicenseEdge]
}

"""
ReleaseVulnerability represents the node ReleaseVulnerability in the ent schema.
Generated by ent.
"""
type ReleaseVulnerability implements Node {
  id: ID!
  vulnerability: Vulnerability!
  component: ReleaseComponent
  release: Release!
  reviews(first: Int, last: Int, where: VulnerabilityReviewWhereInput, order_by: VulnerabilityReviewOrder): [VulnerabilityReview] @goField(forceResolver: true)
  scan: CodeScan
}

"""
Repo represents the node Repo in the ent schema.
Generated by ent.
"""
type Repo implements Node {
  id: ID!
  name: String
  default_branch: String
  project: Project!
  head: Release
  commits(first: Int, last: Int, where: GitCommitWhereInput, order_by: GitCommitOrder): [GitCommit] @goField(forceResolver: true)
  vulnerability_reviews(first: Int, last: Int, where: VulnerabilityReviewWhereInput, order_by: VulnerabilityReviewOrder): [VulnerabilityReview] @goField(forceResolver: true)
  policies(first: Int, last: Int, where: ReleasePolicyWhereInput, order_by: ReleasePolicyOrder): [ReleasePolicy] @goField(forceResolver: true)
}

"""
CodeScanConnection supports the relay connection specification for node CodeScan in the ent schema.
Generated by ent.
"""
type CodeScanConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CodeScanEdge]
}

"""
CodeScanConnection supports the relay edge specification for node CodeScan in the ent schema.
Generated by ent.
"""
type CodeScanEdge {
  node: CodeScan
  cursor: Cursor!
}

"""
ComponentConnection supports the relay edge specification for node Component in the ent schema.
Generated by ent.
"""
type ComponentEdge {
  node: Component
  cursor: Cursor!
}

"""
Project represents the node Project in the ent schema.
Generated by ent.
"""
type Project implements Node {
  id: ID!
  name: String
  repos(first: Int, last: Int, where: RepoWhereInput, order_by: RepoOrder): [Repo] @goField(forceResolver: true)
  vulnerability_reviews(first: Int, last: Int, where: VulnerabilityReviewWhereInput, order_by: VulnerabilityReviewOrder): [VulnerabilityReview] @goField(forceResolver: true)
  policies(first: Int, last: Int, where: ReleasePolicyWhereInput, order_by: ReleasePolicyOrder): [ReleasePolicy] @goField(forceResolver: true)
}

"""
TestCaseConnection supports the relay connection specification for node TestCase in the ent schema.
Generated by ent.
"""
type TestCaseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TestCaseEdge]
}

"""
CodeScan represents the node CodeScan in the ent schema.
Generated by ent.
"""
type CodeScan implements Node {
  id: ID!
  tool: String
  time: Time
  metadata: Map
  release: Release!
  entry: ReleaseEntry
  issues(first: Int, last: Int, where: CodeIssueWhereInput, order_by: CodeIssueOrder): [CodeIssue] @goField(forceResolver: true)
  vulnerabilities(first: Int, last: Int, where: ReleaseVulnerabilityWhereInput): [ReleaseVulnerability] @goField(forceResolver: true)
  components(first: Int, last: Int, where: ReleaseComponentWhereInput): [ReleaseComponent] @goField(forceResolver: true)
}

"""
GitCommitConnection supports the relay edge specification for node GitCommit in the ent schema.
Generated by ent.
"""
type GitCommitEdge {
  node: GitCommit
  cursor: Cursor!
}

"""
ReleaseConnection supports the relay connection specification for node Release in the ent schema.
Generated by ent.
"""
type ReleaseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseEdge]
}

"""
ReleasePolicyViolation represents the node ReleasePolicyViolation in the ent schema.
Generated by ent.
"""
type ReleasePolicyViolation implements Node {
  id: ID!
  message: String
  type: ReleasePolicyViolationType
  severity: ReleasePolicyViolationSeverity
  policy: ReleasePolicy!
  release: Release!
}

"""
ReleasePolicyViolationConnection supports the relay connection specification for node ReleasePolicyViolation in the ent schema.
Generated by ent.
"""
type ReleasePolicyViolationConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleasePolicyViolationEdge]
}

"""
GitCommit represents the node GitCommit in the ent schema.
Generated by ent.
"""
type GitCommit implements Node {
  id: ID!
  hash: String
  branch: String
  tag: String
  time: Time
  repo: Repo!
  release: Release
}

"""
ReleaseEntry represents the node ReleaseEntry in the ent schema.
Generated by ent.
"""
type ReleaseEntry implements Node {
  id: ID!
  type: ReleaseEntryType
  time: Time
  artifact: Artifact
  code_scan: CodeScan
  test_run: TestRun
  release: Release!
}

"""
RepoConnection supports the relay edge specification for node Repo in the ent schema.
Generated by ent.
"""
type RepoEdge {
  node: Repo
  cursor: Cursor!
}

"""
Adapter represents the node Adapter in the ent schema.
Generated by ent.
"""
type Adapter implements Node {
  id: ID!
  name: String
  tag: String
  module: String
}

"""
ReleaseComponent represents the node ReleaseComponent in the ent schema.
Generated by ent.
"""
type ReleaseComponent implements Node {
  id: ID!
  type: ReleaseComponentType
  release: Release!
  scans(first: Int, last: Int, where: CodeScanWhereInput, order_by: CodeScanOrder): [CodeScan!] @goField(forceResolver: true)
  component: Component!
  vulnerabilities(first: Int, last: Int, where: ReleaseVulnerabilityWhereInput): [ReleaseVulnerability] @goField(forceResolver: true)
  licenses(first: Int, last: Int, where: ReleaseLicenseWhereInput): [ReleaseLicense] @goField(forceResolver: true)
}

"""
Vulnerability represents the node Vulnerability in the ent schema.
Generated by ent.
"""
type Vulnerability implements Node {
  id: ID!
  vid: String
  summary: String
  description: String
  severity_score: Float
  severity: VulnerabilitySeverity
  published: Time
  modified: Time
  metadata: Map
  components(first: Int, last: Int, where: ComponentWhereInput, order_by: ComponentOrder): [Component] @goField(forceResolver: true)
  reviews(first: Int, last: Int, where: VulnerabilityReviewWhereInput, order_by: VulnerabilityReviewOrder): [VulnerabilityReview] @goField(forceResolver: true)
  instances(first: Int, last: Int, where: ReleaseVulnerabilityWhereInput): [ReleaseVulnerability] @goField(forceResolver: true)
}

"""
GitCommitConnection supports the relay connection specification for node GitCommit in the ent schema.
Generated by ent.
"""
type GitCommitConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [GitCommitEdge]
}

"""
Artifact represents the node Artifact in the ent schema.
Generated by ent.
"""
type Artifact implements Node {
  id: ID!
  name: String
  sha256: String
  type: ArtifactType
  time: Time
  metadata: Map
  release: Release
  entry: ReleaseEntry
}

"""
ReleaseComponentConnection supports the relay edge specification for node ReleaseComponent in the ent schema.
Generated by ent.
"""
type ReleaseComponentEdge {
  node: ReleaseComponent
  cursor: Cursor!
}

"""
ReleasePolicyConnection supports the relay edge specification for node ReleasePolicy in the ent schema.
Generated by ent.
"""
type ReleasePolicyEdge {
  node: ReleasePolicy
  cursor: Cursor!
}

"""
TestRun represents the node TestRun in the ent schema.
Generated by ent.
"""
type TestRun implements Node {
  id: ID!
  tool: String
  time: Time
  metadata: Map
  release: Release!
  entry: ReleaseEntry
  tests(first: Int, last: Int, where: TestCaseWhereInput, order_by: TestCaseOrder): [TestCase] @goField(forceResolver: true)
}

"""
VulnerabilityConnection supports the relay connection specification for node Vulnerability in the ent schema.
Generated by ent.
"""
type VulnerabilityConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [VulnerabilityEdge]
}

"""
ArtifactConnection supports the relay edge specification for node Artifact in the ent schema.
Generated by ent.
"""
type ArtifactEdge {
  node: Artifact
  cursor: Cursor!
}

"""
Component represents the node Component in the ent schema.
Generated by ent.
"""
type Component implements Node {
  id: ID!
  name: String
  vendor: String
  version: String
  description: String
  url: String
  metadata: Map
  vulnerabilities(first: Int, last: Int, where: VulnerabilityWhereInput, order_by: VulnerabilityOrder): [Vulnerability] @goField(forceResolver: true)
  licenses(first: Int, last: Int, where: LicenseWhereInput, order_by: LicenseOrder): [License] @goField(forceResolver: true)
  uses(first: Int, last: Int, where: ReleaseComponentWhereInput): [ReleaseComponent] @goField(forceResolver: true)
}

"""
ReleaseEntryConnection supports the relay edge specification for node ReleaseEntry in the ent schema.
Generated by ent.
"""
type ReleaseEntryEdge {
  node: ReleaseEntry
  cursor: Cursor!
}

"""
License represents the node License in the ent schema.
Generated by ent.
"""
type License implements Node {
  id: ID!
  license_id: String
  name: String
  reference: String
  details_url: String
  is_osi_approved: Boolean
  components(first: Int, last: Int, where: ComponentWhereInput, order_by: ComponentOrder): [Component] @goField(forceResolver: true)
  instances(first: Int, last: Int, where: ReleaseLicenseWhereInput): [ReleaseLicense] @goField(forceResolver: true)
}

"""
LicenseConnection supports the relay connection specification for node License in the ent schema.
Generated by ent.
"""
type LicenseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [LicenseEdge]
}

"""
ReleaseComponentConnection supports the relay connection specification for node ReleaseComponent in the ent schema.
Generated by ent.
"""
type ReleaseComponentConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseComponentEdge]
}

input AdapterOrder {
  direction: OrderDirection!
  field: AdapterOrderField
}



input ReleaseEntryOrder {
  direction: OrderDirection!
  field: ReleaseEntryOrderField
}

input ArtifactOrder {
  direction: OrderDirection!
  field: ArtifactOrderField
}

input ProjectOrder {
  direction: OrderDirection!
  field: ProjectOrderField
}

input TestCaseOrder {
  direction: OrderDirection!
  field: TestCaseOrderField
}

input LicenseOrder {
  direction: OrderDirection!
  field: LicenseOrderField
}

input TestRunOrder {
  direction: OrderDirection!
  field: TestRunOrderField
}


input RepoOrder {
  direction: OrderDirection!
  field: RepoOrderField
}

input CodeIssueOrder {
  direction: OrderDirection!
  field: CodeIssueOrderField
}

input ComponentOrder {
  direction: OrderDirection!
  field: ComponentOrderField
}

input GitCommitOrder {
  direction: OrderDirection!
  field: GitCommitOrderField
}


input VulnerabilityReviewOrder {
  direction: OrderDirection!
  field: VulnerabilityReviewOrderField
}


input ReleaseOrder {
  direction: OrderDirection!
  field: ReleaseOrderField
}

input ReleasePolicyOrder {
  direction: OrderDirection!
  field: ReleasePolicyOrderField
}


input CodeScanOrder {
  direction: OrderDirection!
  field: CodeScanOrderField
}


input VulnerabilityOrder {
  direction: OrderDirection!
  field: VulnerabilityOrderField
}

