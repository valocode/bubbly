// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/valocode/bubbly/ent"
	"github.com/valocode/bubbly/ent/artifact"
	"github.com/valocode/bubbly/ent/codeissue"
	"github.com/valocode/bubbly/ent/event"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releasecomponent"
	"github.com/valocode/bubbly/ent/releaseentry"
	"github.com/valocode/bubbly/ent/releasepolicyviolation"
	"github.com/valocode/bubbly/ent/vulnerability"
	"github.com/valocode/bubbly/ent/vulnerabilityreview"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Artifact() ArtifactResolver
	CodeIssue() CodeIssueResolver
	CodeScan() CodeScanResolver
	Component() ComponentResolver
	License() LicenseResolver
	Project() ProjectResolver
	Query() QueryResolver
	Release() ReleaseResolver
	ReleaseComponent() ReleaseComponentResolver
	ReleaseLicense() ReleaseLicenseResolver
	ReleasePolicy() ReleasePolicyResolver
	ReleaseVulnerability() ReleaseVulnerabilityResolver
	Repo() RepoResolver
	TestCase() TestCaseResolver
	TestRun() TestRunResolver
	Vulnerability() VulnerabilityResolver
	VulnerabilityReview() VulnerabilityReviewResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Adapter struct {
		ID     func(childComplexity int) int
		Module func(childComplexity int) int
		Name   func(childComplexity int) int
		Tag    func(childComplexity int) int
	}

	AdapterConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AdapterEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Artifact struct {
		Entry    func(childComplexity int) int
		ID       func(childComplexity int) int
		Metadata func(childComplexity int) int
		Name     func(childComplexity int) int
		Release  func(childComplexity int) int
		Sha256   func(childComplexity int) int
		Time     func(childComplexity int) int
		Type     func(childComplexity int) int
	}

	ArtifactConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ArtifactEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CodeIssue struct {
		ID       func(childComplexity int) int
		Message  func(childComplexity int) int
		Metadata func(childComplexity int) int
		RuleID   func(childComplexity int) int
		Scan     func(childComplexity int) int
		Severity func(childComplexity int) int
		Type     func(childComplexity int) int
	}

	CodeIssueConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CodeIssueEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CodeScan struct {
		Components      func(childComplexity int, first *int, last *int, where *ent.ReleaseComponentWhereInput) int
		Entry           func(childComplexity int) int
		ID              func(childComplexity int) int
		Issues          func(childComplexity int, first *int, last *int, where *ent.CodeIssueWhereInput, orderBy *ent.CodeIssueOrder) int
		Metadata        func(childComplexity int) int
		Release         func(childComplexity int) int
		Time            func(childComplexity int) int
		Tool            func(childComplexity int) int
		Vulnerabilities func(childComplexity int, first *int, last *int, where *ent.ReleaseVulnerabilityWhereInput) int
	}

	CodeScanConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CodeScanEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Component struct {
		Description     func(childComplexity int) int
		ID              func(childComplexity int) int
		Licenses        func(childComplexity int, first *int, last *int, where *ent.LicenseWhereInput, orderBy *ent.LicenseOrder) int
		Metadata        func(childComplexity int) int
		Name            func(childComplexity int) int
		URL             func(childComplexity int) int
		Uses            func(childComplexity int, first *int, last *int, where *ent.ReleaseComponentWhereInput) int
		Vendor          func(childComplexity int) int
		Version         func(childComplexity int) int
		Vulnerabilities func(childComplexity int, first *int, last *int, where *ent.VulnerabilityWhereInput, orderBy *ent.VulnerabilityOrder) int
	}

	ComponentConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ComponentEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	GitCommit struct {
		Branch  func(childComplexity int) int
		Hash    func(childComplexity int) int
		ID      func(childComplexity int) int
		Release func(childComplexity int) int
		Repo    func(childComplexity int) int
		Tag     func(childComplexity int) int
		Time    func(childComplexity int) int
	}

	GitCommitConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	GitCommitEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	License struct {
		Components    func(childComplexity int, first *int, last *int, where *ent.ComponentWhereInput, orderBy *ent.ComponentOrder) int
		DetailsURL    func(childComplexity int) int
		ID            func(childComplexity int) int
		Instances     func(childComplexity int, first *int, last *int, where *ent.ReleaseLicenseWhereInput) int
		IsOsiApproved func(childComplexity int) int
		LicenseID     func(childComplexity int) int
		Name          func(childComplexity int) int
		Reference     func(childComplexity int) int
	}

	LicenseConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	LicenseEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Project struct {
		ID                   func(childComplexity int) int
		Name                 func(childComplexity int) int
		Policies             func(childComplexity int, first *int, last *int, where *ent.ReleasePolicyWhereInput, orderBy *ent.ReleasePolicyOrder) int
		Repos                func(childComplexity int, first *int, last *int, where *ent.RepoWhereInput, orderBy *ent.RepoOrder) int
		VulnerabilityReviews func(childComplexity int, first *int, last *int, where *ent.VulnerabilityReviewWhereInput, orderBy *ent.VulnerabilityReviewOrder) int
	}

	ProjectConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProjectEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Query struct {
		Artifact            func(childComplexity int, first *int, last *int, orderBy *ent.ArtifactOrder, where *ent.ArtifactWhereInput) int
		Commit              func(childComplexity int, first *int, last *int, orderBy *ent.GitCommitOrder, where *ent.GitCommitWhereInput) int
		Component           func(childComplexity int, first *int, last *int, orderBy *ent.ComponentOrder, where *ent.ComponentWhereInput) int
		License             func(childComplexity int, first *int, last *int, orderBy *ent.LicenseOrder, where *ent.LicenseWhereInput) int
		LicenseConnection   func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.LicenseOrder, where *ent.LicenseWhereInput) int
		Policy              func(childComplexity int, first *int, last *int, orderBy *ent.ReleasePolicyOrder, where *ent.ReleasePolicyWhereInput) int
		Project             func(childComplexity int, first *int, last *int, orderBy *ent.ProjectOrder, where *ent.ProjectWhereInput) int
		ProjectConnection   func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.ProjectOrder, where *ent.ProjectWhereInput) int
		Release             func(childComplexity int, first *int, last *int, orderBy *ent.ReleaseOrder, where *ent.ReleaseWhereInput) int
		ReleaseConnection   func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.ReleaseOrder, where *ent.ReleaseWhereInput) int
		Repo                func(childComplexity int, first *int, last *int, orderBy *ent.RepoOrder, where *ent.RepoWhereInput) int
		RepoConnection      func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.RepoOrder, where *ent.RepoWhereInput) int
		Vulnerability       func(childComplexity int, first *int, last *int, orderBy *ent.VulnerabilityOrder, where *ent.VulnerabilityWhereInput) int
		VulnerabilityReview func(childComplexity int, first *int, last *int, orderBy *ent.VulnerabilityReviewOrder, where *ent.VulnerabilityReviewWhereInput) int
	}

	Release struct {
		Artifacts            func(childComplexity int, first *int, last *int, where *ent.ArtifactWhereInput, orderBy *ent.ArtifactOrder) int
		CodeScans            func(childComplexity int, first *int, last *int, where *ent.CodeScanWhereInput, orderBy *ent.CodeScanOrder) int
		Commit               func(childComplexity int) int
		Components           func(childComplexity int, first *int, last *int, where *ent.ReleaseComponentWhereInput) int
		Dependencies         func(childComplexity int, first *int, last *int, where *ent.ReleaseWhereInput, orderBy *ent.ReleaseOrder) int
		HeadOf               func(childComplexity int) int
		ID                   func(childComplexity int) int
		Licenses             func(childComplexity int, first *int, last *int, where *ent.ReleaseLicenseWhereInput) int
		Log                  func(childComplexity int, first *int, last *int, where *ent.ReleaseEntryWhereInput, orderBy *ent.ReleaseEntryOrder) int
		Name                 func(childComplexity int) int
		Status               func(childComplexity int) int
		Subreleases          func(childComplexity int, first *int, last *int, where *ent.ReleaseWhereInput, orderBy *ent.ReleaseOrder) int
		TestRuns             func(childComplexity int, first *int, last *int, where *ent.TestRunWhereInput, orderBy *ent.TestRunOrder) int
		Version              func(childComplexity int) int
		Violations           func(childComplexity int, first *int, last *int, where *ent.ReleasePolicyViolationWhereInput) int
		Vulnerabilities      func(childComplexity int, first *int, last *int, where *ent.ReleaseVulnerabilityWhereInput) int
		VulnerabilityReviews func(childComplexity int, first *int, last *int, where *ent.VulnerabilityReviewWhereInput, orderBy *ent.VulnerabilityReviewOrder) int
	}

	ReleaseComponent struct {
		Component       func(childComplexity int) int
		ID              func(childComplexity int) int
		Licenses        func(childComplexity int, first *int, last *int, where *ent.ReleaseLicenseWhereInput) int
		Release         func(childComplexity int) int
		Scans           func(childComplexity int, first *int, last *int, where *ent.CodeScanWhereInput, orderBy *ent.CodeScanOrder) int
		Type            func(childComplexity int) int
		Vulnerabilities func(childComplexity int, first *int, last *int, where *ent.ReleaseVulnerabilityWhereInput) int
	}

	ReleaseComponentConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReleaseComponentEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ReleaseConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReleaseEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ReleaseEntry struct {
		Artifact func(childComplexity int) int
		CodeScan func(childComplexity int) int
		ID       func(childComplexity int) int
		Release  func(childComplexity int) int
		TestRun  func(childComplexity int) int
		Time     func(childComplexity int) int
		Type     func(childComplexity int) int
	}

	ReleaseEntryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReleaseEntryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ReleaseLicense struct {
		Component func(childComplexity int) int
		ID        func(childComplexity int) int
		License   func(childComplexity int) int
		Release   func(childComplexity int) int
		Scans     func(childComplexity int, first *int, last *int, where *ent.CodeScanWhereInput, orderBy *ent.CodeScanOrder) int
	}

	ReleaseLicenseConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReleaseLicenseEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ReleasePolicy struct {
		ID         func(childComplexity int) int
		Module     func(childComplexity int) int
		Name       func(childComplexity int) int
		Projects   func(childComplexity int, first *int, last *int, where *ent.ProjectWhereInput, orderBy *ent.ProjectOrder) int
		Repos      func(childComplexity int, first *int, last *int, where *ent.RepoWhereInput, orderBy *ent.RepoOrder) int
		Violations func(childComplexity int, first *int, last *int, where *ent.ReleasePolicyViolationWhereInput) int
	}

	ReleasePolicyConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReleasePolicyEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ReleasePolicyViolation struct {
		ID       func(childComplexity int) int
		Message  func(childComplexity int) int
		Policy   func(childComplexity int) int
		Release  func(childComplexity int) int
		Severity func(childComplexity int) int
		Type     func(childComplexity int) int
	}

	ReleasePolicyViolationConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReleasePolicyViolationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ReleaseVulnerability struct {
		Component     func(childComplexity int) int
		ID            func(childComplexity int) int
		Release       func(childComplexity int) int
		Reviews       func(childComplexity int, first *int, last *int, where *ent.VulnerabilityReviewWhereInput, orderBy *ent.VulnerabilityReviewOrder) int
		Scan          func(childComplexity int) int
		Vulnerability func(childComplexity int) int
	}

	ReleaseVulnerabilityConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReleaseVulnerabilityEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Repo struct {
		Commits              func(childComplexity int, first *int, last *int, where *ent.GitCommitWhereInput, orderBy *ent.GitCommitOrder) int
		DefaultBranch        func(childComplexity int) int
		Head                 func(childComplexity int) int
		ID                   func(childComplexity int) int
		Name                 func(childComplexity int) int
		Policies             func(childComplexity int, first *int, last *int, where *ent.ReleasePolicyWhereInput, orderBy *ent.ReleasePolicyOrder) int
		Project              func(childComplexity int) int
		VulnerabilityReviews func(childComplexity int, first *int, last *int, where *ent.VulnerabilityReviewWhereInput, orderBy *ent.VulnerabilityReviewOrder) int
	}

	RepoConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	RepoEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TestCase struct {
		Elapsed  func(childComplexity int) int
		ID       func(childComplexity int) int
		Message  func(childComplexity int) int
		Metadata func(childComplexity int) int
		Name     func(childComplexity int) int
		Result   func(childComplexity int) int
		Run      func(childComplexity int) int
	}

	TestCaseConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TestCaseEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TestRun struct {
		Entry    func(childComplexity int) int
		ID       func(childComplexity int) int
		Metadata func(childComplexity int) int
		Release  func(childComplexity int) int
		Tests    func(childComplexity int, first *int, last *int, where *ent.TestCaseWhereInput, orderBy *ent.TestCaseOrder) int
		Time     func(childComplexity int) int
		Tool     func(childComplexity int) int
	}

	TestRunConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TestRunEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Vulnerability struct {
		Components    func(childComplexity int, first *int, last *int, where *ent.ComponentWhereInput, orderBy *ent.ComponentOrder) int
		Description   func(childComplexity int) int
		ID            func(childComplexity int) int
		Instances     func(childComplexity int, first *int, last *int, where *ent.ReleaseVulnerabilityWhereInput) int
		Metadata      func(childComplexity int) int
		Modified      func(childComplexity int) int
		Published     func(childComplexity int) int
		Reviews       func(childComplexity int, first *int, last *int, where *ent.VulnerabilityReviewWhereInput, orderBy *ent.VulnerabilityReviewOrder) int
		Severity      func(childComplexity int) int
		SeverityScore func(childComplexity int) int
		Summary       func(childComplexity int) int
		Vid           func(childComplexity int) int
	}

	VulnerabilityConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	VulnerabilityEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	VulnerabilityReview struct {
		Decision      func(childComplexity int) int
		ID            func(childComplexity int) int
		Instances     func(childComplexity int, first *int, last *int, where *ent.ReleaseVulnerabilityWhereInput) int
		Note          func(childComplexity int) int
		Projects      func(childComplexity int, first *int, last *int, where *ent.ProjectWhereInput, orderBy *ent.ProjectOrder) int
		Releases      func(childComplexity int, first *int, last *int, where *ent.ReleaseWhereInput, orderBy *ent.ReleaseOrder) int
		Repos         func(childComplexity int, first *int, last *int, where *ent.RepoWhereInput, orderBy *ent.RepoOrder) int
		Vulnerability func(childComplexity int) int
	}

	VulnerabilityReviewConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	VulnerabilityReviewEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}
}

type ArtifactResolver interface {
	Metadata(ctx context.Context, obj *ent.Artifact) (map[string]interface{}, error)
}
type CodeIssueResolver interface {
	Metadata(ctx context.Context, obj *ent.CodeIssue) (map[string]interface{}, error)
}
type CodeScanResolver interface {
	Metadata(ctx context.Context, obj *ent.CodeScan) (map[string]interface{}, error)

	Issues(ctx context.Context, obj *ent.CodeScan, first *int, last *int, where *ent.CodeIssueWhereInput, orderBy *ent.CodeIssueOrder) ([]*ent.CodeIssue, error)
	Vulnerabilities(ctx context.Context, obj *ent.CodeScan, first *int, last *int, where *ent.ReleaseVulnerabilityWhereInput) ([]*ent.ReleaseVulnerability, error)
	Components(ctx context.Context, obj *ent.CodeScan, first *int, last *int, where *ent.ReleaseComponentWhereInput) ([]*ent.ReleaseComponent, error)
}
type ComponentResolver interface {
	Metadata(ctx context.Context, obj *ent.Component) (map[string]interface{}, error)
	Vulnerabilities(ctx context.Context, obj *ent.Component, first *int, last *int, where *ent.VulnerabilityWhereInput, orderBy *ent.VulnerabilityOrder) ([]*ent.Vulnerability, error)
	Licenses(ctx context.Context, obj *ent.Component, first *int, last *int, where *ent.LicenseWhereInput, orderBy *ent.LicenseOrder) ([]*ent.License, error)
	Uses(ctx context.Context, obj *ent.Component, first *int, last *int, where *ent.ReleaseComponentWhereInput) ([]*ent.ReleaseComponent, error)
}
type LicenseResolver interface {
	Components(ctx context.Context, obj *ent.License, first *int, last *int, where *ent.ComponentWhereInput, orderBy *ent.ComponentOrder) ([]*ent.Component, error)
	Instances(ctx context.Context, obj *ent.License, first *int, last *int, where *ent.ReleaseLicenseWhereInput) ([]*ent.ReleaseLicense, error)
}
type ProjectResolver interface {
	Repos(ctx context.Context, obj *ent.Project, first *int, last *int, where *ent.RepoWhereInput, orderBy *ent.RepoOrder) ([]*ent.Repo, error)
	VulnerabilityReviews(ctx context.Context, obj *ent.Project, first *int, last *int, where *ent.VulnerabilityReviewWhereInput, orderBy *ent.VulnerabilityReviewOrder) ([]*ent.VulnerabilityReview, error)
	Policies(ctx context.Context, obj *ent.Project, first *int, last *int, where *ent.ReleasePolicyWhereInput, orderBy *ent.ReleasePolicyOrder) ([]*ent.ReleasePolicy, error)
}
type QueryResolver interface {
	Policy(ctx context.Context, first *int, last *int, orderBy *ent.ReleasePolicyOrder, where *ent.ReleasePolicyWhereInput) ([]*ent.ReleasePolicy, error)
	Artifact(ctx context.Context, first *int, last *int, orderBy *ent.ArtifactOrder, where *ent.ArtifactWhereInput) ([]*ent.Artifact, error)
	Component(ctx context.Context, first *int, last *int, orderBy *ent.ComponentOrder, where *ent.ComponentWhereInput) ([]*ent.Component, error)
	LicenseConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.LicenseOrder, where *ent.LicenseWhereInput) (*ent.LicenseConnection, error)
	VulnerabilityReview(ctx context.Context, first *int, last *int, orderBy *ent.VulnerabilityReviewOrder, where *ent.VulnerabilityReviewWhereInput) ([]*ent.VulnerabilityReview, error)
	License(ctx context.Context, first *int, last *int, orderBy *ent.LicenseOrder, where *ent.LicenseWhereInput) ([]*ent.License, error)
	Repo(ctx context.Context, first *int, last *int, orderBy *ent.RepoOrder, where *ent.RepoWhereInput) ([]*ent.Repo, error)
	Project(ctx context.Context, first *int, last *int, orderBy *ent.ProjectOrder, where *ent.ProjectWhereInput) ([]*ent.Project, error)
	Release(ctx context.Context, first *int, last *int, orderBy *ent.ReleaseOrder, where *ent.ReleaseWhereInput) ([]*ent.Release, error)
	RepoConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.RepoOrder, where *ent.RepoWhereInput) (*ent.RepoConnection, error)
	Commit(ctx context.Context, first *int, last *int, orderBy *ent.GitCommitOrder, where *ent.GitCommitWhereInput) ([]*ent.GitCommit, error)
	ProjectConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.ProjectOrder, where *ent.ProjectWhereInput) (*ent.ProjectConnection, error)
	ReleaseConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.ReleaseOrder, where *ent.ReleaseWhereInput) (*ent.ReleaseConnection, error)
	Vulnerability(ctx context.Context, first *int, last *int, orderBy *ent.VulnerabilityOrder, where *ent.VulnerabilityWhereInput) ([]*ent.Vulnerability, error)
}
type ReleaseResolver interface {
	Subreleases(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.ReleaseWhereInput, orderBy *ent.ReleaseOrder) ([]*ent.Release, error)
	Dependencies(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.ReleaseWhereInput, orderBy *ent.ReleaseOrder) ([]*ent.Release, error)

	Log(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.ReleaseEntryWhereInput, orderBy *ent.ReleaseEntryOrder) ([]*ent.ReleaseEntry, error)
	Violations(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.ReleasePolicyViolationWhereInput) ([]*ent.ReleasePolicyViolation, error)
	Artifacts(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.ArtifactWhereInput, orderBy *ent.ArtifactOrder) ([]*ent.Artifact, error)
	Components(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.ReleaseComponentWhereInput) ([]*ent.ReleaseComponent, error)
	Licenses(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.ReleaseLicenseWhereInput) ([]*ent.ReleaseLicense, error)
	Vulnerabilities(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.ReleaseVulnerabilityWhereInput) ([]*ent.ReleaseVulnerability, error)
	CodeScans(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.CodeScanWhereInput, orderBy *ent.CodeScanOrder) ([]*ent.CodeScan, error)
	TestRuns(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.TestRunWhereInput, orderBy *ent.TestRunOrder) ([]*ent.TestRun, error)
	VulnerabilityReviews(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.VulnerabilityReviewWhereInput, orderBy *ent.VulnerabilityReviewOrder) ([]*ent.VulnerabilityReview, error)
}
type ReleaseComponentResolver interface {
	Scans(ctx context.Context, obj *ent.ReleaseComponent, first *int, last *int, where *ent.CodeScanWhereInput, orderBy *ent.CodeScanOrder) ([]*ent.CodeScan, error)

	Vulnerabilities(ctx context.Context, obj *ent.ReleaseComponent, first *int, last *int, where *ent.ReleaseVulnerabilityWhereInput) ([]*ent.ReleaseVulnerability, error)
	Licenses(ctx context.Context, obj *ent.ReleaseComponent, first *int, last *int, where *ent.ReleaseLicenseWhereInput) ([]*ent.ReleaseLicense, error)
}
type ReleaseLicenseResolver interface {
	Scans(ctx context.Context, obj *ent.ReleaseLicense, first *int, last *int, where *ent.CodeScanWhereInput, orderBy *ent.CodeScanOrder) ([]*ent.CodeScan, error)
}
type ReleasePolicyResolver interface {
	Projects(ctx context.Context, obj *ent.ReleasePolicy, first *int, last *int, where *ent.ProjectWhereInput, orderBy *ent.ProjectOrder) ([]*ent.Project, error)
	Repos(ctx context.Context, obj *ent.ReleasePolicy, first *int, last *int, where *ent.RepoWhereInput, orderBy *ent.RepoOrder) ([]*ent.Repo, error)
	Violations(ctx context.Context, obj *ent.ReleasePolicy, first *int, last *int, where *ent.ReleasePolicyViolationWhereInput) ([]*ent.ReleasePolicyViolation, error)
}
type ReleaseVulnerabilityResolver interface {
	Reviews(ctx context.Context, obj *ent.ReleaseVulnerability, first *int, last *int, where *ent.VulnerabilityReviewWhereInput, orderBy *ent.VulnerabilityReviewOrder) ([]*ent.VulnerabilityReview, error)
}
type RepoResolver interface {
	Commits(ctx context.Context, obj *ent.Repo, first *int, last *int, where *ent.GitCommitWhereInput, orderBy *ent.GitCommitOrder) ([]*ent.GitCommit, error)
	VulnerabilityReviews(ctx context.Context, obj *ent.Repo, first *int, last *int, where *ent.VulnerabilityReviewWhereInput, orderBy *ent.VulnerabilityReviewOrder) ([]*ent.VulnerabilityReview, error)
	Policies(ctx context.Context, obj *ent.Repo, first *int, last *int, where *ent.ReleasePolicyWhereInput, orderBy *ent.ReleasePolicyOrder) ([]*ent.ReleasePolicy, error)
}
type TestCaseResolver interface {
	Metadata(ctx context.Context, obj *ent.TestCase) (map[string]interface{}, error)
}
type TestRunResolver interface {
	Metadata(ctx context.Context, obj *ent.TestRun) (map[string]interface{}, error)

	Tests(ctx context.Context, obj *ent.TestRun, first *int, last *int, where *ent.TestCaseWhereInput, orderBy *ent.TestCaseOrder) ([]*ent.TestCase, error)
}
type VulnerabilityResolver interface {
	Metadata(ctx context.Context, obj *ent.Vulnerability) (map[string]interface{}, error)
	Components(ctx context.Context, obj *ent.Vulnerability, first *int, last *int, where *ent.ComponentWhereInput, orderBy *ent.ComponentOrder) ([]*ent.Component, error)
	Reviews(ctx context.Context, obj *ent.Vulnerability, first *int, last *int, where *ent.VulnerabilityReviewWhereInput, orderBy *ent.VulnerabilityReviewOrder) ([]*ent.VulnerabilityReview, error)
	Instances(ctx context.Context, obj *ent.Vulnerability, first *int, last *int, where *ent.ReleaseVulnerabilityWhereInput) ([]*ent.ReleaseVulnerability, error)
}
type VulnerabilityReviewResolver interface {
	Projects(ctx context.Context, obj *ent.VulnerabilityReview, first *int, last *int, where *ent.ProjectWhereInput, orderBy *ent.ProjectOrder) ([]*ent.Project, error)
	Repos(ctx context.Context, obj *ent.VulnerabilityReview, first *int, last *int, where *ent.RepoWhereInput, orderBy *ent.RepoOrder) ([]*ent.Repo, error)
	Releases(ctx context.Context, obj *ent.VulnerabilityReview, first *int, last *int, where *ent.ReleaseWhereInput, orderBy *ent.ReleaseOrder) ([]*ent.Release, error)
	Instances(ctx context.Context, obj *ent.VulnerabilityReview, first *int, last *int, where *ent.ReleaseVulnerabilityWhereInput) ([]*ent.ReleaseVulnerability, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Adapter.id":
		if e.complexity.Adapter.ID == nil {
			break
		}

		return e.complexity.Adapter.ID(childComplexity), true

	case "Adapter.module":
		if e.complexity.Adapter.Module == nil {
			break
		}

		return e.complexity.Adapter.Module(childComplexity), true

	case "Adapter.name":
		if e.complexity.Adapter.Name == nil {
			break
		}

		return e.complexity.Adapter.Name(childComplexity), true

	case "Adapter.tag":
		if e.complexity.Adapter.Tag == nil {
			break
		}

		return e.complexity.Adapter.Tag(childComplexity), true

	case "AdapterConnection.edges":
		if e.complexity.AdapterConnection.Edges == nil {
			break
		}

		return e.complexity.AdapterConnection.Edges(childComplexity), true

	case "AdapterConnection.pageInfo":
		if e.complexity.AdapterConnection.PageInfo == nil {
			break
		}

		return e.complexity.AdapterConnection.PageInfo(childComplexity), true

	case "AdapterConnection.totalCount":
		if e.complexity.AdapterConnection.TotalCount == nil {
			break
		}

		return e.complexity.AdapterConnection.TotalCount(childComplexity), true

	case "AdapterEdge.cursor":
		if e.complexity.AdapterEdge.Cursor == nil {
			break
		}

		return e.complexity.AdapterEdge.Cursor(childComplexity), true

	case "AdapterEdge.node":
		if e.complexity.AdapterEdge.Node == nil {
			break
		}

		return e.complexity.AdapterEdge.Node(childComplexity), true

	case "Artifact.entry":
		if e.complexity.Artifact.Entry == nil {
			break
		}

		return e.complexity.Artifact.Entry(childComplexity), true

	case "Artifact.id":
		if e.complexity.Artifact.ID == nil {
			break
		}

		return e.complexity.Artifact.ID(childComplexity), true

	case "Artifact.metadata":
		if e.complexity.Artifact.Metadata == nil {
			break
		}

		return e.complexity.Artifact.Metadata(childComplexity), true

	case "Artifact.name":
		if e.complexity.Artifact.Name == nil {
			break
		}

		return e.complexity.Artifact.Name(childComplexity), true

	case "Artifact.release":
		if e.complexity.Artifact.Release == nil {
			break
		}

		return e.complexity.Artifact.Release(childComplexity), true

	case "Artifact.sha256":
		if e.complexity.Artifact.Sha256 == nil {
			break
		}

		return e.complexity.Artifact.Sha256(childComplexity), true

	case "Artifact.time":
		if e.complexity.Artifact.Time == nil {
			break
		}

		return e.complexity.Artifact.Time(childComplexity), true

	case "Artifact.type":
		if e.complexity.Artifact.Type == nil {
			break
		}

		return e.complexity.Artifact.Type(childComplexity), true

	case "ArtifactConnection.edges":
		if e.complexity.ArtifactConnection.Edges == nil {
			break
		}

		return e.complexity.ArtifactConnection.Edges(childComplexity), true

	case "ArtifactConnection.pageInfo":
		if e.complexity.ArtifactConnection.PageInfo == nil {
			break
		}

		return e.complexity.ArtifactConnection.PageInfo(childComplexity), true

	case "ArtifactConnection.totalCount":
		if e.complexity.ArtifactConnection.TotalCount == nil {
			break
		}

		return e.complexity.ArtifactConnection.TotalCount(childComplexity), true

	case "ArtifactEdge.cursor":
		if e.complexity.ArtifactEdge.Cursor == nil {
			break
		}

		return e.complexity.ArtifactEdge.Cursor(childComplexity), true

	case "ArtifactEdge.node":
		if e.complexity.ArtifactEdge.Node == nil {
			break
		}

		return e.complexity.ArtifactEdge.Node(childComplexity), true

	case "CodeIssue.id":
		if e.complexity.CodeIssue.ID == nil {
			break
		}

		return e.complexity.CodeIssue.ID(childComplexity), true

	case "CodeIssue.message":
		if e.complexity.CodeIssue.Message == nil {
			break
		}

		return e.complexity.CodeIssue.Message(childComplexity), true

	case "CodeIssue.metadata":
		if e.complexity.CodeIssue.Metadata == nil {
			break
		}

		return e.complexity.CodeIssue.Metadata(childComplexity), true

	case "CodeIssue.rule_id":
		if e.complexity.CodeIssue.RuleID == nil {
			break
		}

		return e.complexity.CodeIssue.RuleID(childComplexity), true

	case "CodeIssue.scan":
		if e.complexity.CodeIssue.Scan == nil {
			break
		}

		return e.complexity.CodeIssue.Scan(childComplexity), true

	case "CodeIssue.severity":
		if e.complexity.CodeIssue.Severity == nil {
			break
		}

		return e.complexity.CodeIssue.Severity(childComplexity), true

	case "CodeIssue.type":
		if e.complexity.CodeIssue.Type == nil {
			break
		}

		return e.complexity.CodeIssue.Type(childComplexity), true

	case "CodeIssueConnection.edges":
		if e.complexity.CodeIssueConnection.Edges == nil {
			break
		}

		return e.complexity.CodeIssueConnection.Edges(childComplexity), true

	case "CodeIssueConnection.pageInfo":
		if e.complexity.CodeIssueConnection.PageInfo == nil {
			break
		}

		return e.complexity.CodeIssueConnection.PageInfo(childComplexity), true

	case "CodeIssueConnection.totalCount":
		if e.complexity.CodeIssueConnection.TotalCount == nil {
			break
		}

		return e.complexity.CodeIssueConnection.TotalCount(childComplexity), true

	case "CodeIssueEdge.cursor":
		if e.complexity.CodeIssueEdge.Cursor == nil {
			break
		}

		return e.complexity.CodeIssueEdge.Cursor(childComplexity), true

	case "CodeIssueEdge.node":
		if e.complexity.CodeIssueEdge.Node == nil {
			break
		}

		return e.complexity.CodeIssueEdge.Node(childComplexity), true

	case "CodeScan.components":
		if e.complexity.CodeScan.Components == nil {
			break
		}

		args, err := ec.field_CodeScan_components_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CodeScan.Components(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseComponentWhereInput)), true

	case "CodeScan.entry":
		if e.complexity.CodeScan.Entry == nil {
			break
		}

		return e.complexity.CodeScan.Entry(childComplexity), true

	case "CodeScan.id":
		if e.complexity.CodeScan.ID == nil {
			break
		}

		return e.complexity.CodeScan.ID(childComplexity), true

	case "CodeScan.issues":
		if e.complexity.CodeScan.Issues == nil {
			break
		}

		args, err := ec.field_CodeScan_issues_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CodeScan.Issues(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CodeIssueWhereInput), args["order_by"].(*ent.CodeIssueOrder)), true

	case "CodeScan.metadata":
		if e.complexity.CodeScan.Metadata == nil {
			break
		}

		return e.complexity.CodeScan.Metadata(childComplexity), true

	case "CodeScan.release":
		if e.complexity.CodeScan.Release == nil {
			break
		}

		return e.complexity.CodeScan.Release(childComplexity), true

	case "CodeScan.time":
		if e.complexity.CodeScan.Time == nil {
			break
		}

		return e.complexity.CodeScan.Time(childComplexity), true

	case "CodeScan.tool":
		if e.complexity.CodeScan.Tool == nil {
			break
		}

		return e.complexity.CodeScan.Tool(childComplexity), true

	case "CodeScan.vulnerabilities":
		if e.complexity.CodeScan.Vulnerabilities == nil {
			break
		}

		args, err := ec.field_CodeScan_vulnerabilities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CodeScan.Vulnerabilities(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseVulnerabilityWhereInput)), true

	case "CodeScanConnection.edges":
		if e.complexity.CodeScanConnection.Edges == nil {
			break
		}

		return e.complexity.CodeScanConnection.Edges(childComplexity), true

	case "CodeScanConnection.pageInfo":
		if e.complexity.CodeScanConnection.PageInfo == nil {
			break
		}

		return e.complexity.CodeScanConnection.PageInfo(childComplexity), true

	case "CodeScanConnection.totalCount":
		if e.complexity.CodeScanConnection.TotalCount == nil {
			break
		}

		return e.complexity.CodeScanConnection.TotalCount(childComplexity), true

	case "CodeScanEdge.cursor":
		if e.complexity.CodeScanEdge.Cursor == nil {
			break
		}

		return e.complexity.CodeScanEdge.Cursor(childComplexity), true

	case "CodeScanEdge.node":
		if e.complexity.CodeScanEdge.Node == nil {
			break
		}

		return e.complexity.CodeScanEdge.Node(childComplexity), true

	case "Component.description":
		if e.complexity.Component.Description == nil {
			break
		}

		return e.complexity.Component.Description(childComplexity), true

	case "Component.id":
		if e.complexity.Component.ID == nil {
			break
		}

		return e.complexity.Component.ID(childComplexity), true

	case "Component.licenses":
		if e.complexity.Component.Licenses == nil {
			break
		}

		args, err := ec.field_Component_licenses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Component.Licenses(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.LicenseWhereInput), args["order_by"].(*ent.LicenseOrder)), true

	case "Component.metadata":
		if e.complexity.Component.Metadata == nil {
			break
		}

		return e.complexity.Component.Metadata(childComplexity), true

	case "Component.name":
		if e.complexity.Component.Name == nil {
			break
		}

		return e.complexity.Component.Name(childComplexity), true

	case "Component.url":
		if e.complexity.Component.URL == nil {
			break
		}

		return e.complexity.Component.URL(childComplexity), true

	case "Component.uses":
		if e.complexity.Component.Uses == nil {
			break
		}

		args, err := ec.field_Component_uses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Component.Uses(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseComponentWhereInput)), true

	case "Component.vendor":
		if e.complexity.Component.Vendor == nil {
			break
		}

		return e.complexity.Component.Vendor(childComplexity), true

	case "Component.version":
		if e.complexity.Component.Version == nil {
			break
		}

		return e.complexity.Component.Version(childComplexity), true

	case "Component.vulnerabilities":
		if e.complexity.Component.Vulnerabilities == nil {
			break
		}

		args, err := ec.field_Component_vulnerabilities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Component.Vulnerabilities(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.VulnerabilityWhereInput), args["order_by"].(*ent.VulnerabilityOrder)), true

	case "ComponentConnection.edges":
		if e.complexity.ComponentConnection.Edges == nil {
			break
		}

		return e.complexity.ComponentConnection.Edges(childComplexity), true

	case "ComponentConnection.pageInfo":
		if e.complexity.ComponentConnection.PageInfo == nil {
			break
		}

		return e.complexity.ComponentConnection.PageInfo(childComplexity), true

	case "ComponentConnection.totalCount":
		if e.complexity.ComponentConnection.TotalCount == nil {
			break
		}

		return e.complexity.ComponentConnection.TotalCount(childComplexity), true

	case "ComponentEdge.cursor":
		if e.complexity.ComponentEdge.Cursor == nil {
			break
		}

		return e.complexity.ComponentEdge.Cursor(childComplexity), true

	case "ComponentEdge.node":
		if e.complexity.ComponentEdge.Node == nil {
			break
		}

		return e.complexity.ComponentEdge.Node(childComplexity), true

	case "GitCommit.branch":
		if e.complexity.GitCommit.Branch == nil {
			break
		}

		return e.complexity.GitCommit.Branch(childComplexity), true

	case "GitCommit.hash":
		if e.complexity.GitCommit.Hash == nil {
			break
		}

		return e.complexity.GitCommit.Hash(childComplexity), true

	case "GitCommit.id":
		if e.complexity.GitCommit.ID == nil {
			break
		}

		return e.complexity.GitCommit.ID(childComplexity), true

	case "GitCommit.release":
		if e.complexity.GitCommit.Release == nil {
			break
		}

		return e.complexity.GitCommit.Release(childComplexity), true

	case "GitCommit.repo":
		if e.complexity.GitCommit.Repo == nil {
			break
		}

		return e.complexity.GitCommit.Repo(childComplexity), true

	case "GitCommit.tag":
		if e.complexity.GitCommit.Tag == nil {
			break
		}

		return e.complexity.GitCommit.Tag(childComplexity), true

	case "GitCommit.time":
		if e.complexity.GitCommit.Time == nil {
			break
		}

		return e.complexity.GitCommit.Time(childComplexity), true

	case "GitCommitConnection.edges":
		if e.complexity.GitCommitConnection.Edges == nil {
			break
		}

		return e.complexity.GitCommitConnection.Edges(childComplexity), true

	case "GitCommitConnection.pageInfo":
		if e.complexity.GitCommitConnection.PageInfo == nil {
			break
		}

		return e.complexity.GitCommitConnection.PageInfo(childComplexity), true

	case "GitCommitConnection.totalCount":
		if e.complexity.GitCommitConnection.TotalCount == nil {
			break
		}

		return e.complexity.GitCommitConnection.TotalCount(childComplexity), true

	case "GitCommitEdge.cursor":
		if e.complexity.GitCommitEdge.Cursor == nil {
			break
		}

		return e.complexity.GitCommitEdge.Cursor(childComplexity), true

	case "GitCommitEdge.node":
		if e.complexity.GitCommitEdge.Node == nil {
			break
		}

		return e.complexity.GitCommitEdge.Node(childComplexity), true

	case "License.components":
		if e.complexity.License.Components == nil {
			break
		}

		args, err := ec.field_License_components_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.License.Components(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ComponentWhereInput), args["order_by"].(*ent.ComponentOrder)), true

	case "License.details_url":
		if e.complexity.License.DetailsURL == nil {
			break
		}

		return e.complexity.License.DetailsURL(childComplexity), true

	case "License.id":
		if e.complexity.License.ID == nil {
			break
		}

		return e.complexity.License.ID(childComplexity), true

	case "License.instances":
		if e.complexity.License.Instances == nil {
			break
		}

		args, err := ec.field_License_instances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.License.Instances(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseLicenseWhereInput)), true

	case "License.is_osi_approved":
		if e.complexity.License.IsOsiApproved == nil {
			break
		}

		return e.complexity.License.IsOsiApproved(childComplexity), true

	case "License.license_id":
		if e.complexity.License.LicenseID == nil {
			break
		}

		return e.complexity.License.LicenseID(childComplexity), true

	case "License.name":
		if e.complexity.License.Name == nil {
			break
		}

		return e.complexity.License.Name(childComplexity), true

	case "License.reference":
		if e.complexity.License.Reference == nil {
			break
		}

		return e.complexity.License.Reference(childComplexity), true

	case "LicenseConnection.edges":
		if e.complexity.LicenseConnection.Edges == nil {
			break
		}

		return e.complexity.LicenseConnection.Edges(childComplexity), true

	case "LicenseConnection.pageInfo":
		if e.complexity.LicenseConnection.PageInfo == nil {
			break
		}

		return e.complexity.LicenseConnection.PageInfo(childComplexity), true

	case "LicenseConnection.totalCount":
		if e.complexity.LicenseConnection.TotalCount == nil {
			break
		}

		return e.complexity.LicenseConnection.TotalCount(childComplexity), true

	case "LicenseEdge.cursor":
		if e.complexity.LicenseEdge.Cursor == nil {
			break
		}

		return e.complexity.LicenseEdge.Cursor(childComplexity), true

	case "LicenseEdge.node":
		if e.complexity.LicenseEdge.Node == nil {
			break
		}

		return e.complexity.LicenseEdge.Node(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Project.id":
		if e.complexity.Project.ID == nil {
			break
		}

		return e.complexity.Project.ID(childComplexity), true

	case "Project.name":
		if e.complexity.Project.Name == nil {
			break
		}

		return e.complexity.Project.Name(childComplexity), true

	case "Project.policies":
		if e.complexity.Project.Policies == nil {
			break
		}

		args, err := ec.field_Project_policies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Project.Policies(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleasePolicyWhereInput), args["order_by"].(*ent.ReleasePolicyOrder)), true

	case "Project.repos":
		if e.complexity.Project.Repos == nil {
			break
		}

		args, err := ec.field_Project_repos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Project.Repos(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.RepoWhereInput), args["order_by"].(*ent.RepoOrder)), true

	case "Project.vulnerability_reviews":
		if e.complexity.Project.VulnerabilityReviews == nil {
			break
		}

		args, err := ec.field_Project_vulnerability_reviews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Project.VulnerabilityReviews(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.VulnerabilityReviewWhereInput), args["order_by"].(*ent.VulnerabilityReviewOrder)), true

	case "ProjectConnection.edges":
		if e.complexity.ProjectConnection.Edges == nil {
			break
		}

		return e.complexity.ProjectConnection.Edges(childComplexity), true

	case "ProjectConnection.pageInfo":
		if e.complexity.ProjectConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProjectConnection.PageInfo(childComplexity), true

	case "ProjectConnection.totalCount":
		if e.complexity.ProjectConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProjectConnection.TotalCount(childComplexity), true

	case "ProjectEdge.cursor":
		if e.complexity.ProjectEdge.Cursor == nil {
			break
		}

		return e.complexity.ProjectEdge.Cursor(childComplexity), true

	case "ProjectEdge.node":
		if e.complexity.ProjectEdge.Node == nil {
			break
		}

		return e.complexity.ProjectEdge.Node(childComplexity), true

	case "Query.artifact":
		if e.complexity.Query.Artifact == nil {
			break
		}

		args, err := ec.field_Query_artifact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Artifact(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ArtifactOrder), args["where"].(*ent.ArtifactWhereInput)), true

	case "Query.commit":
		if e.complexity.Query.Commit == nil {
			break
		}

		args, err := ec.field_Query_commit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Commit(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.GitCommitOrder), args["where"].(*ent.GitCommitWhereInput)), true

	case "Query.component":
		if e.complexity.Query.Component == nil {
			break
		}

		args, err := ec.field_Query_component_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Component(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ComponentOrder), args["where"].(*ent.ComponentWhereInput)), true

	case "Query.license":
		if e.complexity.Query.License == nil {
			break
		}

		args, err := ec.field_Query_license_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.License(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.LicenseOrder), args["where"].(*ent.LicenseWhereInput)), true

	case "Query.license_connection":
		if e.complexity.Query.LicenseConnection == nil {
			break
		}

		args, err := ec.field_Query_license_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LicenseConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.LicenseOrder), args["where"].(*ent.LicenseWhereInput)), true

	case "Query.policy":
		if e.complexity.Query.Policy == nil {
			break
		}

		args, err := ec.field_Query_policy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Policy(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ReleasePolicyOrder), args["where"].(*ent.ReleasePolicyWhereInput)), true

	case "Query.project":
		if e.complexity.Query.Project == nil {
			break
		}

		args, err := ec.field_Query_project_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Project(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ProjectOrder), args["where"].(*ent.ProjectWhereInput)), true

	case "Query.project_connection":
		if e.complexity.Query.ProjectConnection == nil {
			break
		}

		args, err := ec.field_Query_project_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.ProjectOrder), args["where"].(*ent.ProjectWhereInput)), true

	case "Query.release":
		if e.complexity.Query.Release == nil {
			break
		}

		args, err := ec.field_Query_release_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Release(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ReleaseOrder), args["where"].(*ent.ReleaseWhereInput)), true

	case "Query.release_connection":
		if e.complexity.Query.ReleaseConnection == nil {
			break
		}

		args, err := ec.field_Query_release_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ReleaseConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.ReleaseOrder), args["where"].(*ent.ReleaseWhereInput)), true

	case "Query.repo":
		if e.complexity.Query.Repo == nil {
			break
		}

		args, err := ec.field_Query_repo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Repo(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.RepoOrder), args["where"].(*ent.RepoWhereInput)), true

	case "Query.repo_connection":
		if e.complexity.Query.RepoConnection == nil {
			break
		}

		args, err := ec.field_Query_repo_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RepoConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.RepoOrder), args["where"].(*ent.RepoWhereInput)), true

	case "Query.vulnerability":
		if e.complexity.Query.Vulnerability == nil {
			break
		}

		args, err := ec.field_Query_vulnerability_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Vulnerability(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.VulnerabilityOrder), args["where"].(*ent.VulnerabilityWhereInput)), true

	case "Query.vulnerability_review":
		if e.complexity.Query.VulnerabilityReview == nil {
			break
		}

		args, err := ec.field_Query_vulnerability_review_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VulnerabilityReview(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.VulnerabilityReviewOrder), args["where"].(*ent.VulnerabilityReviewWhereInput)), true

	case "Release.artifacts":
		if e.complexity.Release.Artifacts == nil {
			break
		}

		args, err := ec.field_Release_artifacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.Artifacts(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ArtifactWhereInput), args["order_by"].(*ent.ArtifactOrder)), true

	case "Release.code_scans":
		if e.complexity.Release.CodeScans == nil {
			break
		}

		args, err := ec.field_Release_code_scans_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.CodeScans(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CodeScanWhereInput), args["order_by"].(*ent.CodeScanOrder)), true

	case "Release.commit":
		if e.complexity.Release.Commit == nil {
			break
		}

		return e.complexity.Release.Commit(childComplexity), true

	case "Release.components":
		if e.complexity.Release.Components == nil {
			break
		}

		args, err := ec.field_Release_components_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.Components(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseComponentWhereInput)), true

	case "Release.dependencies":
		if e.complexity.Release.Dependencies == nil {
			break
		}

		args, err := ec.field_Release_dependencies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.Dependencies(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseWhereInput), args["order_by"].(*ent.ReleaseOrder)), true

	case "Release.head_of":
		if e.complexity.Release.HeadOf == nil {
			break
		}

		return e.complexity.Release.HeadOf(childComplexity), true

	case "Release.id":
		if e.complexity.Release.ID == nil {
			break
		}

		return e.complexity.Release.ID(childComplexity), true

	case "Release.licenses":
		if e.complexity.Release.Licenses == nil {
			break
		}

		args, err := ec.field_Release_licenses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.Licenses(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseLicenseWhereInput)), true

	case "Release.log":
		if e.complexity.Release.Log == nil {
			break
		}

		args, err := ec.field_Release_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.Log(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseEntryWhereInput), args["order_by"].(*ent.ReleaseEntryOrder)), true

	case "Release.name":
		if e.complexity.Release.Name == nil {
			break
		}

		return e.complexity.Release.Name(childComplexity), true

	case "Release.status":
		if e.complexity.Release.Status == nil {
			break
		}

		return e.complexity.Release.Status(childComplexity), true

	case "Release.subreleases":
		if e.complexity.Release.Subreleases == nil {
			break
		}

		args, err := ec.field_Release_subreleases_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.Subreleases(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseWhereInput), args["order_by"].(*ent.ReleaseOrder)), true

	case "Release.test_runs":
		if e.complexity.Release.TestRuns == nil {
			break
		}

		args, err := ec.field_Release_test_runs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.TestRuns(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.TestRunWhereInput), args["order_by"].(*ent.TestRunOrder)), true

	case "Release.version":
		if e.complexity.Release.Version == nil {
			break
		}

		return e.complexity.Release.Version(childComplexity), true

	case "Release.violations":
		if e.complexity.Release.Violations == nil {
			break
		}

		args, err := ec.field_Release_violations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.Violations(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleasePolicyViolationWhereInput)), true

	case "Release.vulnerabilities":
		if e.complexity.Release.Vulnerabilities == nil {
			break
		}

		args, err := ec.field_Release_vulnerabilities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.Vulnerabilities(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseVulnerabilityWhereInput)), true

	case "Release.vulnerability_reviews":
		if e.complexity.Release.VulnerabilityReviews == nil {
			break
		}

		args, err := ec.field_Release_vulnerability_reviews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.VulnerabilityReviews(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.VulnerabilityReviewWhereInput), args["order_by"].(*ent.VulnerabilityReviewOrder)), true

	case "ReleaseComponent.component":
		if e.complexity.ReleaseComponent.Component == nil {
			break
		}

		return e.complexity.ReleaseComponent.Component(childComplexity), true

	case "ReleaseComponent.id":
		if e.complexity.ReleaseComponent.ID == nil {
			break
		}

		return e.complexity.ReleaseComponent.ID(childComplexity), true

	case "ReleaseComponent.licenses":
		if e.complexity.ReleaseComponent.Licenses == nil {
			break
		}

		args, err := ec.field_ReleaseComponent_licenses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ReleaseComponent.Licenses(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseLicenseWhereInput)), true

	case "ReleaseComponent.release":
		if e.complexity.ReleaseComponent.Release == nil {
			break
		}

		return e.complexity.ReleaseComponent.Release(childComplexity), true

	case "ReleaseComponent.scans":
		if e.complexity.ReleaseComponent.Scans == nil {
			break
		}

		args, err := ec.field_ReleaseComponent_scans_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ReleaseComponent.Scans(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CodeScanWhereInput), args["order_by"].(*ent.CodeScanOrder)), true

	case "ReleaseComponent.type":
		if e.complexity.ReleaseComponent.Type == nil {
			break
		}

		return e.complexity.ReleaseComponent.Type(childComplexity), true

	case "ReleaseComponent.vulnerabilities":
		if e.complexity.ReleaseComponent.Vulnerabilities == nil {
			break
		}

		args, err := ec.field_ReleaseComponent_vulnerabilities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ReleaseComponent.Vulnerabilities(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseVulnerabilityWhereInput)), true

	case "ReleaseComponentConnection.edges":
		if e.complexity.ReleaseComponentConnection.Edges == nil {
			break
		}

		return e.complexity.ReleaseComponentConnection.Edges(childComplexity), true

	case "ReleaseComponentConnection.pageInfo":
		if e.complexity.ReleaseComponentConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReleaseComponentConnection.PageInfo(childComplexity), true

	case "ReleaseComponentConnection.totalCount":
		if e.complexity.ReleaseComponentConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReleaseComponentConnection.TotalCount(childComplexity), true

	case "ReleaseComponentEdge.cursor":
		if e.complexity.ReleaseComponentEdge.Cursor == nil {
			break
		}

		return e.complexity.ReleaseComponentEdge.Cursor(childComplexity), true

	case "ReleaseComponentEdge.node":
		if e.complexity.ReleaseComponentEdge.Node == nil {
			break
		}

		return e.complexity.ReleaseComponentEdge.Node(childComplexity), true

	case "ReleaseConnection.edges":
		if e.complexity.ReleaseConnection.Edges == nil {
			break
		}

		return e.complexity.ReleaseConnection.Edges(childComplexity), true

	case "ReleaseConnection.pageInfo":
		if e.complexity.ReleaseConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReleaseConnection.PageInfo(childComplexity), true

	case "ReleaseConnection.totalCount":
		if e.complexity.ReleaseConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReleaseConnection.TotalCount(childComplexity), true

	case "ReleaseEdge.cursor":
		if e.complexity.ReleaseEdge.Cursor == nil {
			break
		}

		return e.complexity.ReleaseEdge.Cursor(childComplexity), true

	case "ReleaseEdge.node":
		if e.complexity.ReleaseEdge.Node == nil {
			break
		}

		return e.complexity.ReleaseEdge.Node(childComplexity), true

	case "ReleaseEntry.artifact":
		if e.complexity.ReleaseEntry.Artifact == nil {
			break
		}

		return e.complexity.ReleaseEntry.Artifact(childComplexity), true

	case "ReleaseEntry.code_scan":
		if e.complexity.ReleaseEntry.CodeScan == nil {
			break
		}

		return e.complexity.ReleaseEntry.CodeScan(childComplexity), true

	case "ReleaseEntry.id":
		if e.complexity.ReleaseEntry.ID == nil {
			break
		}

		return e.complexity.ReleaseEntry.ID(childComplexity), true

	case "ReleaseEntry.release":
		if e.complexity.ReleaseEntry.Release == nil {
			break
		}

		return e.complexity.ReleaseEntry.Release(childComplexity), true

	case "ReleaseEntry.test_run":
		if e.complexity.ReleaseEntry.TestRun == nil {
			break
		}

		return e.complexity.ReleaseEntry.TestRun(childComplexity), true

	case "ReleaseEntry.time":
		if e.complexity.ReleaseEntry.Time == nil {
			break
		}

		return e.complexity.ReleaseEntry.Time(childComplexity), true

	case "ReleaseEntry.type":
		if e.complexity.ReleaseEntry.Type == nil {
			break
		}

		return e.complexity.ReleaseEntry.Type(childComplexity), true

	case "ReleaseEntryConnection.edges":
		if e.complexity.ReleaseEntryConnection.Edges == nil {
			break
		}

		return e.complexity.ReleaseEntryConnection.Edges(childComplexity), true

	case "ReleaseEntryConnection.pageInfo":
		if e.complexity.ReleaseEntryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReleaseEntryConnection.PageInfo(childComplexity), true

	case "ReleaseEntryConnection.totalCount":
		if e.complexity.ReleaseEntryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReleaseEntryConnection.TotalCount(childComplexity), true

	case "ReleaseEntryEdge.cursor":
		if e.complexity.ReleaseEntryEdge.Cursor == nil {
			break
		}

		return e.complexity.ReleaseEntryEdge.Cursor(childComplexity), true

	case "ReleaseEntryEdge.node":
		if e.complexity.ReleaseEntryEdge.Node == nil {
			break
		}

		return e.complexity.ReleaseEntryEdge.Node(childComplexity), true

	case "ReleaseLicense.component":
		if e.complexity.ReleaseLicense.Component == nil {
			break
		}

		return e.complexity.ReleaseLicense.Component(childComplexity), true

	case "ReleaseLicense.id":
		if e.complexity.ReleaseLicense.ID == nil {
			break
		}

		return e.complexity.ReleaseLicense.ID(childComplexity), true

	case "ReleaseLicense.license":
		if e.complexity.ReleaseLicense.License == nil {
			break
		}

		return e.complexity.ReleaseLicense.License(childComplexity), true

	case "ReleaseLicense.release":
		if e.complexity.ReleaseLicense.Release == nil {
			break
		}

		return e.complexity.ReleaseLicense.Release(childComplexity), true

	case "ReleaseLicense.scans":
		if e.complexity.ReleaseLicense.Scans == nil {
			break
		}

		args, err := ec.field_ReleaseLicense_scans_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ReleaseLicense.Scans(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CodeScanWhereInput), args["order_by"].(*ent.CodeScanOrder)), true

	case "ReleaseLicenseConnection.edges":
		if e.complexity.ReleaseLicenseConnection.Edges == nil {
			break
		}

		return e.complexity.ReleaseLicenseConnection.Edges(childComplexity), true

	case "ReleaseLicenseConnection.pageInfo":
		if e.complexity.ReleaseLicenseConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReleaseLicenseConnection.PageInfo(childComplexity), true

	case "ReleaseLicenseConnection.totalCount":
		if e.complexity.ReleaseLicenseConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReleaseLicenseConnection.TotalCount(childComplexity), true

	case "ReleaseLicenseEdge.cursor":
		if e.complexity.ReleaseLicenseEdge.Cursor == nil {
			break
		}

		return e.complexity.ReleaseLicenseEdge.Cursor(childComplexity), true

	case "ReleaseLicenseEdge.node":
		if e.complexity.ReleaseLicenseEdge.Node == nil {
			break
		}

		return e.complexity.ReleaseLicenseEdge.Node(childComplexity), true

	case "ReleasePolicy.id":
		if e.complexity.ReleasePolicy.ID == nil {
			break
		}

		return e.complexity.ReleasePolicy.ID(childComplexity), true

	case "ReleasePolicy.module":
		if e.complexity.ReleasePolicy.Module == nil {
			break
		}

		return e.complexity.ReleasePolicy.Module(childComplexity), true

	case "ReleasePolicy.name":
		if e.complexity.ReleasePolicy.Name == nil {
			break
		}

		return e.complexity.ReleasePolicy.Name(childComplexity), true

	case "ReleasePolicy.projects":
		if e.complexity.ReleasePolicy.Projects == nil {
			break
		}

		args, err := ec.field_ReleasePolicy_projects_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ReleasePolicy.Projects(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ProjectWhereInput), args["order_by"].(*ent.ProjectOrder)), true

	case "ReleasePolicy.repos":
		if e.complexity.ReleasePolicy.Repos == nil {
			break
		}

		args, err := ec.field_ReleasePolicy_repos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ReleasePolicy.Repos(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.RepoWhereInput), args["order_by"].(*ent.RepoOrder)), true

	case "ReleasePolicy.violations":
		if e.complexity.ReleasePolicy.Violations == nil {
			break
		}

		args, err := ec.field_ReleasePolicy_violations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ReleasePolicy.Violations(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleasePolicyViolationWhereInput)), true

	case "ReleasePolicyConnection.edges":
		if e.complexity.ReleasePolicyConnection.Edges == nil {
			break
		}

		return e.complexity.ReleasePolicyConnection.Edges(childComplexity), true

	case "ReleasePolicyConnection.pageInfo":
		if e.complexity.ReleasePolicyConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReleasePolicyConnection.PageInfo(childComplexity), true

	case "ReleasePolicyConnection.totalCount":
		if e.complexity.ReleasePolicyConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReleasePolicyConnection.TotalCount(childComplexity), true

	case "ReleasePolicyEdge.cursor":
		if e.complexity.ReleasePolicyEdge.Cursor == nil {
			break
		}

		return e.complexity.ReleasePolicyEdge.Cursor(childComplexity), true

	case "ReleasePolicyEdge.node":
		if e.complexity.ReleasePolicyEdge.Node == nil {
			break
		}

		return e.complexity.ReleasePolicyEdge.Node(childComplexity), true

	case "ReleasePolicyViolation.id":
		if e.complexity.ReleasePolicyViolation.ID == nil {
			break
		}

		return e.complexity.ReleasePolicyViolation.ID(childComplexity), true

	case "ReleasePolicyViolation.message":
		if e.complexity.ReleasePolicyViolation.Message == nil {
			break
		}

		return e.complexity.ReleasePolicyViolation.Message(childComplexity), true

	case "ReleasePolicyViolation.policy":
		if e.complexity.ReleasePolicyViolation.Policy == nil {
			break
		}

		return e.complexity.ReleasePolicyViolation.Policy(childComplexity), true

	case "ReleasePolicyViolation.release":
		if e.complexity.ReleasePolicyViolation.Release == nil {
			break
		}

		return e.complexity.ReleasePolicyViolation.Release(childComplexity), true

	case "ReleasePolicyViolation.severity":
		if e.complexity.ReleasePolicyViolation.Severity == nil {
			break
		}

		return e.complexity.ReleasePolicyViolation.Severity(childComplexity), true

	case "ReleasePolicyViolation.type":
		if e.complexity.ReleasePolicyViolation.Type == nil {
			break
		}

		return e.complexity.ReleasePolicyViolation.Type(childComplexity), true

	case "ReleasePolicyViolationConnection.edges":
		if e.complexity.ReleasePolicyViolationConnection.Edges == nil {
			break
		}

		return e.complexity.ReleasePolicyViolationConnection.Edges(childComplexity), true

	case "ReleasePolicyViolationConnection.pageInfo":
		if e.complexity.ReleasePolicyViolationConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReleasePolicyViolationConnection.PageInfo(childComplexity), true

	case "ReleasePolicyViolationConnection.totalCount":
		if e.complexity.ReleasePolicyViolationConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReleasePolicyViolationConnection.TotalCount(childComplexity), true

	case "ReleasePolicyViolationEdge.cursor":
		if e.complexity.ReleasePolicyViolationEdge.Cursor == nil {
			break
		}

		return e.complexity.ReleasePolicyViolationEdge.Cursor(childComplexity), true

	case "ReleasePolicyViolationEdge.node":
		if e.complexity.ReleasePolicyViolationEdge.Node == nil {
			break
		}

		return e.complexity.ReleasePolicyViolationEdge.Node(childComplexity), true

	case "ReleaseVulnerability.component":
		if e.complexity.ReleaseVulnerability.Component == nil {
			break
		}

		return e.complexity.ReleaseVulnerability.Component(childComplexity), true

	case "ReleaseVulnerability.id":
		if e.complexity.ReleaseVulnerability.ID == nil {
			break
		}

		return e.complexity.ReleaseVulnerability.ID(childComplexity), true

	case "ReleaseVulnerability.release":
		if e.complexity.ReleaseVulnerability.Release == nil {
			break
		}

		return e.complexity.ReleaseVulnerability.Release(childComplexity), true

	case "ReleaseVulnerability.reviews":
		if e.complexity.ReleaseVulnerability.Reviews == nil {
			break
		}

		args, err := ec.field_ReleaseVulnerability_reviews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ReleaseVulnerability.Reviews(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.VulnerabilityReviewWhereInput), args["order_by"].(*ent.VulnerabilityReviewOrder)), true

	case "ReleaseVulnerability.scan":
		if e.complexity.ReleaseVulnerability.Scan == nil {
			break
		}

		return e.complexity.ReleaseVulnerability.Scan(childComplexity), true

	case "ReleaseVulnerability.vulnerability":
		if e.complexity.ReleaseVulnerability.Vulnerability == nil {
			break
		}

		return e.complexity.ReleaseVulnerability.Vulnerability(childComplexity), true

	case "ReleaseVulnerabilityConnection.edges":
		if e.complexity.ReleaseVulnerabilityConnection.Edges == nil {
			break
		}

		return e.complexity.ReleaseVulnerabilityConnection.Edges(childComplexity), true

	case "ReleaseVulnerabilityConnection.pageInfo":
		if e.complexity.ReleaseVulnerabilityConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReleaseVulnerabilityConnection.PageInfo(childComplexity), true

	case "ReleaseVulnerabilityConnection.totalCount":
		if e.complexity.ReleaseVulnerabilityConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReleaseVulnerabilityConnection.TotalCount(childComplexity), true

	case "ReleaseVulnerabilityEdge.cursor":
		if e.complexity.ReleaseVulnerabilityEdge.Cursor == nil {
			break
		}

		return e.complexity.ReleaseVulnerabilityEdge.Cursor(childComplexity), true

	case "ReleaseVulnerabilityEdge.node":
		if e.complexity.ReleaseVulnerabilityEdge.Node == nil {
			break
		}

		return e.complexity.ReleaseVulnerabilityEdge.Node(childComplexity), true

	case "Repo.commits":
		if e.complexity.Repo.Commits == nil {
			break
		}

		args, err := ec.field_Repo_commits_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Repo.Commits(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.GitCommitWhereInput), args["order_by"].(*ent.GitCommitOrder)), true

	case "Repo.default_branch":
		if e.complexity.Repo.DefaultBranch == nil {
			break
		}

		return e.complexity.Repo.DefaultBranch(childComplexity), true

	case "Repo.head":
		if e.complexity.Repo.Head == nil {
			break
		}

		return e.complexity.Repo.Head(childComplexity), true

	case "Repo.id":
		if e.complexity.Repo.ID == nil {
			break
		}

		return e.complexity.Repo.ID(childComplexity), true

	case "Repo.name":
		if e.complexity.Repo.Name == nil {
			break
		}

		return e.complexity.Repo.Name(childComplexity), true

	case "Repo.policies":
		if e.complexity.Repo.Policies == nil {
			break
		}

		args, err := ec.field_Repo_policies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Repo.Policies(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleasePolicyWhereInput), args["order_by"].(*ent.ReleasePolicyOrder)), true

	case "Repo.project":
		if e.complexity.Repo.Project == nil {
			break
		}

		return e.complexity.Repo.Project(childComplexity), true

	case "Repo.vulnerability_reviews":
		if e.complexity.Repo.VulnerabilityReviews == nil {
			break
		}

		args, err := ec.field_Repo_vulnerability_reviews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Repo.VulnerabilityReviews(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.VulnerabilityReviewWhereInput), args["order_by"].(*ent.VulnerabilityReviewOrder)), true

	case "RepoConnection.edges":
		if e.complexity.RepoConnection.Edges == nil {
			break
		}

		return e.complexity.RepoConnection.Edges(childComplexity), true

	case "RepoConnection.pageInfo":
		if e.complexity.RepoConnection.PageInfo == nil {
			break
		}

		return e.complexity.RepoConnection.PageInfo(childComplexity), true

	case "RepoConnection.totalCount":
		if e.complexity.RepoConnection.TotalCount == nil {
			break
		}

		return e.complexity.RepoConnection.TotalCount(childComplexity), true

	case "RepoEdge.cursor":
		if e.complexity.RepoEdge.Cursor == nil {
			break
		}

		return e.complexity.RepoEdge.Cursor(childComplexity), true

	case "RepoEdge.node":
		if e.complexity.RepoEdge.Node == nil {
			break
		}

		return e.complexity.RepoEdge.Node(childComplexity), true

	case "TestCase.elapsed":
		if e.complexity.TestCase.Elapsed == nil {
			break
		}

		return e.complexity.TestCase.Elapsed(childComplexity), true

	case "TestCase.id":
		if e.complexity.TestCase.ID == nil {
			break
		}

		return e.complexity.TestCase.ID(childComplexity), true

	case "TestCase.message":
		if e.complexity.TestCase.Message == nil {
			break
		}

		return e.complexity.TestCase.Message(childComplexity), true

	case "TestCase.metadata":
		if e.complexity.TestCase.Metadata == nil {
			break
		}

		return e.complexity.TestCase.Metadata(childComplexity), true

	case "TestCase.name":
		if e.complexity.TestCase.Name == nil {
			break
		}

		return e.complexity.TestCase.Name(childComplexity), true

	case "TestCase.result":
		if e.complexity.TestCase.Result == nil {
			break
		}

		return e.complexity.TestCase.Result(childComplexity), true

	case "TestCase.run":
		if e.complexity.TestCase.Run == nil {
			break
		}

		return e.complexity.TestCase.Run(childComplexity), true

	case "TestCaseConnection.edges":
		if e.complexity.TestCaseConnection.Edges == nil {
			break
		}

		return e.complexity.TestCaseConnection.Edges(childComplexity), true

	case "TestCaseConnection.pageInfo":
		if e.complexity.TestCaseConnection.PageInfo == nil {
			break
		}

		return e.complexity.TestCaseConnection.PageInfo(childComplexity), true

	case "TestCaseConnection.totalCount":
		if e.complexity.TestCaseConnection.TotalCount == nil {
			break
		}

		return e.complexity.TestCaseConnection.TotalCount(childComplexity), true

	case "TestCaseEdge.cursor":
		if e.complexity.TestCaseEdge.Cursor == nil {
			break
		}

		return e.complexity.TestCaseEdge.Cursor(childComplexity), true

	case "TestCaseEdge.node":
		if e.complexity.TestCaseEdge.Node == nil {
			break
		}

		return e.complexity.TestCaseEdge.Node(childComplexity), true

	case "TestRun.entry":
		if e.complexity.TestRun.Entry == nil {
			break
		}

		return e.complexity.TestRun.Entry(childComplexity), true

	case "TestRun.id":
		if e.complexity.TestRun.ID == nil {
			break
		}

		return e.complexity.TestRun.ID(childComplexity), true

	case "TestRun.metadata":
		if e.complexity.TestRun.Metadata == nil {
			break
		}

		return e.complexity.TestRun.Metadata(childComplexity), true

	case "TestRun.release":
		if e.complexity.TestRun.Release == nil {
			break
		}

		return e.complexity.TestRun.Release(childComplexity), true

	case "TestRun.tests":
		if e.complexity.TestRun.Tests == nil {
			break
		}

		args, err := ec.field_TestRun_tests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TestRun.Tests(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.TestCaseWhereInput), args["order_by"].(*ent.TestCaseOrder)), true

	case "TestRun.time":
		if e.complexity.TestRun.Time == nil {
			break
		}

		return e.complexity.TestRun.Time(childComplexity), true

	case "TestRun.tool":
		if e.complexity.TestRun.Tool == nil {
			break
		}

		return e.complexity.TestRun.Tool(childComplexity), true

	case "TestRunConnection.edges":
		if e.complexity.TestRunConnection.Edges == nil {
			break
		}

		return e.complexity.TestRunConnection.Edges(childComplexity), true

	case "TestRunConnection.pageInfo":
		if e.complexity.TestRunConnection.PageInfo == nil {
			break
		}

		return e.complexity.TestRunConnection.PageInfo(childComplexity), true

	case "TestRunConnection.totalCount":
		if e.complexity.TestRunConnection.TotalCount == nil {
			break
		}

		return e.complexity.TestRunConnection.TotalCount(childComplexity), true

	case "TestRunEdge.cursor":
		if e.complexity.TestRunEdge.Cursor == nil {
			break
		}

		return e.complexity.TestRunEdge.Cursor(childComplexity), true

	case "TestRunEdge.node":
		if e.complexity.TestRunEdge.Node == nil {
			break
		}

		return e.complexity.TestRunEdge.Node(childComplexity), true

	case "Vulnerability.components":
		if e.complexity.Vulnerability.Components == nil {
			break
		}

		args, err := ec.field_Vulnerability_components_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Vulnerability.Components(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ComponentWhereInput), args["order_by"].(*ent.ComponentOrder)), true

	case "Vulnerability.description":
		if e.complexity.Vulnerability.Description == nil {
			break
		}

		return e.complexity.Vulnerability.Description(childComplexity), true

	case "Vulnerability.id":
		if e.complexity.Vulnerability.ID == nil {
			break
		}

		return e.complexity.Vulnerability.ID(childComplexity), true

	case "Vulnerability.instances":
		if e.complexity.Vulnerability.Instances == nil {
			break
		}

		args, err := ec.field_Vulnerability_instances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Vulnerability.Instances(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseVulnerabilityWhereInput)), true

	case "Vulnerability.metadata":
		if e.complexity.Vulnerability.Metadata == nil {
			break
		}

		return e.complexity.Vulnerability.Metadata(childComplexity), true

	case "Vulnerability.modified":
		if e.complexity.Vulnerability.Modified == nil {
			break
		}

		return e.complexity.Vulnerability.Modified(childComplexity), true

	case "Vulnerability.published":
		if e.complexity.Vulnerability.Published == nil {
			break
		}

		return e.complexity.Vulnerability.Published(childComplexity), true

	case "Vulnerability.reviews":
		if e.complexity.Vulnerability.Reviews == nil {
			break
		}

		args, err := ec.field_Vulnerability_reviews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Vulnerability.Reviews(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.VulnerabilityReviewWhereInput), args["order_by"].(*ent.VulnerabilityReviewOrder)), true

	case "Vulnerability.severity":
		if e.complexity.Vulnerability.Severity == nil {
			break
		}

		return e.complexity.Vulnerability.Severity(childComplexity), true

	case "Vulnerability.severity_score":
		if e.complexity.Vulnerability.SeverityScore == nil {
			break
		}

		return e.complexity.Vulnerability.SeverityScore(childComplexity), true

	case "Vulnerability.summary":
		if e.complexity.Vulnerability.Summary == nil {
			break
		}

		return e.complexity.Vulnerability.Summary(childComplexity), true

	case "Vulnerability.vid":
		if e.complexity.Vulnerability.Vid == nil {
			break
		}

		return e.complexity.Vulnerability.Vid(childComplexity), true

	case "VulnerabilityConnection.edges":
		if e.complexity.VulnerabilityConnection.Edges == nil {
			break
		}

		return e.complexity.VulnerabilityConnection.Edges(childComplexity), true

	case "VulnerabilityConnection.pageInfo":
		if e.complexity.VulnerabilityConnection.PageInfo == nil {
			break
		}

		return e.complexity.VulnerabilityConnection.PageInfo(childComplexity), true

	case "VulnerabilityConnection.totalCount":
		if e.complexity.VulnerabilityConnection.TotalCount == nil {
			break
		}

		return e.complexity.VulnerabilityConnection.TotalCount(childComplexity), true

	case "VulnerabilityEdge.cursor":
		if e.complexity.VulnerabilityEdge.Cursor == nil {
			break
		}

		return e.complexity.VulnerabilityEdge.Cursor(childComplexity), true

	case "VulnerabilityEdge.node":
		if e.complexity.VulnerabilityEdge.Node == nil {
			break
		}

		return e.complexity.VulnerabilityEdge.Node(childComplexity), true

	case "VulnerabilityReview.decision":
		if e.complexity.VulnerabilityReview.Decision == nil {
			break
		}

		return e.complexity.VulnerabilityReview.Decision(childComplexity), true

	case "VulnerabilityReview.id":
		if e.complexity.VulnerabilityReview.ID == nil {
			break
		}

		return e.complexity.VulnerabilityReview.ID(childComplexity), true

	case "VulnerabilityReview.instances":
		if e.complexity.VulnerabilityReview.Instances == nil {
			break
		}

		args, err := ec.field_VulnerabilityReview_instances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VulnerabilityReview.Instances(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseVulnerabilityWhereInput)), true

	case "VulnerabilityReview.note":
		if e.complexity.VulnerabilityReview.Note == nil {
			break
		}

		return e.complexity.VulnerabilityReview.Note(childComplexity), true

	case "VulnerabilityReview.projects":
		if e.complexity.VulnerabilityReview.Projects == nil {
			break
		}

		args, err := ec.field_VulnerabilityReview_projects_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VulnerabilityReview.Projects(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ProjectWhereInput), args["order_by"].(*ent.ProjectOrder)), true

	case "VulnerabilityReview.releases":
		if e.complexity.VulnerabilityReview.Releases == nil {
			break
		}

		args, err := ec.field_VulnerabilityReview_releases_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VulnerabilityReview.Releases(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseWhereInput), args["order_by"].(*ent.ReleaseOrder)), true

	case "VulnerabilityReview.repos":
		if e.complexity.VulnerabilityReview.Repos == nil {
			break
		}

		args, err := ec.field_VulnerabilityReview_repos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VulnerabilityReview.Repos(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.RepoWhereInput), args["order_by"].(*ent.RepoOrder)), true

	case "VulnerabilityReview.vulnerability":
		if e.complexity.VulnerabilityReview.Vulnerability == nil {
			break
		}

		return e.complexity.VulnerabilityReview.Vulnerability(childComplexity), true

	case "VulnerabilityReviewConnection.edges":
		if e.complexity.VulnerabilityReviewConnection.Edges == nil {
			break
		}

		return e.complexity.VulnerabilityReviewConnection.Edges(childComplexity), true

	case "VulnerabilityReviewConnection.pageInfo":
		if e.complexity.VulnerabilityReviewConnection.PageInfo == nil {
			break
		}

		return e.complexity.VulnerabilityReviewConnection.PageInfo(childComplexity), true

	case "VulnerabilityReviewConnection.totalCount":
		if e.complexity.VulnerabilityReviewConnection.TotalCount == nil {
			break
		}

		return e.complexity.VulnerabilityReviewConnection.TotalCount(childComplexity), true

	case "VulnerabilityReviewEdge.cursor":
		if e.complexity.VulnerabilityReviewEdge.Cursor == nil {
			break
		}

		return e.complexity.VulnerabilityReviewEdge.Cursor(childComplexity), true

	case "VulnerabilityReviewEdge.node":
		if e.complexity.VulnerabilityReviewEdge.Node == nil {
			break
		}

		return e.complexity.VulnerabilityReviewEdge.Node(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "ent.graphql", Input: `"""
GitCommitWhereInput is used for filtering GitCommit objects.
Input was generated by ent.
"""
input GitCommitWhereInput {
  not: GitCommitWhereInput
  and: [GitCommitWhereInput!]
  or: [GitCommitWhereInput!]
  
  """hash field predicates"""
  hash: String
  hashNEQ: String
  hashIn: [String!]
  hashNotIn: [String!]
  hashGT: String
  hashGTE: String
  hashLT: String
  hashLTE: String
  hashContains: String
  hashHasPrefix: String
  hashHasSuffix: String
  hashEqualFold: String
  hashContainsFold: String
  
  """branch field predicates"""
  branch: String
  branchNEQ: String
  branchIn: [String!]
  branchNotIn: [String!]
  branchGT: String
  branchGTE: String
  branchLT: String
  branchLTE: String
  branchContains: String
  branchHasPrefix: String
  branchHasSuffix: String
  branchEqualFold: String
  branchContainsFold: String
  
  """tag field predicates"""
  tag: String
  tagNEQ: String
  tagIn: [String!]
  tagNotIn: [String!]
  tagGT: String
  tagGTE: String
  tagLT: String
  tagLTE: String
  tagContains: String
  tagHasPrefix: String
  tagHasSuffix: String
  tagIsNil: Boolean
  tagNotNil: Boolean
  tagEqualFold: String
  tagContainsFold: String
  
  """time field predicates"""
  time: Time
  timeNEQ: Time
  timeIn: [Time!]
  timeNotIn: [Time!]
  timeGT: Time
  timeGTE: Time
  timeLT: Time
  timeLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """repo edge predicates"""
  hasRepo: Boolean
  hasRepoWith: [RepoWhereInput!]
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
}

"""
OrganizationWhereInput is used for filtering Organization objects.
Input was generated by ent.
"""
input OrganizationWhereInput {
  not: OrganizationWhereInput
  and: [OrganizationWhereInput!]
  or: [OrganizationWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """projects edge predicates"""
  hasProjects: Boolean
  hasProjectsWith: [ProjectWhereInput!]
  
  """repos edge predicates"""
  hasRepos: Boolean
  hasReposWith: [RepoWhereInput!]
}

"""
ReleasePolicyWhereInput is used for filtering ReleasePolicy objects.
Input was generated by ent.
"""
input ReleasePolicyWhereInput {
  not: ReleasePolicyWhereInput
  and: [ReleasePolicyWhereInput!]
  or: [ReleasePolicyWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """module field predicates"""
  module: String
  moduleNEQ: String
  moduleIn: [String!]
  moduleNotIn: [String!]
  moduleGT: String
  moduleGTE: String
  moduleLT: String
  moduleLTE: String
  moduleContains: String
  moduleHasPrefix: String
  moduleHasSuffix: String
  moduleEqualFold: String
  moduleContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  
  """projects edge predicates"""
  hasProjects: Boolean
  hasProjectsWith: [ProjectWhereInput!]
  
  """repos edge predicates"""
  hasRepos: Boolean
  hasReposWith: [RepoWhereInput!]
  
  """violations edge predicates"""
  hasViolations: Boolean
  hasViolationsWith: [ReleasePolicyViolationWhereInput!]
}

"""
ArtifactWhereInput is used for filtering Artifact objects.
Input was generated by ent.
"""
input ArtifactWhereInput {
  not: ArtifactWhereInput
  and: [ArtifactWhereInput!]
  or: [ArtifactWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """sha256 field predicates"""
  sha256: String
  sha256NEQ: String
  sha256In: [String!]
  sha256NotIn: [String!]
  sha256GT: String
  sha256GTE: String
  sha256LT: String
  sha256LTE: String
  sha256Contains: String
  sha256HasPrefix: String
  sha256HasSuffix: String
  sha256EqualFold: String
  sha256ContainsFold: String
  
  """type field predicates"""
  type: ArtifactType
  typeNEQ: ArtifactType
  typeIn: [ArtifactType!]
  typeNotIn: [ArtifactType!]
  
  """time field predicates"""
  time: Time
  timeNEQ: Time
  timeIn: [Time!]
  timeNotIn: [Time!]
  timeGT: Time
  timeGTE: Time
  timeLT: Time
  timeLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
  
  """entry edge predicates"""
  hasEntry: Boolean
  hasEntryWith: [ReleaseEntryWhereInput!]
}

"""
ComponentWhereInput is used for filtering Component objects.
Input was generated by ent.
"""
input ComponentWhereInput {
  not: ComponentWhereInput
  and: [ComponentWhereInput!]
  or: [ComponentWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """vendor field predicates"""
  vendor: String
  vendorNEQ: String
  vendorIn: [String!]
  vendorNotIn: [String!]
  vendorGT: String
  vendorGTE: String
  vendorLT: String
  vendorLTE: String
  vendorContains: String
  vendorHasPrefix: String
  vendorHasSuffix: String
  vendorEqualFold: String
  vendorContainsFold: String
  
  """version field predicates"""
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionEqualFold: String
  versionContainsFold: String
  
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  
  """url field predicates"""
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlIsNil: Boolean
  urlNotNil: Boolean
  urlEqualFold: String
  urlContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  
  """vulnerabilities edge predicates"""
  hasVulnerabilities: Boolean
  hasVulnerabilitiesWith: [VulnerabilityWhereInput!]
  
  """licenses edge predicates"""
  hasLicenses: Boolean
  hasLicensesWith: [LicenseWhereInput!]
  
  """uses edge predicates"""
  hasUses: Boolean
  hasUsesWith: [ReleaseComponentWhereInput!]
}

"""
EventWhereInput is used for filtering Event objects.
Input was generated by ent.
"""
input EventWhereInput {
  not: EventWhereInput
  and: [EventWhereInput!]
  or: [EventWhereInput!]
  
  """message field predicates"""
  message: String
  messageNEQ: String
  messageIn: [String!]
  messageNotIn: [String!]
  messageGT: String
  messageGTE: String
  messageLT: String
  messageLTE: String
  messageContains: String
  messageHasPrefix: String
  messageHasSuffix: String
  messageEqualFold: String
  messageContainsFold: String
  
  """type field predicates"""
  type: EventType
  typeNEQ: EventType
  typeIn: [EventType!]
  typeNotIn: [EventType!]
  
  """time field predicates"""
  time: Time
  timeNEQ: Time
  timeIn: [Time!]
  timeNotIn: [Time!]
  timeGT: Time
  timeGTE: Time
  timeLT: Time
  timeLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
  
  """repo edge predicates"""
  hasRepo: Boolean
  hasRepoWith: [RepoWhereInput!]
  
  """project edge predicates"""
  hasProject: Boolean
  hasProjectWith: [ProjectWhereInput!]
}

"""
LicenseWhereInput is used for filtering License objects.
Input was generated by ent.
"""
input LicenseWhereInput {
  not: LicenseWhereInput
  and: [LicenseWhereInput!]
  or: [LicenseWhereInput!]
  
  """license_id field predicates"""
  licenseID: String
  licenseIDNEQ: String
  licenseIDIn: [String!]
  licenseIDNotIn: [String!]
  licenseIDGT: String
  licenseIDGTE: String
  licenseIDLT: String
  licenseIDLTE: String
  licenseIDContains: String
  licenseIDHasPrefix: String
  licenseIDHasSuffix: String
  licenseIDEqualFold: String
  licenseIDContainsFold: String
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  
  """reference field predicates"""
  reference: String
  referenceNEQ: String
  referenceIn: [String!]
  referenceNotIn: [String!]
  referenceGT: String
  referenceGTE: String
  referenceLT: String
  referenceLTE: String
  referenceContains: String
  referenceHasPrefix: String
  referenceHasSuffix: String
  referenceIsNil: Boolean
  referenceNotNil: Boolean
  referenceEqualFold: String
  referenceContainsFold: String
  
  """details_url field predicates"""
  detailsURL: String
  detailsURLNEQ: String
  detailsURLIn: [String!]
  detailsURLNotIn: [String!]
  detailsURLGT: String
  detailsURLGTE: String
  detailsURLLT: String
  detailsURLLTE: String
  detailsURLContains: String
  detailsURLHasPrefix: String
  detailsURLHasSuffix: String
  detailsURLIsNil: Boolean
  detailsURLNotNil: Boolean
  detailsURLEqualFold: String
  detailsURLContainsFold: String
  
  """is_osi_approved field predicates"""
  isOsiApproved: Boolean
  isOsiApprovedNEQ: Boolean
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  
  """components edge predicates"""
  hasComponents: Boolean
  hasComponentsWith: [ComponentWhereInput!]
  
  """instances edge predicates"""
  hasInstances: Boolean
  hasInstancesWith: [ReleaseLicenseWhereInput!]
}

"""
ProjectWhereInput is used for filtering Project objects.
Input was generated by ent.
"""
input ProjectWhereInput {
  not: ProjectWhereInput
  and: [ProjectWhereInput!]
  or: [ProjectWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  
  """repos edge predicates"""
  hasRepos: Boolean
  hasReposWith: [RepoWhereInput!]
  
  """vulnerability_reviews edge predicates"""
  hasVulnerabilityReviews: Boolean
  hasVulnerabilityReviewsWith: [VulnerabilityReviewWhereInput!]
  
  """policies edge predicates"""
  hasPolicies: Boolean
  hasPoliciesWith: [ReleasePolicyWhereInput!]
}

"""
ReleasePolicyViolationWhereInput is used for filtering ReleasePolicyViolation objects.
Input was generated by ent.
"""
input ReleasePolicyViolationWhereInput {
  not: ReleasePolicyViolationWhereInput
  and: [ReleasePolicyViolationWhereInput!]
  or: [ReleasePolicyViolationWhereInput!]
  
  """message field predicates"""
  message: String
  messageNEQ: String
  messageIn: [String!]
  messageNotIn: [String!]
  messageGT: String
  messageGTE: String
  messageLT: String
  messageLTE: String
  messageContains: String
  messageHasPrefix: String
  messageHasSuffix: String
  messageEqualFold: String
  messageContainsFold: String
  
  """type field predicates"""
  type: ReleasePolicyViolationType
  typeNEQ: ReleasePolicyViolationType
  typeIn: [ReleasePolicyViolationType!]
  typeNotIn: [ReleasePolicyViolationType!]
  
  """severity field predicates"""
  severity: ReleasePolicyViolationSeverity
  severityNEQ: ReleasePolicyViolationSeverity
  severityIn: [ReleasePolicyViolationSeverity!]
  severityNotIn: [ReleasePolicyViolationSeverity!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """policy edge predicates"""
  hasPolicy: Boolean
  hasPolicyWith: [ReleasePolicyWhereInput!]
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
}

"""
ReleaseVulnerabilityWhereInput is used for filtering ReleaseVulnerability objects.
Input was generated by ent.
"""
input ReleaseVulnerabilityWhereInput {
  not: ReleaseVulnerabilityWhereInput
  and: [ReleaseVulnerabilityWhereInput!]
  or: [ReleaseVulnerabilityWhereInput!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """vulnerability edge predicates"""
  hasVulnerability: Boolean
  hasVulnerabilityWith: [VulnerabilityWhereInput!]
  
  """component edge predicates"""
  hasComponent: Boolean
  hasComponentWith: [ReleaseComponentWhereInput!]
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
  
  """reviews edge predicates"""
  hasReviews: Boolean
  hasReviewsWith: [VulnerabilityReviewWhereInput!]
  
  """scan edge predicates"""
  hasScan: Boolean
  hasScanWith: [CodeScanWhereInput!]
}

"""
RepoWhereInput is used for filtering Repo objects.
Input was generated by ent.
"""
input RepoWhereInput {
  not: RepoWhereInput
  and: [RepoWhereInput!]
  or: [RepoWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """default_branch field predicates"""
  defaultBranch: String
  defaultBranchNEQ: String
  defaultBranchIn: [String!]
  defaultBranchNotIn: [String!]
  defaultBranchGT: String
  defaultBranchGTE: String
  defaultBranchLT: String
  defaultBranchLTE: String
  defaultBranchContains: String
  defaultBranchHasPrefix: String
  defaultBranchHasSuffix: String
  defaultBranchEqualFold: String
  defaultBranchContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  
  """project edge predicates"""
  hasProject: Boolean
  hasProjectWith: [ProjectWhereInput!]
  
  """head edge predicates"""
  hasHead: Boolean
  hasHeadWith: [ReleaseWhereInput!]
  
  """commits edge predicates"""
  hasCommits: Boolean
  hasCommitsWith: [GitCommitWhereInput!]
  
  """vulnerability_reviews edge predicates"""
  hasVulnerabilityReviews: Boolean
  hasVulnerabilityReviewsWith: [VulnerabilityReviewWhereInput!]
  
  """policies edge predicates"""
  hasPolicies: Boolean
  hasPoliciesWith: [ReleasePolicyWhereInput!]
}

"""
CodeIssueWhereInput is used for filtering CodeIssue objects.
Input was generated by ent.
"""
input CodeIssueWhereInput {
  not: CodeIssueWhereInput
  and: [CodeIssueWhereInput!]
  or: [CodeIssueWhereInput!]
  
  """rule_id field predicates"""
  ruleID: String
  ruleIDNEQ: String
  ruleIDIn: [String!]
  ruleIDNotIn: [String!]
  ruleIDGT: String
  ruleIDGTE: String
  ruleIDLT: String
  ruleIDLTE: String
  ruleIDContains: String
  ruleIDHasPrefix: String
  ruleIDHasSuffix: String
  ruleIDEqualFold: String
  ruleIDContainsFold: String
  
  """message field predicates"""
  message: String
  messageNEQ: String
  messageIn: [String!]
  messageNotIn: [String!]
  messageGT: String
  messageGTE: String
  messageLT: String
  messageLTE: String
  messageContains: String
  messageHasPrefix: String
  messageHasSuffix: String
  messageEqualFold: String
  messageContainsFold: String
  
  """severity field predicates"""
  severity: CodeIssueSeverity
  severityNEQ: CodeIssueSeverity
  severityIn: [CodeIssueSeverity!]
  severityNotIn: [CodeIssueSeverity!]
  
  """type field predicates"""
  type: CodeIssueType
  typeNEQ: CodeIssueType
  typeIn: [CodeIssueType!]
  typeNotIn: [CodeIssueType!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """scan edge predicates"""
  hasScan: Boolean
  hasScanWith: [CodeScanWhereInput!]
}

"""
VulnerabilityReviewWhereInput is used for filtering VulnerabilityReview objects.
Input was generated by ent.
"""
input VulnerabilityReviewWhereInput {
  not: VulnerabilityReviewWhereInput
  and: [VulnerabilityReviewWhereInput!]
  or: [VulnerabilityReviewWhereInput!]
  
  """note field predicates"""
  note: String
  noteNEQ: String
  noteIn: [String!]
  noteNotIn: [String!]
  noteGT: String
  noteGTE: String
  noteLT: String
  noteLTE: String
  noteContains: String
  noteHasPrefix: String
  noteHasSuffix: String
  noteEqualFold: String
  noteContainsFold: String
  
  """decision field predicates"""
  decision: VulnerabilityReviewDecision
  decisionNEQ: VulnerabilityReviewDecision
  decisionIn: [VulnerabilityReviewDecision!]
  decisionNotIn: [VulnerabilityReviewDecision!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """vulnerability edge predicates"""
  hasVulnerability: Boolean
  hasVulnerabilityWith: [VulnerabilityWhereInput!]
  
  """projects edge predicates"""
  hasProjects: Boolean
  hasProjectsWith: [ProjectWhereInput!]
  
  """repos edge predicates"""
  hasRepos: Boolean
  hasReposWith: [RepoWhereInput!]
  
  """releases edge predicates"""
  hasReleases: Boolean
  hasReleasesWith: [ReleaseWhereInput!]
  
  """instances edge predicates"""
  hasInstances: Boolean
  hasInstancesWith: [ReleaseVulnerabilityWhereInput!]
}

"""
ReleaseLicenseWhereInput is used for filtering ReleaseLicense objects.
Input was generated by ent.
"""
input ReleaseLicenseWhereInput {
  not: ReleaseLicenseWhereInput
  and: [ReleaseLicenseWhereInput!]
  or: [ReleaseLicenseWhereInput!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """license edge predicates"""
  hasLicense: Boolean
  hasLicenseWith: [LicenseWhereInput!]
  
  """component edge predicates"""
  hasComponent: Boolean
  hasComponentWith: [ReleaseComponentWhereInput!]
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
  
  """scans edge predicates"""
  hasScans: Boolean
  hasScansWith: [CodeScanWhereInput!]
}

"""
VulnerabilityWhereInput is used for filtering Vulnerability objects.
Input was generated by ent.
"""
input VulnerabilityWhereInput {
  not: VulnerabilityWhereInput
  and: [VulnerabilityWhereInput!]
  or: [VulnerabilityWhereInput!]
  
  """vid field predicates"""
  vid: String
  vidNEQ: String
  vidIn: [String!]
  vidNotIn: [String!]
  vidGT: String
  vidGTE: String
  vidLT: String
  vidLTE: String
  vidContains: String
  vidHasPrefix: String
  vidHasSuffix: String
  vidEqualFold: String
  vidContainsFold: String
  
  """summary field predicates"""
  summary: String
  summaryNEQ: String
  summaryIn: [String!]
  summaryNotIn: [String!]
  summaryGT: String
  summaryGTE: String
  summaryLT: String
  summaryLTE: String
  summaryContains: String
  summaryHasPrefix: String
  summaryHasSuffix: String
  summaryIsNil: Boolean
  summaryNotNil: Boolean
  summaryEqualFold: String
  summaryContainsFold: String
  
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  
  """severity_score field predicates"""
  severityScore: Float
  severityScoreNEQ: Float
  severityScoreIn: [Float!]
  severityScoreNotIn: [Float!]
  severityScoreGT: Float
  severityScoreGTE: Float
  severityScoreLT: Float
  severityScoreLTE: Float
  
  """severity field predicates"""
  severity: VulnerabilitySeverity
  severityNEQ: VulnerabilitySeverity
  severityIn: [VulnerabilitySeverity!]
  severityNotIn: [VulnerabilitySeverity!]
  
  """published field predicates"""
  published: Time
  publishedNEQ: Time
  publishedIn: [Time!]
  publishedNotIn: [Time!]
  publishedGT: Time
  publishedGTE: Time
  publishedLT: Time
  publishedLTE: Time
  publishedIsNil: Boolean
  publishedNotNil: Boolean
  
  """modified field predicates"""
  modified: Time
  modifiedNEQ: Time
  modifiedIn: [Time!]
  modifiedNotIn: [Time!]
  modifiedGT: Time
  modifiedGTE: Time
  modifiedLT: Time
  modifiedLTE: Time
  modifiedIsNil: Boolean
  modifiedNotNil: Boolean
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  
  """components edge predicates"""
  hasComponents: Boolean
  hasComponentsWith: [ComponentWhereInput!]
  
  """reviews edge predicates"""
  hasReviews: Boolean
  hasReviewsWith: [VulnerabilityReviewWhereInput!]
  
  """instances edge predicates"""
  hasInstances: Boolean
  hasInstancesWith: [ReleaseVulnerabilityWhereInput!]
}

"""
CodeScanWhereInput is used for filtering CodeScan objects.
Input was generated by ent.
"""
input CodeScanWhereInput {
  not: CodeScanWhereInput
  and: [CodeScanWhereInput!]
  or: [CodeScanWhereInput!]
  
  """tool field predicates"""
  tool: String
  toolNEQ: String
  toolIn: [String!]
  toolNotIn: [String!]
  toolGT: String
  toolGTE: String
  toolLT: String
  toolLTE: String
  toolContains: String
  toolHasPrefix: String
  toolHasSuffix: String
  toolEqualFold: String
  toolContainsFold: String
  
  """time field predicates"""
  time: Time
  timeNEQ: Time
  timeIn: [Time!]
  timeNotIn: [Time!]
  timeGT: Time
  timeGTE: Time
  timeLT: Time
  timeLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
  
  """entry edge predicates"""
  hasEntry: Boolean
  hasEntryWith: [ReleaseEntryWhereInput!]
  
  """issues edge predicates"""
  hasIssues: Boolean
  hasIssuesWith: [CodeIssueWhereInput!]
  
  """vulnerabilities edge predicates"""
  hasVulnerabilities: Boolean
  hasVulnerabilitiesWith: [ReleaseVulnerabilityWhereInput!]
  
  """licenses edge predicates"""
  hasLicenses: Boolean
  hasLicensesWith: [ReleaseLicenseWhereInput!]
  
  """components edge predicates"""
  hasComponents: Boolean
  hasComponentsWith: [ReleaseComponentWhereInput!]
}

"""
LicenseUseWhereInput is used for filtering LicenseUse objects.
Input was generated by ent.
"""
input LicenseUseWhereInput {
  not: LicenseUseWhereInput
  and: [LicenseUseWhereInput!]
  or: [LicenseUseWhereInput!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """license edge predicates"""
  hasLicense: Boolean
  hasLicenseWith: [LicenseWhereInput!]
}

"""
ReleaseWhereInput is used for filtering Release objects.
Input was generated by ent.
"""
input ReleaseWhereInput {
  not: ReleaseWhereInput
  and: [ReleaseWhereInput!]
  or: [ReleaseWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """version field predicates"""
  version: String
  versionNEQ: String
  versionIn: [String!]
  versionNotIn: [String!]
  versionGT: String
  versionGTE: String
  versionLT: String
  versionLTE: String
  versionContains: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionEqualFold: String
  versionContainsFold: String
  
  """status field predicates"""
  status: ReleaseStatus
  statusNEQ: ReleaseStatus
  statusIn: [ReleaseStatus!]
  statusNotIn: [ReleaseStatus!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """subreleases edge predicates"""
  hasSubreleases: Boolean
  hasSubreleasesWith: [ReleaseWhereInput!]
  
  """dependencies edge predicates"""
  hasDependencies: Boolean
  hasDependenciesWith: [ReleaseWhereInput!]
  
  """commit edge predicates"""
  hasCommit: Boolean
  hasCommitWith: [GitCommitWhereInput!]
  
  """head_of edge predicates"""
  hasHeadOf: Boolean
  hasHeadOfWith: [RepoWhereInput!]
  
  """log edge predicates"""
  hasLog: Boolean
  hasLogWith: [ReleaseEntryWhereInput!]
  
  """violations edge predicates"""
  hasViolations: Boolean
  hasViolationsWith: [ReleasePolicyViolationWhereInput!]
  
  """artifacts edge predicates"""
  hasArtifacts: Boolean
  hasArtifactsWith: [ArtifactWhereInput!]
  
  """components edge predicates"""
  hasComponents: Boolean
  hasComponentsWith: [ReleaseComponentWhereInput!]
  
  """vulnerabilities edge predicates"""
  hasVulnerabilities: Boolean
  hasVulnerabilitiesWith: [ReleaseVulnerabilityWhereInput!]
  
  """licenses edge predicates"""
  hasLicenses: Boolean
  hasLicensesWith: [ReleaseLicenseWhereInput!]
  
  """code_scans edge predicates"""
  hasCodeScans: Boolean
  hasCodeScansWith: [CodeScanWhereInput!]
  
  """test_runs edge predicates"""
  hasTestRuns: Boolean
  hasTestRunsWith: [TestRunWhereInput!]
  
  """vulnerability_reviews edge predicates"""
  hasVulnerabilityReviews: Boolean
  hasVulnerabilityReviewsWith: [VulnerabilityReviewWhereInput!]
}

"""
ReleaseComponentWhereInput is used for filtering ReleaseComponent objects.
Input was generated by ent.
"""
input ReleaseComponentWhereInput {
  not: ReleaseComponentWhereInput
  and: [ReleaseComponentWhereInput!]
  or: [ReleaseComponentWhereInput!]
  
  """type field predicates"""
  type: ReleaseComponentType
  typeNEQ: ReleaseComponentType
  typeIn: [ReleaseComponentType!]
  typeNotIn: [ReleaseComponentType!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
  
  """scans edge predicates"""
  hasScans: Boolean
  hasScansWith: [CodeScanWhereInput!]
  
  """component edge predicates"""
  hasComponent: Boolean
  hasComponentWith: [ComponentWhereInput!]
  
  """vulnerabilities edge predicates"""
  hasVulnerabilities: Boolean
  hasVulnerabilitiesWith: [ReleaseVulnerabilityWhereInput!]
  
  """licenses edge predicates"""
  hasLicenses: Boolean
  hasLicensesWith: [ReleaseLicenseWhereInput!]
}

"""
ReleaseEntryWhereInput is used for filtering ReleaseEntry objects.
Input was generated by ent.
"""
input ReleaseEntryWhereInput {
  not: ReleaseEntryWhereInput
  and: [ReleaseEntryWhereInput!]
  or: [ReleaseEntryWhereInput!]
  
  """type field predicates"""
  type: ReleaseEntryType
  typeNEQ: ReleaseEntryType
  typeIn: [ReleaseEntryType!]
  typeNotIn: [ReleaseEntryType!]
  
  """time field predicates"""
  time: Time
  timeNEQ: Time
  timeIn: [Time!]
  timeNotIn: [Time!]
  timeGT: Time
  timeGTE: Time
  timeLT: Time
  timeLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """artifact edge predicates"""
  hasArtifact: Boolean
  hasArtifactWith: [ArtifactWhereInput!]
  
  """code_scan edge predicates"""
  hasCodeScan: Boolean
  hasCodeScanWith: [CodeScanWhereInput!]
  
  """test_run edge predicates"""
  hasTestRun: Boolean
  hasTestRunWith: [TestRunWhereInput!]
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
}

"""
TestCaseWhereInput is used for filtering TestCase objects.
Input was generated by ent.
"""
input TestCaseWhereInput {
  not: TestCaseWhereInput
  and: [TestCaseWhereInput!]
  or: [TestCaseWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """result field predicates"""
  result: Boolean
  resultNEQ: Boolean
  
  """message field predicates"""
  message: String
  messageNEQ: String
  messageIn: [String!]
  messageNotIn: [String!]
  messageGT: String
  messageGTE: String
  messageLT: String
  messageLTE: String
  messageContains: String
  messageHasPrefix: String
  messageHasSuffix: String
  messageEqualFold: String
  messageContainsFold: String
  
  """elapsed field predicates"""
  elapsed: Float
  elapsedNEQ: Float
  elapsedIn: [Float!]
  elapsedNotIn: [Float!]
  elapsedGT: Float
  elapsedGTE: Float
  elapsedLT: Float
  elapsedLTE: Float
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """run edge predicates"""
  hasRun: Boolean
  hasRunWith: [TestRunWhereInput!]
}

"""
TestRunWhereInput is used for filtering TestRun objects.
Input was generated by ent.
"""
input TestRunWhereInput {
  not: TestRunWhereInput
  and: [TestRunWhereInput!]
  or: [TestRunWhereInput!]
  
  """tool field predicates"""
  tool: String
  toolNEQ: String
  toolIn: [String!]
  toolNotIn: [String!]
  toolGT: String
  toolGTE: String
  toolLT: String
  toolLTE: String
  toolContains: String
  toolHasPrefix: String
  toolHasSuffix: String
  toolEqualFold: String
  toolContainsFold: String
  
  """time field predicates"""
  time: Time
  timeNEQ: Time
  timeIn: [Time!]
  timeNotIn: [Time!]
  timeGT: Time
  timeGTE: Time
  timeLT: Time
  timeLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [ReleaseWhereInput!]
  
  """entry edge predicates"""
  hasEntry: Boolean
  hasEntryWith: [ReleaseEntryWhereInput!]
  
  """tests edge predicates"""
  hasTests: Boolean
  hasTestsWith: [TestCaseWhereInput!]
}

"""
AdapterWhereInput is used for filtering Adapter objects.
Input was generated by ent.
"""
input AdapterWhereInput {
  not: AdapterWhereInput
  and: [AdapterWhereInput!]
  or: [AdapterWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """tag field predicates"""
  tag: String
  tagNEQ: String
  tagIn: [String!]
  tagNotIn: [String!]
  tagGT: String
  tagGTE: String
  tagLT: String
  tagLTE: String
  tagContains: String
  tagHasPrefix: String
  tagHasSuffix: String
  tagEqualFold: String
  tagContainsFold: String
  
  """module field predicates"""
  module: String
  moduleNEQ: String
  moduleIn: [String!]
  moduleNotIn: [String!]
  moduleGT: String
  moduleGTE: String
  moduleLT: String
  moduleLTE: String
  moduleContains: String
  moduleHasPrefix: String
  moduleHasSuffix: String
  moduleEqualFold: String
  moduleContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
}
`, BuiltIn: false},
	{Name: "schema.graphql", Input: `
directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

scalar Map

"""Query generated by ent."""
type Query {
  policy(first: Int, last: Int, order_by: ReleasePolicyOrder, where: ReleasePolicyWhereInput): [ReleasePolicy]
  artifact(first: Int, last: Int, order_by: ArtifactOrder, where: ArtifactWhereInput): [Artifact]
  component(first: Int, last: Int, order_by: ComponentOrder, where: ComponentWhereInput): [Component]
  license_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: LicenseOrder, where: LicenseWhereInput): LicenseConnection
  vulnerability_review(first: Int, last: Int, order_by: VulnerabilityReviewOrder, where: VulnerabilityReviewWhereInput): [VulnerabilityReview]
  license(first: Int, last: Int, order_by: LicenseOrder, where: LicenseWhereInput): [License]
  repo(first: Int, last: Int, order_by: RepoOrder, where: RepoWhereInput): [Repo]
  project(first: Int, last: Int, order_by: ProjectOrder, where: ProjectWhereInput): [Project]
  release(first: Int, last: Int, order_by: ReleaseOrder, where: ReleaseWhereInput): [Release]
  repo_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: RepoOrder, where: RepoWhereInput): RepoConnection
  commit(first: Int, last: Int, order_by: GitCommitOrder, where: GitCommitWhereInput): [GitCommit]
  project_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ProjectOrder, where: ProjectWhereInput): ProjectConnection
  release_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ReleaseOrder, where: ReleaseWhereInput): ReleaseConnection
  vulnerability(first: Int, last: Int, order_by: VulnerabilityOrder, where: VulnerabilityWhereInput): [Vulnerability]
}

"""
Maps a Time GraphQL scalar to a Go time.Time struct.
Generated by ent.
"""
scalar Time

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
Generated by ent.
"""
scalar Cursor

interface Node {
  id: ID!
}

enum ReleaseEntryType {
  artifact
  deploy
  code_scan
  test_run
}

enum ReleaseEntryOrderField {
  type
  time
}

enum ReleasePolicyOrderField {
  name
}

enum CodeIssueType {
  style
  security
  bug
}

enum ComponentOrderField {
  name
  vendor
  version
}

enum ReleasePolicyViolationType {
  require
  deny
}

enum ReleasePolicyViolationSeverity {
  suggestion
  warning
  blocking
}

enum VulnerabilityReviewDecision {
  exploitable
  in_progress
  invalid
  mitigated
  ineffective
}

enum VulnerabilityReviewOrderField {
  name
}

enum OrderDirection {
  ASC
  DESC
}

enum CodeScanOrderField {
  tool
  time
}

enum ReleaseStatus {
  pending
  ready
  blocked
}

enum ProjectOrderField {
  name
}

enum GitCommitOrderField {
  hash
  branch
  tag
  time
}

enum LicenseOrderField {
  spdx_id
  name
}

enum TestCaseOrderField {
  name
}

enum TestRunOrderField {
  tool
  time
}

enum VulnerabilityOrderField {
  vid
  severity_score
  severity
  published
  modified
}

enum ArtifactType {
  docker
  file
}

enum EventType {
  evaluate_release
}

enum ReleaseComponentType {
  embedded
  distributed
  development
}

enum ArtifactOrderField {
  name
  sha256
  type
  time
}

enum CodeIssueSeverity {
  low
  medium
  high
}

enum ReleaseOrderField {
  name
  version
}

enum RepoOrderField {
  name
}

enum VulnerabilitySeverity {
  None
  Low
  Medium
  High
  Critical
}

enum AdapterOrderField {
  name
  tag
}

enum CodeIssueOrderField {
  rule_id
  severity
  type
}

"""
ProjectConnection supports the relay edge specification for node Project in the ent schema.
Generated by ent.
"""
type ProjectEdge {
  node: Project
  cursor: Cursor!
}

"""
ReleaseEntryConnection supports the relay connection specification for node ReleaseEntry in the ent schema.
Generated by ent.
"""
type ReleaseEntryConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseEntryEdge]
}

"""
CodeIssue represents the node CodeIssue in the ent schema.
Generated by ent.
"""
type CodeIssue implements Node {
  id: ID!
  rule_id: String
  message: String
  severity: CodeIssueSeverity
  type: CodeIssueType
  metadata: Map
  scan: CodeScan!
}

"""
CodeIssueConnection supports the relay connection specification for node CodeIssue in the ent schema.
Generated by ent.
"""
type CodeIssueConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CodeIssueEdge]
}

"""
ReleaseVulnerabilityConnection supports the relay connection specification for node ReleaseVulnerability in the ent schema.
Generated by ent.
"""
type ReleaseVulnerabilityConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseVulnerabilityEdge]
}

"""
VulnerabilityReview represents the node VulnerabilityReview in the ent schema.
Generated by ent.
"""
type VulnerabilityReview implements Node {
  id: ID!
  note: String
  decision: VulnerabilityReviewDecision
  vulnerability: Vulnerability!
  projects(first: Int, last: Int, where: ProjectWhereInput, order_by: ProjectOrder): [Project] @goField(forceResolver: true)
  repos(first: Int, last: Int, where: RepoWhereInput, order_by: RepoOrder): [Repo] @goField(forceResolver: true)
  releases(first: Int, last: Int, where: ReleaseWhereInput, order_by: ReleaseOrder): [Release] @goField(forceResolver: true)
  instances(first: Int, last: Int, where: ReleaseVulnerabilityWhereInput): [ReleaseVulnerability] @goField(forceResolver: true)
}

"""
ProjectConnection supports the relay connection specification for node Project in the ent schema.
Generated by ent.
"""
type ProjectConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ProjectEdge]
}

"""
ReleasePolicyConnection supports the relay connection specification for node ReleasePolicy in the ent schema.
Generated by ent.
"""
type ReleasePolicyConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleasePolicyEdge]
}

"""
ReleasePolicyViolationConnection supports the relay edge specification for node ReleasePolicyViolation in the ent schema.
Generated by ent.
"""
type ReleasePolicyViolationEdge {
  node: ReleasePolicyViolation
  cursor: Cursor!
}

"""
TestRunConnection supports the relay edge specification for node TestRun in the ent schema.
Generated by ent.
"""
type TestRunEdge {
  node: TestRun
  cursor: Cursor!
}

"""
ReleaseVulnerabilityConnection supports the relay edge specification for node ReleaseVulnerability in the ent schema.
Generated by ent.
"""
type ReleaseVulnerabilityEdge {
  node: ReleaseVulnerability
  cursor: Cursor!
}

"""
AdapterConnection supports the relay edge specification for node Adapter in the ent schema.
Generated by ent.
"""
type AdapterEdge {
  node: Adapter
  cursor: Cursor!
}

"""
ReleaseConnection supports the relay edge specification for node Release in the ent schema.
Generated by ent.
"""
type ReleaseEdge {
  node: Release
  cursor: Cursor!
}

"""
ReleaseLicense represents the node ReleaseLicense in the ent schema.
Generated by ent.
"""
type ReleaseLicense implements Node {
  id: ID!
  license: License!
  component: ReleaseComponent
  release: Release!
  scans(first: Int, last: Int, where: CodeScanWhereInput, order_by: CodeScanOrder): [CodeScan] @goField(forceResolver: true)
}

"""
ReleaseLicenseConnection supports the relay edge specification for node ReleaseLicense in the ent schema.
Generated by ent.
"""
type ReleaseLicenseEdge {
  node: ReleaseLicense
  cursor: Cursor!
}

"""
ReleasePolicy represents the node ReleasePolicy in the ent schema.
Generated by ent.
"""
type ReleasePolicy implements Node {
  id: ID!
  name: String
  module: String
  projects(first: Int, last: Int, where: ProjectWhereInput, order_by: ProjectOrder): [Project] @goField(forceResolver: true)
  repos(first: Int, last: Int, where: RepoWhereInput, order_by: RepoOrder): [Repo] @goField(forceResolver: true)
  violations(first: Int, last: Int, where: ReleasePolicyViolationWhereInput): [ReleasePolicyViolation] @goField(forceResolver: true)
}

"""
ArtifactConnection supports the relay connection specification for node Artifact in the ent schema.
Generated by ent.
"""
type ArtifactConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ArtifactEdge]
}

"""
CodeIssueConnection supports the relay edge specification for node CodeIssue in the ent schema.
Generated by ent.
"""
type CodeIssueEdge {
  node: CodeIssue
  cursor: Cursor!
}

"""
TestCaseConnection supports the relay edge specification for node TestCase in the ent schema.
Generated by ent.
"""
type TestCaseEdge {
  node: TestCase
  cursor: Cursor!
}

"""
VulnerabilityReviewConnection supports the relay edge specification for node VulnerabilityReview in the ent schema.
Generated by ent.
"""
type VulnerabilityReviewEdge {
  node: VulnerabilityReview
  cursor: Cursor!
}

"""
TestCase represents the node TestCase in the ent schema.
Generated by ent.
"""
type TestCase implements Node {
  id: ID!
  name: String
  result: Boolean
  message: String
  elapsed: Float
  metadata: Map
  run: TestRun!
}

"""
TestRunConnection supports the relay connection specification for node TestRun in the ent schema.
Generated by ent.
"""
type TestRunConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TestRunEdge]
}

"""
VulnerabilityConnection supports the relay edge specification for node Vulnerability in the ent schema.
Generated by ent.
"""
type VulnerabilityEdge {
  node: Vulnerability
  cursor: Cursor!
}

"""
VulnerabilityReviewConnection supports the relay connection specification for node VulnerabilityReview in the ent schema.
Generated by ent.
"""
type VulnerabilityReviewConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [VulnerabilityReviewEdge]
}

"""
AdapterConnection supports the relay connection specification for node Adapter in the ent schema.
Generated by ent.
"""
type AdapterConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AdapterEdge]
}

"""
ComponentConnection supports the relay connection specification for node Component in the ent schema.
Generated by ent.
"""
type ComponentConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ComponentEdge]
}

"""
LicenseConnection supports the relay edge specification for node License in the ent schema.
Generated by ent.
"""
type LicenseEdge {
  node: License
  cursor: Cursor!
}

"""
Release represents the node Release in the ent schema.
Generated by ent.
"""
type Release implements Node {
  id: ID!
  name: String
  version: String
  status: ReleaseStatus
  subreleases(first: Int, last: Int, where: ReleaseWhereInput, order_by: ReleaseOrder): [Release] @goField(forceResolver: true)
  dependencies(first: Int, last: Int, where: ReleaseWhereInput, order_by: ReleaseOrder): [Release] @goField(forceResolver: true)
  commit: GitCommit!
  head_of: Repo
  log(first: Int, last: Int, where: ReleaseEntryWhereInput, order_by: ReleaseEntryOrder): [ReleaseEntry] @goField(forceResolver: true)
  violations(first: Int, last: Int, where: ReleasePolicyViolationWhereInput): [ReleasePolicyViolation] @goField(forceResolver: true)
  artifacts(first: Int, last: Int, where: ArtifactWhereInput, order_by: ArtifactOrder): [Artifact] @goField(forceResolver: true)
  components(first: Int, last: Int, where: ReleaseComponentWhereInput): [ReleaseComponent] @goField(forceResolver: true)
  licenses(first: Int, last: Int, where: ReleaseLicenseWhereInput): [ReleaseLicense] @goField(forceResolver: true)
  vulnerabilities(first: Int, last: Int, where: ReleaseVulnerabilityWhereInput): [ReleaseVulnerability] @goField(forceResolver: true)
  code_scans(first: Int, last: Int, where: CodeScanWhereInput, order_by: CodeScanOrder): [CodeScan] @goField(forceResolver: true)
  test_runs(first: Int, last: Int, where: TestRunWhereInput, order_by: TestRunOrder): [TestRun] @goField(forceResolver: true)
  vulnerability_reviews(first: Int, last: Int, where: VulnerabilityReviewWhereInput, order_by: VulnerabilityReviewOrder): [VulnerabilityReview] @goField(forceResolver: true)
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

"""
RepoConnection supports the relay connection specification for node Repo in the ent schema.
Generated by ent.
"""
type RepoConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [RepoEdge]
}

"""
ReleaseLicenseConnection supports the relay connection specification for node ReleaseLicense in the ent schema.
Generated by ent.
"""
type ReleaseLicenseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseLicenseEdge]
}

"""
ReleaseVulnerability represents the node ReleaseVulnerability in the ent schema.
Generated by ent.
"""
type ReleaseVulnerability implements Node {
  id: ID!
  vulnerability: Vulnerability!
  component: ReleaseComponent
  release: Release!
  reviews(first: Int, last: Int, where: VulnerabilityReviewWhereInput, order_by: VulnerabilityReviewOrder): [VulnerabilityReview] @goField(forceResolver: true)
  scan: CodeScan
}

"""
Repo represents the node Repo in the ent schema.
Generated by ent.
"""
type Repo implements Node {
  id: ID!
  name: String
  default_branch: String
  project: Project!
  head: Release
  commits(first: Int, last: Int, where: GitCommitWhereInput, order_by: GitCommitOrder): [GitCommit] @goField(forceResolver: true)
  vulnerability_reviews(first: Int, last: Int, where: VulnerabilityReviewWhereInput, order_by: VulnerabilityReviewOrder): [VulnerabilityReview] @goField(forceResolver: true)
  policies(first: Int, last: Int, where: ReleasePolicyWhereInput, order_by: ReleasePolicyOrder): [ReleasePolicy] @goField(forceResolver: true)
}

"""
CodeScanConnection supports the relay connection specification for node CodeScan in the ent schema.
Generated by ent.
"""
type CodeScanConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CodeScanEdge]
}

"""
CodeScanConnection supports the relay edge specification for node CodeScan in the ent schema.
Generated by ent.
"""
type CodeScanEdge {
  node: CodeScan
  cursor: Cursor!
}

"""
ComponentConnection supports the relay edge specification for node Component in the ent schema.
Generated by ent.
"""
type ComponentEdge {
  node: Component
  cursor: Cursor!
}

"""
Project represents the node Project in the ent schema.
Generated by ent.
"""
type Project implements Node {
  id: ID!
  name: String
  repos(first: Int, last: Int, where: RepoWhereInput, order_by: RepoOrder): [Repo] @goField(forceResolver: true)
  vulnerability_reviews(first: Int, last: Int, where: VulnerabilityReviewWhereInput, order_by: VulnerabilityReviewOrder): [VulnerabilityReview] @goField(forceResolver: true)
  policies(first: Int, last: Int, where: ReleasePolicyWhereInput, order_by: ReleasePolicyOrder): [ReleasePolicy] @goField(forceResolver: true)
}

"""
TestCaseConnection supports the relay connection specification for node TestCase in the ent schema.
Generated by ent.
"""
type TestCaseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TestCaseEdge]
}

"""
CodeScan represents the node CodeScan in the ent schema.
Generated by ent.
"""
type CodeScan implements Node {
  id: ID!
  tool: String
  time: Time
  metadata: Map
  release: Release!
  entry: ReleaseEntry
  issues(first: Int, last: Int, where: CodeIssueWhereInput, order_by: CodeIssueOrder): [CodeIssue] @goField(forceResolver: true)
  vulnerabilities(first: Int, last: Int, where: ReleaseVulnerabilityWhereInput): [ReleaseVulnerability] @goField(forceResolver: true)
  components(first: Int, last: Int, where: ReleaseComponentWhereInput): [ReleaseComponent] @goField(forceResolver: true)
}

"""
GitCommitConnection supports the relay edge specification for node GitCommit in the ent schema.
Generated by ent.
"""
type GitCommitEdge {
  node: GitCommit
  cursor: Cursor!
}

"""
ReleaseConnection supports the relay connection specification for node Release in the ent schema.
Generated by ent.
"""
type ReleaseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseEdge]
}

"""
ReleasePolicyViolation represents the node ReleasePolicyViolation in the ent schema.
Generated by ent.
"""
type ReleasePolicyViolation implements Node {
  id: ID!
  message: String
  type: ReleasePolicyViolationType
  severity: ReleasePolicyViolationSeverity
  policy: ReleasePolicy!
  release: Release!
}

"""
ReleasePolicyViolationConnection supports the relay connection specification for node ReleasePolicyViolation in the ent schema.
Generated by ent.
"""
type ReleasePolicyViolationConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleasePolicyViolationEdge]
}

"""
GitCommit represents the node GitCommit in the ent schema.
Generated by ent.
"""
type GitCommit implements Node {
  id: ID!
  hash: String
  branch: String
  tag: String
  time: Time
  repo: Repo!
  release: Release
}

"""
ReleaseEntry represents the node ReleaseEntry in the ent schema.
Generated by ent.
"""
type ReleaseEntry implements Node {
  id: ID!
  type: ReleaseEntryType
  time: Time
  artifact: Artifact
  code_scan: CodeScan
  test_run: TestRun
  release: Release!
}

"""
RepoConnection supports the relay edge specification for node Repo in the ent schema.
Generated by ent.
"""
type RepoEdge {
  node: Repo
  cursor: Cursor!
}

"""
Adapter represents the node Adapter in the ent schema.
Generated by ent.
"""
type Adapter implements Node {
  id: ID!
  name: String
  tag: String
  module: String
}

"""
ReleaseComponent represents the node ReleaseComponent in the ent schema.
Generated by ent.
"""
type ReleaseComponent implements Node {
  id: ID!
  type: ReleaseComponentType
  release: Release!
  scans(first: Int, last: Int, where: CodeScanWhereInput, order_by: CodeScanOrder): [CodeScan!] @goField(forceResolver: true)
  component: Component!
  vulnerabilities(first: Int, last: Int, where: ReleaseVulnerabilityWhereInput): [ReleaseVulnerability] @goField(forceResolver: true)
  licenses(first: Int, last: Int, where: ReleaseLicenseWhereInput): [ReleaseLicense] @goField(forceResolver: true)
}

"""
Vulnerability represents the node Vulnerability in the ent schema.
Generated by ent.
"""
type Vulnerability implements Node {
  id: ID!
  vid: String
  summary: String
  description: String
  severity_score: Float
  severity: VulnerabilitySeverity
  published: Time
  modified: Time
  metadata: Map
  components(first: Int, last: Int, where: ComponentWhereInput, order_by: ComponentOrder): [Component] @goField(forceResolver: true)
  reviews(first: Int, last: Int, where: VulnerabilityReviewWhereInput, order_by: VulnerabilityReviewOrder): [VulnerabilityReview] @goField(forceResolver: true)
  instances(first: Int, last: Int, where: ReleaseVulnerabilityWhereInput): [ReleaseVulnerability] @goField(forceResolver: true)
}

"""
GitCommitConnection supports the relay connection specification for node GitCommit in the ent schema.
Generated by ent.
"""
type GitCommitConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [GitCommitEdge]
}

"""
Artifact represents the node Artifact in the ent schema.
Generated by ent.
"""
type Artifact implements Node {
  id: ID!
  name: String
  sha256: String
  type: ArtifactType
  time: Time
  metadata: Map
  release: Release
  entry: ReleaseEntry
}

"""
ReleaseComponentConnection supports the relay edge specification for node ReleaseComponent in the ent schema.
Generated by ent.
"""
type ReleaseComponentEdge {
  node: ReleaseComponent
  cursor: Cursor!
}

"""
ReleasePolicyConnection supports the relay edge specification for node ReleasePolicy in the ent schema.
Generated by ent.
"""
type ReleasePolicyEdge {
  node: ReleasePolicy
  cursor: Cursor!
}

"""
TestRun represents the node TestRun in the ent schema.
Generated by ent.
"""
type TestRun implements Node {
  id: ID!
  tool: String
  time: Time
  metadata: Map
  release: Release!
  entry: ReleaseEntry
  tests(first: Int, last: Int, where: TestCaseWhereInput, order_by: TestCaseOrder): [TestCase] @goField(forceResolver: true)
}

"""
VulnerabilityConnection supports the relay connection specification for node Vulnerability in the ent schema.
Generated by ent.
"""
type VulnerabilityConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [VulnerabilityEdge]
}

"""
ArtifactConnection supports the relay edge specification for node Artifact in the ent schema.
Generated by ent.
"""
type ArtifactEdge {
  node: Artifact
  cursor: Cursor!
}

"""
Component represents the node Component in the ent schema.
Generated by ent.
"""
type Component implements Node {
  id: ID!
  name: String
  vendor: String
  version: String
  description: String
  url: String
  metadata: Map
  vulnerabilities(first: Int, last: Int, where: VulnerabilityWhereInput, order_by: VulnerabilityOrder): [Vulnerability] @goField(forceResolver: true)
  licenses(first: Int, last: Int, where: LicenseWhereInput, order_by: LicenseOrder): [License] @goField(forceResolver: true)
  uses(first: Int, last: Int, where: ReleaseComponentWhereInput): [ReleaseComponent] @goField(forceResolver: true)
}

"""
ReleaseEntryConnection supports the relay edge specification for node ReleaseEntry in the ent schema.
Generated by ent.
"""
type ReleaseEntryEdge {
  node: ReleaseEntry
  cursor: Cursor!
}

"""
License represents the node License in the ent schema.
Generated by ent.
"""
type License implements Node {
  id: ID!
  license_id: String
  name: String
  reference: String
  details_url: String
  is_osi_approved: Boolean
  components(first: Int, last: Int, where: ComponentWhereInput, order_by: ComponentOrder): [Component] @goField(forceResolver: true)
  instances(first: Int, last: Int, where: ReleaseLicenseWhereInput): [ReleaseLicense] @goField(forceResolver: true)
}

"""
LicenseConnection supports the relay connection specification for node License in the ent schema.
Generated by ent.
"""
type LicenseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [LicenseEdge]
}

"""
ReleaseComponentConnection supports the relay connection specification for node ReleaseComponent in the ent schema.
Generated by ent.
"""
type ReleaseComponentConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseComponentEdge]
}

input AdapterOrder {
  direction: OrderDirection!
  field: AdapterOrderField
}



input ReleaseEntryOrder {
  direction: OrderDirection!
  field: ReleaseEntryOrderField
}

input ArtifactOrder {
  direction: OrderDirection!
  field: ArtifactOrderField
}

input ProjectOrder {
  direction: OrderDirection!
  field: ProjectOrderField
}

input TestCaseOrder {
  direction: OrderDirection!
  field: TestCaseOrderField
}

input LicenseOrder {
  direction: OrderDirection!
  field: LicenseOrderField
}

input TestRunOrder {
  direction: OrderDirection!
  field: TestRunOrderField
}


input RepoOrder {
  direction: OrderDirection!
  field: RepoOrderField
}

input CodeIssueOrder {
  direction: OrderDirection!
  field: CodeIssueOrderField
}

input ComponentOrder {
  direction: OrderDirection!
  field: ComponentOrderField
}

input GitCommitOrder {
  direction: OrderDirection!
  field: GitCommitOrderField
}


input VulnerabilityReviewOrder {
  direction: OrderDirection!
  field: VulnerabilityReviewOrderField
}


input ReleaseOrder {
  direction: OrderDirection!
  field: ReleaseOrderField
}

input ReleasePolicyOrder {
  direction: OrderDirection!
  field: ReleasePolicyOrderField
}


input CodeScanOrder {
  direction: OrderDirection!
  field: CodeScanOrderField
}


input VulnerabilityOrder {
  direction: OrderDirection!
  field: VulnerabilityOrderField
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_CodeScan_components_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseComponentWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_CodeScan_issues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CodeIssueWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOCodeIssueWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.CodeIssueOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOCodeIssueOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_CodeScan_vulnerabilities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseVulnerabilityWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Component_licenses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.LicenseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.LicenseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOLicenseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Component_uses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseComponentWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Component_vulnerabilities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.VulnerabilityWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.VulnerabilityOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVulnerabilityOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_License_components_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ComponentWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ComponentOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOComponentOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_License_instances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseLicenseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Project_policies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleasePolicyWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleasePolicyWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ReleasePolicyOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOReleasePolicyOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Project_repos_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.RepoWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalORepoWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.RepoOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalORepoOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Project_vulnerability_reviews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.VulnerabilityReviewWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOVulnerabilityReviewWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.VulnerabilityReviewOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVulnerabilityReviewOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_artifact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ArtifactOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOArtifactOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.ArtifactWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOArtifactWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_commit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.GitCommitOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOGitCommitOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.GitCommitWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOGitCommitWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_component_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ComponentOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOComponentOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.ComponentWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_license_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.LicenseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOLicenseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.LicenseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_license_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.LicenseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalOLicenseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.LicenseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalOLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_policy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleasePolicyOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOReleasePolicyOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.ReleasePolicyWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOReleasePolicyWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_project_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ProjectOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOProjectOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.ProjectWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOProjectWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_project_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.ProjectOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalOProjectOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.ProjectWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalOProjectWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_release_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOReleaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.ReleaseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_release_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.ReleaseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalOReleaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.ReleaseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalOReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_repo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.RepoOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalORepoOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.RepoWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalORepoWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_repo_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.RepoOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalORepoOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.RepoWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalORepoWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_vulnerability_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.VulnerabilityOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOVulnerabilityOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.VulnerabilityWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_vulnerability_review_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.VulnerabilityReviewOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOVulnerabilityReviewOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.VulnerabilityReviewWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOVulnerabilityReviewWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_ReleaseComponent_licenses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseLicenseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_ReleaseComponent_scans_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CodeScanWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOCodeScanWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.CodeScanOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOCodeScanOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_ReleaseComponent_vulnerabilities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseVulnerabilityWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_ReleaseLicense_scans_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CodeScanWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOCodeScanWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.CodeScanOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOCodeScanOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_ReleasePolicy_projects_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ProjectWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOProjectWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ProjectOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOProjectOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_ReleasePolicy_repos_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.RepoWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalORepoWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.RepoOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalORepoOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_ReleasePolicy_violations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleasePolicyViolationWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleasePolicyViolationWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolationWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_ReleaseVulnerability_reviews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.VulnerabilityReviewWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOVulnerabilityReviewWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.VulnerabilityReviewOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVulnerabilityReviewOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Release_artifacts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ArtifactWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOArtifactWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ArtifactOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOArtifactOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Release_code_scans_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CodeScanWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOCodeScanWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.CodeScanOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOCodeScanOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Release_components_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseComponentWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Release_dependencies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ReleaseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOReleaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Release_licenses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseLicenseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Release_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseEntryWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseEntryWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ReleaseEntryOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOReleaseEntryOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Release_subreleases_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ReleaseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOReleaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Release_test_runs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.TestRunWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOTestRunWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.TestRunOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOTestRunOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Release_violations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleasePolicyViolationWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleasePolicyViolationWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolationWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Release_vulnerabilities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseVulnerabilityWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Release_vulnerability_reviews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.VulnerabilityReviewWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOVulnerabilityReviewWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.VulnerabilityReviewOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVulnerabilityReviewOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Repo_commits_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.GitCommitWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOGitCommitWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.GitCommitOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOGitCommitOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Repo_policies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleasePolicyWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleasePolicyWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ReleasePolicyOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOReleasePolicyOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Repo_vulnerability_reviews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.VulnerabilityReviewWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOVulnerabilityReviewWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.VulnerabilityReviewOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVulnerabilityReviewOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_TestRun_tests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.TestCaseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOTestCaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.TestCaseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOTestCaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_VulnerabilityReview_instances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseVulnerabilityWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_VulnerabilityReview_projects_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ProjectWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOProjectWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ProjectOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOProjectOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_VulnerabilityReview_releases_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ReleaseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOReleaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_VulnerabilityReview_repos_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.RepoWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalORepoWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.RepoOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalORepoOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Vulnerability_components_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ComponentWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ComponentOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOComponentOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Vulnerability_instances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseVulnerabilityWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Vulnerability_reviews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.VulnerabilityReviewWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOVulnerabilityReviewWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.VulnerabilityReviewOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVulnerabilityReviewOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Adapter_id(ctx context.Context, field graphql.CollectedField, obj *ent.Adapter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Adapter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Adapter_name(ctx context.Context, field graphql.CollectedField, obj *ent.Adapter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Adapter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Adapter_tag(ctx context.Context, field graphql.CollectedField, obj *ent.Adapter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Adapter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Adapter_module(ctx context.Context, field graphql.CollectedField, obj *ent.Adapter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Adapter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Module, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdapterConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.AdapterConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdapterConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AdapterConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.AdapterConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdapterConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _AdapterConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.AdapterConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdapterConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.AdapterEdge)
	fc.Result = res
	return ec.marshalOAdapterEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐAdapterEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _AdapterEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.AdapterEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdapterEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Adapter)
	fc.Result = res
	return ec.marshalOAdapter2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐAdapter(ctx, field.Selections, res)
}

func (ec *executionContext) _AdapterEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.AdapterEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdapterEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_id(ctx context.Context, field graphql.CollectedField, obj *ent.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_name(ctx context.Context, field graphql.CollectedField, obj *ent.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_sha256(ctx context.Context, field graphql.CollectedField, obj *ent.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sha256, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_type(ctx context.Context, field graphql.CollectedField, obj *ent.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(artifact.Type)
	fc.Result = res
	return ec.marshalOArtifactType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_time(ctx context.Context, field graphql.CollectedField, obj *ent.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_metadata(ctx context.Context, field graphql.CollectedField, obj *ent.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Artifact().Metadata(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_release(ctx context.Context, field graphql.CollectedField, obj *ent.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalORelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_entry(ctx context.Context, field graphql.CollectedField, obj *ent.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entry(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleaseEntry)
	fc.Result = res
	return ec.marshalOReleaseEntry2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntry(ctx, field.Selections, res)
}

func (ec *executionContext) _ArtifactConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArtifactConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ArtifactConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArtifactConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ArtifactConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArtifactConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ArtifactEdge)
	fc.Result = res
	return ec.marshalOArtifactEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ArtifactEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArtifactEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Artifact)
	fc.Result = res
	return ec.marshalOArtifact2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifact(ctx, field.Selections, res)
}

func (ec *executionContext) _ArtifactEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArtifactEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssue_id(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssue_rule_id(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RuleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssue_message(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssue_severity(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(codeissue.Severity)
	fc.Result = res
	return ec.marshalOCodeIssueSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssue_type(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(codeissue.Type)
	fc.Result = res
	return ec.marshalOCodeIssueType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssue_metadata(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CodeIssue().Metadata(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssue_scan(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scan(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CodeScan)
	fc.Result = res
	return ec.marshalNCodeScan2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssueConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssueConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssueConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssueConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssueConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssueConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssueConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssueConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssueConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CodeIssueEdge)
	fc.Result = res
	return ec.marshalOCodeIssueEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssueEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssueEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssueEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CodeIssue)
	fc.Result = res
	return ec.marshalOCodeIssue2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssueEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssueEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssueEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScan_id(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScan",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScan_tool(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScan",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScan_time(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScan",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScan_metadata(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScan",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CodeScan().Metadata(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScan_release(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScan",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalNRelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScan_entry(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScan",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entry(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleaseEntry)
	fc.Result = res
	return ec.marshalOReleaseEntry2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntry(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScan_issues(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScan",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CodeScan_issues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CodeScan().Issues(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CodeIssueWhereInput), args["order_by"].(*ent.CodeIssueOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CodeIssue)
	fc.Result = res
	return ec.marshalOCodeIssue2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScan_vulnerabilities(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScan",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CodeScan_vulnerabilities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CodeScan().Vulnerabilities(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseVulnerabilityWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseVulnerability)
	fc.Result = res
	return ec.marshalOReleaseVulnerability2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerability(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScan_components(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScan",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CodeScan_components_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CodeScan().Components(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseComponentWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseComponent)
	fc.Result = res
	return ec.marshalOReleaseComponent2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponent(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScanConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScanConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScanConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScanConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScanConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScanConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScanConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScanConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScanConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CodeScanEdge)
	fc.Result = res
	return ec.marshalOCodeScanEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScanEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScanEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScanEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CodeScan)
	fc.Result = res
	return ec.marshalOCodeScan2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScanEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScanEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScanEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_id(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_name(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_vendor(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vendor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_version(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_description(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_url(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_metadata(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Component().Metadata(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_vulnerabilities(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Component_vulnerabilities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Component().Vulnerabilities(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.VulnerabilityWhereInput), args["order_by"].(*ent.VulnerabilityOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Vulnerability)
	fc.Result = res
	return ec.marshalOVulnerability2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerability(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_licenses(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Component_licenses_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Component().Licenses(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.LicenseWhereInput), args["order_by"].(*ent.LicenseOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.License)
	fc.Result = res
	return ec.marshalOLicense2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicense(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_uses(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Component_uses_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Component().Uses(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseComponentWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseComponent)
	fc.Result = res
	return ec.marshalOReleaseComponent2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponent(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ComponentEdge)
	fc.Result = res
	return ec.marshalOComponentEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Component)
	fc.Result = res
	return ec.marshalOComponent2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommit_id(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommit_hash(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommit_branch(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Branch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommit_tag(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommit_time(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommit_repo(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommit",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repo(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Repo)
	fc.Result = res
	return ec.marshalNRepo2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommit_release(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommit",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalORelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommitConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommitConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommitConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommitConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommitConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommitConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommitConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommitConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommitConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.GitCommitEdge)
	fc.Result = res
	return ec.marshalOGitCommitEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommitEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommitEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommitEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.GitCommit)
	fc.Result = res
	return ec.marshalOGitCommit2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommit(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommitEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommitEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommitEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _License_id(ctx context.Context, field graphql.CollectedField, obj *ent.License) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "License",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _License_license_id(ctx context.Context, field graphql.CollectedField, obj *ent.License) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "License",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _License_name(ctx context.Context, field graphql.CollectedField, obj *ent.License) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "License",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _License_reference(ctx context.Context, field graphql.CollectedField, obj *ent.License) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "License",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _License_details_url(ctx context.Context, field graphql.CollectedField, obj *ent.License) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "License",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DetailsURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _License_is_osi_approved(ctx context.Context, field graphql.CollectedField, obj *ent.License) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "License",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOsiApproved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _License_components(ctx context.Context, field graphql.CollectedField, obj *ent.License) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "License",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_License_components_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.License().Components(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ComponentWhereInput), args["order_by"].(*ent.ComponentOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Component)
	fc.Result = res
	return ec.marshalOComponent2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx, field.Selections, res)
}

func (ec *executionContext) _License_instances(ctx context.Context, field graphql.CollectedField, obj *ent.License) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "License",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_License_instances_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.License().Instances(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseLicenseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseLicense)
	fc.Result = res
	return ec.marshalOReleaseLicense2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicense(ctx, field.Selections, res)
}

func (ec *executionContext) _LicenseConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.LicenseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LicenseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LicenseConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.LicenseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LicenseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _LicenseConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.LicenseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LicenseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.LicenseEdge)
	fc.Result = res
	return ec.marshalOLicenseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _LicenseEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.LicenseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LicenseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.License)
	fc.Result = res
	return ec.marshalOLicense2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicense(ctx, field.Selections, res)
}

func (ec *executionContext) _LicenseEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.LicenseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LicenseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Cursor)
	fc.Result = res
	return ec.marshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Cursor)
	fc.Result = res
	return ec.marshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_id(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_name(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_repos(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Project_repos_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Project().Repos(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.RepoWhereInput), args["order_by"].(*ent.RepoOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Repo)
	fc.Result = res
	return ec.marshalORepo2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_vulnerability_reviews(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Project_vulnerability_reviews_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Project().VulnerabilityReviews(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.VulnerabilityReviewWhereInput), args["order_by"].(*ent.VulnerabilityReviewOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.VulnerabilityReview)
	fc.Result = res
	return ec.marshalOVulnerabilityReview2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReview(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_policies(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Project_policies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Project().Policies(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleasePolicyWhereInput), args["order_by"].(*ent.ReleasePolicyOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleasePolicy)
	fc.Result = res
	return ec.marshalOReleasePolicy2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicy(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ProjectEdge)
	fc.Result = res
	return ec.marshalOProjectEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Project)
	fc.Result = res
	return ec.marshalOProject2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_policy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_policy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Policy(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ReleasePolicyOrder), args["where"].(*ent.ReleasePolicyWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleasePolicy)
	fc.Result = res
	return ec.marshalOReleasePolicy2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicy(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_artifact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_artifact_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Artifact(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ArtifactOrder), args["where"].(*ent.ArtifactWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Artifact)
	fc.Result = res
	return ec.marshalOArtifact2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifact(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_component(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_component_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Component(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ComponentOrder), args["where"].(*ent.ComponentWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Component)
	fc.Result = res
	return ec.marshalOComponent2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_license_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_license_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LicenseConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.LicenseOrder), args["where"].(*ent.LicenseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.LicenseConnection)
	fc.Result = res
	return ec.marshalOLicenseConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vulnerability_review(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vulnerability_review_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VulnerabilityReview(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.VulnerabilityReviewOrder), args["where"].(*ent.VulnerabilityReviewWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.VulnerabilityReview)
	fc.Result = res
	return ec.marshalOVulnerabilityReview2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReview(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_license(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_license_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().License(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.LicenseOrder), args["where"].(*ent.LicenseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.License)
	fc.Result = res
	return ec.marshalOLicense2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicense(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_repo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_repo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Repo(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.RepoOrder), args["where"].(*ent.RepoWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Repo)
	fc.Result = res
	return ec.marshalORepo2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_project(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_project_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Project(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ProjectOrder), args["where"].(*ent.ProjectWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Project)
	fc.Result = res
	return ec.marshalOProject2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_release(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_release_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Release(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ReleaseOrder), args["where"].(*ent.ReleaseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Release)
	fc.Result = res
	return ec.marshalORelease2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_repo_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_repo_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RepoConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.RepoOrder), args["where"].(*ent.RepoWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.RepoConnection)
	fc.Result = res
	return ec.marshalORepoConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_commit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_commit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Commit(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.GitCommitOrder), args["where"].(*ent.GitCommitWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.GitCommit)
	fc.Result = res
	return ec.marshalOGitCommit2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommit(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_project_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_project_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.ProjectOrder), args["where"].(*ent.ProjectWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ProjectConnection)
	fc.Result = res
	return ec.marshalOProjectConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_release_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_release_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ReleaseConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.ReleaseOrder), args["where"].(*ent.ReleaseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleaseConnection)
	fc.Result = res
	return ec.marshalOReleaseConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vulnerability(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vulnerability_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Vulnerability(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.VulnerabilityOrder), args["where"].(*ent.VulnerabilityWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Vulnerability)
	fc.Result = res
	return ec.marshalOVulnerability2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerability(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_id(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_name(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_version(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_status(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(release.Status)
	fc.Result = res
	return ec.marshalOReleaseStatus2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_subreleases(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_subreleases_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().Subreleases(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseWhereInput), args["order_by"].(*ent.ReleaseOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Release)
	fc.Result = res
	return ec.marshalORelease2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_dependencies(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_dependencies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().Dependencies(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseWhereInput), args["order_by"].(*ent.ReleaseOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Release)
	fc.Result = res
	return ec.marshalORelease2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_commit(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Commit(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.GitCommit)
	fc.Result = res
	return ec.marshalNGitCommit2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommit(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_head_of(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HeadOf(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Repo)
	fc.Result = res
	return ec.marshalORepo2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_log(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().Log(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseEntryWhereInput), args["order_by"].(*ent.ReleaseEntryOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseEntry)
	fc.Result = res
	return ec.marshalOReleaseEntry2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntry(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_violations(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_violations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().Violations(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleasePolicyViolationWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleasePolicyViolation)
	fc.Result = res
	return ec.marshalOReleasePolicyViolation2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolation(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_artifacts(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_artifacts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().Artifacts(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ArtifactWhereInput), args["order_by"].(*ent.ArtifactOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Artifact)
	fc.Result = res
	return ec.marshalOArtifact2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifact(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_components(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_components_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().Components(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseComponentWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseComponent)
	fc.Result = res
	return ec.marshalOReleaseComponent2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponent(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_licenses(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_licenses_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().Licenses(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseLicenseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseLicense)
	fc.Result = res
	return ec.marshalOReleaseLicense2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicense(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_vulnerabilities(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_vulnerabilities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().Vulnerabilities(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseVulnerabilityWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseVulnerability)
	fc.Result = res
	return ec.marshalOReleaseVulnerability2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerability(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_code_scans(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_code_scans_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().CodeScans(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CodeScanWhereInput), args["order_by"].(*ent.CodeScanOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CodeScan)
	fc.Result = res
	return ec.marshalOCodeScan2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_test_runs(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_test_runs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().TestRuns(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.TestRunWhereInput), args["order_by"].(*ent.TestRunOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestRun)
	fc.Result = res
	return ec.marshalOTestRun2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRun(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_vulnerability_reviews(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_vulnerability_reviews_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().VulnerabilityReviews(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.VulnerabilityReviewWhereInput), args["order_by"].(*ent.VulnerabilityReviewOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.VulnerabilityReview)
	fc.Result = res
	return ec.marshalOVulnerabilityReview2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReview(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseComponent_id(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseComponent_type(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(releasecomponent.Type)
	fc.Result = res
	return ec.marshalOReleaseComponentType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasecomponentᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseComponent_release(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalNRelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseComponent_scans(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ReleaseComponent_scans_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ReleaseComponent().Scans(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CodeScanWhereInput), args["order_by"].(*ent.CodeScanOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CodeScan)
	fc.Result = res
	return ec.marshalOCodeScan2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseComponent_component(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Component(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Component)
	fc.Result = res
	return ec.marshalNComponent2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseComponent_vulnerabilities(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ReleaseComponent_vulnerabilities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ReleaseComponent().Vulnerabilities(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseVulnerabilityWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseVulnerability)
	fc.Result = res
	return ec.marshalOReleaseVulnerability2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerability(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseComponent_licenses(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ReleaseComponent_licenses_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ReleaseComponent().Licenses(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseLicenseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseLicense)
	fc.Result = res
	return ec.marshalOReleaseLicense2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicense(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseComponentConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseComponentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseComponentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseComponentConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseComponentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseComponentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseComponentConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseComponentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseComponentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseComponentEdge)
	fc.Result = res
	return ec.marshalOReleaseComponentEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseComponentEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseComponentEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseComponentEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleaseComponent)
	fc.Result = res
	return ec.marshalOReleaseComponent2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponent(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseComponentEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseComponentEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseComponentEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseEdge)
	fc.Result = res
	return ec.marshalOReleaseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalORelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntry_id(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntry_type(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(releaseentry.Type)
	fc.Result = res
	return ec.marshalOReleaseEntryType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntry_time(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntry_artifact(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Artifact(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Artifact)
	fc.Result = res
	return ec.marshalOArtifact2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifact(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntry_code_scan(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CodeScan(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CodeScan)
	fc.Result = res
	return ec.marshalOCodeScan2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntry_test_run(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestRun(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TestRun)
	fc.Result = res
	return ec.marshalOTestRun2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRun(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntry_release(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalNRelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntryConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseEntryEdge)
	fc.Result = res
	return ec.marshalOReleaseEntryEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntryEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntryEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleaseEntry)
	fc.Result = res
	return ec.marshalOReleaseEntry2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntry(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntryEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseLicense_id(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseLicense) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseLicense",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseLicense_license(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseLicense) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseLicense",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.License(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.License)
	fc.Result = res
	return ec.marshalNLicense2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicense(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseLicense_component(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseLicense) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseLicense",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Component(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleaseComponent)
	fc.Result = res
	return ec.marshalOReleaseComponent2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponent(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseLicense_release(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseLicense) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseLicense",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalNRelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseLicense_scans(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseLicense) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseLicense",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ReleaseLicense_scans_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ReleaseLicense().Scans(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CodeScanWhereInput), args["order_by"].(*ent.CodeScanOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CodeScan)
	fc.Result = res
	return ec.marshalOCodeScan2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseLicenseConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseLicenseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseLicenseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseLicenseConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseLicenseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseLicenseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseLicenseConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseLicenseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseLicenseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseLicenseEdge)
	fc.Result = res
	return ec.marshalOReleaseLicenseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseLicenseEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseLicenseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseLicenseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleaseLicense)
	fc.Result = res
	return ec.marshalOReleaseLicense2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicense(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseLicenseEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseLicenseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseLicenseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicy_id(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicy_name(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicy_module(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Module, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicy_projects(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicy",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ReleasePolicy_projects_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ReleasePolicy().Projects(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ProjectWhereInput), args["order_by"].(*ent.ProjectOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Project)
	fc.Result = res
	return ec.marshalOProject2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicy_repos(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicy",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ReleasePolicy_repos_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ReleasePolicy().Repos(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.RepoWhereInput), args["order_by"].(*ent.RepoOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Repo)
	fc.Result = res
	return ec.marshalORepo2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicy_violations(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicy",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ReleasePolicy_violations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ReleasePolicy().Violations(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleasePolicyViolationWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleasePolicyViolation)
	fc.Result = res
	return ec.marshalOReleasePolicyViolation2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolation(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicyConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicyConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicyConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicyConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicyConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicyConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicyConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicyConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicyConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleasePolicyEdge)
	fc.Result = res
	return ec.marshalOReleasePolicyEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicyEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicyEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicyEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleasePolicy)
	fc.Result = res
	return ec.marshalOReleasePolicy2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicy(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicyEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicyEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicyEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicyViolation_id(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicyViolation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicyViolation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicyViolation_message(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicyViolation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicyViolation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicyViolation_type(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicyViolation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicyViolation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(releasepolicyviolation.Type)
	fc.Result = res
	return ec.marshalOReleasePolicyViolationType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicyViolation_severity(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicyViolation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicyViolation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(releasepolicyviolation.Severity)
	fc.Result = res
	return ec.marshalOReleasePolicyViolationSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐSeverity(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicyViolation_policy(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicyViolation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicyViolation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Policy(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.ReleasePolicy)
	fc.Result = res
	return ec.marshalNReleasePolicy2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicy(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicyViolation_release(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicyViolation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicyViolation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalNRelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicyViolationConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicyViolationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicyViolationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicyViolationConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicyViolationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicyViolationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicyViolationConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicyViolationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicyViolationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleasePolicyViolationEdge)
	fc.Result = res
	return ec.marshalOReleasePolicyViolationEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolationEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicyViolationEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicyViolationEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicyViolationEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleasePolicyViolation)
	fc.Result = res
	return ec.marshalOReleasePolicyViolation2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolation(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleasePolicyViolationEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ReleasePolicyViolationEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleasePolicyViolationEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseVulnerability_id(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseVulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseVulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseVulnerability_vulnerability(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseVulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseVulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vulnerability(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Vulnerability)
	fc.Result = res
	return ec.marshalNVulnerability2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerability(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseVulnerability_component(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseVulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseVulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Component(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleaseComponent)
	fc.Result = res
	return ec.marshalOReleaseComponent2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponent(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseVulnerability_release(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseVulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseVulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalNRelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseVulnerability_reviews(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseVulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseVulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ReleaseVulnerability_reviews_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ReleaseVulnerability().Reviews(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.VulnerabilityReviewWhereInput), args["order_by"].(*ent.VulnerabilityReviewOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.VulnerabilityReview)
	fc.Result = res
	return ec.marshalOVulnerabilityReview2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReview(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseVulnerability_scan(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseVulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseVulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scan(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CodeScan)
	fc.Result = res
	return ec.marshalOCodeScan2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseVulnerabilityConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseVulnerabilityConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseVulnerabilityConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseVulnerabilityConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseVulnerabilityConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseVulnerabilityConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseVulnerabilityConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseVulnerabilityConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseVulnerabilityConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseVulnerabilityEdge)
	fc.Result = res
	return ec.marshalOReleaseVulnerabilityEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseVulnerabilityEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseVulnerabilityEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseVulnerabilityEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleaseVulnerability)
	fc.Result = res
	return ec.marshalOReleaseVulnerability2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerability(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseVulnerabilityEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseVulnerabilityEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseVulnerabilityEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _Repo_id(ctx context.Context, field graphql.CollectedField, obj *ent.Repo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Repo_name(ctx context.Context, field graphql.CollectedField, obj *ent.Repo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Repo_default_branch(ctx context.Context, field graphql.CollectedField, obj *ent.Repo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultBranch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Repo_project(ctx context.Context, field graphql.CollectedField, obj *ent.Repo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repo",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Project(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Project)
	fc.Result = res
	return ec.marshalNProject2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) _Repo_head(ctx context.Context, field graphql.CollectedField, obj *ent.Repo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repo",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Head(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalORelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _Repo_commits(ctx context.Context, field graphql.CollectedField, obj *ent.Repo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repo",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Repo_commits_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repo().Commits(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.GitCommitWhereInput), args["order_by"].(*ent.GitCommitOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.GitCommit)
	fc.Result = res
	return ec.marshalOGitCommit2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommit(ctx, field.Selections, res)
}

func (ec *executionContext) _Repo_vulnerability_reviews(ctx context.Context, field graphql.CollectedField, obj *ent.Repo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repo",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Repo_vulnerability_reviews_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repo().VulnerabilityReviews(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.VulnerabilityReviewWhereInput), args["order_by"].(*ent.VulnerabilityReviewOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.VulnerabilityReview)
	fc.Result = res
	return ec.marshalOVulnerabilityReview2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReview(ctx, field.Selections, res)
}

func (ec *executionContext) _Repo_policies(ctx context.Context, field graphql.CollectedField, obj *ent.Repo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repo",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Repo_policies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repo().Policies(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleasePolicyWhereInput), args["order_by"].(*ent.ReleasePolicyOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleasePolicy)
	fc.Result = res
	return ec.marshalOReleasePolicy2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicy(ctx, field.Selections, res)
}

func (ec *executionContext) _RepoConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.RepoConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepoConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RepoConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.RepoConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepoConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _RepoConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.RepoConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepoConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.RepoEdge)
	fc.Result = res
	return ec.marshalORepoEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _RepoEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.RepoEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepoEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Repo)
	fc.Result = res
	return ec.marshalORepo2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx, field.Selections, res)
}

func (ec *executionContext) _RepoEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.RepoEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepoEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCase_id(ctx context.Context, field graphql.CollectedField, obj *ent.TestCase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCase_name(ctx context.Context, field graphql.CollectedField, obj *ent.TestCase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCase_result(ctx context.Context, field graphql.CollectedField, obj *ent.TestCase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCase_message(ctx context.Context, field graphql.CollectedField, obj *ent.TestCase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCase_elapsed(ctx context.Context, field graphql.CollectedField, obj *ent.TestCase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Elapsed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCase_metadata(ctx context.Context, field graphql.CollectedField, obj *ent.TestCase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCase",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TestCase().Metadata(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCase_run(ctx context.Context, field graphql.CollectedField, obj *ent.TestCase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCase",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Run(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TestRun)
	fc.Result = res
	return ec.marshalNTestRun2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRun(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCaseConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.TestCaseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCaseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCaseConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.TestCaseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCaseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCaseConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.TestCaseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCaseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestCaseEdge)
	fc.Result = res
	return ec.marshalOTestCaseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCaseEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.TestCaseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCaseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TestCase)
	fc.Result = res
	return ec.marshalOTestCase2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCase(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCaseEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.TestCaseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCaseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRun_id(ctx context.Context, field graphql.CollectedField, obj *ent.TestRun) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRun",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRun_tool(ctx context.Context, field graphql.CollectedField, obj *ent.TestRun) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRun",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRun_time(ctx context.Context, field graphql.CollectedField, obj *ent.TestRun) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRun",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRun_metadata(ctx context.Context, field graphql.CollectedField, obj *ent.TestRun) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRun",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TestRun().Metadata(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRun_release(ctx context.Context, field graphql.CollectedField, obj *ent.TestRun) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRun",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalNRelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRun_entry(ctx context.Context, field graphql.CollectedField, obj *ent.TestRun) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRun",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entry(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleaseEntry)
	fc.Result = res
	return ec.marshalOReleaseEntry2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntry(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRun_tests(ctx context.Context, field graphql.CollectedField, obj *ent.TestRun) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRun",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_TestRun_tests_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TestRun().Tests(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.TestCaseWhereInput), args["order_by"].(*ent.TestCaseOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestCase)
	fc.Result = res
	return ec.marshalOTestCase2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCase(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRunConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.TestRunConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRunConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRunConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.TestRunConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRunConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRunConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.TestRunConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRunConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestRunEdge)
	fc.Result = res
	return ec.marshalOTestRunEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRunEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.TestRunEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRunEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TestRun)
	fc.Result = res
	return ec.marshalOTestRun2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRun(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRunEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.TestRunEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRunEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _Vulnerability_id(ctx context.Context, field graphql.CollectedField, obj *ent.Vulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Vulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Vulnerability_vid(ctx context.Context, field graphql.CollectedField, obj *ent.Vulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Vulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Vulnerability_summary(ctx context.Context, field graphql.CollectedField, obj *ent.Vulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Vulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Summary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Vulnerability_description(ctx context.Context, field graphql.CollectedField, obj *ent.Vulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Vulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Vulnerability_severity_score(ctx context.Context, field graphql.CollectedField, obj *ent.Vulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Vulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeverityScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Vulnerability_severity(ctx context.Context, field graphql.CollectedField, obj *ent.Vulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Vulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(vulnerability.Severity)
	fc.Result = res
	return ec.marshalOVulnerabilitySeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityᚐSeverity(ctx, field.Selections, res)
}

func (ec *executionContext) _Vulnerability_published(ctx context.Context, field graphql.CollectedField, obj *ent.Vulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Vulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Vulnerability_modified(ctx context.Context, field graphql.CollectedField, obj *ent.Vulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Vulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Vulnerability_metadata(ctx context.Context, field graphql.CollectedField, obj *ent.Vulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Vulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Vulnerability().Metadata(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _Vulnerability_components(ctx context.Context, field graphql.CollectedField, obj *ent.Vulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Vulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Vulnerability_components_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Vulnerability().Components(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ComponentWhereInput), args["order_by"].(*ent.ComponentOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Component)
	fc.Result = res
	return ec.marshalOComponent2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx, field.Selections, res)
}

func (ec *executionContext) _Vulnerability_reviews(ctx context.Context, field graphql.CollectedField, obj *ent.Vulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Vulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Vulnerability_reviews_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Vulnerability().Reviews(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.VulnerabilityReviewWhereInput), args["order_by"].(*ent.VulnerabilityReviewOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.VulnerabilityReview)
	fc.Result = res
	return ec.marshalOVulnerabilityReview2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReview(ctx, field.Selections, res)
}

func (ec *executionContext) _Vulnerability_instances(ctx context.Context, field graphql.CollectedField, obj *ent.Vulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Vulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Vulnerability_instances_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Vulnerability().Instances(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseVulnerabilityWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseVulnerability)
	fc.Result = res
	return ec.marshalOReleaseVulnerability2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerability(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.VulnerabilityEdge)
	fc.Result = res
	return ec.marshalOVulnerabilityEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Vulnerability)
	fc.Result = res
	return ec.marshalOVulnerability2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerability(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityReview_id(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityReview_note(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityReview_decision(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Decision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(vulnerabilityreview.Decision)
	fc.Result = res
	return ec.marshalOVulnerabilityReviewDecision2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityreviewᚐDecision(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityReview_vulnerability(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vulnerability(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Vulnerability)
	fc.Result = res
	return ec.marshalNVulnerability2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerability(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityReview_projects(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_VulnerabilityReview_projects_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.VulnerabilityReview().Projects(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ProjectWhereInput), args["order_by"].(*ent.ProjectOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Project)
	fc.Result = res
	return ec.marshalOProject2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityReview_repos(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_VulnerabilityReview_repos_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.VulnerabilityReview().Repos(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.RepoWhereInput), args["order_by"].(*ent.RepoOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Repo)
	fc.Result = res
	return ec.marshalORepo2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityReview_releases(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_VulnerabilityReview_releases_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.VulnerabilityReview().Releases(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseWhereInput), args["order_by"].(*ent.ReleaseOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Release)
	fc.Result = res
	return ec.marshalORelease2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityReview_instances(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_VulnerabilityReview_instances_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.VulnerabilityReview().Instances(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseVulnerabilityWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseVulnerability)
	fc.Result = res
	return ec.marshalOReleaseVulnerability2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerability(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityReviewConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityReviewConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityReviewConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityReviewConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityReviewConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityReviewConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityReviewConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityReviewConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityReviewConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.VulnerabilityReviewEdge)
	fc.Result = res
	return ec.marshalOVulnerabilityReviewEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityReviewEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityReviewEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityReviewEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.VulnerabilityReview)
	fc.Result = res
	return ec.marshalOVulnerabilityReview2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReview(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityReviewEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityReviewEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityReviewEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAdapterOrder(ctx context.Context, obj interface{}) (ent.AdapterOrder, error) {
	var it ent.AdapterOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOAdapterOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐAdapterOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdapterWhereInput(ctx context.Context, obj interface{}) (ent.AdapterWhereInput, error) {
	var it ent.AdapterWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOAdapterWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐAdapterWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOAdapterWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐAdapterWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOAdapterWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐAdapterWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagNEQ"))
			it.TagNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagIn"))
			it.TagIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagNotIn"))
			it.TagNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagGT"))
			it.TagGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagGTE"))
			it.TagGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagLT"))
			it.TagLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagLTE"))
			it.TagLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagContains"))
			it.TagContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagHasPrefix"))
			it.TagHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagHasSuffix"))
			it.TagHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagEqualFold"))
			it.TagEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagContainsFold"))
			it.TagContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "module":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("module"))
			it.Module, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleNEQ"))
			it.ModuleNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleIn"))
			it.ModuleIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleNotIn"))
			it.ModuleNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleGT"))
			it.ModuleGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleGTE"))
			it.ModuleGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleLT"))
			it.ModuleLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleLTE"))
			it.ModuleLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleContains"))
			it.ModuleContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleHasPrefix"))
			it.ModuleHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleHasSuffix"))
			it.ModuleHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleEqualFold"))
			it.ModuleEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleContainsFold"))
			it.ModuleContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasOwner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOwner"))
			it.HasOwner, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasOwnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOwnerWith"))
			it.HasOwnerWith, err = ec.unmarshalOOrganizationWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrganizationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputArtifactOrder(ctx context.Context, obj interface{}) (ent.ArtifactOrder, error) {
	var it ent.ArtifactOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOArtifactOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputArtifactWhereInput(ctx context.Context, obj interface{}) (ent.ArtifactWhereInput, error) {
	var it ent.ArtifactWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOArtifactWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOArtifactWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOArtifactWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256"))
			it.Sha256, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256NEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256NEQ"))
			it.Sha256NEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256In":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256In"))
			it.Sha256In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256NotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256NotIn"))
			it.Sha256NotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256GT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256GT"))
			it.Sha256GT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256GTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256GTE"))
			it.Sha256GTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256LT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256LT"))
			it.Sha256LT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256LTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256LTE"))
			it.Sha256LTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256Contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256Contains"))
			it.Sha256Contains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256HasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256HasPrefix"))
			it.Sha256HasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256HasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256HasSuffix"))
			it.Sha256HasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256EqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256EqualFold"))
			it.Sha256EqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256ContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256ContainsFold"))
			it.Sha256ContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOArtifactType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNEQ"))
			it.TypeNEQ, err = ec.unmarshalOArtifactType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIn"))
			it.TypeIn, err = ec.unmarshalOArtifactType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotIn"))
			it.TypeNotIn, err = ec.unmarshalOArtifactType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time"))
			it.Time, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNEQ"))
			it.TimeNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeIn"))
			it.TimeIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNotIn"))
			it.TimeNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeGT"))
			it.TimeGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeGTE"))
			it.TimeGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLT"))
			it.TimeLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLTE"))
			it.TimeLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRelease":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRelease"))
			it.HasRelease, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReleaseWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReleaseWith"))
			it.HasReleaseWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasEntry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEntry"))
			it.HasEntry, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasEntryWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEntryWith"))
			it.HasEntryWith, err = ec.unmarshalOReleaseEntryWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCodeIssueOrder(ctx context.Context, obj interface{}) (ent.CodeIssueOrder, error) {
	var it ent.CodeIssueOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOCodeIssueOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCodeIssueWhereInput(ctx context.Context, obj interface{}) (ent.CodeIssueWhereInput, error) {
	var it ent.CodeIssueWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCodeIssueWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCodeIssueWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCodeIssueWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "ruleID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ruleID"))
			it.RuleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ruleIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ruleIDNEQ"))
			it.RuleIDNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ruleIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ruleIDIn"))
			it.RuleIDIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "ruleIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ruleIDNotIn"))
			it.RuleIDNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "ruleIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ruleIDGT"))
			it.RuleIDGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ruleIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ruleIDGTE"))
			it.RuleIDGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ruleIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ruleIDLT"))
			it.RuleIDLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ruleIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ruleIDLTE"))
			it.RuleIDLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ruleIDContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ruleIDContains"))
			it.RuleIDContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ruleIDHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ruleIDHasPrefix"))
			it.RuleIDHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ruleIDHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ruleIDHasSuffix"))
			it.RuleIDHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ruleIDEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ruleIDEqualFold"))
			it.RuleIDEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ruleIDContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ruleIDContainsFold"))
			it.RuleIDContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageNEQ"))
			it.MessageNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageIn"))
			it.MessageIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageNotIn"))
			it.MessageNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageGT"))
			it.MessageGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageGTE"))
			it.MessageGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageLT"))
			it.MessageLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageLTE"))
			it.MessageLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageContains"))
			it.MessageContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageHasPrefix"))
			it.MessageHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageHasSuffix"))
			it.MessageHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageEqualFold"))
			it.MessageEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageContainsFold"))
			it.MessageContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity"))
			it.Severity, err = ec.unmarshalOCodeIssueSeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx, v)
			if err != nil {
				return it, err
			}
		case "severityNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severityNEQ"))
			it.SeverityNEQ, err = ec.unmarshalOCodeIssueSeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx, v)
			if err != nil {
				return it, err
			}
		case "severityIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severityIn"))
			it.SeverityIn, err = ec.unmarshalOCodeIssueSeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverityᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "severityNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severityNotIn"))
			it.SeverityNotIn, err = ec.unmarshalOCodeIssueSeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverityᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOCodeIssueType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNEQ"))
			it.TypeNEQ, err = ec.unmarshalOCodeIssueType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIn"))
			it.TypeIn, err = ec.unmarshalOCodeIssueType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotIn"))
			it.TypeNotIn, err = ec.unmarshalOCodeIssueType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasScan":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasScan"))
			it.HasScan, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasScanWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasScanWith"))
			it.HasScanWith, err = ec.unmarshalOCodeScanWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCodeScanOrder(ctx context.Context, obj interface{}) (ent.CodeScanOrder, error) {
	var it ent.CodeScanOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOCodeScanOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCodeScanWhereInput(ctx context.Context, obj interface{}) (ent.CodeScanWhereInput, error) {
	var it ent.CodeScanWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCodeScanWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCodeScanWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCodeScanWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool"))
			it.Tool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolNEQ"))
			it.ToolNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolIn"))
			it.ToolIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolNotIn"))
			it.ToolNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolGT"))
			it.ToolGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolGTE"))
			it.ToolGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolLT"))
			it.ToolLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolLTE"))
			it.ToolLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolContains"))
			it.ToolContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolHasPrefix"))
			it.ToolHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolHasSuffix"))
			it.ToolHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolEqualFold"))
			it.ToolEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolContainsFold"))
			it.ToolContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time"))
			it.Time, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNEQ"))
			it.TimeNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeIn"))
			it.TimeIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNotIn"))
			it.TimeNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeGT"))
			it.TimeGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeGTE"))
			it.TimeGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLT"))
			it.TimeLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLTE"))
			it.TimeLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRelease":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRelease"))
			it.HasRelease, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReleaseWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReleaseWith"))
			it.HasReleaseWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasEntry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEntry"))
			it.HasEntry, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasEntryWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEntryWith"))
			it.HasEntryWith, err = ec.unmarshalOReleaseEntryWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasIssues":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasIssues"))
			it.HasIssues, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasIssuesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasIssuesWith"))
			it.HasIssuesWith, err = ec.unmarshalOCodeIssueWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerabilities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerabilities"))
			it.HasVulnerabilities, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerabilitiesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerabilitiesWith"))
			it.HasVulnerabilitiesWith, err = ec.unmarshalOReleaseVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasLicenses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLicenses"))
			it.HasLicenses, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasLicensesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLicensesWith"))
			it.HasLicensesWith, err = ec.unmarshalOReleaseLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasComponents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasComponents"))
			it.HasComponents, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasComponentsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasComponentsWith"))
			it.HasComponentsWith, err = ec.unmarshalOReleaseComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputComponentOrder(ctx context.Context, obj interface{}) (ent.ComponentOrder, error) {
	var it ent.ComponentOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOComponentOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputComponentWhereInput(ctx context.Context, obj interface{}) (ent.ComponentWhereInput, error) {
	var it ent.ComponentWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor"))
			it.Vendor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendorNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendorNEQ"))
			it.VendorNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendorIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendorIn"))
			it.VendorIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendorNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendorNotIn"))
			it.VendorNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendorGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendorGT"))
			it.VendorGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendorGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendorGTE"))
			it.VendorGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendorLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendorLT"))
			it.VendorLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendorLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendorLTE"))
			it.VendorLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendorContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendorContains"))
			it.VendorContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendorHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendorHasPrefix"))
			it.VendorHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendorHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendorHasSuffix"))
			it.VendorHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendorEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendorEqualFold"))
			it.VendorEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendorContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendorContainsFold"))
			it.VendorContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionNEQ"))
			it.VersionNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionIn"))
			it.VersionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionNotIn"))
			it.VersionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionGT"))
			it.VersionGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionGTE"))
			it.VersionGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionLT"))
			it.VersionLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionLTE"))
			it.VersionLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionContains"))
			it.VersionContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionHasPrefix"))
			it.VersionHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionHasSuffix"))
			it.VersionHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionEqualFold"))
			it.VersionEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionContainsFold"))
			it.VersionContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			it.DescriptionNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			it.DescriptionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			it.DescriptionGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			it.DescriptionGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			it.DescriptionLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			it.DescriptionLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			it.DescriptionContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			it.DescriptionHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			it.DescriptionHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIsNil"))
			it.DescriptionIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotNil"))
			it.DescriptionNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			it.DescriptionEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			it.DescriptionContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "urlNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlNEQ"))
			it.URLNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "urlIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlIn"))
			it.URLIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "urlNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlNotIn"))
			it.URLNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "urlGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlGT"))
			it.URLGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "urlGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlGTE"))
			it.URLGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "urlLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlLT"))
			it.URLLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "urlLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlLTE"))
			it.URLLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "urlContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlContains"))
			it.URLContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "urlHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlHasPrefix"))
			it.URLHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "urlHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlHasSuffix"))
			it.URLHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "urlIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlIsNil"))
			it.URLIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "urlNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlNotNil"))
			it.URLNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "urlEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlEqualFold"))
			it.URLEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "urlContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlContainsFold"))
			it.URLContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasOwner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOwner"))
			it.HasOwner, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasOwnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOwnerWith"))
			it.HasOwnerWith, err = ec.unmarshalOOrganizationWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrganizationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerabilities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerabilities"))
			it.HasVulnerabilities, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerabilitiesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerabilitiesWith"))
			it.HasVulnerabilitiesWith, err = ec.unmarshalOVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasLicenses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLicenses"))
			it.HasLicenses, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasLicensesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLicensesWith"))
			it.HasLicensesWith, err = ec.unmarshalOLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasUses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUses"))
			it.HasUses, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasUsesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUsesWith"))
			it.HasUsesWith, err = ec.unmarshalOReleaseComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventWhereInput(ctx context.Context, obj interface{}) (ent.EventWhereInput, error) {
	var it ent.EventWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOEventWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐEventWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOEventWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐEventWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOEventWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐEventWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageNEQ"))
			it.MessageNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageIn"))
			it.MessageIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageNotIn"))
			it.MessageNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageGT"))
			it.MessageGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageGTE"))
			it.MessageGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageLT"))
			it.MessageLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageLTE"))
			it.MessageLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageContains"))
			it.MessageContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageHasPrefix"))
			it.MessageHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageHasSuffix"))
			it.MessageHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageEqualFold"))
			it.MessageEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageContainsFold"))
			it.MessageContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOEventType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋeventᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNEQ"))
			it.TypeNEQ, err = ec.unmarshalOEventType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋeventᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIn"))
			it.TypeIn, err = ec.unmarshalOEventType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋeventᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotIn"))
			it.TypeNotIn, err = ec.unmarshalOEventType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋeventᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time"))
			it.Time, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNEQ"))
			it.TimeNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeIn"))
			it.TimeIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNotIn"))
			it.TimeNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeGT"))
			it.TimeGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeGTE"))
			it.TimeGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLT"))
			it.TimeLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLTE"))
			it.TimeLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRelease":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRelease"))
			it.HasRelease, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReleaseWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReleaseWith"))
			it.HasReleaseWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRepo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRepo"))
			it.HasRepo, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRepoWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRepoWith"))
			it.HasRepoWith, err = ec.unmarshalORepoWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasProject":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProject"))
			it.HasProject, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasProjectWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjectWith"))
			it.HasProjectWith, err = ec.unmarshalOProjectWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGitCommitOrder(ctx context.Context, obj interface{}) (ent.GitCommitOrder, error) {
	var it ent.GitCommitOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOGitCommitOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGitCommitWhereInput(ctx context.Context, obj interface{}) (ent.GitCommitWhereInput, error) {
	var it ent.GitCommitWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOGitCommitWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOGitCommitWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOGitCommitWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hash":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hash"))
			it.Hash, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hashNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashNEQ"))
			it.HashNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hashIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashIn"))
			it.HashIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hashNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashNotIn"))
			it.HashNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hashGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashGT"))
			it.HashGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hashGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashGTE"))
			it.HashGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hashLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashLT"))
			it.HashLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hashLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashLTE"))
			it.HashLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hashContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashContains"))
			it.HashContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hashHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashHasPrefix"))
			it.HashHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hashHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashHasSuffix"))
			it.HashHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hashEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashEqualFold"))
			it.HashEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hashContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashContainsFold"))
			it.HashContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branch"))
			it.Branch, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branchNEQ"))
			it.BranchNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branchIn"))
			it.BranchIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branchNotIn"))
			it.BranchNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branchGT"))
			it.BranchGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branchGTE"))
			it.BranchGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branchLT"))
			it.BranchLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branchLTE"))
			it.BranchLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branchContains"))
			it.BranchContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branchHasPrefix"))
			it.BranchHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branchHasSuffix"))
			it.BranchHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branchEqualFold"))
			it.BranchEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branchContainsFold"))
			it.BranchContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagNEQ"))
			it.TagNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagIn"))
			it.TagIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagNotIn"))
			it.TagNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagGT"))
			it.TagGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagGTE"))
			it.TagGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagLT"))
			it.TagLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagLTE"))
			it.TagLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagContains"))
			it.TagContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagHasPrefix"))
			it.TagHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagHasSuffix"))
			it.TagHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagIsNil"))
			it.TagIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagNotNil"))
			it.TagNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagEqualFold"))
			it.TagEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagContainsFold"))
			it.TagContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time"))
			it.Time, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNEQ"))
			it.TimeNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeIn"))
			it.TimeIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNotIn"))
			it.TimeNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeGT"))
			it.TimeGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeGTE"))
			it.TimeGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLT"))
			it.TimeLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLTE"))
			it.TimeLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRepo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRepo"))
			it.HasRepo, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRepoWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRepoWith"))
			it.HasRepoWith, err = ec.unmarshalORepoWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRelease":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRelease"))
			it.HasRelease, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReleaseWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReleaseWith"))
			it.HasReleaseWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLicenseOrder(ctx context.Context, obj interface{}) (ent.LicenseOrder, error) {
	var it ent.LicenseOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOLicenseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLicenseUseWhereInput(ctx context.Context, obj interface{}) (LicenseUseWhereInput, error) {
	var it LicenseUseWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOLicenseUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋgqlᚐLicenseUseWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOLicenseUseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋgqlᚐLicenseUseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOLicenseUseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋgqlᚐLicenseUseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNeq, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGt, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGte, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLt, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLte, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasLicense":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLicense"))
			it.HasLicense, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasLicenseWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLicenseWith"))
			it.HasLicenseWith, err = ec.unmarshalOLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLicenseWhereInput(ctx context.Context, obj interface{}) (ent.LicenseWhereInput, error) {
	var it ent.LicenseWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "licenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseID"))
			it.LicenseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "licenseIDNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseIDNEQ"))
			it.LicenseIDNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "licenseIDIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseIDIn"))
			it.LicenseIDIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "licenseIDNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseIDNotIn"))
			it.LicenseIDNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "licenseIDGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseIDGT"))
			it.LicenseIDGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "licenseIDGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseIDGTE"))
			it.LicenseIDGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "licenseIDLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseIDLT"))
			it.LicenseIDLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "licenseIDLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseIDLTE"))
			it.LicenseIDLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "licenseIDContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseIDContains"))
			it.LicenseIDContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "licenseIDHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseIDHasPrefix"))
			it.LicenseIDHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "licenseIDHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseIDHasSuffix"))
			it.LicenseIDHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "licenseIDEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseIDEqualFold"))
			it.LicenseIDEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "licenseIDContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseIDContainsFold"))
			it.LicenseIDContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIsNil"))
			it.NameIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotNil"))
			it.NameNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference"))
			it.Reference, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "referenceNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceNEQ"))
			it.ReferenceNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "referenceIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceIn"))
			it.ReferenceIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "referenceNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceNotIn"))
			it.ReferenceNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "referenceGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceGT"))
			it.ReferenceGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "referenceGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceGTE"))
			it.ReferenceGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "referenceLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceLT"))
			it.ReferenceLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "referenceLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceLTE"))
			it.ReferenceLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "referenceContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceContains"))
			it.ReferenceContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "referenceHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceHasPrefix"))
			it.ReferenceHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "referenceHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceHasSuffix"))
			it.ReferenceHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "referenceIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceIsNil"))
			it.ReferenceIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "referenceNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceNotNil"))
			it.ReferenceNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "referenceEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceEqualFold"))
			it.ReferenceEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "referenceContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceContainsFold"))
			it.ReferenceContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "detailsURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detailsURL"))
			it.DetailsURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "detailsURLNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detailsURLNEQ"))
			it.DetailsURLNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "detailsURLIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detailsURLIn"))
			it.DetailsURLIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "detailsURLNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detailsURLNotIn"))
			it.DetailsURLNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "detailsURLGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detailsURLGT"))
			it.DetailsURLGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "detailsURLGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detailsURLGTE"))
			it.DetailsURLGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "detailsURLLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detailsURLLT"))
			it.DetailsURLLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "detailsURLLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detailsURLLTE"))
			it.DetailsURLLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "detailsURLContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detailsURLContains"))
			it.DetailsURLContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "detailsURLHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detailsURLHasPrefix"))
			it.DetailsURLHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "detailsURLHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detailsURLHasSuffix"))
			it.DetailsURLHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "detailsURLIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detailsURLIsNil"))
			it.DetailsURLIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "detailsURLNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detailsURLNotNil"))
			it.DetailsURLNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "detailsURLEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detailsURLEqualFold"))
			it.DetailsURLEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "detailsURLContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detailsURLContainsFold"))
			it.DetailsURLContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isOsiApproved":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isOsiApproved"))
			it.IsOsiApproved, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isOsiApprovedNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isOsiApprovedNEQ"))
			it.IsOsiApprovedNEQ, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasOwner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOwner"))
			it.HasOwner, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasOwnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOwnerWith"))
			it.HasOwnerWith, err = ec.unmarshalOOrganizationWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrganizationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasComponents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasComponents"))
			it.HasComponents, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasComponentsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasComponentsWith"))
			it.HasComponentsWith, err = ec.unmarshalOComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasInstances":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInstances"))
			it.HasInstances, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasInstancesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInstancesWith"))
			it.HasInstancesWith, err = ec.unmarshalOReleaseLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationWhereInput(ctx context.Context, obj interface{}) (ent.OrganizationWhereInput, error) {
	var it ent.OrganizationWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOOrganizationWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrganizationWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOOrganizationWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrganizationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOOrganizationWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrganizationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasProjects":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjects"))
			it.HasProjects, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasProjectsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjectsWith"))
			it.HasProjectsWith, err = ec.unmarshalOProjectWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRepos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRepos"))
			it.HasRepos, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReposWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReposWith"))
			it.HasReposWith, err = ec.unmarshalORepoWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectOrder(ctx context.Context, obj interface{}) (ent.ProjectOrder, error) {
	var it ent.ProjectOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOProjectOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectWhereInput(ctx context.Context, obj interface{}) (ent.ProjectWhereInput, error) {
	var it ent.ProjectWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOProjectWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOProjectWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOProjectWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasOwner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOwner"))
			it.HasOwner, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasOwnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOwnerWith"))
			it.HasOwnerWith, err = ec.unmarshalOOrganizationWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrganizationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRepos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRepos"))
			it.HasRepos, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReposWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReposWith"))
			it.HasReposWith, err = ec.unmarshalORepoWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerabilityReviews":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerabilityReviews"))
			it.HasVulnerabilityReviews, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerabilityReviewsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerabilityReviewsWith"))
			it.HasVulnerabilityReviewsWith, err = ec.unmarshalOVulnerabilityReviewWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasPolicies":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPolicies"))
			it.HasPolicies, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasPoliciesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPoliciesWith"))
			it.HasPoliciesWith, err = ec.unmarshalOReleasePolicyWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReleaseComponentWhereInput(ctx context.Context, obj interface{}) (ent.ReleaseComponentWhereInput, error) {
	var it ent.ReleaseComponentWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOReleaseComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOReleaseComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOReleaseComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOReleaseComponentType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasecomponentᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNEQ"))
			it.TypeNEQ, err = ec.unmarshalOReleaseComponentType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasecomponentᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIn"))
			it.TypeIn, err = ec.unmarshalOReleaseComponentType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasecomponentᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotIn"))
			it.TypeNotIn, err = ec.unmarshalOReleaseComponentType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasecomponentᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRelease":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRelease"))
			it.HasRelease, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReleaseWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReleaseWith"))
			it.HasReleaseWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasScans":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasScans"))
			it.HasScans, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasScansWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasScansWith"))
			it.HasScansWith, err = ec.unmarshalOCodeScanWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasComponent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasComponent"))
			it.HasComponent, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasComponentWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasComponentWith"))
			it.HasComponentWith, err = ec.unmarshalOComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerabilities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerabilities"))
			it.HasVulnerabilities, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerabilitiesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerabilitiesWith"))
			it.HasVulnerabilitiesWith, err = ec.unmarshalOReleaseVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasLicenses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLicenses"))
			it.HasLicenses, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasLicensesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLicensesWith"))
			it.HasLicensesWith, err = ec.unmarshalOReleaseLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReleaseEntryOrder(ctx context.Context, obj interface{}) (ent.ReleaseEntryOrder, error) {
	var it ent.ReleaseEntryOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOReleaseEntryOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReleaseEntryWhereInput(ctx context.Context, obj interface{}) (ent.ReleaseEntryWhereInput, error) {
	var it ent.ReleaseEntryWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOReleaseEntryWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOReleaseEntryWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOReleaseEntryWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOReleaseEntryType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNEQ"))
			it.TypeNEQ, err = ec.unmarshalOReleaseEntryType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIn"))
			it.TypeIn, err = ec.unmarshalOReleaseEntryType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotIn"))
			it.TypeNotIn, err = ec.unmarshalOReleaseEntryType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time"))
			it.Time, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNEQ"))
			it.TimeNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeIn"))
			it.TimeIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNotIn"))
			it.TimeNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeGT"))
			it.TimeGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeGTE"))
			it.TimeGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLT"))
			it.TimeLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLTE"))
			it.TimeLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasArtifact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasArtifact"))
			it.HasArtifact, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasArtifactWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasArtifactWith"))
			it.HasArtifactWith, err = ec.unmarshalOArtifactWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasCodeScan":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCodeScan"))
			it.HasCodeScan, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasCodeScanWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCodeScanWith"))
			it.HasCodeScanWith, err = ec.unmarshalOCodeScanWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasTestRun":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestRun"))
			it.HasTestRun, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasTestRunWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestRunWith"))
			it.HasTestRunWith, err = ec.unmarshalOTestRunWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRelease":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRelease"))
			it.HasRelease, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReleaseWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReleaseWith"))
			it.HasReleaseWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReleaseLicenseWhereInput(ctx context.Context, obj interface{}) (ent.ReleaseLicenseWhereInput, error) {
	var it ent.ReleaseLicenseWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOReleaseLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOReleaseLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOReleaseLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasLicense":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLicense"))
			it.HasLicense, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasLicenseWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLicenseWith"))
			it.HasLicenseWith, err = ec.unmarshalOLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasComponent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasComponent"))
			it.HasComponent, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasComponentWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasComponentWith"))
			it.HasComponentWith, err = ec.unmarshalOReleaseComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRelease":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRelease"))
			it.HasRelease, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReleaseWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReleaseWith"))
			it.HasReleaseWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasScans":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasScans"))
			it.HasScans, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasScansWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasScansWith"))
			it.HasScansWith, err = ec.unmarshalOCodeScanWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReleaseOrder(ctx context.Context, obj interface{}) (ent.ReleaseOrder, error) {
	var it ent.ReleaseOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOReleaseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReleasePolicyOrder(ctx context.Context, obj interface{}) (ent.ReleasePolicyOrder, error) {
	var it ent.ReleasePolicyOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOReleasePolicyOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReleasePolicyViolationWhereInput(ctx context.Context, obj interface{}) (ent.ReleasePolicyViolationWhereInput, error) {
	var it ent.ReleasePolicyViolationWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOReleasePolicyViolationWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolationWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOReleasePolicyViolationWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOReleasePolicyViolationWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageNEQ"))
			it.MessageNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageIn"))
			it.MessageIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageNotIn"))
			it.MessageNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageGT"))
			it.MessageGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageGTE"))
			it.MessageGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageLT"))
			it.MessageLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageLTE"))
			it.MessageLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageContains"))
			it.MessageContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageHasPrefix"))
			it.MessageHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageHasSuffix"))
			it.MessageHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageEqualFold"))
			it.MessageEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageContainsFold"))
			it.MessageContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOReleasePolicyViolationType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNEQ"))
			it.TypeNEQ, err = ec.unmarshalOReleasePolicyViolationType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIn"))
			it.TypeIn, err = ec.unmarshalOReleasePolicyViolationType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotIn"))
			it.TypeNotIn, err = ec.unmarshalOReleasePolicyViolationType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity"))
			it.Severity, err = ec.unmarshalOReleasePolicyViolationSeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐSeverity(ctx, v)
			if err != nil {
				return it, err
			}
		case "severityNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severityNEQ"))
			it.SeverityNEQ, err = ec.unmarshalOReleasePolicyViolationSeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐSeverity(ctx, v)
			if err != nil {
				return it, err
			}
		case "severityIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severityIn"))
			it.SeverityIn, err = ec.unmarshalOReleasePolicyViolationSeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐSeverityᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "severityNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severityNotIn"))
			it.SeverityNotIn, err = ec.unmarshalOReleasePolicyViolationSeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐSeverityᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasPolicy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPolicy"))
			it.HasPolicy, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasPolicyWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPolicyWith"))
			it.HasPolicyWith, err = ec.unmarshalOReleasePolicyWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRelease":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRelease"))
			it.HasRelease, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReleaseWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReleaseWith"))
			it.HasReleaseWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReleasePolicyWhereInput(ctx context.Context, obj interface{}) (ent.ReleasePolicyWhereInput, error) {
	var it ent.ReleasePolicyWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOReleasePolicyWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOReleasePolicyWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOReleasePolicyWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "module":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("module"))
			it.Module, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleNEQ"))
			it.ModuleNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleIn"))
			it.ModuleIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleNotIn"))
			it.ModuleNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleGT"))
			it.ModuleGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleGTE"))
			it.ModuleGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleLT"))
			it.ModuleLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleLTE"))
			it.ModuleLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleContains"))
			it.ModuleContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleHasPrefix"))
			it.ModuleHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleHasSuffix"))
			it.ModuleHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleEqualFold"))
			it.ModuleEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleContainsFold"))
			it.ModuleContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasOwner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOwner"))
			it.HasOwner, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasOwnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOwnerWith"))
			it.HasOwnerWith, err = ec.unmarshalOOrganizationWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrganizationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasProjects":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjects"))
			it.HasProjects, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasProjectsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjectsWith"))
			it.HasProjectsWith, err = ec.unmarshalOProjectWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRepos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRepos"))
			it.HasRepos, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReposWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReposWith"))
			it.HasReposWith, err = ec.unmarshalORepoWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasViolations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasViolations"))
			it.HasViolations, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasViolationsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasViolationsWith"))
			it.HasViolationsWith, err = ec.unmarshalOReleasePolicyViolationWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReleaseVulnerabilityWhereInput(ctx context.Context, obj interface{}) (ent.ReleaseVulnerabilityWhereInput, error) {
	var it ent.ReleaseVulnerabilityWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOReleaseVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOReleaseVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOReleaseVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerability":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerability"))
			it.HasVulnerability, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerabilityWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerabilityWith"))
			it.HasVulnerabilityWith, err = ec.unmarshalOVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasComponent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasComponent"))
			it.HasComponent, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasComponentWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasComponentWith"))
			it.HasComponentWith, err = ec.unmarshalOReleaseComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRelease":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRelease"))
			it.HasRelease, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReleaseWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReleaseWith"))
			it.HasReleaseWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReviews":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReviews"))
			it.HasReviews, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReviewsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReviewsWith"))
			it.HasReviewsWith, err = ec.unmarshalOVulnerabilityReviewWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasScan":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasScan"))
			it.HasScan, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasScanWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasScanWith"))
			it.HasScanWith, err = ec.unmarshalOCodeScanWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReleaseWhereInput(ctx context.Context, obj interface{}) (ent.ReleaseWhereInput, error) {
	var it ent.ReleaseWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionNEQ"))
			it.VersionNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionIn"))
			it.VersionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionNotIn"))
			it.VersionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionGT"))
			it.VersionGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionGTE"))
			it.VersionGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionLT"))
			it.VersionLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionLTE"))
			it.VersionLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionContains"))
			it.VersionContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionHasPrefix"))
			it.VersionHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionHasSuffix"))
			it.VersionHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionEqualFold"))
			it.VersionEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionContainsFold"))
			it.VersionContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOReleaseStatus2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			it.StatusNEQ, err = ec.unmarshalOReleaseStatus2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			it.StatusIn, err = ec.unmarshalOReleaseStatus2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			it.StatusNotIn, err = ec.unmarshalOReleaseStatus2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasSubreleases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSubreleases"))
			it.HasSubreleases, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasSubreleasesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSubreleasesWith"))
			it.HasSubreleasesWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasDependencies":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDependencies"))
			it.HasDependencies, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasDependenciesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDependenciesWith"))
			it.HasDependenciesWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasCommit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCommit"))
			it.HasCommit, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasCommitWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCommitWith"))
			it.HasCommitWith, err = ec.unmarshalOGitCommitWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasHeadOf":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasHeadOf"))
			it.HasHeadOf, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasHeadOfWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasHeadOfWith"))
			it.HasHeadOfWith, err = ec.unmarshalORepoWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasLog":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLog"))
			it.HasLog, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasLogWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLogWith"))
			it.HasLogWith, err = ec.unmarshalOReleaseEntryWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasViolations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasViolations"))
			it.HasViolations, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasViolationsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasViolationsWith"))
			it.HasViolationsWith, err = ec.unmarshalOReleasePolicyViolationWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasArtifacts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasArtifacts"))
			it.HasArtifacts, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasArtifactsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasArtifactsWith"))
			it.HasArtifactsWith, err = ec.unmarshalOArtifactWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasComponents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasComponents"))
			it.HasComponents, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasComponentsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasComponentsWith"))
			it.HasComponentsWith, err = ec.unmarshalOReleaseComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerabilities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerabilities"))
			it.HasVulnerabilities, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerabilitiesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerabilitiesWith"))
			it.HasVulnerabilitiesWith, err = ec.unmarshalOReleaseVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasLicenses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLicenses"))
			it.HasLicenses, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasLicensesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLicensesWith"))
			it.HasLicensesWith, err = ec.unmarshalOReleaseLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasCodeScans":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCodeScans"))
			it.HasCodeScans, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasCodeScansWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCodeScansWith"))
			it.HasCodeScansWith, err = ec.unmarshalOCodeScanWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasTestRuns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestRuns"))
			it.HasTestRuns, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasTestRunsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestRunsWith"))
			it.HasTestRunsWith, err = ec.unmarshalOTestRunWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerabilityReviews":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerabilityReviews"))
			it.HasVulnerabilityReviews, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerabilityReviewsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerabilityReviewsWith"))
			it.HasVulnerabilityReviewsWith, err = ec.unmarshalOVulnerabilityReviewWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRepoOrder(ctx context.Context, obj interface{}) (ent.RepoOrder, error) {
	var it ent.RepoOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalORepoOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRepoWhereInput(ctx context.Context, obj interface{}) (ent.RepoWhereInput, error) {
	var it ent.RepoWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalORepoWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORepoWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORepoWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultBranch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultBranch"))
			it.DefaultBranch, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultBranchNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultBranchNEQ"))
			it.DefaultBranchNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultBranchIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultBranchIn"))
			it.DefaultBranchIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultBranchNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultBranchNotIn"))
			it.DefaultBranchNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultBranchGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultBranchGT"))
			it.DefaultBranchGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultBranchGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultBranchGTE"))
			it.DefaultBranchGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultBranchLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultBranchLT"))
			it.DefaultBranchLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultBranchLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultBranchLTE"))
			it.DefaultBranchLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultBranchContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultBranchContains"))
			it.DefaultBranchContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultBranchHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultBranchHasPrefix"))
			it.DefaultBranchHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultBranchHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultBranchHasSuffix"))
			it.DefaultBranchHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultBranchEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultBranchEqualFold"))
			it.DefaultBranchEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultBranchContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultBranchContainsFold"))
			it.DefaultBranchContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasOwner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOwner"))
			it.HasOwner, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasOwnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOwnerWith"))
			it.HasOwnerWith, err = ec.unmarshalOOrganizationWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrganizationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasProject":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProject"))
			it.HasProject, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasProjectWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjectWith"))
			it.HasProjectWith, err = ec.unmarshalOProjectWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasHead":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasHead"))
			it.HasHead, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasHeadWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasHeadWith"))
			it.HasHeadWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasCommits":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCommits"))
			it.HasCommits, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasCommitsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCommitsWith"))
			it.HasCommitsWith, err = ec.unmarshalOGitCommitWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerabilityReviews":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerabilityReviews"))
			it.HasVulnerabilityReviews, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerabilityReviewsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerabilityReviewsWith"))
			it.HasVulnerabilityReviewsWith, err = ec.unmarshalOVulnerabilityReviewWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasPolicies":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPolicies"))
			it.HasPolicies, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasPoliciesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPoliciesWith"))
			it.HasPoliciesWith, err = ec.unmarshalOReleasePolicyWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestCaseOrder(ctx context.Context, obj interface{}) (ent.TestCaseOrder, error) {
	var it ent.TestCaseOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOTestCaseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestCaseWhereInput(ctx context.Context, obj interface{}) (ent.TestCaseWhereInput, error) {
	var it ent.TestCaseWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOTestCaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOTestCaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOTestCaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("result"))
			it.Result, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "resultNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resultNEQ"))
			it.ResultNEQ, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageNEQ"))
			it.MessageNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageIn"))
			it.MessageIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageNotIn"))
			it.MessageNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageGT"))
			it.MessageGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageGTE"))
			it.MessageGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageLT"))
			it.MessageLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageLTE"))
			it.MessageLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageContains"))
			it.MessageContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageHasPrefix"))
			it.MessageHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageHasSuffix"))
			it.MessageHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageEqualFold"))
			it.MessageEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageContainsFold"))
			it.MessageContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsed"))
			it.Elapsed, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsedNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsedNEQ"))
			it.ElapsedNEQ, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsedIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsedIn"))
			it.ElapsedIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsedNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsedNotIn"))
			it.ElapsedNotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsedGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsedGT"))
			it.ElapsedGT, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsedGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsedGTE"))
			it.ElapsedGTE, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsedLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsedLT"))
			it.ElapsedLT, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsedLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsedLTE"))
			it.ElapsedLTE, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRun":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRun"))
			it.HasRun, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRunWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRunWith"))
			it.HasRunWith, err = ec.unmarshalOTestRunWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestRunOrder(ctx context.Context, obj interface{}) (ent.TestRunOrder, error) {
	var it ent.TestRunOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOTestRunOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestRunWhereInput(ctx context.Context, obj interface{}) (ent.TestRunWhereInput, error) {
	var it ent.TestRunWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOTestRunWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOTestRunWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOTestRunWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool"))
			it.Tool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolNEQ"))
			it.ToolNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolIn"))
			it.ToolIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolNotIn"))
			it.ToolNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolGT"))
			it.ToolGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolGTE"))
			it.ToolGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolLT"))
			it.ToolLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolLTE"))
			it.ToolLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolContains"))
			it.ToolContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolHasPrefix"))
			it.ToolHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolHasSuffix"))
			it.ToolHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolEqualFold"))
			it.ToolEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "toolContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolContainsFold"))
			it.ToolContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time"))
			it.Time, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNEQ"))
			it.TimeNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeIn"))
			it.TimeIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNotIn"))
			it.TimeNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeGT"))
			it.TimeGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeGTE"))
			it.TimeGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLT"))
			it.TimeLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLTE"))
			it.TimeLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRelease":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRelease"))
			it.HasRelease, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReleaseWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReleaseWith"))
			it.HasReleaseWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasEntry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEntry"))
			it.HasEntry, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasEntryWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEntryWith"))
			it.HasEntryWith, err = ec.unmarshalOReleaseEntryWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasTests":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTests"))
			it.HasTests, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasTestsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestsWith"))
			it.HasTestsWith, err = ec.unmarshalOTestCaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVulnerabilityOrder(ctx context.Context, obj interface{}) (ent.VulnerabilityOrder, error) {
	var it ent.VulnerabilityOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOVulnerabilityOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVulnerabilityReviewOrder(ctx context.Context, obj interface{}) (ent.VulnerabilityReviewOrder, error) {
	var it ent.VulnerabilityReviewOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOVulnerabilityReviewOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVulnerabilityReviewWhereInput(ctx context.Context, obj interface{}) (ent.VulnerabilityReviewWhereInput, error) {
	var it ent.VulnerabilityReviewWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOVulnerabilityReviewWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOVulnerabilityReviewWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOVulnerabilityReviewWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "noteNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNEQ"))
			it.NoteNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "noteIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteIn"))
			it.NoteIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "noteNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteNotIn"))
			it.NoteNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "noteGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGT"))
			it.NoteGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "noteGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteGTE"))
			it.NoteGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "noteLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLT"))
			it.NoteLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "noteLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteLTE"))
			it.NoteLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "noteContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContains"))
			it.NoteContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "noteHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasPrefix"))
			it.NoteHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "noteHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteHasSuffix"))
			it.NoteHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "noteEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteEqualFold"))
			it.NoteEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "noteContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteContainsFold"))
			it.NoteContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "decision":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("decision"))
			it.Decision, err = ec.unmarshalOVulnerabilityReviewDecision2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityreviewᚐDecision(ctx, v)
			if err != nil {
				return it, err
			}
		case "decisionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("decisionNEQ"))
			it.DecisionNEQ, err = ec.unmarshalOVulnerabilityReviewDecision2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityreviewᚐDecision(ctx, v)
			if err != nil {
				return it, err
			}
		case "decisionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("decisionIn"))
			it.DecisionIn, err = ec.unmarshalOVulnerabilityReviewDecision2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityreviewᚐDecisionᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "decisionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("decisionNotIn"))
			it.DecisionNotIn, err = ec.unmarshalOVulnerabilityReviewDecision2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityreviewᚐDecisionᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerability":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerability"))
			it.HasVulnerability, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVulnerabilityWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVulnerabilityWith"))
			it.HasVulnerabilityWith, err = ec.unmarshalOVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasProjects":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjects"))
			it.HasProjects, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasProjectsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjectsWith"))
			it.HasProjectsWith, err = ec.unmarshalOProjectWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRepos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRepos"))
			it.HasRepos, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReposWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReposWith"))
			it.HasReposWith, err = ec.unmarshalORepoWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReleases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReleases"))
			it.HasReleases, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReleasesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReleasesWith"))
			it.HasReleasesWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasInstances":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInstances"))
			it.HasInstances, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasInstancesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInstancesWith"))
			it.HasInstancesWith, err = ec.unmarshalOReleaseVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVulnerabilityWhereInput(ctx context.Context, obj interface{}) (ent.VulnerabilityWhereInput, error) {
	var it ent.VulnerabilityWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "vid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vid"))
			it.Vid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vidNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vidNEQ"))
			it.VidNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vidIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vidIn"))
			it.VidIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "vidNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vidNotIn"))
			it.VidNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "vidGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vidGT"))
			it.VidGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vidGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vidGTE"))
			it.VidGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vidLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vidLT"))
			it.VidLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vidLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vidLTE"))
			it.VidLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vidContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vidContains"))
			it.VidContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vidHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vidHasPrefix"))
			it.VidHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vidHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vidHasSuffix"))
			it.VidHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vidEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vidEqualFold"))
			it.VidEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vidContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vidContainsFold"))
			it.VidContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "summary":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summary"))
			it.Summary, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "summaryNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summaryNEQ"))
			it.SummaryNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "summaryIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summaryIn"))
			it.SummaryIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "summaryNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summaryNotIn"))
			it.SummaryNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "summaryGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summaryGT"))
			it.SummaryGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "summaryGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summaryGTE"))
			it.SummaryGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "summaryLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summaryLT"))
			it.SummaryLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "summaryLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summaryLTE"))
			it.SummaryLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "summaryContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summaryContains"))
			it.SummaryContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "summaryHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summaryHasPrefix"))
			it.SummaryHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "summaryHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summaryHasSuffix"))
			it.SummaryHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "summaryIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summaryIsNil"))
			it.SummaryIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "summaryNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summaryNotNil"))
			it.SummaryNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "summaryEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summaryEqualFold"))
			it.SummaryEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "summaryContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summaryContainsFold"))
			it.SummaryContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			it.DescriptionNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			it.DescriptionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			it.DescriptionGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			it.DescriptionGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			it.DescriptionLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			it.DescriptionLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			it.DescriptionContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			it.DescriptionHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			it.DescriptionHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIsNil"))
			it.DescriptionIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotNil"))
			it.DescriptionNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			it.DescriptionEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			it.DescriptionContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "severityScore":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severityScore"))
			it.SeverityScore, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "severityScoreNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severityScoreNEQ"))
			it.SeverityScoreNEQ, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "severityScoreIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severityScoreIn"))
			it.SeverityScoreIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "severityScoreNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severityScoreNotIn"))
			it.SeverityScoreNotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "severityScoreGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severityScoreGT"))
			it.SeverityScoreGT, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "severityScoreGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severityScoreGTE"))
			it.SeverityScoreGTE, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "severityScoreLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severityScoreLT"))
			it.SeverityScoreLT, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "severityScoreLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severityScoreLTE"))
			it.SeverityScoreLTE, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity"))
			it.Severity, err = ec.unmarshalOVulnerabilitySeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityᚐSeverity(ctx, v)
			if err != nil {
				return it, err
			}
		case "severityNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severityNEQ"))
			it.SeverityNEQ, err = ec.unmarshalOVulnerabilitySeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityᚐSeverity(ctx, v)
			if err != nil {
				return it, err
			}
		case "severityIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severityIn"))
			it.SeverityIn, err = ec.unmarshalOVulnerabilitySeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityᚐSeverityᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "severityNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severityNotIn"))
			it.SeverityNotIn, err = ec.unmarshalOVulnerabilitySeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityᚐSeverityᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "publishedNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publishedNEQ"))
			it.PublishedNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "publishedIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publishedIn"))
			it.PublishedIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "publishedNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publishedNotIn"))
			it.PublishedNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "publishedGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publishedGT"))
			it.PublishedGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "publishedGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publishedGTE"))
			it.PublishedGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "publishedLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publishedLT"))
			it.PublishedLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "publishedLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publishedLTE"))
			it.PublishedLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "publishedIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publishedIsNil"))
			it.PublishedIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "publishedNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publishedNotNil"))
			it.PublishedNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "modified":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modified"))
			it.Modified, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifiedNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modifiedNEQ"))
			it.ModifiedNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifiedIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modifiedIn"))
			it.ModifiedIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifiedNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modifiedNotIn"))
			it.ModifiedNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifiedGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modifiedGT"))
			it.ModifiedGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifiedGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modifiedGTE"))
			it.ModifiedGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifiedLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modifiedLT"))
			it.ModifiedLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifiedLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modifiedLTE"))
			it.ModifiedLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifiedIsNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modifiedIsNil"))
			it.ModifiedIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifiedNotNil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modifiedNotNil"))
			it.ModifiedNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNEQ, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLT, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLTE, err = ec.unmarshalOID2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasOwner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOwner"))
			it.HasOwner, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasOwnerWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOwnerWith"))
			it.HasOwnerWith, err = ec.unmarshalOOrganizationWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrganizationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasComponents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasComponents"))
			it.HasComponents, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasComponentsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasComponentsWith"))
			it.HasComponentsWith, err = ec.unmarshalOComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReviews":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReviews"))
			it.HasReviews, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReviewsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReviewsWith"))
			it.HasReviewsWith, err = ec.unmarshalOVulnerabilityReviewWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasInstances":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInstances"))
			it.HasInstances, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasInstancesWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInstancesWith"))
			it.HasInstancesWith, err = ec.unmarshalOReleaseVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj ent.Noder) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *ent.CodeIssue:
		if obj == nil {
			return graphql.Null
		}
		return ec._CodeIssue(ctx, sel, obj)
	case *ent.VulnerabilityReview:
		if obj == nil {
			return graphql.Null
		}
		return ec._VulnerabilityReview(ctx, sel, obj)
	case *ent.ReleaseLicense:
		if obj == nil {
			return graphql.Null
		}
		return ec._ReleaseLicense(ctx, sel, obj)
	case *ent.ReleasePolicy:
		if obj == nil {
			return graphql.Null
		}
		return ec._ReleasePolicy(ctx, sel, obj)
	case *ent.TestCase:
		if obj == nil {
			return graphql.Null
		}
		return ec._TestCase(ctx, sel, obj)
	case *ent.Release:
		if obj == nil {
			return graphql.Null
		}
		return ec._Release(ctx, sel, obj)
	case *ent.ReleaseVulnerability:
		if obj == nil {
			return graphql.Null
		}
		return ec._ReleaseVulnerability(ctx, sel, obj)
	case *ent.Repo:
		if obj == nil {
			return graphql.Null
		}
		return ec._Repo(ctx, sel, obj)
	case *ent.Project:
		if obj == nil {
			return graphql.Null
		}
		return ec._Project(ctx, sel, obj)
	case *ent.CodeScan:
		if obj == nil {
			return graphql.Null
		}
		return ec._CodeScan(ctx, sel, obj)
	case *ent.ReleasePolicyViolation:
		if obj == nil {
			return graphql.Null
		}
		return ec._ReleasePolicyViolation(ctx, sel, obj)
	case *ent.GitCommit:
		if obj == nil {
			return graphql.Null
		}
		return ec._GitCommit(ctx, sel, obj)
	case *ent.ReleaseEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ReleaseEntry(ctx, sel, obj)
	case *ent.Adapter:
		if obj == nil {
			return graphql.Null
		}
		return ec._Adapter(ctx, sel, obj)
	case *ent.ReleaseComponent:
		if obj == nil {
			return graphql.Null
		}
		return ec._ReleaseComponent(ctx, sel, obj)
	case *ent.Vulnerability:
		if obj == nil {
			return graphql.Null
		}
		return ec._Vulnerability(ctx, sel, obj)
	case *ent.Artifact:
		if obj == nil {
			return graphql.Null
		}
		return ec._Artifact(ctx, sel, obj)
	case *ent.TestRun:
		if obj == nil {
			return graphql.Null
		}
		return ec._TestRun(ctx, sel, obj)
	case *ent.Component:
		if obj == nil {
			return graphql.Null
		}
		return ec._Component(ctx, sel, obj)
	case *ent.License:
		if obj == nil {
			return graphql.Null
		}
		return ec._License(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var adapterImplementors = []string{"Adapter", "Node"}

func (ec *executionContext) _Adapter(ctx context.Context, sel ast.SelectionSet, obj *ent.Adapter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adapterImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Adapter")
		case "id":
			out.Values[i] = ec._Adapter_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Adapter_name(ctx, field, obj)
		case "tag":
			out.Values[i] = ec._Adapter_tag(ctx, field, obj)
		case "module":
			out.Values[i] = ec._Adapter_module(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adapterConnectionImplementors = []string{"AdapterConnection"}

func (ec *executionContext) _AdapterConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.AdapterConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adapterConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdapterConnection")
		case "totalCount":
			out.Values[i] = ec._AdapterConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._AdapterConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._AdapterConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adapterEdgeImplementors = []string{"AdapterEdge"}

func (ec *executionContext) _AdapterEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.AdapterEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adapterEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdapterEdge")
		case "node":
			out.Values[i] = ec._AdapterEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._AdapterEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var artifactImplementors = []string{"Artifact", "Node"}

func (ec *executionContext) _Artifact(ctx context.Context, sel ast.SelectionSet, obj *ent.Artifact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, artifactImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Artifact")
		case "id":
			out.Values[i] = ec._Artifact_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Artifact_name(ctx, field, obj)
		case "sha256":
			out.Values[i] = ec._Artifact_sha256(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Artifact_type(ctx, field, obj)
		case "time":
			out.Values[i] = ec._Artifact_time(ctx, field, obj)
		case "metadata":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Artifact_metadata(ctx, field, obj)
				return res
			})
		case "release":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Artifact_release(ctx, field, obj)
				return res
			})
		case "entry":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Artifact_entry(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var artifactConnectionImplementors = []string{"ArtifactConnection"}

func (ec *executionContext) _ArtifactConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ArtifactConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, artifactConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArtifactConnection")
		case "totalCount":
			out.Values[i] = ec._ArtifactConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ArtifactConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ArtifactConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var artifactEdgeImplementors = []string{"ArtifactEdge"}

func (ec *executionContext) _ArtifactEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ArtifactEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, artifactEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArtifactEdge")
		case "node":
			out.Values[i] = ec._ArtifactEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ArtifactEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var codeIssueImplementors = []string{"CodeIssue", "Node"}

func (ec *executionContext) _CodeIssue(ctx context.Context, sel ast.SelectionSet, obj *ent.CodeIssue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, codeIssueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CodeIssue")
		case "id":
			out.Values[i] = ec._CodeIssue_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "rule_id":
			out.Values[i] = ec._CodeIssue_rule_id(ctx, field, obj)
		case "message":
			out.Values[i] = ec._CodeIssue_message(ctx, field, obj)
		case "severity":
			out.Values[i] = ec._CodeIssue_severity(ctx, field, obj)
		case "type":
			out.Values[i] = ec._CodeIssue_type(ctx, field, obj)
		case "metadata":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CodeIssue_metadata(ctx, field, obj)
				return res
			})
		case "scan":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CodeIssue_scan(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var codeIssueConnectionImplementors = []string{"CodeIssueConnection"}

func (ec *executionContext) _CodeIssueConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.CodeIssueConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, codeIssueConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CodeIssueConnection")
		case "totalCount":
			out.Values[i] = ec._CodeIssueConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._CodeIssueConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._CodeIssueConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var codeIssueEdgeImplementors = []string{"CodeIssueEdge"}

func (ec *executionContext) _CodeIssueEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.CodeIssueEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, codeIssueEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CodeIssueEdge")
		case "node":
			out.Values[i] = ec._CodeIssueEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CodeIssueEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var codeScanImplementors = []string{"CodeScan", "Node"}

func (ec *executionContext) _CodeScan(ctx context.Context, sel ast.SelectionSet, obj *ent.CodeScan) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, codeScanImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CodeScan")
		case "id":
			out.Values[i] = ec._CodeScan_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "tool":
			out.Values[i] = ec._CodeScan_tool(ctx, field, obj)
		case "time":
			out.Values[i] = ec._CodeScan_time(ctx, field, obj)
		case "metadata":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CodeScan_metadata(ctx, field, obj)
				return res
			})
		case "release":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CodeScan_release(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "entry":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CodeScan_entry(ctx, field, obj)
				return res
			})
		case "issues":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CodeScan_issues(ctx, field, obj)
				return res
			})
		case "vulnerabilities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CodeScan_vulnerabilities(ctx, field, obj)
				return res
			})
		case "components":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CodeScan_components(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var codeScanConnectionImplementors = []string{"CodeScanConnection"}

func (ec *executionContext) _CodeScanConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.CodeScanConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, codeScanConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CodeScanConnection")
		case "totalCount":
			out.Values[i] = ec._CodeScanConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._CodeScanConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._CodeScanConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var codeScanEdgeImplementors = []string{"CodeScanEdge"}

func (ec *executionContext) _CodeScanEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.CodeScanEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, codeScanEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CodeScanEdge")
		case "node":
			out.Values[i] = ec._CodeScanEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CodeScanEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var componentImplementors = []string{"Component", "Node"}

func (ec *executionContext) _Component(ctx context.Context, sel ast.SelectionSet, obj *ent.Component) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, componentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Component")
		case "id":
			out.Values[i] = ec._Component_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Component_name(ctx, field, obj)
		case "vendor":
			out.Values[i] = ec._Component_vendor(ctx, field, obj)
		case "version":
			out.Values[i] = ec._Component_version(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Component_description(ctx, field, obj)
		case "url":
			out.Values[i] = ec._Component_url(ctx, field, obj)
		case "metadata":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Component_metadata(ctx, field, obj)
				return res
			})
		case "vulnerabilities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Component_vulnerabilities(ctx, field, obj)
				return res
			})
		case "licenses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Component_licenses(ctx, field, obj)
				return res
			})
		case "uses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Component_uses(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var componentConnectionImplementors = []string{"ComponentConnection"}

func (ec *executionContext) _ComponentConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ComponentConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, componentConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComponentConnection")
		case "totalCount":
			out.Values[i] = ec._ComponentConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ComponentConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ComponentConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var componentEdgeImplementors = []string{"ComponentEdge"}

func (ec *executionContext) _ComponentEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ComponentEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, componentEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComponentEdge")
		case "node":
			out.Values[i] = ec._ComponentEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ComponentEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gitCommitImplementors = []string{"GitCommit", "Node"}

func (ec *executionContext) _GitCommit(ctx context.Context, sel ast.SelectionSet, obj *ent.GitCommit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gitCommitImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GitCommit")
		case "id":
			out.Values[i] = ec._GitCommit_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "hash":
			out.Values[i] = ec._GitCommit_hash(ctx, field, obj)
		case "branch":
			out.Values[i] = ec._GitCommit_branch(ctx, field, obj)
		case "tag":
			out.Values[i] = ec._GitCommit_tag(ctx, field, obj)
		case "time":
			out.Values[i] = ec._GitCommit_time(ctx, field, obj)
		case "repo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GitCommit_repo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "release":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GitCommit_release(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gitCommitConnectionImplementors = []string{"GitCommitConnection"}

func (ec *executionContext) _GitCommitConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.GitCommitConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gitCommitConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GitCommitConnection")
		case "totalCount":
			out.Values[i] = ec._GitCommitConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._GitCommitConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._GitCommitConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gitCommitEdgeImplementors = []string{"GitCommitEdge"}

func (ec *executionContext) _GitCommitEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.GitCommitEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gitCommitEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GitCommitEdge")
		case "node":
			out.Values[i] = ec._GitCommitEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._GitCommitEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var licenseImplementors = []string{"License", "Node"}

func (ec *executionContext) _License(ctx context.Context, sel ast.SelectionSet, obj *ent.License) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, licenseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("License")
		case "id":
			out.Values[i] = ec._License_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "license_id":
			out.Values[i] = ec._License_license_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._License_name(ctx, field, obj)
		case "reference":
			out.Values[i] = ec._License_reference(ctx, field, obj)
		case "details_url":
			out.Values[i] = ec._License_details_url(ctx, field, obj)
		case "is_osi_approved":
			out.Values[i] = ec._License_is_osi_approved(ctx, field, obj)
		case "components":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._License_components(ctx, field, obj)
				return res
			})
		case "instances":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._License_instances(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var licenseConnectionImplementors = []string{"LicenseConnection"}

func (ec *executionContext) _LicenseConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.LicenseConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, licenseConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LicenseConnection")
		case "totalCount":
			out.Values[i] = ec._LicenseConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._LicenseConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._LicenseConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var licenseEdgeImplementors = []string{"LicenseEdge"}

func (ec *executionContext) _LicenseEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.LicenseEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, licenseEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LicenseEdge")
		case "node":
			out.Values[i] = ec._LicenseEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._LicenseEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *ent.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectImplementors = []string{"Project", "Node"}

func (ec *executionContext) _Project(ctx context.Context, sel ast.SelectionSet, obj *ent.Project) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Project")
		case "id":
			out.Values[i] = ec._Project_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Project_name(ctx, field, obj)
		case "repos":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Project_repos(ctx, field, obj)
				return res
			})
		case "vulnerability_reviews":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Project_vulnerability_reviews(ctx, field, obj)
				return res
			})
		case "policies":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Project_policies(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectConnectionImplementors = []string{"ProjectConnection"}

func (ec *executionContext) _ProjectConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ProjectConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectConnection")
		case "totalCount":
			out.Values[i] = ec._ProjectConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ProjectConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ProjectConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectEdgeImplementors = []string{"ProjectEdge"}

func (ec *executionContext) _ProjectEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ProjectEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectEdge")
		case "node":
			out.Values[i] = ec._ProjectEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ProjectEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "policy":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_policy(ctx, field)
				return res
			})
		case "artifact":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_artifact(ctx, field)
				return res
			})
		case "component":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_component(ctx, field)
				return res
			})
		case "license_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_license_connection(ctx, field)
				return res
			})
		case "vulnerability_review":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vulnerability_review(ctx, field)
				return res
			})
		case "license":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_license(ctx, field)
				return res
			})
		case "repo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_repo(ctx, field)
				return res
			})
		case "project":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_project(ctx, field)
				return res
			})
		case "release":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_release(ctx, field)
				return res
			})
		case "repo_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_repo_connection(ctx, field)
				return res
			})
		case "commit":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_commit(ctx, field)
				return res
			})
		case "project_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_project_connection(ctx, field)
				return res
			})
		case "release_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_release_connection(ctx, field)
				return res
			})
		case "vulnerability":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vulnerability(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseImplementors = []string{"Release", "Node"}

func (ec *executionContext) _Release(ctx context.Context, sel ast.SelectionSet, obj *ent.Release) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Release")
		case "id":
			out.Values[i] = ec._Release_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Release_name(ctx, field, obj)
		case "version":
			out.Values[i] = ec._Release_version(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Release_status(ctx, field, obj)
		case "subreleases":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_subreleases(ctx, field, obj)
				return res
			})
		case "dependencies":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_dependencies(ctx, field, obj)
				return res
			})
		case "commit":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_commit(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "head_of":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_head_of(ctx, field, obj)
				return res
			})
		case "log":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_log(ctx, field, obj)
				return res
			})
		case "violations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_violations(ctx, field, obj)
				return res
			})
		case "artifacts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_artifacts(ctx, field, obj)
				return res
			})
		case "components":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_components(ctx, field, obj)
				return res
			})
		case "licenses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_licenses(ctx, field, obj)
				return res
			})
		case "vulnerabilities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_vulnerabilities(ctx, field, obj)
				return res
			})
		case "code_scans":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_code_scans(ctx, field, obj)
				return res
			})
		case "test_runs":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_test_runs(ctx, field, obj)
				return res
			})
		case "vulnerability_reviews":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_vulnerability_reviews(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseComponentImplementors = []string{"ReleaseComponent", "Node"}

func (ec *executionContext) _ReleaseComponent(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseComponent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseComponentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseComponent")
		case "id":
			out.Values[i] = ec._ReleaseComponent_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._ReleaseComponent_type(ctx, field, obj)
		case "release":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseComponent_release(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "scans":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseComponent_scans(ctx, field, obj)
				return res
			})
		case "component":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseComponent_component(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vulnerabilities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseComponent_vulnerabilities(ctx, field, obj)
				return res
			})
		case "licenses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseComponent_licenses(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseComponentConnectionImplementors = []string{"ReleaseComponentConnection"}

func (ec *executionContext) _ReleaseComponentConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseComponentConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseComponentConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseComponentConnection")
		case "totalCount":
			out.Values[i] = ec._ReleaseComponentConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ReleaseComponentConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ReleaseComponentConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseComponentEdgeImplementors = []string{"ReleaseComponentEdge"}

func (ec *executionContext) _ReleaseComponentEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseComponentEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseComponentEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseComponentEdge")
		case "node":
			out.Values[i] = ec._ReleaseComponentEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ReleaseComponentEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseConnectionImplementors = []string{"ReleaseConnection"}

func (ec *executionContext) _ReleaseConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseConnection")
		case "totalCount":
			out.Values[i] = ec._ReleaseConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ReleaseConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ReleaseConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseEdgeImplementors = []string{"ReleaseEdge"}

func (ec *executionContext) _ReleaseEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseEdge")
		case "node":
			out.Values[i] = ec._ReleaseEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ReleaseEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseEntryImplementors = []string{"ReleaseEntry", "Node"}

func (ec *executionContext) _ReleaseEntry(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseEntryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseEntry")
		case "id":
			out.Values[i] = ec._ReleaseEntry_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._ReleaseEntry_type(ctx, field, obj)
		case "time":
			out.Values[i] = ec._ReleaseEntry_time(ctx, field, obj)
		case "artifact":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseEntry_artifact(ctx, field, obj)
				return res
			})
		case "code_scan":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseEntry_code_scan(ctx, field, obj)
				return res
			})
		case "test_run":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseEntry_test_run(ctx, field, obj)
				return res
			})
		case "release":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseEntry_release(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseEntryConnectionImplementors = []string{"ReleaseEntryConnection"}

func (ec *executionContext) _ReleaseEntryConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseEntryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseEntryConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseEntryConnection")
		case "totalCount":
			out.Values[i] = ec._ReleaseEntryConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ReleaseEntryConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ReleaseEntryConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseEntryEdgeImplementors = []string{"ReleaseEntryEdge"}

func (ec *executionContext) _ReleaseEntryEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseEntryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseEntryEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseEntryEdge")
		case "node":
			out.Values[i] = ec._ReleaseEntryEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ReleaseEntryEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseLicenseImplementors = []string{"ReleaseLicense", "Node"}

func (ec *executionContext) _ReleaseLicense(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseLicense) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseLicenseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseLicense")
		case "id":
			out.Values[i] = ec._ReleaseLicense_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "license":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseLicense_license(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "component":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseLicense_component(ctx, field, obj)
				return res
			})
		case "release":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseLicense_release(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "scans":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseLicense_scans(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseLicenseConnectionImplementors = []string{"ReleaseLicenseConnection"}

func (ec *executionContext) _ReleaseLicenseConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseLicenseConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseLicenseConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseLicenseConnection")
		case "totalCount":
			out.Values[i] = ec._ReleaseLicenseConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ReleaseLicenseConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ReleaseLicenseConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseLicenseEdgeImplementors = []string{"ReleaseLicenseEdge"}

func (ec *executionContext) _ReleaseLicenseEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseLicenseEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseLicenseEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseLicenseEdge")
		case "node":
			out.Values[i] = ec._ReleaseLicenseEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ReleaseLicenseEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releasePolicyImplementors = []string{"ReleasePolicy", "Node"}

func (ec *executionContext) _ReleasePolicy(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleasePolicy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releasePolicyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleasePolicy")
		case "id":
			out.Values[i] = ec._ReleasePolicy_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._ReleasePolicy_name(ctx, field, obj)
		case "module":
			out.Values[i] = ec._ReleasePolicy_module(ctx, field, obj)
		case "projects":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleasePolicy_projects(ctx, field, obj)
				return res
			})
		case "repos":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleasePolicy_repos(ctx, field, obj)
				return res
			})
		case "violations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleasePolicy_violations(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releasePolicyConnectionImplementors = []string{"ReleasePolicyConnection"}

func (ec *executionContext) _ReleasePolicyConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleasePolicyConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releasePolicyConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleasePolicyConnection")
		case "totalCount":
			out.Values[i] = ec._ReleasePolicyConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ReleasePolicyConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ReleasePolicyConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releasePolicyEdgeImplementors = []string{"ReleasePolicyEdge"}

func (ec *executionContext) _ReleasePolicyEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleasePolicyEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releasePolicyEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleasePolicyEdge")
		case "node":
			out.Values[i] = ec._ReleasePolicyEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ReleasePolicyEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releasePolicyViolationImplementors = []string{"ReleasePolicyViolation", "Node"}

func (ec *executionContext) _ReleasePolicyViolation(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleasePolicyViolation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releasePolicyViolationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleasePolicyViolation")
		case "id":
			out.Values[i] = ec._ReleasePolicyViolation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "message":
			out.Values[i] = ec._ReleasePolicyViolation_message(ctx, field, obj)
		case "type":
			out.Values[i] = ec._ReleasePolicyViolation_type(ctx, field, obj)
		case "severity":
			out.Values[i] = ec._ReleasePolicyViolation_severity(ctx, field, obj)
		case "policy":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleasePolicyViolation_policy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "release":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleasePolicyViolation_release(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releasePolicyViolationConnectionImplementors = []string{"ReleasePolicyViolationConnection"}

func (ec *executionContext) _ReleasePolicyViolationConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleasePolicyViolationConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releasePolicyViolationConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleasePolicyViolationConnection")
		case "totalCount":
			out.Values[i] = ec._ReleasePolicyViolationConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ReleasePolicyViolationConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ReleasePolicyViolationConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releasePolicyViolationEdgeImplementors = []string{"ReleasePolicyViolationEdge"}

func (ec *executionContext) _ReleasePolicyViolationEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleasePolicyViolationEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releasePolicyViolationEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleasePolicyViolationEdge")
		case "node":
			out.Values[i] = ec._ReleasePolicyViolationEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ReleasePolicyViolationEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseVulnerabilityImplementors = []string{"ReleaseVulnerability", "Node"}

func (ec *executionContext) _ReleaseVulnerability(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseVulnerability) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseVulnerabilityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseVulnerability")
		case "id":
			out.Values[i] = ec._ReleaseVulnerability_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "vulnerability":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseVulnerability_vulnerability(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "component":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseVulnerability_component(ctx, field, obj)
				return res
			})
		case "release":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseVulnerability_release(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "reviews":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseVulnerability_reviews(ctx, field, obj)
				return res
			})
		case "scan":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseVulnerability_scan(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseVulnerabilityConnectionImplementors = []string{"ReleaseVulnerabilityConnection"}

func (ec *executionContext) _ReleaseVulnerabilityConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseVulnerabilityConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseVulnerabilityConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseVulnerabilityConnection")
		case "totalCount":
			out.Values[i] = ec._ReleaseVulnerabilityConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ReleaseVulnerabilityConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ReleaseVulnerabilityConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseVulnerabilityEdgeImplementors = []string{"ReleaseVulnerabilityEdge"}

func (ec *executionContext) _ReleaseVulnerabilityEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseVulnerabilityEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseVulnerabilityEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseVulnerabilityEdge")
		case "node":
			out.Values[i] = ec._ReleaseVulnerabilityEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ReleaseVulnerabilityEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repoImplementors = []string{"Repo", "Node"}

func (ec *executionContext) _Repo(ctx context.Context, sel ast.SelectionSet, obj *ent.Repo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Repo")
		case "id":
			out.Values[i] = ec._Repo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Repo_name(ctx, field, obj)
		case "default_branch":
			out.Values[i] = ec._Repo_default_branch(ctx, field, obj)
		case "project":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repo_project(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "head":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repo_head(ctx, field, obj)
				return res
			})
		case "commits":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repo_commits(ctx, field, obj)
				return res
			})
		case "vulnerability_reviews":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repo_vulnerability_reviews(ctx, field, obj)
				return res
			})
		case "policies":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repo_policies(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repoConnectionImplementors = []string{"RepoConnection"}

func (ec *executionContext) _RepoConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.RepoConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repoConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepoConnection")
		case "totalCount":
			out.Values[i] = ec._RepoConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._RepoConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._RepoConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repoEdgeImplementors = []string{"RepoEdge"}

func (ec *executionContext) _RepoEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.RepoEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repoEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepoEdge")
		case "node":
			out.Values[i] = ec._RepoEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._RepoEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var testCaseImplementors = []string{"TestCase", "Node"}

func (ec *executionContext) _TestCase(ctx context.Context, sel ast.SelectionSet, obj *ent.TestCase) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testCaseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestCase")
		case "id":
			out.Values[i] = ec._TestCase_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._TestCase_name(ctx, field, obj)
		case "result":
			out.Values[i] = ec._TestCase_result(ctx, field, obj)
		case "message":
			out.Values[i] = ec._TestCase_message(ctx, field, obj)
		case "elapsed":
			out.Values[i] = ec._TestCase_elapsed(ctx, field, obj)
		case "metadata":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestCase_metadata(ctx, field, obj)
				return res
			})
		case "run":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestCase_run(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var testCaseConnectionImplementors = []string{"TestCaseConnection"}

func (ec *executionContext) _TestCaseConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.TestCaseConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testCaseConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestCaseConnection")
		case "totalCount":
			out.Values[i] = ec._TestCaseConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._TestCaseConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._TestCaseConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var testCaseEdgeImplementors = []string{"TestCaseEdge"}

func (ec *executionContext) _TestCaseEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.TestCaseEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testCaseEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestCaseEdge")
		case "node":
			out.Values[i] = ec._TestCaseEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._TestCaseEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var testRunImplementors = []string{"TestRun", "Node"}

func (ec *executionContext) _TestRun(ctx context.Context, sel ast.SelectionSet, obj *ent.TestRun) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testRunImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestRun")
		case "id":
			out.Values[i] = ec._TestRun_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "tool":
			out.Values[i] = ec._TestRun_tool(ctx, field, obj)
		case "time":
			out.Values[i] = ec._TestRun_time(ctx, field, obj)
		case "metadata":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestRun_metadata(ctx, field, obj)
				return res
			})
		case "release":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestRun_release(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "entry":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestRun_entry(ctx, field, obj)
				return res
			})
		case "tests":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestRun_tests(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var testRunConnectionImplementors = []string{"TestRunConnection"}

func (ec *executionContext) _TestRunConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.TestRunConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testRunConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestRunConnection")
		case "totalCount":
			out.Values[i] = ec._TestRunConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._TestRunConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._TestRunConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var testRunEdgeImplementors = []string{"TestRunEdge"}

func (ec *executionContext) _TestRunEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.TestRunEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testRunEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestRunEdge")
		case "node":
			out.Values[i] = ec._TestRunEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._TestRunEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vulnerabilityImplementors = []string{"Vulnerability", "Node"}

func (ec *executionContext) _Vulnerability(ctx context.Context, sel ast.SelectionSet, obj *ent.Vulnerability) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vulnerabilityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Vulnerability")
		case "id":
			out.Values[i] = ec._Vulnerability_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "vid":
			out.Values[i] = ec._Vulnerability_vid(ctx, field, obj)
		case "summary":
			out.Values[i] = ec._Vulnerability_summary(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Vulnerability_description(ctx, field, obj)
		case "severity_score":
			out.Values[i] = ec._Vulnerability_severity_score(ctx, field, obj)
		case "severity":
			out.Values[i] = ec._Vulnerability_severity(ctx, field, obj)
		case "published":
			out.Values[i] = ec._Vulnerability_published(ctx, field, obj)
		case "modified":
			out.Values[i] = ec._Vulnerability_modified(ctx, field, obj)
		case "metadata":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Vulnerability_metadata(ctx, field, obj)
				return res
			})
		case "components":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Vulnerability_components(ctx, field, obj)
				return res
			})
		case "reviews":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Vulnerability_reviews(ctx, field, obj)
				return res
			})
		case "instances":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Vulnerability_instances(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vulnerabilityConnectionImplementors = []string{"VulnerabilityConnection"}

func (ec *executionContext) _VulnerabilityConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.VulnerabilityConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vulnerabilityConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VulnerabilityConnection")
		case "totalCount":
			out.Values[i] = ec._VulnerabilityConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._VulnerabilityConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._VulnerabilityConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vulnerabilityEdgeImplementors = []string{"VulnerabilityEdge"}

func (ec *executionContext) _VulnerabilityEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.VulnerabilityEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vulnerabilityEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VulnerabilityEdge")
		case "node":
			out.Values[i] = ec._VulnerabilityEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._VulnerabilityEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vulnerabilityReviewImplementors = []string{"VulnerabilityReview", "Node"}

func (ec *executionContext) _VulnerabilityReview(ctx context.Context, sel ast.SelectionSet, obj *ent.VulnerabilityReview) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vulnerabilityReviewImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VulnerabilityReview")
		case "id":
			out.Values[i] = ec._VulnerabilityReview_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "note":
			out.Values[i] = ec._VulnerabilityReview_note(ctx, field, obj)
		case "decision":
			out.Values[i] = ec._VulnerabilityReview_decision(ctx, field, obj)
		case "vulnerability":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._VulnerabilityReview_vulnerability(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projects":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._VulnerabilityReview_projects(ctx, field, obj)
				return res
			})
		case "repos":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._VulnerabilityReview_repos(ctx, field, obj)
				return res
			})
		case "releases":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._VulnerabilityReview_releases(ctx, field, obj)
				return res
			})
		case "instances":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._VulnerabilityReview_instances(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vulnerabilityReviewConnectionImplementors = []string{"VulnerabilityReviewConnection"}

func (ec *executionContext) _VulnerabilityReviewConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.VulnerabilityReviewConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vulnerabilityReviewConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VulnerabilityReviewConnection")
		case "totalCount":
			out.Values[i] = ec._VulnerabilityReviewConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._VulnerabilityReviewConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._VulnerabilityReviewConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vulnerabilityReviewEdgeImplementors = []string{"VulnerabilityReviewEdge"}

func (ec *executionContext) _VulnerabilityReviewEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.VulnerabilityReviewEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vulnerabilityReviewEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VulnerabilityReviewEdge")
		case "node":
			out.Values[i] = ec._VulnerabilityReviewEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._VulnerabilityReviewEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAdapterWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐAdapterWhereInput(ctx context.Context, v interface{}) (*ent.AdapterWhereInput, error) {
	res, err := ec.unmarshalInputAdapterWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNArtifactType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx context.Context, v interface{}) (artifact.Type, error) {
	var res artifact.Type
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNArtifactType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx context.Context, sel ast.SelectionSet, v artifact.Type) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNArtifactWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInput(ctx context.Context, v interface{}) (*ent.ArtifactWhereInput, error) {
	res, err := ec.unmarshalInputArtifactWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCodeIssueSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx context.Context, v interface{}) (codeissue.Severity, error) {
	var res codeissue.Severity
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCodeIssueSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx context.Context, sel ast.SelectionSet, v codeissue.Severity) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCodeIssueType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx context.Context, v interface{}) (codeissue.Type, error) {
	var res codeissue.Type
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCodeIssueType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx context.Context, sel ast.SelectionSet, v codeissue.Type) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCodeIssueWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInput(ctx context.Context, v interface{}) (*ent.CodeIssueWhereInput, error) {
	res, err := ec.unmarshalInputCodeIssueWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCodeScan2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx context.Context, sel ast.SelectionSet, v *ent.CodeScan) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CodeScan(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCodeScanWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInput(ctx context.Context, v interface{}) (*ent.CodeScanWhereInput, error) {
	res, err := ec.unmarshalInputCodeScanWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNComponent2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx context.Context, sel ast.SelectionSet, v *ent.Component) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Component(ctx, sel, v)
}

func (ec *executionContext) unmarshalNComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInput(ctx context.Context, v interface{}) (*ent.ComponentWhereInput, error) {
	res, err := ec.unmarshalInputComponentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx context.Context, v interface{}) (ent.Cursor, error) {
	var res ent.Cursor
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx context.Context, sel ast.SelectionSet, v ent.Cursor) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEventType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋeventᚐType(ctx context.Context, v interface{}) (event.Type, error) {
	var res event.Type
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEventType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋeventᚐType(ctx context.Context, sel ast.SelectionSet, v event.Type) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEventWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐEventWhereInput(ctx context.Context, v interface{}) (*ent.EventWhereInput, error) {
	res, err := ec.unmarshalInputEventWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNGitCommit2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommit(ctx context.Context, sel ast.SelectionSet, v *ent.GitCommit) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GitCommit(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGitCommitWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInput(ctx context.Context, v interface{}) (*ent.GitCommitWhereInput, error) {
	res, err := ec.unmarshalInputGitCommitWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNID2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalIntID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalIntID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNLicense2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicense(ctx context.Context, sel ast.SelectionSet, v *ent.License) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._License(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLicenseUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋgqlᚐLicenseUseWhereInput(ctx context.Context, v interface{}) (*LicenseUseWhereInput, error) {
	res, err := ec.unmarshalInputLicenseUseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInput(ctx context.Context, v interface{}) (*ent.LicenseWhereInput, error) {
	res, err := ec.unmarshalInputLicenseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx context.Context, v interface{}) (ent.OrderDirection, error) {
	var res ent.OrderDirection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx context.Context, sel ast.SelectionSet, v ent.OrderDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOrganizationWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrganizationWhereInput(ctx context.Context, v interface{}) (*ent.OrganizationWhereInput, error) {
	res, err := ec.unmarshalInputOrganizationWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v ent.PageInfo) graphql.Marshaler {
	return ec._PageInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNProject2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx context.Context, sel ast.SelectionSet, v *ent.Project) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Project(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInput(ctx context.Context, v interface{}) (*ent.ProjectWhereInput, error) {
	res, err := ec.unmarshalInputProjectWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx context.Context, sel ast.SelectionSet, v *ent.Release) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Release(ctx, sel, v)
}

func (ec *executionContext) unmarshalNReleaseComponentType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasecomponentᚐType(ctx context.Context, v interface{}) (releasecomponent.Type, error) {
	var res releasecomponent.Type
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReleaseComponentType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasecomponentᚐType(ctx context.Context, sel ast.SelectionSet, v releasecomponent.Type) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNReleaseComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentWhereInput(ctx context.Context, v interface{}) (*ent.ReleaseComponentWhereInput, error) {
	res, err := ec.unmarshalInputReleaseComponentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNReleaseEntryType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx context.Context, v interface{}) (releaseentry.Type, error) {
	var res releaseentry.Type
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReleaseEntryType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx context.Context, sel ast.SelectionSet, v releaseentry.Type) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNReleaseEntryWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInput(ctx context.Context, v interface{}) (*ent.ReleaseEntryWhereInput, error) {
	res, err := ec.unmarshalInputReleaseEntryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNReleaseLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseWhereInput(ctx context.Context, v interface{}) (*ent.ReleaseLicenseWhereInput, error) {
	res, err := ec.unmarshalInputReleaseLicenseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReleasePolicy2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicy(ctx context.Context, sel ast.SelectionSet, v *ent.ReleasePolicy) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ReleasePolicy(ctx, sel, v)
}

func (ec *executionContext) unmarshalNReleasePolicyViolationSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐSeverity(ctx context.Context, v interface{}) (releasepolicyviolation.Severity, error) {
	var res releasepolicyviolation.Severity
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReleasePolicyViolationSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐSeverity(ctx context.Context, sel ast.SelectionSet, v releasepolicyviolation.Severity) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNReleasePolicyViolationType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐType(ctx context.Context, v interface{}) (releasepolicyviolation.Type, error) {
	var res releasepolicyviolation.Type
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReleasePolicyViolationType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐType(ctx context.Context, sel ast.SelectionSet, v releasepolicyviolation.Type) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNReleasePolicyViolationWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolationWhereInput(ctx context.Context, v interface{}) (*ent.ReleasePolicyViolationWhereInput, error) {
	res, err := ec.unmarshalInputReleasePolicyViolationWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNReleasePolicyWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyWhereInput(ctx context.Context, v interface{}) (*ent.ReleasePolicyWhereInput, error) {
	res, err := ec.unmarshalInputReleasePolicyWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNReleaseStatus2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx context.Context, v interface{}) (release.Status, error) {
	var res release.Status
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReleaseStatus2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx context.Context, sel ast.SelectionSet, v release.Status) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNReleaseVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityWhereInput(ctx context.Context, v interface{}) (*ent.ReleaseVulnerabilityWhereInput, error) {
	res, err := ec.unmarshalInputReleaseVulnerabilityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx context.Context, v interface{}) (*ent.ReleaseWhereInput, error) {
	res, err := ec.unmarshalInputReleaseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRepo2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx context.Context, sel ast.SelectionSet, v *ent.Repo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Repo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRepoWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInput(ctx context.Context, v interface{}) (*ent.RepoWhereInput, error) {
	res, err := ec.unmarshalInputRepoWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTestCaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInput(ctx context.Context, v interface{}) (*ent.TestCaseWhereInput, error) {
	res, err := ec.unmarshalInputTestCaseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTestRun2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRun(ctx context.Context, sel ast.SelectionSet, v *ent.TestRun) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TestRun(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTestRunWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInput(ctx context.Context, v interface{}) (*ent.TestRunWhereInput, error) {
	res, err := ec.unmarshalInputTestRunWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNVulnerability2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerability(ctx context.Context, sel ast.SelectionSet, v *ent.Vulnerability) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Vulnerability(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVulnerabilityReviewDecision2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityreviewᚐDecision(ctx context.Context, v interface{}) (vulnerabilityreview.Decision, error) {
	var res vulnerabilityreview.Decision
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVulnerabilityReviewDecision2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityreviewᚐDecision(ctx context.Context, sel ast.SelectionSet, v vulnerabilityreview.Decision) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNVulnerabilityReviewWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInput(ctx context.Context, v interface{}) (*ent.VulnerabilityReviewWhereInput, error) {
	res, err := ec.unmarshalInputVulnerabilityReviewWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVulnerabilitySeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityᚐSeverity(ctx context.Context, v interface{}) (vulnerability.Severity, error) {
	var res vulnerability.Severity
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVulnerabilitySeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityᚐSeverity(ctx context.Context, sel ast.SelectionSet, v vulnerability.Severity) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInput(ctx context.Context, v interface{}) (*ent.VulnerabilityWhereInput, error) {
	res, err := ec.unmarshalInputVulnerabilityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOAdapter2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐAdapter(ctx context.Context, sel ast.SelectionSet, v *ent.Adapter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Adapter(ctx, sel, v)
}

func (ec *executionContext) marshalOAdapterEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐAdapterEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.AdapterEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAdapterEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐAdapterEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAdapterEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐAdapterEdge(ctx context.Context, sel ast.SelectionSet, v *ent.AdapterEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AdapterEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAdapterOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐAdapterOrderField(ctx context.Context, v interface{}) (*ent.AdapterOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.AdapterOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAdapterOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐAdapterOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.AdapterOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOAdapterWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐAdapterWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.AdapterWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.AdapterWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAdapterWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐAdapterWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAdapterWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐAdapterWhereInput(ctx context.Context, v interface{}) (*ent.AdapterWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAdapterWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOArtifact2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifact(ctx context.Context, sel ast.SelectionSet, v []*ent.Artifact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOArtifact2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifact(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOArtifact2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifact(ctx context.Context, sel ast.SelectionSet, v *ent.Artifact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Artifact(ctx, sel, v)
}

func (ec *executionContext) marshalOArtifactEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ArtifactEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOArtifactEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOArtifactEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ArtifactEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ArtifactEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOArtifactOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactOrder(ctx context.Context, v interface{}) (*ent.ArtifactOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputArtifactOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOArtifactOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactOrderField(ctx context.Context, v interface{}) (*ent.ArtifactOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.ArtifactOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOArtifactOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.ArtifactOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOArtifactType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx context.Context, v interface{}) (artifact.Type, error) {
	var res artifact.Type
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOArtifactType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx context.Context, sel ast.SelectionSet, v artifact.Type) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOArtifactType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐTypeᚄ(ctx context.Context, v interface{}) ([]artifact.Type, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]artifact.Type, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNArtifactType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOArtifactType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []artifact.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNArtifactType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOArtifactType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx context.Context, v interface{}) (*artifact.Type, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(artifact.Type)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOArtifactType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx context.Context, sel ast.SelectionSet, v *artifact.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOArtifactWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ArtifactWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.ArtifactWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNArtifactWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOArtifactWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInput(ctx context.Context, v interface{}) (*ent.ArtifactWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputArtifactWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOCodeIssue2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssue(ctx context.Context, sel ast.SelectionSet, v []*ent.CodeIssue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCodeIssue2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCodeIssue2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssue(ctx context.Context, sel ast.SelectionSet, v *ent.CodeIssue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CodeIssue(ctx, sel, v)
}

func (ec *executionContext) marshalOCodeIssueEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.CodeIssueEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCodeIssueEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCodeIssueEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueEdge(ctx context.Context, sel ast.SelectionSet, v *ent.CodeIssueEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CodeIssueEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCodeIssueOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueOrder(ctx context.Context, v interface{}) (*ent.CodeIssueOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCodeIssueOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCodeIssueOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueOrderField(ctx context.Context, v interface{}) (*ent.CodeIssueOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.CodeIssueOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCodeIssueOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.CodeIssueOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCodeIssueSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx context.Context, v interface{}) (codeissue.Severity, error) {
	var res codeissue.Severity
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCodeIssueSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx context.Context, sel ast.SelectionSet, v codeissue.Severity) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOCodeIssueSeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverityᚄ(ctx context.Context, v interface{}) ([]codeissue.Severity, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]codeissue.Severity, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCodeIssueSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCodeIssueSeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverityᚄ(ctx context.Context, sel ast.SelectionSet, v []codeissue.Severity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCodeIssueSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOCodeIssueSeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx context.Context, v interface{}) (*codeissue.Severity, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(codeissue.Severity)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCodeIssueSeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx context.Context, sel ast.SelectionSet, v *codeissue.Severity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCodeIssueType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx context.Context, v interface{}) (codeissue.Type, error) {
	var res codeissue.Type
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCodeIssueType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx context.Context, sel ast.SelectionSet, v codeissue.Type) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOCodeIssueType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐTypeᚄ(ctx context.Context, v interface{}) ([]codeissue.Type, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]codeissue.Type, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCodeIssueType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCodeIssueType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []codeissue.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCodeIssueType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOCodeIssueType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx context.Context, v interface{}) (*codeissue.Type, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(codeissue.Type)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCodeIssueType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx context.Context, sel ast.SelectionSet, v *codeissue.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCodeIssueWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.CodeIssueWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.CodeIssueWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCodeIssueWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCodeIssueWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInput(ctx context.Context, v interface{}) (*ent.CodeIssueWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCodeIssueWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCodeScan2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx context.Context, sel ast.SelectionSet, v []*ent.CodeScan) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCodeScan2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCodeScan2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.CodeScan) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCodeScan2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCodeScan2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx context.Context, sel ast.SelectionSet, v *ent.CodeScan) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CodeScan(ctx, sel, v)
}

func (ec *executionContext) marshalOCodeScanEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.CodeScanEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCodeScanEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCodeScanEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanEdge(ctx context.Context, sel ast.SelectionSet, v *ent.CodeScanEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CodeScanEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCodeScanOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanOrder(ctx context.Context, v interface{}) (*ent.CodeScanOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCodeScanOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCodeScanOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanOrderField(ctx context.Context, v interface{}) (*ent.CodeScanOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.CodeScanOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCodeScanOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.CodeScanOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCodeScanWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.CodeScanWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.CodeScanWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCodeScanWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCodeScanWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInput(ctx context.Context, v interface{}) (*ent.CodeScanWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCodeScanWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOComponent2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx context.Context, sel ast.SelectionSet, v []*ent.Component) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOComponent2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOComponent2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx context.Context, sel ast.SelectionSet, v *ent.Component) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Component(ctx, sel, v)
}

func (ec *executionContext) marshalOComponentEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ComponentEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOComponentEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOComponentEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ComponentEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComponentEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOComponentOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentOrder(ctx context.Context, v interface{}) (*ent.ComponentOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputComponentOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOComponentOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentOrderField(ctx context.Context, v interface{}) (*ent.ComponentOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.ComponentOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOComponentOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.ComponentOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ComponentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.ComponentWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInput(ctx context.Context, v interface{}) (*ent.ComponentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputComponentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx context.Context, v interface{}) (*ent.Cursor, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.Cursor)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx context.Context, sel ast.SelectionSet, v *ent.Cursor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOEventType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋeventᚐTypeᚄ(ctx context.Context, v interface{}) ([]event.Type, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]event.Type, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEventType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋeventᚐType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEventType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋeventᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []event.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEventType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋeventᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOEventType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋeventᚐType(ctx context.Context, v interface{}) (*event.Type, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(event.Type)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEventType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋeventᚐType(ctx context.Context, sel ast.SelectionSet, v *event.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOEventWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐEventWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.EventWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.EventWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEventWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐEventWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEventWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐEventWhereInput(ctx context.Context, v interface{}) (*ent.EventWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	return graphql.MarshalFloat(v)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) marshalOGitCommit2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommit(ctx context.Context, sel ast.SelectionSet, v []*ent.GitCommit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGitCommit2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOGitCommit2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommit(ctx context.Context, sel ast.SelectionSet, v *ent.GitCommit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GitCommit(ctx, sel, v)
}

func (ec *executionContext) marshalOGitCommitEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.GitCommitEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGitCommitEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOGitCommitEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitEdge(ctx context.Context, sel ast.SelectionSet, v *ent.GitCommitEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GitCommitEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOGitCommitOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitOrder(ctx context.Context, v interface{}) (*ent.GitCommitOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGitCommitOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGitCommitOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitOrderField(ctx context.Context, v interface{}) (*ent.GitCommitOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.GitCommitOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGitCommitOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.GitCommitOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOGitCommitWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.GitCommitWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.GitCommitWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGitCommitWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOGitCommitWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInput(ctx context.Context, v interface{}) (*ent.GitCommitWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGitCommitWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOID2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalIntID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalIntID(*v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) marshalOLicense2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicense(ctx context.Context, sel ast.SelectionSet, v []*ent.License) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLicense2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicense(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOLicense2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicense(ctx context.Context, sel ast.SelectionSet, v *ent.License) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._License(ctx, sel, v)
}

func (ec *executionContext) marshalOLicenseConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseConnection(ctx context.Context, sel ast.SelectionSet, v *ent.LicenseConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LicenseConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOLicenseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.LicenseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLicenseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOLicenseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseEdge(ctx context.Context, sel ast.SelectionSet, v *ent.LicenseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LicenseEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLicenseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseOrder(ctx context.Context, v interface{}) (*ent.LicenseOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLicenseOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLicenseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseOrderField(ctx context.Context, v interface{}) (*ent.LicenseOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.LicenseOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLicenseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.LicenseOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOLicenseUseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋgqlᚐLicenseUseWhereInputᚄ(ctx context.Context, v interface{}) ([]*LicenseUseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*LicenseUseWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLicenseUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋgqlᚐLicenseUseWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLicenseUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋgqlᚐLicenseUseWhereInput(ctx context.Context, v interface{}) (*LicenseUseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLicenseUseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.LicenseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.LicenseWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInput(ctx context.Context, v interface{}) (*ent.LicenseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLicenseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalMap(v)
}

func (ec *executionContext) unmarshalOOrganizationWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrganizationWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.OrganizationWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.OrganizationWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOrganizationWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrganizationWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOrganizationWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrganizationWhereInput(ctx context.Context, v interface{}) (*ent.OrganizationWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrganizationWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProject2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx context.Context, sel ast.SelectionSet, v []*ent.Project) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProject2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProject2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx context.Context, sel ast.SelectionSet, v *ent.Project) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Project(ctx, sel, v)
}

func (ec *executionContext) marshalOProjectConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectConnection(ctx context.Context, sel ast.SelectionSet, v *ent.ProjectConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOProjectEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ProjectEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProjectEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProjectEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ProjectEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProjectOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectOrder(ctx context.Context, v interface{}) (*ent.ProjectOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProjectOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectOrderField(ctx context.Context, v interface{}) (*ent.ProjectOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.ProjectOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProjectOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.ProjectOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOProjectWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ProjectWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.ProjectWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInput(ctx context.Context, v interface{}) (*ent.ProjectWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORelease2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx context.Context, sel ast.SelectionSet, v []*ent.Release) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx context.Context, sel ast.SelectionSet, v *ent.Release) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Release(ctx, sel, v)
}

func (ec *executionContext) marshalOReleaseComponent2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponent(ctx context.Context, sel ast.SelectionSet, v []*ent.ReleaseComponent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReleaseComponent2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReleaseComponent2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponent(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseComponent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleaseComponent(ctx, sel, v)
}

func (ec *executionContext) marshalOReleaseComponentEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ReleaseComponentEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReleaseComponentEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReleaseComponentEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseComponentEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleaseComponentEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOReleaseComponentType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasecomponentᚐType(ctx context.Context, v interface{}) (releasecomponent.Type, error) {
	var res releasecomponent.Type
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleaseComponentType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasecomponentᚐType(ctx context.Context, sel ast.SelectionSet, v releasecomponent.Type) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOReleaseComponentType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasecomponentᚐTypeᚄ(ctx context.Context, v interface{}) ([]releasecomponent.Type, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]releasecomponent.Type, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReleaseComponentType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasecomponentᚐType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOReleaseComponentType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasecomponentᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []releasecomponent.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReleaseComponentType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasecomponentᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOReleaseComponentType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasecomponentᚐType(ctx context.Context, v interface{}) (*releasecomponent.Type, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(releasecomponent.Type)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleaseComponentType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasecomponentᚐType(ctx context.Context, sel ast.SelectionSet, v *releasecomponent.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOReleaseComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ReleaseComponentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.ReleaseComponentWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReleaseComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOReleaseComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseComponentWhereInput(ctx context.Context, v interface{}) (*ent.ReleaseComponentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReleaseComponentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleaseConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseConnection(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleaseConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOReleaseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ReleaseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReleaseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReleaseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleaseEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOReleaseEntry2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntry(ctx context.Context, sel ast.SelectionSet, v []*ent.ReleaseEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReleaseEntry2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReleaseEntry2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntry(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleaseEntry(ctx, sel, v)
}

func (ec *executionContext) marshalOReleaseEntryEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ReleaseEntryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReleaseEntryEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReleaseEntryEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseEntryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleaseEntryEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOReleaseEntryOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryOrder(ctx context.Context, v interface{}) (*ent.ReleaseEntryOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReleaseEntryOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOReleaseEntryOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryOrderField(ctx context.Context, v interface{}) (*ent.ReleaseEntryOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.ReleaseEntryOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleaseEntryOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseEntryOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOReleaseEntryType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx context.Context, v interface{}) (releaseentry.Type, error) {
	var res releaseentry.Type
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleaseEntryType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx context.Context, sel ast.SelectionSet, v releaseentry.Type) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOReleaseEntryType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐTypeᚄ(ctx context.Context, v interface{}) ([]releaseentry.Type, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]releaseentry.Type, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReleaseEntryType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOReleaseEntryType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []releaseentry.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReleaseEntryType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOReleaseEntryType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx context.Context, v interface{}) (*releaseentry.Type, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(releaseentry.Type)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleaseEntryType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx context.Context, sel ast.SelectionSet, v *releaseentry.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOReleaseEntryWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ReleaseEntryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.ReleaseEntryWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReleaseEntryWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOReleaseEntryWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInput(ctx context.Context, v interface{}) (*ent.ReleaseEntryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReleaseEntryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleaseLicense2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicense(ctx context.Context, sel ast.SelectionSet, v []*ent.ReleaseLicense) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReleaseLicense2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicense(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReleaseLicense2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicense(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseLicense) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleaseLicense(ctx, sel, v)
}

func (ec *executionContext) marshalOReleaseLicenseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ReleaseLicenseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReleaseLicenseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReleaseLicenseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseLicenseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleaseLicenseEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOReleaseLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ReleaseLicenseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.ReleaseLicenseWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReleaseLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOReleaseLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseLicenseWhereInput(ctx context.Context, v interface{}) (*ent.ReleaseLicenseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReleaseLicenseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOReleaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrder(ctx context.Context, v interface{}) (*ent.ReleaseOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReleaseOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOReleaseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrderField(ctx context.Context, v interface{}) (*ent.ReleaseOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.ReleaseOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleaseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOReleasePolicy2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicy(ctx context.Context, sel ast.SelectionSet, v []*ent.ReleasePolicy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReleasePolicy2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReleasePolicy2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicy(ctx context.Context, sel ast.SelectionSet, v *ent.ReleasePolicy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleasePolicy(ctx, sel, v)
}

func (ec *executionContext) marshalOReleasePolicyEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ReleasePolicyEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReleasePolicyEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReleasePolicyEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ReleasePolicyEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleasePolicyEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOReleasePolicyOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyOrder(ctx context.Context, v interface{}) (*ent.ReleasePolicyOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReleasePolicyOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOReleasePolicyOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyOrderField(ctx context.Context, v interface{}) (*ent.ReleasePolicyOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.ReleasePolicyOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleasePolicyOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.ReleasePolicyOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOReleasePolicyViolation2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolation(ctx context.Context, sel ast.SelectionSet, v []*ent.ReleasePolicyViolation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReleasePolicyViolation2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReleasePolicyViolation2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolation(ctx context.Context, sel ast.SelectionSet, v *ent.ReleasePolicyViolation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleasePolicyViolation(ctx, sel, v)
}

func (ec *executionContext) marshalOReleasePolicyViolationEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolationEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ReleasePolicyViolationEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReleasePolicyViolationEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolationEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReleasePolicyViolationEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolationEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ReleasePolicyViolationEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleasePolicyViolationEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOReleasePolicyViolationSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐSeverity(ctx context.Context, v interface{}) (releasepolicyviolation.Severity, error) {
	var res releasepolicyviolation.Severity
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleasePolicyViolationSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐSeverity(ctx context.Context, sel ast.SelectionSet, v releasepolicyviolation.Severity) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOReleasePolicyViolationSeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐSeverityᚄ(ctx context.Context, v interface{}) ([]releasepolicyviolation.Severity, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]releasepolicyviolation.Severity, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReleasePolicyViolationSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐSeverity(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOReleasePolicyViolationSeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐSeverityᚄ(ctx context.Context, sel ast.SelectionSet, v []releasepolicyviolation.Severity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReleasePolicyViolationSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐSeverity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOReleasePolicyViolationSeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐSeverity(ctx context.Context, v interface{}) (*releasepolicyviolation.Severity, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(releasepolicyviolation.Severity)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleasePolicyViolationSeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐSeverity(ctx context.Context, sel ast.SelectionSet, v *releasepolicyviolation.Severity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOReleasePolicyViolationType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐType(ctx context.Context, v interface{}) (releasepolicyviolation.Type, error) {
	var res releasepolicyviolation.Type
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleasePolicyViolationType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐType(ctx context.Context, sel ast.SelectionSet, v releasepolicyviolation.Type) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOReleasePolicyViolationType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐTypeᚄ(ctx context.Context, v interface{}) ([]releasepolicyviolation.Type, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]releasepolicyviolation.Type, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReleasePolicyViolationType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOReleasePolicyViolationType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []releasepolicyviolation.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReleasePolicyViolationType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOReleasePolicyViolationType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐType(ctx context.Context, v interface{}) (*releasepolicyviolation.Type, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(releasepolicyviolation.Type)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleasePolicyViolationType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleasepolicyviolationᚐType(ctx context.Context, sel ast.SelectionSet, v *releasepolicyviolation.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOReleasePolicyViolationWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolationWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ReleasePolicyViolationWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.ReleasePolicyViolationWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReleasePolicyViolationWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolationWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOReleasePolicyViolationWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyViolationWhereInput(ctx context.Context, v interface{}) (*ent.ReleasePolicyViolationWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReleasePolicyViolationWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOReleasePolicyWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ReleasePolicyWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.ReleasePolicyWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReleasePolicyWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOReleasePolicyWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleasePolicyWhereInput(ctx context.Context, v interface{}) (*ent.ReleasePolicyWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReleasePolicyWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOReleaseStatus2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx context.Context, v interface{}) (release.Status, error) {
	var res release.Status
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleaseStatus2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx context.Context, sel ast.SelectionSet, v release.Status) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOReleaseStatus2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatusᚄ(ctx context.Context, v interface{}) ([]release.Status, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]release.Status, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReleaseStatus2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOReleaseStatus2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []release.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReleaseStatus2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOReleaseStatus2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx context.Context, v interface{}) (*release.Status, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(release.Status)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleaseStatus2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx context.Context, sel ast.SelectionSet, v *release.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOReleaseVulnerability2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerability(ctx context.Context, sel ast.SelectionSet, v []*ent.ReleaseVulnerability) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReleaseVulnerability2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerability(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReleaseVulnerability2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerability(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseVulnerability) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleaseVulnerability(ctx, sel, v)
}

func (ec *executionContext) marshalOReleaseVulnerabilityEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ReleaseVulnerabilityEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReleaseVulnerabilityEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReleaseVulnerabilityEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseVulnerabilityEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleaseVulnerabilityEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOReleaseVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ReleaseVulnerabilityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.ReleaseVulnerabilityWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReleaseVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOReleaseVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseVulnerabilityWhereInput(ctx context.Context, v interface{}) (*ent.ReleaseVulnerabilityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReleaseVulnerabilityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ReleaseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.ReleaseWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx context.Context, v interface{}) (*ent.ReleaseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReleaseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORepo2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx context.Context, sel ast.SelectionSet, v []*ent.Repo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORepo2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORepo2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx context.Context, sel ast.SelectionSet, v *ent.Repo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Repo(ctx, sel, v)
}

func (ec *executionContext) marshalORepoConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoConnection(ctx context.Context, sel ast.SelectionSet, v *ent.RepoConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RepoConnection(ctx, sel, v)
}

func (ec *executionContext) marshalORepoEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.RepoEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORepoEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORepoEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoEdge(ctx context.Context, sel ast.SelectionSet, v *ent.RepoEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RepoEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalORepoOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoOrder(ctx context.Context, v interface{}) (*ent.RepoOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRepoOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORepoOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoOrderField(ctx context.Context, v interface{}) (*ent.RepoOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.RepoOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORepoOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.RepoOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalORepoWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.RepoWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.RepoWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRepoWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORepoWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInput(ctx context.Context, v interface{}) (*ent.RepoWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRepoWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOTestCase2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCase(ctx context.Context, sel ast.SelectionSet, v []*ent.TestCase) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTestCase2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCase(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTestCase2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCase(ctx context.Context, sel ast.SelectionSet, v *ent.TestCase) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestCase(ctx, sel, v)
}

func (ec *executionContext) marshalOTestCaseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.TestCaseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTestCaseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTestCaseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseEdge(ctx context.Context, sel ast.SelectionSet, v *ent.TestCaseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestCaseEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTestCaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseOrder(ctx context.Context, v interface{}) (*ent.TestCaseOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestCaseOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTestCaseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseOrderField(ctx context.Context, v interface{}) (*ent.TestCaseOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.TestCaseOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestCaseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.TestCaseOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTestCaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.TestCaseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.TestCaseWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTestCaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTestCaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInput(ctx context.Context, v interface{}) (*ent.TestCaseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestCaseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestRun2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRun(ctx context.Context, sel ast.SelectionSet, v []*ent.TestRun) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTestRun2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRun(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTestRun2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRun(ctx context.Context, sel ast.SelectionSet, v *ent.TestRun) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestRun(ctx, sel, v)
}

func (ec *executionContext) marshalOTestRunEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.TestRunEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTestRunEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTestRunEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunEdge(ctx context.Context, sel ast.SelectionSet, v *ent.TestRunEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestRunEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTestRunOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunOrder(ctx context.Context, v interface{}) (*ent.TestRunOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestRunOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTestRunOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunOrderField(ctx context.Context, v interface{}) (*ent.TestRunOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.TestRunOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestRunOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.TestRunOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTestRunWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.TestRunWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.TestRunWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTestRunWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTestRunWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInput(ctx context.Context, v interface{}) (*ent.TestRunWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestRunWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	return graphql.MarshalTime(v)
}

func (ec *executionContext) unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTime2timeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTime2ᚕtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTime2timeᚐTime(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*v)
}

func (ec *executionContext) marshalOVulnerability2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerability(ctx context.Context, sel ast.SelectionSet, v []*ent.Vulnerability) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVulnerability2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerability(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOVulnerability2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerability(ctx context.Context, sel ast.SelectionSet, v *ent.Vulnerability) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Vulnerability(ctx, sel, v)
}

func (ec *executionContext) marshalOVulnerabilityEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.VulnerabilityEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVulnerabilityEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOVulnerabilityEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityEdge(ctx context.Context, sel ast.SelectionSet, v *ent.VulnerabilityEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VulnerabilityEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVulnerabilityOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityOrder(ctx context.Context, v interface{}) (*ent.VulnerabilityOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVulnerabilityOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVulnerabilityOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityOrderField(ctx context.Context, v interface{}) (*ent.VulnerabilityOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.VulnerabilityOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVulnerabilityOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.VulnerabilityOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOVulnerabilityReview2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReview(ctx context.Context, sel ast.SelectionSet, v []*ent.VulnerabilityReview) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVulnerabilityReview2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReview(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOVulnerabilityReview2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReview(ctx context.Context, sel ast.SelectionSet, v *ent.VulnerabilityReview) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VulnerabilityReview(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVulnerabilityReviewDecision2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityreviewᚐDecision(ctx context.Context, v interface{}) (vulnerabilityreview.Decision, error) {
	var res vulnerabilityreview.Decision
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVulnerabilityReviewDecision2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityreviewᚐDecision(ctx context.Context, sel ast.SelectionSet, v vulnerabilityreview.Decision) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOVulnerabilityReviewDecision2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityreviewᚐDecisionᚄ(ctx context.Context, v interface{}) ([]vulnerabilityreview.Decision, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]vulnerabilityreview.Decision, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVulnerabilityReviewDecision2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityreviewᚐDecision(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVulnerabilityReviewDecision2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityreviewᚐDecisionᚄ(ctx context.Context, sel ast.SelectionSet, v []vulnerabilityreview.Decision) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVulnerabilityReviewDecision2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityreviewᚐDecision(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOVulnerabilityReviewDecision2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityreviewᚐDecision(ctx context.Context, v interface{}) (*vulnerabilityreview.Decision, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(vulnerabilityreview.Decision)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVulnerabilityReviewDecision2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityreviewᚐDecision(ctx context.Context, sel ast.SelectionSet, v *vulnerabilityreview.Decision) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOVulnerabilityReviewEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.VulnerabilityReviewEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVulnerabilityReviewEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOVulnerabilityReviewEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewEdge(ctx context.Context, sel ast.SelectionSet, v *ent.VulnerabilityReviewEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VulnerabilityReviewEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVulnerabilityReviewOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewOrder(ctx context.Context, v interface{}) (*ent.VulnerabilityReviewOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVulnerabilityReviewOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVulnerabilityReviewOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewOrderField(ctx context.Context, v interface{}) (*ent.VulnerabilityReviewOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.VulnerabilityReviewOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVulnerabilityReviewOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.VulnerabilityReviewOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOVulnerabilityReviewWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.VulnerabilityReviewWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.VulnerabilityReviewWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVulnerabilityReviewWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVulnerabilityReviewWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityReviewWhereInput(ctx context.Context, v interface{}) (*ent.VulnerabilityReviewWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVulnerabilityReviewWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVulnerabilitySeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityᚐSeverity(ctx context.Context, v interface{}) (vulnerability.Severity, error) {
	var res vulnerability.Severity
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVulnerabilitySeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityᚐSeverity(ctx context.Context, sel ast.SelectionSet, v vulnerability.Severity) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOVulnerabilitySeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityᚐSeverityᚄ(ctx context.Context, v interface{}) ([]vulnerability.Severity, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]vulnerability.Severity, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVulnerabilitySeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityᚐSeverity(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVulnerabilitySeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityᚐSeverityᚄ(ctx context.Context, sel ast.SelectionSet, v []vulnerability.Severity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVulnerabilitySeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityᚐSeverity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOVulnerabilitySeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityᚐSeverity(ctx context.Context, v interface{}) (*vulnerability.Severity, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(vulnerability.Severity)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVulnerabilitySeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋvulnerabilityᚐSeverity(ctx context.Context, sel ast.SelectionSet, v *vulnerability.Severity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.VulnerabilityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.VulnerabilityWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInput(ctx context.Context, v interface{}) (*ent.VulnerabilityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVulnerabilityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
