// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/valocode/bubbly/ent"
	"github.com/valocode/bubbly/ent/artifact"
	"github.com/valocode/bubbly/ent/codeissue"
	"github.com/valocode/bubbly/ent/cve"
	"github.com/valocode/bubbly/ent/release"
	"github.com/valocode/bubbly/ent/releaseentry"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	CVE() CVEResolver
	CVERule() CVERuleResolver
	CWE() CWEResolver
	CodeIssue() CodeIssueResolver
	CodeScan() CodeScanResolver
	Component() ComponentResolver
	ComponentUse() ComponentUseResolver
	License() LicenseResolver
	Project() ProjectResolver
	Query() QueryResolver
	Release() ReleaseResolver
	Repo() RepoResolver
	TestRun() TestRunResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Artifact struct {
		Entry   func(childComplexity int) int
		ID      func(childComplexity int) int
		Name    func(childComplexity int) int
		Release func(childComplexity int) int
		Sha256  func(childComplexity int) int
		Type    func(childComplexity int) int
	}

	ArtifactConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ArtifactEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Cve struct {
		Components      func(childComplexity int, first *int, last *int, where *ent.ComponentWhereInput, orderBy *ent.ComponentOrder) int
		CveID           func(childComplexity int) int
		Description     func(childComplexity int) int
		ID              func(childComplexity int) int
		ModifiedData    func(childComplexity int) int
		PublishedData   func(childComplexity int) int
		Rules           func(childComplexity int, first *int, last *int, where *ent.CVERuleWhereInput, orderBy *ent.CVERuleOrder) int
		Severity        func(childComplexity int) int
		SeverityScore   func(childComplexity int) int
		Vulnerabilities func(childComplexity int, first *int, last *int, where *ent.VulnerabilityWhereInput) int
	}

	CVEConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CVEEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CVERule struct {
		Cve     func(childComplexity int) int
		ID      func(childComplexity int) int
		Name    func(childComplexity int) int
		Project func(childComplexity int, first *int, last *int, where *ent.ProjectWhereInput, orderBy *ent.ProjectOrder) int
		Repo    func(childComplexity int, first *int, last *int, where *ent.RepoWhereInput, orderBy *ent.RepoOrder) int
	}

	CVERuleConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CVERuleEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Cwe struct {
		CweID       func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Issues      func(childComplexity int, first *int, last *int, where *ent.CodeIssueWhereInput, orderBy *ent.CodeIssueOrder) int
		URL         func(childComplexity int) int
	}

	CWEConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CWEEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CodeIssue struct {
		Cwe      func(childComplexity int, first *int, last *int, where *ent.CWEWhereInput, orderBy *ent.CWEOrder) int
		ID       func(childComplexity int) int
		Message  func(childComplexity int) int
		RuleID   func(childComplexity int) int
		Scan     func(childComplexity int) int
		Severity func(childComplexity int) int
		Type     func(childComplexity int) int
	}

	CodeIssueConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CodeIssueEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CodeScan struct {
		Components func(childComplexity int, first *int, last *int, where *ent.ComponentUseWhereInput) int
		Entry      func(childComplexity int) int
		ID         func(childComplexity int) int
		Issues     func(childComplexity int, first *int, last *int, where *ent.CodeIssueWhereInput, orderBy *ent.CodeIssueOrder) int
		Release    func(childComplexity int) int
		Tool       func(childComplexity int) int
	}

	CodeScanConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CodeScanEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Component struct {
		Cves        func(childComplexity int, first *int, last *int, where *ent.CVEWhereInput, orderBy *ent.CVEOrder) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Licenses    func(childComplexity int, first *int, last *int, where *ent.LicenseWhereInput, orderBy *ent.LicenseOrder) int
		Name        func(childComplexity int) int
		URL         func(childComplexity int) int
		Uses        func(childComplexity int, first *int, last *int, where *ent.ComponentUseWhereInput) int
		Vendor      func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	ComponentConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ComponentEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ComponentUse struct {
		Component func(childComplexity int) int
		ID        func(childComplexity int) int
		Release   func(childComplexity int) int
		Scans     func(childComplexity int, first *int, last *int, where *ent.CodeScanWhereInput, orderBy *ent.CodeScanOrder) int
	}

	ComponentUseConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ComponentUseEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	GitCommit struct {
		Branch  func(childComplexity int) int
		Hash    func(childComplexity int) int
		ID      func(childComplexity int) int
		Release func(childComplexity int) int
		Repo    func(childComplexity int) int
		Tag     func(childComplexity int) int
		Time    func(childComplexity int) int
	}

	GitCommitConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	GitCommitEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	License struct {
		Components    func(childComplexity int, first *int, last *int, where *ent.ComponentWhereInput, orderBy *ent.ComponentOrder) int
		DetailsURL    func(childComplexity int) int
		ID            func(childComplexity int) int
		IsOsiApproved func(childComplexity int) int
		Name          func(childComplexity int) int
		Reference     func(childComplexity int) int
		SpdxID        func(childComplexity int) int
		Uses          func(childComplexity int, first *int, last *int, where *ent.LicenseUseWhereInput) int
	}

	LicenseConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	LicenseEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	LicenseUse struct {
		ID      func(childComplexity int) int
		License func(childComplexity int) int
	}

	LicenseUseConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	LicenseUseEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Project struct {
		CveRules func(childComplexity int, first *int, last *int, where *ent.CVERuleWhereInput, orderBy *ent.CVERuleOrder) int
		ID       func(childComplexity int) int
		Name     func(childComplexity int) int
		Releases func(childComplexity int, first *int, last *int, where *ent.ReleaseWhereInput, orderBy *ent.ReleaseOrder) int
		Repos    func(childComplexity int, first *int, last *int, where *ent.RepoWhereInput, orderBy *ent.RepoOrder) int
	}

	ProjectConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProjectEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Query struct {
		Artifact                func(childComplexity int, first *int, last *int, orderBy *ent.ArtifactOrder, where *ent.ArtifactWhereInput) int
		ArtifactConnection      func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.ArtifactOrder, where *ent.ArtifactWhereInput) int
		CodeIssue               func(childComplexity int, first *int, last *int, orderBy *ent.CodeIssueOrder, where *ent.CodeIssueWhereInput) int
		CodeIssueConnection     func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.CodeIssueOrder, where *ent.CodeIssueWhereInput) int
		CodeScan                func(childComplexity int, first *int, last *int, orderBy *ent.CodeScanOrder, where *ent.CodeScanWhereInput) int
		CodeScanConnection      func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.CodeScanOrder, where *ent.CodeScanWhereInput) int
		Commit                  func(childComplexity int, first *int, last *int, orderBy *ent.GitCommitOrder, where *ent.GitCommitWhereInput) int
		CommitConnection        func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.GitCommitOrder, where *ent.GitCommitWhereInput) int
		Component               func(childComplexity int, first *int, last *int, orderBy *ent.ComponentOrder, where *ent.ComponentWhereInput) int
		ComponentConnection     func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.ComponentOrder, where *ent.ComponentWhereInput) int
		ComponentUse            func(childComplexity int, first *int, last *int, where *ent.ComponentUseWhereInput) int
		ComponentUseConnection  func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, where *ent.ComponentUseWhereInput) int
		Cve                     func(childComplexity int, first *int, last *int, orderBy *ent.CVEOrder, where *ent.CVEWhereInput) int
		CveConnection           func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.CVEOrder, where *ent.CVEWhereInput) int
		CveRule                 func(childComplexity int, first *int, last *int, orderBy *ent.CVERuleOrder, where *ent.CVERuleWhereInput) int
		CveRuleConnection       func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.CVERuleOrder, where *ent.CVERuleWhereInput) int
		Cwe                     func(childComplexity int, first *int, last *int, orderBy *ent.CWEOrder, where *ent.CWEWhereInput) int
		CweConnection           func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.CWEOrder, where *ent.CWEWhereInput) int
		License                 func(childComplexity int, first *int, last *int, orderBy *ent.LicenseOrder, where *ent.LicenseWhereInput) int
		LicenseConnection       func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.LicenseOrder, where *ent.LicenseWhereInput) int
		LicenseUse              func(childComplexity int, first *int, last *int, where *ent.LicenseUseWhereInput) int
		LicenseUseConnection    func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, where *ent.LicenseUseWhereInput) int
		Project                 func(childComplexity int, first *int, last *int, orderBy *ent.ProjectOrder, where *ent.ProjectWhereInput) int
		ProjectConnection       func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.ProjectOrder, where *ent.ProjectWhereInput) int
		Release                 func(childComplexity int, first *int, last *int, orderBy *ent.ReleaseOrder, where *ent.ReleaseWhereInput) int
		ReleaseConnection       func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.ReleaseOrder, where *ent.ReleaseWhereInput) int
		ReleaseEntry            func(childComplexity int, first *int, last *int, orderBy *ent.ReleaseEntryOrder, where *ent.ReleaseEntryWhereInput) int
		ReleaseEntryConnection  func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.ReleaseEntryOrder, where *ent.ReleaseEntryWhereInput) int
		Repo                    func(childComplexity int, first *int, last *int, orderBy *ent.RepoOrder, where *ent.RepoWhereInput) int
		RepoConnection          func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.RepoOrder, where *ent.RepoWhereInput) int
		TestCase                func(childComplexity int, first *int, last *int, orderBy *ent.TestCaseOrder, where *ent.TestCaseWhereInput) int
		TestCaseConnection      func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.TestCaseOrder, where *ent.TestCaseWhereInput) int
		TestRun                 func(childComplexity int, first *int, last *int, orderBy *ent.TestRunOrder, where *ent.TestRunWhereInput) int
		TestRunConnection       func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.TestRunOrder, where *ent.TestRunWhereInput) int
		Vulnerability           func(childComplexity int, first *int, last *int, where *ent.VulnerabilityWhereInput) int
		VulnerabilityConnection func(childComplexity int, first *int, last *int, before *ent.Cursor, after *ent.Cursor, where *ent.VulnerabilityWhereInput) int
	}

	Release struct {
		Artifacts       func(childComplexity int, first *int, last *int, where *ent.ArtifactWhereInput, orderBy *ent.ArtifactOrder) int
		CodeScans       func(childComplexity int, first *int, last *int, where *ent.CodeScanWhereInput, orderBy *ent.CodeScanOrder) int
		Commit          func(childComplexity int) int
		Components      func(childComplexity int, first *int, last *int, where *ent.ComponentUseWhereInput) int
		Dependencies    func(childComplexity int, first *int, last *int, where *ent.ReleaseWhereInput, orderBy *ent.ReleaseOrder) int
		ID              func(childComplexity int) int
		Licenses        func(childComplexity int) int
		Log             func(childComplexity int, first *int, last *int, where *ent.ReleaseEntryWhereInput, orderBy *ent.ReleaseEntryOrder) int
		Name            func(childComplexity int) int
		Project         func(childComplexity int) int
		Status          func(childComplexity int) int
		Subreleases     func(childComplexity int, first *int, last *int, where *ent.ReleaseWhereInput, orderBy *ent.ReleaseOrder) int
		TestRuns        func(childComplexity int, first *int, last *int, where *ent.TestRunWhereInput, orderBy *ent.TestRunOrder) int
		Version         func(childComplexity int) int
		Vulnerabilities func(childComplexity int) int
	}

	ReleaseConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReleaseEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ReleaseEntry struct {
		Artifact func(childComplexity int) int
		CodeScan func(childComplexity int) int
		ID       func(childComplexity int) int
		Release  func(childComplexity int) int
		TestRun  func(childComplexity int) int
		Time     func(childComplexity int) int
		Type     func(childComplexity int) int
	}

	ReleaseEntryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReleaseEntryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Repo struct {
		Commits  func(childComplexity int, first *int, last *int, where *ent.GitCommitWhereInput, orderBy *ent.GitCommitOrder) int
		CveRules func(childComplexity int, first *int, last *int, where *ent.CVERuleWhereInput, orderBy *ent.CVERuleOrder) int
		ID       func(childComplexity int) int
		Name     func(childComplexity int) int
		Project  func(childComplexity int) int
	}

	RepoConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	RepoEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TestCase struct {
		Elapsed func(childComplexity int) int
		ID      func(childComplexity int) int
		Message func(childComplexity int) int
		Name    func(childComplexity int) int
		Result  func(childComplexity int) int
		Run     func(childComplexity int) int
	}

	TestCaseConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TestCaseEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TestRun struct {
		Entry   func(childComplexity int) int
		ID      func(childComplexity int) int
		Release func(childComplexity int) int
		Tests   func(childComplexity int, first *int, last *int, where *ent.TestCaseWhereInput, orderBy *ent.TestCaseOrder) int
		Tool    func(childComplexity int) int
	}

	TestRunConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TestRunEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Vulnerability struct {
		Cve func(childComplexity int) int
		ID  func(childComplexity int) int
	}

	VulnerabilityConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	VulnerabilityEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}
}

type CVEResolver interface {
	Components(ctx context.Context, obj *ent.CVE, first *int, last *int, where *ent.ComponentWhereInput, orderBy *ent.ComponentOrder) ([]*ent.Component, error)
	Vulnerabilities(ctx context.Context, obj *ent.CVE, first *int, last *int, where *ent.VulnerabilityWhereInput) ([]*ent.Vulnerability, error)
	Rules(ctx context.Context, obj *ent.CVE, first *int, last *int, where *ent.CVERuleWhereInput, orderBy *ent.CVERuleOrder) ([]*ent.CVERule, error)
}
type CVERuleResolver interface {
	Project(ctx context.Context, obj *ent.CVERule, first *int, last *int, where *ent.ProjectWhereInput, orderBy *ent.ProjectOrder) ([]*ent.Project, error)
	Repo(ctx context.Context, obj *ent.CVERule, first *int, last *int, where *ent.RepoWhereInput, orderBy *ent.RepoOrder) ([]*ent.Repo, error)
}
type CWEResolver interface {
	Issues(ctx context.Context, obj *ent.CWE, first *int, last *int, where *ent.CodeIssueWhereInput, orderBy *ent.CodeIssueOrder) ([]*ent.CodeIssue, error)
}
type CodeIssueResolver interface {
	Cwe(ctx context.Context, obj *ent.CodeIssue, first *int, last *int, where *ent.CWEWhereInput, orderBy *ent.CWEOrder) ([]*ent.CWE, error)
}
type CodeScanResolver interface {
	Issues(ctx context.Context, obj *ent.CodeScan, first *int, last *int, where *ent.CodeIssueWhereInput, orderBy *ent.CodeIssueOrder) ([]*ent.CodeIssue, error)
	Components(ctx context.Context, obj *ent.CodeScan, first *int, last *int, where *ent.ComponentUseWhereInput) ([]*ent.ComponentUse, error)
}
type ComponentResolver interface {
	Cves(ctx context.Context, obj *ent.Component, first *int, last *int, where *ent.CVEWhereInput, orderBy *ent.CVEOrder) ([]*ent.CVE, error)
	Licenses(ctx context.Context, obj *ent.Component, first *int, last *int, where *ent.LicenseWhereInput, orderBy *ent.LicenseOrder) ([]*ent.License, error)
	Uses(ctx context.Context, obj *ent.Component, first *int, last *int, where *ent.ComponentUseWhereInput) ([]*ent.ComponentUse, error)
}
type ComponentUseResolver interface {
	Scans(ctx context.Context, obj *ent.ComponentUse, first *int, last *int, where *ent.CodeScanWhereInput, orderBy *ent.CodeScanOrder) ([]*ent.CodeScan, error)
}
type LicenseResolver interface {
	Components(ctx context.Context, obj *ent.License, first *int, last *int, where *ent.ComponentWhereInput, orderBy *ent.ComponentOrder) ([]*ent.Component, error)
	Uses(ctx context.Context, obj *ent.License, first *int, last *int, where *ent.LicenseUseWhereInput) ([]*ent.LicenseUse, error)
}
type ProjectResolver interface {
	Repos(ctx context.Context, obj *ent.Project, first *int, last *int, where *ent.RepoWhereInput, orderBy *ent.RepoOrder) ([]*ent.Repo, error)
	Releases(ctx context.Context, obj *ent.Project, first *int, last *int, where *ent.ReleaseWhereInput, orderBy *ent.ReleaseOrder) ([]*ent.Release, error)
	CveRules(ctx context.Context, obj *ent.Project, first *int, last *int, where *ent.CVERuleWhereInput, orderBy *ent.CVERuleOrder) ([]*ent.CVERule, error)
}
type QueryResolver interface {
	CodeIssueConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.CodeIssueOrder, where *ent.CodeIssueWhereInput) (*ent.CodeIssueConnection, error)
	ComponentUse(ctx context.Context, first *int, last *int, where *ent.ComponentUseWhereInput) ([]*ent.ComponentUse, error)
	License(ctx context.Context, first *int, last *int, orderBy *ent.LicenseOrder, where *ent.LicenseWhereInput) ([]*ent.License, error)
	ArtifactConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.ArtifactOrder, where *ent.ArtifactWhereInput) (*ent.ArtifactConnection, error)
	Cwe(ctx context.Context, first *int, last *int, orderBy *ent.CWEOrder, where *ent.CWEWhereInput) ([]*ent.CWE, error)
	LicenseUseConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, where *ent.LicenseUseWhereInput) (*ent.LicenseUseConnection, error)
	ReleaseEntryConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.ReleaseEntryOrder, where *ent.ReleaseEntryWhereInput) (*ent.ReleaseEntryConnection, error)
	Repo(ctx context.Context, first *int, last *int, orderBy *ent.RepoOrder, where *ent.RepoWhereInput) ([]*ent.Repo, error)
	TestCase(ctx context.Context, first *int, last *int, orderBy *ent.TestCaseOrder, where *ent.TestCaseWhereInput) ([]*ent.TestCase, error)
	LicenseUse(ctx context.Context, first *int, last *int, where *ent.LicenseUseWhereInput) ([]*ent.LicenseUse, error)
	ReleaseEntry(ctx context.Context, first *int, last *int, orderBy *ent.ReleaseEntryOrder, where *ent.ReleaseEntryWhereInput) ([]*ent.ReleaseEntry, error)
	RepoConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.RepoOrder, where *ent.RepoWhereInput) (*ent.RepoConnection, error)
	Artifact(ctx context.Context, first *int, last *int, orderBy *ent.ArtifactOrder, where *ent.ArtifactWhereInput) ([]*ent.Artifact, error)
	CveConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.CVEOrder, where *ent.CVEWhereInput) (*ent.CVEConnection, error)
	Cve(ctx context.Context, first *int, last *int, orderBy *ent.CVEOrder, where *ent.CVEWhereInput) ([]*ent.CVE, error)
	CweConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.CWEOrder, where *ent.CWEWhereInput) (*ent.CWEConnection, error)
	Release(ctx context.Context, first *int, last *int, orderBy *ent.ReleaseOrder, where *ent.ReleaseWhereInput) ([]*ent.Release, error)
	LicenseConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.LicenseOrder, where *ent.LicenseWhereInput) (*ent.LicenseConnection, error)
	ProjectConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.ProjectOrder, where *ent.ProjectWhereInput) (*ent.ProjectConnection, error)
	TestCaseConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.TestCaseOrder, where *ent.TestCaseWhereInput) (*ent.TestCaseConnection, error)
	CveRule(ctx context.Context, first *int, last *int, orderBy *ent.CVERuleOrder, where *ent.CVERuleWhereInput) ([]*ent.CVERule, error)
	ComponentConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.ComponentOrder, where *ent.ComponentWhereInput) (*ent.ComponentConnection, error)
	Project(ctx context.Context, first *int, last *int, orderBy *ent.ProjectOrder, where *ent.ProjectWhereInput) ([]*ent.Project, error)
	TestRunConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.TestRunOrder, where *ent.TestRunWhereInput) (*ent.TestRunConnection, error)
	Vulnerability(ctx context.Context, first *int, last *int, where *ent.VulnerabilityWhereInput) ([]*ent.Vulnerability, error)
	CveRuleConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.CVERuleOrder, where *ent.CVERuleWhereInput) (*ent.CVERuleConnection, error)
	CodeScanConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.CodeScanOrder, where *ent.CodeScanWhereInput) (*ent.CodeScanConnection, error)
	CodeScan(ctx context.Context, first *int, last *int, orderBy *ent.CodeScanOrder, where *ent.CodeScanWhereInput) ([]*ent.CodeScan, error)
	Component(ctx context.Context, first *int, last *int, orderBy *ent.ComponentOrder, where *ent.ComponentWhereInput) ([]*ent.Component, error)
	VulnerabilityConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, where *ent.VulnerabilityWhereInput) (*ent.VulnerabilityConnection, error)
	CodeIssue(ctx context.Context, first *int, last *int, orderBy *ent.CodeIssueOrder, where *ent.CodeIssueWhereInput) ([]*ent.CodeIssue, error)
	ComponentUseConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, where *ent.ComponentUseWhereInput) (*ent.ComponentUseConnection, error)
	CommitConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.GitCommitOrder, where *ent.GitCommitWhereInput) (*ent.GitCommitConnection, error)
	Commit(ctx context.Context, first *int, last *int, orderBy *ent.GitCommitOrder, where *ent.GitCommitWhereInput) ([]*ent.GitCommit, error)
	ReleaseConnection(ctx context.Context, first *int, last *int, before *ent.Cursor, after *ent.Cursor, orderBy *ent.ReleaseOrder, where *ent.ReleaseWhereInput) (*ent.ReleaseConnection, error)
	TestRun(ctx context.Context, first *int, last *int, orderBy *ent.TestRunOrder, where *ent.TestRunWhereInput) ([]*ent.TestRun, error)
}
type ReleaseResolver interface {
	Subreleases(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.ReleaseWhereInput, orderBy *ent.ReleaseOrder) ([]*ent.Release, error)
	Dependencies(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.ReleaseWhereInput, orderBy *ent.ReleaseOrder) ([]*ent.Release, error)

	Log(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.ReleaseEntryWhereInput, orderBy *ent.ReleaseEntryOrder) ([]*ent.ReleaseEntry, error)
	Artifacts(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.ArtifactWhereInput, orderBy *ent.ArtifactOrder) ([]*ent.Artifact, error)
	Components(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.ComponentUseWhereInput) ([]*ent.ComponentUse, error)
	CodeScans(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.CodeScanWhereInput, orderBy *ent.CodeScanOrder) ([]*ent.CodeScan, error)
	TestRuns(ctx context.Context, obj *ent.Release, first *int, last *int, where *ent.TestRunWhereInput, orderBy *ent.TestRunOrder) ([]*ent.TestRun, error)
	Vulnerabilities(ctx context.Context, obj *ent.Release) ([]*ent.CVE, error)
	Licenses(ctx context.Context, obj *ent.Release) ([]*ent.License, error)
}
type RepoResolver interface {
	Commits(ctx context.Context, obj *ent.Repo, first *int, last *int, where *ent.GitCommitWhereInput, orderBy *ent.GitCommitOrder) ([]*ent.GitCommit, error)
	CveRules(ctx context.Context, obj *ent.Repo, first *int, last *int, where *ent.CVERuleWhereInput, orderBy *ent.CVERuleOrder) ([]*ent.CVERule, error)
}
type TestRunResolver interface {
	Tests(ctx context.Context, obj *ent.TestRun, first *int, last *int, where *ent.TestCaseWhereInput, orderBy *ent.TestCaseOrder) ([]*ent.TestCase, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Artifact.entry":
		if e.complexity.Artifact.Entry == nil {
			break
		}

		return e.complexity.Artifact.Entry(childComplexity), true

	case "Artifact.id":
		if e.complexity.Artifact.ID == nil {
			break
		}

		return e.complexity.Artifact.ID(childComplexity), true

	case "Artifact.name":
		if e.complexity.Artifact.Name == nil {
			break
		}

		return e.complexity.Artifact.Name(childComplexity), true

	case "Artifact.release":
		if e.complexity.Artifact.Release == nil {
			break
		}

		return e.complexity.Artifact.Release(childComplexity), true

	case "Artifact.sha256":
		if e.complexity.Artifact.Sha256 == nil {
			break
		}

		return e.complexity.Artifact.Sha256(childComplexity), true

	case "Artifact.type":
		if e.complexity.Artifact.Type == nil {
			break
		}

		return e.complexity.Artifact.Type(childComplexity), true

	case "ArtifactConnection.edges":
		if e.complexity.ArtifactConnection.Edges == nil {
			break
		}

		return e.complexity.ArtifactConnection.Edges(childComplexity), true

	case "ArtifactConnection.pageInfo":
		if e.complexity.ArtifactConnection.PageInfo == nil {
			break
		}

		return e.complexity.ArtifactConnection.PageInfo(childComplexity), true

	case "ArtifactConnection.totalCount":
		if e.complexity.ArtifactConnection.TotalCount == nil {
			break
		}

		return e.complexity.ArtifactConnection.TotalCount(childComplexity), true

	case "ArtifactEdge.cursor":
		if e.complexity.ArtifactEdge.Cursor == nil {
			break
		}

		return e.complexity.ArtifactEdge.Cursor(childComplexity), true

	case "ArtifactEdge.node":
		if e.complexity.ArtifactEdge.Node == nil {
			break
		}

		return e.complexity.ArtifactEdge.Node(childComplexity), true

	case "CVE.components":
		if e.complexity.Cve.Components == nil {
			break
		}

		args, err := ec.field_CVE_components_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Cve.Components(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ComponentWhereInput), args["order_by"].(*ent.ComponentOrder)), true

	case "CVE.cve_id":
		if e.complexity.Cve.CveID == nil {
			break
		}

		return e.complexity.Cve.CveID(childComplexity), true

	case "CVE.description":
		if e.complexity.Cve.Description == nil {
			break
		}

		return e.complexity.Cve.Description(childComplexity), true

	case "CVE.id":
		if e.complexity.Cve.ID == nil {
			break
		}

		return e.complexity.Cve.ID(childComplexity), true

	case "CVE.modified_data":
		if e.complexity.Cve.ModifiedData == nil {
			break
		}

		return e.complexity.Cve.ModifiedData(childComplexity), true

	case "CVE.published_data":
		if e.complexity.Cve.PublishedData == nil {
			break
		}

		return e.complexity.Cve.PublishedData(childComplexity), true

	case "CVE.rules":
		if e.complexity.Cve.Rules == nil {
			break
		}

		args, err := ec.field_CVE_rules_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Cve.Rules(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CVERuleWhereInput), args["order_by"].(*ent.CVERuleOrder)), true

	case "CVE.severity":
		if e.complexity.Cve.Severity == nil {
			break
		}

		return e.complexity.Cve.Severity(childComplexity), true

	case "CVE.severity_score":
		if e.complexity.Cve.SeverityScore == nil {
			break
		}

		return e.complexity.Cve.SeverityScore(childComplexity), true

	case "CVE.vulnerabilities":
		if e.complexity.Cve.Vulnerabilities == nil {
			break
		}

		args, err := ec.field_CVE_vulnerabilities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Cve.Vulnerabilities(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.VulnerabilityWhereInput)), true

	case "CVEConnection.edges":
		if e.complexity.CVEConnection.Edges == nil {
			break
		}

		return e.complexity.CVEConnection.Edges(childComplexity), true

	case "CVEConnection.pageInfo":
		if e.complexity.CVEConnection.PageInfo == nil {
			break
		}

		return e.complexity.CVEConnection.PageInfo(childComplexity), true

	case "CVEConnection.totalCount":
		if e.complexity.CVEConnection.TotalCount == nil {
			break
		}

		return e.complexity.CVEConnection.TotalCount(childComplexity), true

	case "CVEEdge.cursor":
		if e.complexity.CVEEdge.Cursor == nil {
			break
		}

		return e.complexity.CVEEdge.Cursor(childComplexity), true

	case "CVEEdge.node":
		if e.complexity.CVEEdge.Node == nil {
			break
		}

		return e.complexity.CVEEdge.Node(childComplexity), true

	case "CVERule.cve":
		if e.complexity.CVERule.Cve == nil {
			break
		}

		return e.complexity.CVERule.Cve(childComplexity), true

	case "CVERule.id":
		if e.complexity.CVERule.ID == nil {
			break
		}

		return e.complexity.CVERule.ID(childComplexity), true

	case "CVERule.name":
		if e.complexity.CVERule.Name == nil {
			break
		}

		return e.complexity.CVERule.Name(childComplexity), true

	case "CVERule.project":
		if e.complexity.CVERule.Project == nil {
			break
		}

		args, err := ec.field_CVERule_project_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CVERule.Project(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ProjectWhereInput), args["order_by"].(*ent.ProjectOrder)), true

	case "CVERule.repo":
		if e.complexity.CVERule.Repo == nil {
			break
		}

		args, err := ec.field_CVERule_repo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CVERule.Repo(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.RepoWhereInput), args["order_by"].(*ent.RepoOrder)), true

	case "CVERuleConnection.edges":
		if e.complexity.CVERuleConnection.Edges == nil {
			break
		}

		return e.complexity.CVERuleConnection.Edges(childComplexity), true

	case "CVERuleConnection.pageInfo":
		if e.complexity.CVERuleConnection.PageInfo == nil {
			break
		}

		return e.complexity.CVERuleConnection.PageInfo(childComplexity), true

	case "CVERuleConnection.totalCount":
		if e.complexity.CVERuleConnection.TotalCount == nil {
			break
		}

		return e.complexity.CVERuleConnection.TotalCount(childComplexity), true

	case "CVERuleEdge.cursor":
		if e.complexity.CVERuleEdge.Cursor == nil {
			break
		}

		return e.complexity.CVERuleEdge.Cursor(childComplexity), true

	case "CVERuleEdge.node":
		if e.complexity.CVERuleEdge.Node == nil {
			break
		}

		return e.complexity.CVERuleEdge.Node(childComplexity), true

	case "CWE.cwe_id":
		if e.complexity.Cwe.CweID == nil {
			break
		}

		return e.complexity.Cwe.CweID(childComplexity), true

	case "CWE.description":
		if e.complexity.Cwe.Description == nil {
			break
		}

		return e.complexity.Cwe.Description(childComplexity), true

	case "CWE.id":
		if e.complexity.Cwe.ID == nil {
			break
		}

		return e.complexity.Cwe.ID(childComplexity), true

	case "CWE.issues":
		if e.complexity.Cwe.Issues == nil {
			break
		}

		args, err := ec.field_CWE_issues_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Cwe.Issues(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CodeIssueWhereInput), args["order_by"].(*ent.CodeIssueOrder)), true

	case "CWE.url":
		if e.complexity.Cwe.URL == nil {
			break
		}

		return e.complexity.Cwe.URL(childComplexity), true

	case "CWEConnection.edges":
		if e.complexity.CWEConnection.Edges == nil {
			break
		}

		return e.complexity.CWEConnection.Edges(childComplexity), true

	case "CWEConnection.pageInfo":
		if e.complexity.CWEConnection.PageInfo == nil {
			break
		}

		return e.complexity.CWEConnection.PageInfo(childComplexity), true

	case "CWEConnection.totalCount":
		if e.complexity.CWEConnection.TotalCount == nil {
			break
		}

		return e.complexity.CWEConnection.TotalCount(childComplexity), true

	case "CWEEdge.cursor":
		if e.complexity.CWEEdge.Cursor == nil {
			break
		}

		return e.complexity.CWEEdge.Cursor(childComplexity), true

	case "CWEEdge.node":
		if e.complexity.CWEEdge.Node == nil {
			break
		}

		return e.complexity.CWEEdge.Node(childComplexity), true

	case "CodeIssue.cwe":
		if e.complexity.CodeIssue.Cwe == nil {
			break
		}

		args, err := ec.field_CodeIssue_cwe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CodeIssue.Cwe(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CWEWhereInput), args["order_by"].(*ent.CWEOrder)), true

	case "CodeIssue.id":
		if e.complexity.CodeIssue.ID == nil {
			break
		}

		return e.complexity.CodeIssue.ID(childComplexity), true

	case "CodeIssue.message":
		if e.complexity.CodeIssue.Message == nil {
			break
		}

		return e.complexity.CodeIssue.Message(childComplexity), true

	case "CodeIssue.rule_id":
		if e.complexity.CodeIssue.RuleID == nil {
			break
		}

		return e.complexity.CodeIssue.RuleID(childComplexity), true

	case "CodeIssue.scan":
		if e.complexity.CodeIssue.Scan == nil {
			break
		}

		return e.complexity.CodeIssue.Scan(childComplexity), true

	case "CodeIssue.severity":
		if e.complexity.CodeIssue.Severity == nil {
			break
		}

		return e.complexity.CodeIssue.Severity(childComplexity), true

	case "CodeIssue.type":
		if e.complexity.CodeIssue.Type == nil {
			break
		}

		return e.complexity.CodeIssue.Type(childComplexity), true

	case "CodeIssueConnection.edges":
		if e.complexity.CodeIssueConnection.Edges == nil {
			break
		}

		return e.complexity.CodeIssueConnection.Edges(childComplexity), true

	case "CodeIssueConnection.pageInfo":
		if e.complexity.CodeIssueConnection.PageInfo == nil {
			break
		}

		return e.complexity.CodeIssueConnection.PageInfo(childComplexity), true

	case "CodeIssueConnection.totalCount":
		if e.complexity.CodeIssueConnection.TotalCount == nil {
			break
		}

		return e.complexity.CodeIssueConnection.TotalCount(childComplexity), true

	case "CodeIssueEdge.cursor":
		if e.complexity.CodeIssueEdge.Cursor == nil {
			break
		}

		return e.complexity.CodeIssueEdge.Cursor(childComplexity), true

	case "CodeIssueEdge.node":
		if e.complexity.CodeIssueEdge.Node == nil {
			break
		}

		return e.complexity.CodeIssueEdge.Node(childComplexity), true

	case "CodeScan.components":
		if e.complexity.CodeScan.Components == nil {
			break
		}

		args, err := ec.field_CodeScan_components_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CodeScan.Components(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ComponentUseWhereInput)), true

	case "CodeScan.entry":
		if e.complexity.CodeScan.Entry == nil {
			break
		}

		return e.complexity.CodeScan.Entry(childComplexity), true

	case "CodeScan.id":
		if e.complexity.CodeScan.ID == nil {
			break
		}

		return e.complexity.CodeScan.ID(childComplexity), true

	case "CodeScan.issues":
		if e.complexity.CodeScan.Issues == nil {
			break
		}

		args, err := ec.field_CodeScan_issues_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CodeScan.Issues(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CodeIssueWhereInput), args["order_by"].(*ent.CodeIssueOrder)), true

	case "CodeScan.release":
		if e.complexity.CodeScan.Release == nil {
			break
		}

		return e.complexity.CodeScan.Release(childComplexity), true

	case "CodeScan.tool":
		if e.complexity.CodeScan.Tool == nil {
			break
		}

		return e.complexity.CodeScan.Tool(childComplexity), true

	case "CodeScanConnection.edges":
		if e.complexity.CodeScanConnection.Edges == nil {
			break
		}

		return e.complexity.CodeScanConnection.Edges(childComplexity), true

	case "CodeScanConnection.pageInfo":
		if e.complexity.CodeScanConnection.PageInfo == nil {
			break
		}

		return e.complexity.CodeScanConnection.PageInfo(childComplexity), true

	case "CodeScanConnection.totalCount":
		if e.complexity.CodeScanConnection.TotalCount == nil {
			break
		}

		return e.complexity.CodeScanConnection.TotalCount(childComplexity), true

	case "CodeScanEdge.cursor":
		if e.complexity.CodeScanEdge.Cursor == nil {
			break
		}

		return e.complexity.CodeScanEdge.Cursor(childComplexity), true

	case "CodeScanEdge.node":
		if e.complexity.CodeScanEdge.Node == nil {
			break
		}

		return e.complexity.CodeScanEdge.Node(childComplexity), true

	case "Component.cves":
		if e.complexity.Component.Cves == nil {
			break
		}

		args, err := ec.field_Component_cves_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Component.Cves(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CVEWhereInput), args["order_by"].(*ent.CVEOrder)), true

	case "Component.description":
		if e.complexity.Component.Description == nil {
			break
		}

		return e.complexity.Component.Description(childComplexity), true

	case "Component.id":
		if e.complexity.Component.ID == nil {
			break
		}

		return e.complexity.Component.ID(childComplexity), true

	case "Component.licenses":
		if e.complexity.Component.Licenses == nil {
			break
		}

		args, err := ec.field_Component_licenses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Component.Licenses(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.LicenseWhereInput), args["order_by"].(*ent.LicenseOrder)), true

	case "Component.name":
		if e.complexity.Component.Name == nil {
			break
		}

		return e.complexity.Component.Name(childComplexity), true

	case "Component.url":
		if e.complexity.Component.URL == nil {
			break
		}

		return e.complexity.Component.URL(childComplexity), true

	case "Component.uses":
		if e.complexity.Component.Uses == nil {
			break
		}

		args, err := ec.field_Component_uses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Component.Uses(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ComponentUseWhereInput)), true

	case "Component.vendor":
		if e.complexity.Component.Vendor == nil {
			break
		}

		return e.complexity.Component.Vendor(childComplexity), true

	case "Component.version":
		if e.complexity.Component.Version == nil {
			break
		}

		return e.complexity.Component.Version(childComplexity), true

	case "ComponentConnection.edges":
		if e.complexity.ComponentConnection.Edges == nil {
			break
		}

		return e.complexity.ComponentConnection.Edges(childComplexity), true

	case "ComponentConnection.pageInfo":
		if e.complexity.ComponentConnection.PageInfo == nil {
			break
		}

		return e.complexity.ComponentConnection.PageInfo(childComplexity), true

	case "ComponentConnection.totalCount":
		if e.complexity.ComponentConnection.TotalCount == nil {
			break
		}

		return e.complexity.ComponentConnection.TotalCount(childComplexity), true

	case "ComponentEdge.cursor":
		if e.complexity.ComponentEdge.Cursor == nil {
			break
		}

		return e.complexity.ComponentEdge.Cursor(childComplexity), true

	case "ComponentEdge.node":
		if e.complexity.ComponentEdge.Node == nil {
			break
		}

		return e.complexity.ComponentEdge.Node(childComplexity), true

	case "ComponentUse.component":
		if e.complexity.ComponentUse.Component == nil {
			break
		}

		return e.complexity.ComponentUse.Component(childComplexity), true

	case "ComponentUse.id":
		if e.complexity.ComponentUse.ID == nil {
			break
		}

		return e.complexity.ComponentUse.ID(childComplexity), true

	case "ComponentUse.release":
		if e.complexity.ComponentUse.Release == nil {
			break
		}

		return e.complexity.ComponentUse.Release(childComplexity), true

	case "ComponentUse.scans":
		if e.complexity.ComponentUse.Scans == nil {
			break
		}

		args, err := ec.field_ComponentUse_scans_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ComponentUse.Scans(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CodeScanWhereInput), args["order_by"].(*ent.CodeScanOrder)), true

	case "ComponentUseConnection.edges":
		if e.complexity.ComponentUseConnection.Edges == nil {
			break
		}

		return e.complexity.ComponentUseConnection.Edges(childComplexity), true

	case "ComponentUseConnection.pageInfo":
		if e.complexity.ComponentUseConnection.PageInfo == nil {
			break
		}

		return e.complexity.ComponentUseConnection.PageInfo(childComplexity), true

	case "ComponentUseConnection.totalCount":
		if e.complexity.ComponentUseConnection.TotalCount == nil {
			break
		}

		return e.complexity.ComponentUseConnection.TotalCount(childComplexity), true

	case "ComponentUseEdge.cursor":
		if e.complexity.ComponentUseEdge.Cursor == nil {
			break
		}

		return e.complexity.ComponentUseEdge.Cursor(childComplexity), true

	case "ComponentUseEdge.node":
		if e.complexity.ComponentUseEdge.Node == nil {
			break
		}

		return e.complexity.ComponentUseEdge.Node(childComplexity), true

	case "GitCommit.branch":
		if e.complexity.GitCommit.Branch == nil {
			break
		}

		return e.complexity.GitCommit.Branch(childComplexity), true

	case "GitCommit.hash":
		if e.complexity.GitCommit.Hash == nil {
			break
		}

		return e.complexity.GitCommit.Hash(childComplexity), true

	case "GitCommit.id":
		if e.complexity.GitCommit.ID == nil {
			break
		}

		return e.complexity.GitCommit.ID(childComplexity), true

	case "GitCommit.release":
		if e.complexity.GitCommit.Release == nil {
			break
		}

		return e.complexity.GitCommit.Release(childComplexity), true

	case "GitCommit.repo":
		if e.complexity.GitCommit.Repo == nil {
			break
		}

		return e.complexity.GitCommit.Repo(childComplexity), true

	case "GitCommit.tag":
		if e.complexity.GitCommit.Tag == nil {
			break
		}

		return e.complexity.GitCommit.Tag(childComplexity), true

	case "GitCommit.time":
		if e.complexity.GitCommit.Time == nil {
			break
		}

		return e.complexity.GitCommit.Time(childComplexity), true

	case "GitCommitConnection.edges":
		if e.complexity.GitCommitConnection.Edges == nil {
			break
		}

		return e.complexity.GitCommitConnection.Edges(childComplexity), true

	case "GitCommitConnection.pageInfo":
		if e.complexity.GitCommitConnection.PageInfo == nil {
			break
		}

		return e.complexity.GitCommitConnection.PageInfo(childComplexity), true

	case "GitCommitConnection.totalCount":
		if e.complexity.GitCommitConnection.TotalCount == nil {
			break
		}

		return e.complexity.GitCommitConnection.TotalCount(childComplexity), true

	case "GitCommitEdge.cursor":
		if e.complexity.GitCommitEdge.Cursor == nil {
			break
		}

		return e.complexity.GitCommitEdge.Cursor(childComplexity), true

	case "GitCommitEdge.node":
		if e.complexity.GitCommitEdge.Node == nil {
			break
		}

		return e.complexity.GitCommitEdge.Node(childComplexity), true

	case "License.components":
		if e.complexity.License.Components == nil {
			break
		}

		args, err := ec.field_License_components_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.License.Components(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ComponentWhereInput), args["order_by"].(*ent.ComponentOrder)), true

	case "License.details_url":
		if e.complexity.License.DetailsURL == nil {
			break
		}

		return e.complexity.License.DetailsURL(childComplexity), true

	case "License.id":
		if e.complexity.License.ID == nil {
			break
		}

		return e.complexity.License.ID(childComplexity), true

	case "License.is_osi_approved":
		if e.complexity.License.IsOsiApproved == nil {
			break
		}

		return e.complexity.License.IsOsiApproved(childComplexity), true

	case "License.name":
		if e.complexity.License.Name == nil {
			break
		}

		return e.complexity.License.Name(childComplexity), true

	case "License.reference":
		if e.complexity.License.Reference == nil {
			break
		}

		return e.complexity.License.Reference(childComplexity), true

	case "License.spdx_id":
		if e.complexity.License.SpdxID == nil {
			break
		}

		return e.complexity.License.SpdxID(childComplexity), true

	case "License.uses":
		if e.complexity.License.Uses == nil {
			break
		}

		args, err := ec.field_License_uses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.License.Uses(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.LicenseUseWhereInput)), true

	case "LicenseConnection.edges":
		if e.complexity.LicenseConnection.Edges == nil {
			break
		}

		return e.complexity.LicenseConnection.Edges(childComplexity), true

	case "LicenseConnection.pageInfo":
		if e.complexity.LicenseConnection.PageInfo == nil {
			break
		}

		return e.complexity.LicenseConnection.PageInfo(childComplexity), true

	case "LicenseConnection.totalCount":
		if e.complexity.LicenseConnection.TotalCount == nil {
			break
		}

		return e.complexity.LicenseConnection.TotalCount(childComplexity), true

	case "LicenseEdge.cursor":
		if e.complexity.LicenseEdge.Cursor == nil {
			break
		}

		return e.complexity.LicenseEdge.Cursor(childComplexity), true

	case "LicenseEdge.node":
		if e.complexity.LicenseEdge.Node == nil {
			break
		}

		return e.complexity.LicenseEdge.Node(childComplexity), true

	case "LicenseUse.id":
		if e.complexity.LicenseUse.ID == nil {
			break
		}

		return e.complexity.LicenseUse.ID(childComplexity), true

	case "LicenseUse.license":
		if e.complexity.LicenseUse.License == nil {
			break
		}

		return e.complexity.LicenseUse.License(childComplexity), true

	case "LicenseUseConnection.edges":
		if e.complexity.LicenseUseConnection.Edges == nil {
			break
		}

		return e.complexity.LicenseUseConnection.Edges(childComplexity), true

	case "LicenseUseConnection.pageInfo":
		if e.complexity.LicenseUseConnection.PageInfo == nil {
			break
		}

		return e.complexity.LicenseUseConnection.PageInfo(childComplexity), true

	case "LicenseUseConnection.totalCount":
		if e.complexity.LicenseUseConnection.TotalCount == nil {
			break
		}

		return e.complexity.LicenseUseConnection.TotalCount(childComplexity), true

	case "LicenseUseEdge.cursor":
		if e.complexity.LicenseUseEdge.Cursor == nil {
			break
		}

		return e.complexity.LicenseUseEdge.Cursor(childComplexity), true

	case "LicenseUseEdge.node":
		if e.complexity.LicenseUseEdge.Node == nil {
			break
		}

		return e.complexity.LicenseUseEdge.Node(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Project.cve_rules":
		if e.complexity.Project.CveRules == nil {
			break
		}

		args, err := ec.field_Project_cve_rules_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Project.CveRules(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CVERuleWhereInput), args["order_by"].(*ent.CVERuleOrder)), true

	case "Project.id":
		if e.complexity.Project.ID == nil {
			break
		}

		return e.complexity.Project.ID(childComplexity), true

	case "Project.name":
		if e.complexity.Project.Name == nil {
			break
		}

		return e.complexity.Project.Name(childComplexity), true

	case "Project.releases":
		if e.complexity.Project.Releases == nil {
			break
		}

		args, err := ec.field_Project_releases_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Project.Releases(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseWhereInput), args["order_by"].(*ent.ReleaseOrder)), true

	case "Project.repos":
		if e.complexity.Project.Repos == nil {
			break
		}

		args, err := ec.field_Project_repos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Project.Repos(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.RepoWhereInput), args["order_by"].(*ent.RepoOrder)), true

	case "ProjectConnection.edges":
		if e.complexity.ProjectConnection.Edges == nil {
			break
		}

		return e.complexity.ProjectConnection.Edges(childComplexity), true

	case "ProjectConnection.pageInfo":
		if e.complexity.ProjectConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProjectConnection.PageInfo(childComplexity), true

	case "ProjectConnection.totalCount":
		if e.complexity.ProjectConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProjectConnection.TotalCount(childComplexity), true

	case "ProjectEdge.cursor":
		if e.complexity.ProjectEdge.Cursor == nil {
			break
		}

		return e.complexity.ProjectEdge.Cursor(childComplexity), true

	case "ProjectEdge.node":
		if e.complexity.ProjectEdge.Node == nil {
			break
		}

		return e.complexity.ProjectEdge.Node(childComplexity), true

	case "Query.artifact":
		if e.complexity.Query.Artifact == nil {
			break
		}

		args, err := ec.field_Query_artifact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Artifact(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ArtifactOrder), args["where"].(*ent.ArtifactWhereInput)), true

	case "Query.artifact_connection":
		if e.complexity.Query.ArtifactConnection == nil {
			break
		}

		args, err := ec.field_Query_artifact_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ArtifactConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.ArtifactOrder), args["where"].(*ent.ArtifactWhereInput)), true

	case "Query.code_issue":
		if e.complexity.Query.CodeIssue == nil {
			break
		}

		args, err := ec.field_Query_code_issue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CodeIssue(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.CodeIssueOrder), args["where"].(*ent.CodeIssueWhereInput)), true

	case "Query.code_issue_connection":
		if e.complexity.Query.CodeIssueConnection == nil {
			break
		}

		args, err := ec.field_Query_code_issue_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CodeIssueConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.CodeIssueOrder), args["where"].(*ent.CodeIssueWhereInput)), true

	case "Query.code_scan":
		if e.complexity.Query.CodeScan == nil {
			break
		}

		args, err := ec.field_Query_code_scan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CodeScan(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.CodeScanOrder), args["where"].(*ent.CodeScanWhereInput)), true

	case "Query.code_scan_connection":
		if e.complexity.Query.CodeScanConnection == nil {
			break
		}

		args, err := ec.field_Query_code_scan_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CodeScanConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.CodeScanOrder), args["where"].(*ent.CodeScanWhereInput)), true

	case "Query.commit":
		if e.complexity.Query.Commit == nil {
			break
		}

		args, err := ec.field_Query_commit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Commit(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.GitCommitOrder), args["where"].(*ent.GitCommitWhereInput)), true

	case "Query.commit_connection":
		if e.complexity.Query.CommitConnection == nil {
			break
		}

		args, err := ec.field_Query_commit_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommitConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.GitCommitOrder), args["where"].(*ent.GitCommitWhereInput)), true

	case "Query.component":
		if e.complexity.Query.Component == nil {
			break
		}

		args, err := ec.field_Query_component_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Component(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ComponentOrder), args["where"].(*ent.ComponentWhereInput)), true

	case "Query.component_connection":
		if e.complexity.Query.ComponentConnection == nil {
			break
		}

		args, err := ec.field_Query_component_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ComponentConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.ComponentOrder), args["where"].(*ent.ComponentWhereInput)), true

	case "Query.component_use":
		if e.complexity.Query.ComponentUse == nil {
			break
		}

		args, err := ec.field_Query_component_use_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ComponentUse(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ComponentUseWhereInput)), true

	case "Query.component_use_connection":
		if e.complexity.Query.ComponentUseConnection == nil {
			break
		}

		args, err := ec.field_Query_component_use_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ComponentUseConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["where"].(*ent.ComponentUseWhereInput)), true

	case "Query.cve":
		if e.complexity.Query.Cve == nil {
			break
		}

		args, err := ec.field_Query_cve_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Cve(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.CVEOrder), args["where"].(*ent.CVEWhereInput)), true

	case "Query.cve_connection":
		if e.complexity.Query.CveConnection == nil {
			break
		}

		args, err := ec.field_Query_cve_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CveConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.CVEOrder), args["where"].(*ent.CVEWhereInput)), true

	case "Query.cve_rule":
		if e.complexity.Query.CveRule == nil {
			break
		}

		args, err := ec.field_Query_cve_rule_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CveRule(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.CVERuleOrder), args["where"].(*ent.CVERuleWhereInput)), true

	case "Query.cve_rule_connection":
		if e.complexity.Query.CveRuleConnection == nil {
			break
		}

		args, err := ec.field_Query_cve_rule_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CveRuleConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.CVERuleOrder), args["where"].(*ent.CVERuleWhereInput)), true

	case "Query.cwe":
		if e.complexity.Query.Cwe == nil {
			break
		}

		args, err := ec.field_Query_cwe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Cwe(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.CWEOrder), args["where"].(*ent.CWEWhereInput)), true

	case "Query.cwe_connection":
		if e.complexity.Query.CweConnection == nil {
			break
		}

		args, err := ec.field_Query_cwe_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CweConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.CWEOrder), args["where"].(*ent.CWEWhereInput)), true

	case "Query.license":
		if e.complexity.Query.License == nil {
			break
		}

		args, err := ec.field_Query_license_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.License(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.LicenseOrder), args["where"].(*ent.LicenseWhereInput)), true

	case "Query.license_connection":
		if e.complexity.Query.LicenseConnection == nil {
			break
		}

		args, err := ec.field_Query_license_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LicenseConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.LicenseOrder), args["where"].(*ent.LicenseWhereInput)), true

	case "Query.license_use":
		if e.complexity.Query.LicenseUse == nil {
			break
		}

		args, err := ec.field_Query_license_use_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LicenseUse(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.LicenseUseWhereInput)), true

	case "Query.license_use_connection":
		if e.complexity.Query.LicenseUseConnection == nil {
			break
		}

		args, err := ec.field_Query_license_use_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LicenseUseConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["where"].(*ent.LicenseUseWhereInput)), true

	case "Query.project":
		if e.complexity.Query.Project == nil {
			break
		}

		args, err := ec.field_Query_project_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Project(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ProjectOrder), args["where"].(*ent.ProjectWhereInput)), true

	case "Query.project_connection":
		if e.complexity.Query.ProjectConnection == nil {
			break
		}

		args, err := ec.field_Query_project_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.ProjectOrder), args["where"].(*ent.ProjectWhereInput)), true

	case "Query.release":
		if e.complexity.Query.Release == nil {
			break
		}

		args, err := ec.field_Query_release_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Release(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ReleaseOrder), args["where"].(*ent.ReleaseWhereInput)), true

	case "Query.release_connection":
		if e.complexity.Query.ReleaseConnection == nil {
			break
		}

		args, err := ec.field_Query_release_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ReleaseConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.ReleaseOrder), args["where"].(*ent.ReleaseWhereInput)), true

	case "Query.release_entry":
		if e.complexity.Query.ReleaseEntry == nil {
			break
		}

		args, err := ec.field_Query_release_entry_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ReleaseEntry(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ReleaseEntryOrder), args["where"].(*ent.ReleaseEntryWhereInput)), true

	case "Query.release_entry_connection":
		if e.complexity.Query.ReleaseEntryConnection == nil {
			break
		}

		args, err := ec.field_Query_release_entry_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ReleaseEntryConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.ReleaseEntryOrder), args["where"].(*ent.ReleaseEntryWhereInput)), true

	case "Query.repo":
		if e.complexity.Query.Repo == nil {
			break
		}

		args, err := ec.field_Query_repo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Repo(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.RepoOrder), args["where"].(*ent.RepoWhereInput)), true

	case "Query.repo_connection":
		if e.complexity.Query.RepoConnection == nil {
			break
		}

		args, err := ec.field_Query_repo_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RepoConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.RepoOrder), args["where"].(*ent.RepoWhereInput)), true

	case "Query.test_case":
		if e.complexity.Query.TestCase == nil {
			break
		}

		args, err := ec.field_Query_test_case_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TestCase(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.TestCaseOrder), args["where"].(*ent.TestCaseWhereInput)), true

	case "Query.test_case_connection":
		if e.complexity.Query.TestCaseConnection == nil {
			break
		}

		args, err := ec.field_Query_test_case_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TestCaseConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.TestCaseOrder), args["where"].(*ent.TestCaseWhereInput)), true

	case "Query.test_run":
		if e.complexity.Query.TestRun == nil {
			break
		}

		args, err := ec.field_Query_test_run_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TestRun(childComplexity, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.TestRunOrder), args["where"].(*ent.TestRunWhereInput)), true

	case "Query.test_run_connection":
		if e.complexity.Query.TestRunConnection == nil {
			break
		}

		args, err := ec.field_Query_test_run_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TestRunConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.TestRunOrder), args["where"].(*ent.TestRunWhereInput)), true

	case "Query.vulnerability":
		if e.complexity.Query.Vulnerability == nil {
			break
		}

		args, err := ec.field_Query_vulnerability_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Vulnerability(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.VulnerabilityWhereInput)), true

	case "Query.vulnerability_connection":
		if e.complexity.Query.VulnerabilityConnection == nil {
			break
		}

		args, err := ec.field_Query_vulnerability_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VulnerabilityConnection(childComplexity, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["where"].(*ent.VulnerabilityWhereInput)), true

	case "Release.artifacts":
		if e.complexity.Release.Artifacts == nil {
			break
		}

		args, err := ec.field_Release_artifacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.Artifacts(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ArtifactWhereInput), args["order_by"].(*ent.ArtifactOrder)), true

	case "Release.code_scans":
		if e.complexity.Release.CodeScans == nil {
			break
		}

		args, err := ec.field_Release_code_scans_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.CodeScans(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CodeScanWhereInput), args["order_by"].(*ent.CodeScanOrder)), true

	case "Release.commit":
		if e.complexity.Release.Commit == nil {
			break
		}

		return e.complexity.Release.Commit(childComplexity), true

	case "Release.components":
		if e.complexity.Release.Components == nil {
			break
		}

		args, err := ec.field_Release_components_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.Components(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ComponentUseWhereInput)), true

	case "Release.dependencies":
		if e.complexity.Release.Dependencies == nil {
			break
		}

		args, err := ec.field_Release_dependencies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.Dependencies(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseWhereInput), args["order_by"].(*ent.ReleaseOrder)), true

	case "Release.id":
		if e.complexity.Release.ID == nil {
			break
		}

		return e.complexity.Release.ID(childComplexity), true

	case "Release.licenses":
		if e.complexity.Release.Licenses == nil {
			break
		}

		return e.complexity.Release.Licenses(childComplexity), true

	case "Release.log":
		if e.complexity.Release.Log == nil {
			break
		}

		args, err := ec.field_Release_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.Log(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseEntryWhereInput), args["order_by"].(*ent.ReleaseEntryOrder)), true

	case "Release.name":
		if e.complexity.Release.Name == nil {
			break
		}

		return e.complexity.Release.Name(childComplexity), true

	case "Release.project":
		if e.complexity.Release.Project == nil {
			break
		}

		return e.complexity.Release.Project(childComplexity), true

	case "Release.status":
		if e.complexity.Release.Status == nil {
			break
		}

		return e.complexity.Release.Status(childComplexity), true

	case "Release.subreleases":
		if e.complexity.Release.Subreleases == nil {
			break
		}

		args, err := ec.field_Release_subreleases_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.Subreleases(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseWhereInput), args["order_by"].(*ent.ReleaseOrder)), true

	case "Release.test_runs":
		if e.complexity.Release.TestRuns == nil {
			break
		}

		args, err := ec.field_Release_test_runs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Release.TestRuns(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.TestRunWhereInput), args["order_by"].(*ent.TestRunOrder)), true

	case "Release.version":
		if e.complexity.Release.Version == nil {
			break
		}

		return e.complexity.Release.Version(childComplexity), true

	case "Release.vulnerabilities":
		if e.complexity.Release.Vulnerabilities == nil {
			break
		}

		return e.complexity.Release.Vulnerabilities(childComplexity), true

	case "ReleaseConnection.edges":
		if e.complexity.ReleaseConnection.Edges == nil {
			break
		}

		return e.complexity.ReleaseConnection.Edges(childComplexity), true

	case "ReleaseConnection.pageInfo":
		if e.complexity.ReleaseConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReleaseConnection.PageInfo(childComplexity), true

	case "ReleaseConnection.totalCount":
		if e.complexity.ReleaseConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReleaseConnection.TotalCount(childComplexity), true

	case "ReleaseEdge.cursor":
		if e.complexity.ReleaseEdge.Cursor == nil {
			break
		}

		return e.complexity.ReleaseEdge.Cursor(childComplexity), true

	case "ReleaseEdge.node":
		if e.complexity.ReleaseEdge.Node == nil {
			break
		}

		return e.complexity.ReleaseEdge.Node(childComplexity), true

	case "ReleaseEntry.artifact":
		if e.complexity.ReleaseEntry.Artifact == nil {
			break
		}

		return e.complexity.ReleaseEntry.Artifact(childComplexity), true

	case "ReleaseEntry.code_scan":
		if e.complexity.ReleaseEntry.CodeScan == nil {
			break
		}

		return e.complexity.ReleaseEntry.CodeScan(childComplexity), true

	case "ReleaseEntry.id":
		if e.complexity.ReleaseEntry.ID == nil {
			break
		}

		return e.complexity.ReleaseEntry.ID(childComplexity), true

	case "ReleaseEntry.release":
		if e.complexity.ReleaseEntry.Release == nil {
			break
		}

		return e.complexity.ReleaseEntry.Release(childComplexity), true

	case "ReleaseEntry.test_run":
		if e.complexity.ReleaseEntry.TestRun == nil {
			break
		}

		return e.complexity.ReleaseEntry.TestRun(childComplexity), true

	case "ReleaseEntry.time":
		if e.complexity.ReleaseEntry.Time == nil {
			break
		}

		return e.complexity.ReleaseEntry.Time(childComplexity), true

	case "ReleaseEntry.type":
		if e.complexity.ReleaseEntry.Type == nil {
			break
		}

		return e.complexity.ReleaseEntry.Type(childComplexity), true

	case "ReleaseEntryConnection.edges":
		if e.complexity.ReleaseEntryConnection.Edges == nil {
			break
		}

		return e.complexity.ReleaseEntryConnection.Edges(childComplexity), true

	case "ReleaseEntryConnection.pageInfo":
		if e.complexity.ReleaseEntryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReleaseEntryConnection.PageInfo(childComplexity), true

	case "ReleaseEntryConnection.totalCount":
		if e.complexity.ReleaseEntryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReleaseEntryConnection.TotalCount(childComplexity), true

	case "ReleaseEntryEdge.cursor":
		if e.complexity.ReleaseEntryEdge.Cursor == nil {
			break
		}

		return e.complexity.ReleaseEntryEdge.Cursor(childComplexity), true

	case "ReleaseEntryEdge.node":
		if e.complexity.ReleaseEntryEdge.Node == nil {
			break
		}

		return e.complexity.ReleaseEntryEdge.Node(childComplexity), true

	case "Repo.commits":
		if e.complexity.Repo.Commits == nil {
			break
		}

		args, err := ec.field_Repo_commits_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Repo.Commits(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.GitCommitWhereInput), args["order_by"].(*ent.GitCommitOrder)), true

	case "Repo.cve_rules":
		if e.complexity.Repo.CveRules == nil {
			break
		}

		args, err := ec.field_Repo_cve_rules_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Repo.CveRules(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CVERuleWhereInput), args["order_by"].(*ent.CVERuleOrder)), true

	case "Repo.id":
		if e.complexity.Repo.ID == nil {
			break
		}

		return e.complexity.Repo.ID(childComplexity), true

	case "Repo.name":
		if e.complexity.Repo.Name == nil {
			break
		}

		return e.complexity.Repo.Name(childComplexity), true

	case "Repo.project":
		if e.complexity.Repo.Project == nil {
			break
		}

		return e.complexity.Repo.Project(childComplexity), true

	case "RepoConnection.edges":
		if e.complexity.RepoConnection.Edges == nil {
			break
		}

		return e.complexity.RepoConnection.Edges(childComplexity), true

	case "RepoConnection.pageInfo":
		if e.complexity.RepoConnection.PageInfo == nil {
			break
		}

		return e.complexity.RepoConnection.PageInfo(childComplexity), true

	case "RepoConnection.totalCount":
		if e.complexity.RepoConnection.TotalCount == nil {
			break
		}

		return e.complexity.RepoConnection.TotalCount(childComplexity), true

	case "RepoEdge.cursor":
		if e.complexity.RepoEdge.Cursor == nil {
			break
		}

		return e.complexity.RepoEdge.Cursor(childComplexity), true

	case "RepoEdge.node":
		if e.complexity.RepoEdge.Node == nil {
			break
		}

		return e.complexity.RepoEdge.Node(childComplexity), true

	case "TestCase.elapsed":
		if e.complexity.TestCase.Elapsed == nil {
			break
		}

		return e.complexity.TestCase.Elapsed(childComplexity), true

	case "TestCase.id":
		if e.complexity.TestCase.ID == nil {
			break
		}

		return e.complexity.TestCase.ID(childComplexity), true

	case "TestCase.message":
		if e.complexity.TestCase.Message == nil {
			break
		}

		return e.complexity.TestCase.Message(childComplexity), true

	case "TestCase.name":
		if e.complexity.TestCase.Name == nil {
			break
		}

		return e.complexity.TestCase.Name(childComplexity), true

	case "TestCase.result":
		if e.complexity.TestCase.Result == nil {
			break
		}

		return e.complexity.TestCase.Result(childComplexity), true

	case "TestCase.run":
		if e.complexity.TestCase.Run == nil {
			break
		}

		return e.complexity.TestCase.Run(childComplexity), true

	case "TestCaseConnection.edges":
		if e.complexity.TestCaseConnection.Edges == nil {
			break
		}

		return e.complexity.TestCaseConnection.Edges(childComplexity), true

	case "TestCaseConnection.pageInfo":
		if e.complexity.TestCaseConnection.PageInfo == nil {
			break
		}

		return e.complexity.TestCaseConnection.PageInfo(childComplexity), true

	case "TestCaseConnection.totalCount":
		if e.complexity.TestCaseConnection.TotalCount == nil {
			break
		}

		return e.complexity.TestCaseConnection.TotalCount(childComplexity), true

	case "TestCaseEdge.cursor":
		if e.complexity.TestCaseEdge.Cursor == nil {
			break
		}

		return e.complexity.TestCaseEdge.Cursor(childComplexity), true

	case "TestCaseEdge.node":
		if e.complexity.TestCaseEdge.Node == nil {
			break
		}

		return e.complexity.TestCaseEdge.Node(childComplexity), true

	case "TestRun.entry":
		if e.complexity.TestRun.Entry == nil {
			break
		}

		return e.complexity.TestRun.Entry(childComplexity), true

	case "TestRun.id":
		if e.complexity.TestRun.ID == nil {
			break
		}

		return e.complexity.TestRun.ID(childComplexity), true

	case "TestRun.release":
		if e.complexity.TestRun.Release == nil {
			break
		}

		return e.complexity.TestRun.Release(childComplexity), true

	case "TestRun.tests":
		if e.complexity.TestRun.Tests == nil {
			break
		}

		args, err := ec.field_TestRun_tests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TestRun.Tests(childComplexity, args["first"].(*int), args["last"].(*int), args["where"].(*ent.TestCaseWhereInput), args["order_by"].(*ent.TestCaseOrder)), true

	case "TestRun.tool":
		if e.complexity.TestRun.Tool == nil {
			break
		}

		return e.complexity.TestRun.Tool(childComplexity), true

	case "TestRunConnection.edges":
		if e.complexity.TestRunConnection.Edges == nil {
			break
		}

		return e.complexity.TestRunConnection.Edges(childComplexity), true

	case "TestRunConnection.pageInfo":
		if e.complexity.TestRunConnection.PageInfo == nil {
			break
		}

		return e.complexity.TestRunConnection.PageInfo(childComplexity), true

	case "TestRunConnection.totalCount":
		if e.complexity.TestRunConnection.TotalCount == nil {
			break
		}

		return e.complexity.TestRunConnection.TotalCount(childComplexity), true

	case "TestRunEdge.cursor":
		if e.complexity.TestRunEdge.Cursor == nil {
			break
		}

		return e.complexity.TestRunEdge.Cursor(childComplexity), true

	case "TestRunEdge.node":
		if e.complexity.TestRunEdge.Node == nil {
			break
		}

		return e.complexity.TestRunEdge.Node(childComplexity), true

	case "Vulnerability.cve":
		if e.complexity.Vulnerability.Cve == nil {
			break
		}

		return e.complexity.Vulnerability.Cve(childComplexity), true

	case "Vulnerability.id":
		if e.complexity.Vulnerability.ID == nil {
			break
		}

		return e.complexity.Vulnerability.ID(childComplexity), true

	case "VulnerabilityConnection.edges":
		if e.complexity.VulnerabilityConnection.Edges == nil {
			break
		}

		return e.complexity.VulnerabilityConnection.Edges(childComplexity), true

	case "VulnerabilityConnection.pageInfo":
		if e.complexity.VulnerabilityConnection.PageInfo == nil {
			break
		}

		return e.complexity.VulnerabilityConnection.PageInfo(childComplexity), true

	case "VulnerabilityConnection.totalCount":
		if e.complexity.VulnerabilityConnection.TotalCount == nil {
			break
		}

		return e.complexity.VulnerabilityConnection.TotalCount(childComplexity), true

	case "VulnerabilityEdge.cursor":
		if e.complexity.VulnerabilityEdge.Cursor == nil {
			break
		}

		return e.complexity.VulnerabilityEdge.Cursor(childComplexity), true

	case "VulnerabilityEdge.node":
		if e.complexity.VulnerabilityEdge.Node == nil {
			break
		}

		return e.complexity.VulnerabilityEdge.Node(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "schema.graphql", Input: `directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

"""
Release represents the node Release in the ent schema.
Generated by ent.
"""
type Release implements Node {
  id: ID!
  name: String
  version: String
  status: ReleaseStatus
  subreleases(first: Int, last: Int, where: ReleaseWhereInput, order_by: ReleaseOrder): [Release] @goField(forceResolver: true)
  dependencies(first: Int, last: Int, where: ReleaseWhereInput, order_by: ReleaseOrder): [Release] @goField(forceResolver: true)
  project: Project!
  commit: GitCommit!
  log(first: Int, last: Int, where: ReleaseEntryWhereInput, order_by: ReleaseEntryOrder): [ReleaseEntry] @goField(forceResolver: true)
  artifacts(first: Int, last: Int, where: ArtifactWhereInput, order_by: ArtifactOrder): [Artifact] @goField(forceResolver: true)
  components(first: Int, last: Int, where: ComponentUseWhereInput): [ComponentUse] @goField(forceResolver: true)
  code_scans(first: Int, last: Int, where: CodeScanWhereInput, order_by: CodeScanOrder): [CodeScan] @goField(forceResolver: true)
  test_runs(first: Int, last: Int, where: TestRunWhereInput, order_by: TestRunOrder): [TestRun] @goField(forceResolver: true)
  # Custom fields
  vulnerabilities: [CVE]
  licenses: [License]
}


"""Query generated by ent."""
type Query {
  code_issue_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: CodeIssueOrder, where: CodeIssueWhereInput): CodeIssueConnection
  component_use(first: Int, last: Int, where: ComponentUseWhereInput): [ComponentUse]
  license(first: Int, last: Int, order_by: LicenseOrder, where: LicenseWhereInput): [License]
  artifact_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ArtifactOrder, where: ArtifactWhereInput): ArtifactConnection
  cwe(first: Int, last: Int, order_by: CWEOrder, where: CWEWhereInput): [CWE]
  license_use_connection(first: Int, last: Int, before: Cursor, after: Cursor, where: LicenseUseWhereInput): LicenseUseConnection
  release_entry_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ReleaseEntryOrder, where: ReleaseEntryWhereInput): ReleaseEntryConnection
  repo(first: Int, last: Int, order_by: RepoOrder, where: RepoWhereInput): [Repo]
  test_case(first: Int, last: Int, order_by: TestCaseOrder, where: TestCaseWhereInput): [TestCase]
  license_use(first: Int, last: Int, where: LicenseUseWhereInput): [LicenseUse]
  release_entry(first: Int, last: Int, order_by: ReleaseEntryOrder, where: ReleaseEntryWhereInput): [ReleaseEntry]
  repo_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: RepoOrder, where: RepoWhereInput): RepoConnection
  artifact(first: Int, last: Int, order_by: ArtifactOrder, where: ArtifactWhereInput): [Artifact]
  cve_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: CVEOrder, where: CVEWhereInput): CVEConnection
  cve(first: Int, last: Int, order_by: CVEOrder, where: CVEWhereInput): [CVE]
  cwe_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: CWEOrder, where: CWEWhereInput): CWEConnection
  release(first: Int, last: Int, order_by: ReleaseOrder, where: ReleaseWhereInput): [Release]
  license_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: LicenseOrder, where: LicenseWhereInput): LicenseConnection
  project_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ProjectOrder, where: ProjectWhereInput): ProjectConnection
  test_case_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: TestCaseOrder, where: TestCaseWhereInput): TestCaseConnection
  cve_rule(first: Int, last: Int, order_by: CVERuleOrder, where: CVERuleWhereInput): [CVERule]
  component_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ComponentOrder, where: ComponentWhereInput): ComponentConnection
  project(first: Int, last: Int, order_by: ProjectOrder, where: ProjectWhereInput): [Project]
  test_run_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: TestRunOrder, where: TestRunWhereInput): TestRunConnection
  vulnerability(first: Int, last: Int, where: VulnerabilityWhereInput): [Vulnerability]
  cve_rule_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: CVERuleOrder, where: CVERuleWhereInput): CVERuleConnection
  code_scan_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: CodeScanOrder, where: CodeScanWhereInput): CodeScanConnection
  code_scan(first: Int, last: Int, order_by: CodeScanOrder, where: CodeScanWhereInput): [CodeScan]
  component(first: Int, last: Int, order_by: ComponentOrder, where: ComponentWhereInput): [Component]
  vulnerability_connection(first: Int, last: Int, before: Cursor, after: Cursor, where: VulnerabilityWhereInput): VulnerabilityConnection
  code_issue(first: Int, last: Int, order_by: CodeIssueOrder, where: CodeIssueWhereInput): [CodeIssue]
  component_use_connection(first: Int, last: Int, before: Cursor, after: Cursor, where: ComponentUseWhereInput): ComponentUseConnection
  commit_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: GitCommitOrder, where: GitCommitWhereInput): GitCommitConnection
  commit(first: Int, last: Int, order_by: GitCommitOrder, where: GitCommitWhereInput): [GitCommit]
  release_connection(first: Int, last: Int, before: Cursor, after: Cursor, order_by: ReleaseOrder, where: ReleaseWhereInput): ReleaseConnection
  test_run(first: Int, last: Int, order_by: TestRunOrder, where: TestRunWhereInput): [TestRun]
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
Generated by ent.
"""
scalar Cursor

"""
Maps a Time GraphQL scalar to a Go time.Time struct.
Generated by ent.
"""
scalar Time

interface Node {
  id: ID!
}

enum CVERuleOrderField {
  name
}

enum CodeIssueSeverity {
  low
  medium
  high
}

enum CodeIssueType {
  style
  security
  bug
}

enum RepoOrderField {
  name
}

enum TestCaseOrderField {
  name
}

enum ArtifactType {
  docker
  file
}

enum ArtifactOrderField {
  name
  sha256
  type
}

enum CVESeverity {
  None
  Low
  Medium
  High
  Critical
}

enum ReleaseEntryType {
  artifact
  deploy
  code_scan
  test_run
}

enum ReleaseEntryOrderField {
  type
  time
}

enum OrderDirection {
  ASC
  DESC
}

enum CWEOrderField {
  cwe_id
  description
}

enum GitCommitOrderField {
  hash
  branch
  tag
  time
}

enum ReleaseStatus {
  pending
  ready
  blocked
}

enum CodeScanOrderField {
  tool
}

enum ComponentOrderField {
  name
  vendor
  version
}

enum TestRunOrderField {
  tool
}

enum ProjectOrderField {
  name
}

enum ReleaseOrderField {
  name
  version
}

enum CVEOrderField {
  cve_id
  description
  severity_score
  severity
  published_data
  modified_data
}

enum CodeIssueOrderField {
  rule_id
  severity
  type
}

enum LicenseOrderField {
  spdx_id
  name
}

"""
Artifact represents the node Artifact in the ent schema.
Generated by ent.
"""
type Artifact implements Node {
  id: ID!
  name: String
  sha256: String
  type: ArtifactType
  release: Release
  entry: ReleaseEntry
}

"""
LicenseUseConnection supports the relay connection specification for node LicenseUse in the ent schema.
Generated by ent.
"""
type LicenseUseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [LicenseUseEdge]
}

"""
RepoConnection supports the relay edge specification for node Repo in the ent schema.
Generated by ent.
"""
type RepoEdge {
  node: Repo
  cursor: Cursor!
}

"""
CodeScanConnection supports the relay connection specification for node CodeScan in the ent schema.
Generated by ent.
"""
type CodeScanConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CodeScanEdge]
}

"""
ComponentConnection supports the relay edge specification for node Component in the ent schema.
Generated by ent.
"""
type ComponentEdge {
  node: Component
  cursor: Cursor!
}

"""
TestRun represents the node TestRun in the ent schema.
Generated by ent.
"""
type TestRun implements Node {
  id: ID!
  tool: String
  release: Release!
  entry: ReleaseEntry
  tests(first: Int, last: Int, where: TestCaseWhereInput, order_by: TestCaseOrder): [TestCase] @goField(forceResolver: true)
}

"""
LicenseUseConnection supports the relay edge specification for node LicenseUse in the ent schema.
Generated by ent.
"""
type LicenseUseEdge {
  node: LicenseUse
  cursor: Cursor!
}

"""
Project represents the node Project in the ent schema.
Generated by ent.
"""
type Project implements Node {
  id: ID!
  name: String
  repos(first: Int, last: Int, where: RepoWhereInput, order_by: RepoOrder): [Repo] @goField(forceResolver: true)
  releases(first: Int, last: Int, where: ReleaseWhereInput, order_by: ReleaseOrder): [Release] @goField(forceResolver: true)
  cve_rules(first: Int, last: Int, where: CVERuleWhereInput, order_by: CVERuleOrder): [CVERule] @goField(forceResolver: true)
}

"""
ReleaseConnection supports the relay edge specification for node Release in the ent schema.
Generated by ent.
"""
type ReleaseEdge {
  node: Release
  cursor: Cursor!
}

"""
ReleaseEntryConnection supports the relay edge specification for node ReleaseEntry in the ent schema.
Generated by ent.
"""
type ReleaseEntryEdge {
  node: ReleaseEntry
  cursor: Cursor!
}

"""
CVERule represents the node CVERule in the ent schema.
Generated by ent.
"""
type CVERule implements Node {
  id: ID!
  name: String
  cve: CVE!
  project(first: Int, last: Int, where: ProjectWhereInput, order_by: ProjectOrder): [Project] @goField(forceResolver: true)
  repo(first: Int, last: Int, where: RepoWhereInput, order_by: RepoOrder): [Repo] @goField(forceResolver: true)
}

"""
CVEConnection supports the relay edge specification for node CVE in the ent schema.
Generated by ent.
"""
type CVEEdge {
  node: CVE
  cursor: Cursor!
}

"""
GitCommit represents the node GitCommit in the ent schema.
Generated by ent.
"""
type GitCommit implements Node {
  id: ID!
  hash: String
  branch: String
  tag: String
  time: Time
  repo: Repo!
  release: Release
}

"""
GitCommitConnection supports the relay edge specification for node GitCommit in the ent schema.
Generated by ent.
"""
type GitCommitEdge {
  node: GitCommit
  cursor: Cursor!
}

"""
CWEConnection supports the relay edge specification for node CWE in the ent schema.
Generated by ent.
"""
type CWEEdge {
  node: CWE
  cursor: Cursor!
}

"""
Component represents the node Component in the ent schema.
Generated by ent.
"""
type Component implements Node {
  id: ID!
  name: String
  vendor: String
  version: String
  description: String
  url: String
  cves(first: Int, last: Int, where: CVEWhereInput, order_by: CVEOrder): [CVE] @goField(forceResolver: true)
  licenses(first: Int, last: Int, where: LicenseWhereInput, order_by: LicenseOrder): [License] @goField(forceResolver: true)
  uses(first: Int, last: Int, where: ComponentUseWhereInput): [ComponentUse] @goField(forceResolver: true)
}

"""
GitCommitConnection supports the relay connection specification for node GitCommit in the ent schema.
Generated by ent.
"""
type GitCommitConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [GitCommitEdge]
}

"""
ArtifactConnection supports the relay edge specification for node Artifact in the ent schema.
Generated by ent.
"""
type ArtifactEdge {
  node: Artifact
  cursor: Cursor!
}

"""
CodeIssue represents the node CodeIssue in the ent schema.
Generated by ent.
"""
type CodeIssue implements Node {
  id: ID!
  rule_id: String
  message: String
  severity: CodeIssueSeverity
  type: CodeIssueType
  cwe(first: Int, last: Int, where: CWEWhereInput, order_by: CWEOrder): [CWE] @goField(forceResolver: true)
  scan: CodeScan!
}

"""
ProjectConnection supports the relay connection specification for node Project in the ent schema.
Generated by ent.
"""
type ProjectConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ProjectEdge]
}

"""
Repo represents the node Repo in the ent schema.
Generated by ent.
"""
type Repo implements Node {
  id: ID!
  name: String
  project: Project
  commits(first: Int, last: Int, where: GitCommitWhereInput, order_by: GitCommitOrder): [GitCommit] @goField(forceResolver: true)
  cve_rules(first: Int, last: Int, where: CVERuleWhereInput, order_by: CVERuleOrder): [CVERule] @goField(forceResolver: true)
}

"""
TestRunConnection supports the relay connection specification for node TestRun in the ent schema.
Generated by ent.
"""
type TestRunConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TestRunEdge]
}

"""
CWEConnection supports the relay connection specification for node CWE in the ent schema.
Generated by ent.
"""
type CWEConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CWEEdge]
}

"""
CodeIssueConnection supports the relay edge specification for node CodeIssue in the ent schema.
Generated by ent.
"""
type CodeIssueEdge {
  node: CodeIssue
  cursor: Cursor!
}

"""
TestRunConnection supports the relay edge specification for node TestRun in the ent schema.
Generated by ent.
"""
type TestRunEdge {
  node: TestRun
  cursor: Cursor!
}

"""
LicenseConnection supports the relay edge specification for node License in the ent schema.
Generated by ent.
"""
type LicenseEdge {
  node: License
  cursor: Cursor!
}

"""
ProjectConnection supports the relay edge specification for node Project in the ent schema.
Generated by ent.
"""
type ProjectEdge {
  node: Project
  cursor: Cursor!
}

"""
CVE represents the node CVE in the ent schema.
Generated by ent.
"""
type CVE implements Node {
  id: ID!
  cve_id: String
  description: String
  severity_score: Float
  severity: CVESeverity
  published_data: Time
  modified_data: Time
  components(first: Int, last: Int, where: ComponentWhereInput, order_by: ComponentOrder): [Component] @goField(forceResolver: true)
  vulnerabilities(first: Int, last: Int, where: VulnerabilityWhereInput): [Vulnerability] @goField(forceResolver: true)
  rules(first: Int, last: Int, where: CVERuleWhereInput, order_by: CVERuleOrder): [CVERule] @goField(forceResolver: true)
}

"""
CVERuleConnection supports the relay connection specification for node CVERule in the ent schema.
Generated by ent.
"""
type CVERuleConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CVERuleEdge]
}

"""
CodeIssueConnection supports the relay connection specification for node CodeIssue in the ent schema.
Generated by ent.
"""
type CodeIssueConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CodeIssueEdge]
}

"""
ComponentUseConnection supports the relay edge specification for node ComponentUse in the ent schema.
Generated by ent.
"""
type ComponentUseEdge {
  node: ComponentUse
  cursor: Cursor!
}

"""
VulnerabilityConnection supports the relay connection specification for node Vulnerability in the ent schema.
Generated by ent.
"""
type VulnerabilityConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [VulnerabilityEdge]
}

"""
RepoConnection supports the relay connection specification for node Repo in the ent schema.
Generated by ent.
"""
type RepoConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [RepoEdge]
}

"""
CVERuleConnection supports the relay edge specification for node CVERule in the ent schema.
Generated by ent.
"""
type CVERuleEdge {
  node: CVERule
  cursor: Cursor!
}

"""
ComponentUse represents the node ComponentUse in the ent schema.
Generated by ent.
"""
type ComponentUse implements Node {
  id: ID!
  release: Release!
  scans(first: Int, last: Int, where: CodeScanWhereInput, order_by: CodeScanOrder): [CodeScan!] @goField(forceResolver: true)
  component: Component!
}

"""
License represents the node License in the ent schema.
Generated by ent.
"""
type License implements Node {
  id: ID!
  spdx_id: String
  name: String
  reference: String
  details_url: String
  is_osi_approved: Boolean
  components(first: Int, last: Int, where: ComponentWhereInput, order_by: ComponentOrder): [Component] @goField(forceResolver: true)
  uses(first: Int, last: Int, where: LicenseUseWhereInput): [LicenseUse] @goField(forceResolver: true)
}

"""
ComponentConnection supports the relay connection specification for node Component in the ent schema.
Generated by ent.
"""
type ComponentConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ComponentEdge]
}

"""
TestCaseConnection supports the relay connection specification for node TestCase in the ent schema.
Generated by ent.
"""
type TestCaseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TestCaseEdge]
}

"""
ArtifactConnection supports the relay connection specification for node Artifact in the ent schema.
Generated by ent.
"""
type ArtifactConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ArtifactEdge]
}

"""
CVEConnection supports the relay connection specification for node CVE in the ent schema.
Generated by ent.
"""
type CVEConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CVEEdge]
}

"""
CWE represents the node CWE in the ent schema.
Generated by ent.
"""
type CWE implements Node {
  id: ID!
  cwe_id: String
  description: String
  url: Float
  issues(first: Int, last: Int, where: CodeIssueWhereInput, order_by: CodeIssueOrder): [CodeIssue] @goField(forceResolver: true)
}

"""
CodeScanConnection supports the relay edge specification for node CodeScan in the ent schema.
Generated by ent.
"""
type CodeScanEdge {
  node: CodeScan
  cursor: Cursor!
}

"""
LicenseUse represents the node LicenseUse in the ent schema.
Generated by ent.
"""
type LicenseUse implements Node {
  id: ID!
  license: License!
}

"""
ReleaseEntry represents the node ReleaseEntry in the ent schema.
Generated by ent.
"""
type ReleaseEntry implements Node {
  id: ID!
  type: ReleaseEntryType
  time: Time
  artifact: Artifact
  code_scan: CodeScan
  test_run: TestRun
  release: Release!
}

"""
CodeScan represents the node CodeScan in the ent schema.
Generated by ent.
"""
type CodeScan implements Node {
  id: ID!
  tool: String
  release: Release!
  entry: ReleaseEntry
  issues(first: Int, last: Int, where: CodeIssueWhereInput, order_by: CodeIssueOrder): [CodeIssue] @goField(forceResolver: true)
  components(first: Int, last: Int, where: ComponentUseWhereInput): [ComponentUse] @goField(forceResolver: true)
}

"""
ComponentUseConnection supports the relay connection specification for node ComponentUse in the ent schema.
Generated by ent.
"""
type ComponentUseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ComponentUseEdge]
}

"""
LicenseConnection supports the relay connection specification for node License in the ent schema.
Generated by ent.
"""
type LicenseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [LicenseEdge]
}

"""
ReleaseConnection supports the relay connection specification for node Release in the ent schema.
Generated by ent.
"""
type ReleaseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseEdge]
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

"""
ReleaseEntryConnection supports the relay connection specification for node ReleaseEntry in the ent schema.
Generated by ent.
"""
type ReleaseEntryConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReleaseEntryEdge]
}

"""
TestCaseConnection supports the relay edge specification for node TestCase in the ent schema.
Generated by ent.
"""
type TestCaseEdge {
  node: TestCase
  cursor: Cursor!
}

"""
TestCase represents the node TestCase in the ent schema.
Generated by ent.
"""
type TestCase implements Node {
  id: ID!
  name: String
  result: Boolean
  message: String
  elapsed: Float
  run: TestRun!
}

"""
Vulnerability represents the node Vulnerability in the ent schema.
Generated by ent.
"""
type Vulnerability implements Node {
  id: ID!
  cve: CVE!
}

"""
VulnerabilityConnection supports the relay edge specification for node Vulnerability in the ent schema.
Generated by ent.
"""
type VulnerabilityEdge {
  node: Vulnerability
  cursor: Cursor!
}

"""
LicenseWhereInput is used for filtering License objects.
Input was generated by ent.
"""
input LicenseWhereInput {
  not: LicenseWhereInput
  and: [LicenseWhereInput!]
  or: [LicenseWhereInput!]
  
  """spdx_id field predicates"""
  spdx_id: String
  spdx_id_neq: String
  spdx_id_in: [String!]
  spdx_id_not_in: [String!]
  spdx_id_gt: String
  spdx_id_gte: String
  spdx_id_lt: String
  spdx_id_lte: String
  spdx_id_contains: String
  spdx_id_has_prefix: String
  spdx_id_has_suffix: String
  spdx_id_equal_fold: String
  spdx_id_contains_fold: String
  
  """name field predicates"""
  name: String
  name_neq: String
  name_in: [String!]
  name_not_in: [String!]
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_contains: String
  name_has_prefix: String
  name_has_suffix: String
  name_equal_fold: String
  name_contains_fold: String
  
  """reference field predicates"""
  reference: String
  reference_neq: String
  reference_in: [String!]
  reference_not_in: [String!]
  reference_gt: String
  reference_gte: String
  reference_lt: String
  reference_lte: String
  reference_contains: String
  reference_has_prefix: String
  reference_has_suffix: String
  reference_is_nil: Boolean
  reference_not_nil: Boolean
  reference_equal_fold: String
  reference_contains_fold: String
  
  """details_url field predicates"""
  details_url: String
  details_url_neq: String
  details_url_in: [String!]
  details_url_not_in: [String!]
  details_url_gt: String
  details_url_gte: String
  details_url_lt: String
  details_url_lte: String
  details_url_contains: String
  details_url_has_prefix: String
  details_url_has_suffix: String
  details_url_is_nil: Boolean
  details_url_not_nil: Boolean
  details_url_equal_fold: String
  details_url_contains_fold: String
  
  """is_osi_approved field predicates"""
  is_osi_approved: Boolean
  is_osi_approved_neq: Boolean
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """components edge predicates"""
  has_components: Boolean
  has_components_with: [ComponentWhereInput!]
  
  """uses edge predicates"""
  has_uses: Boolean
  has_uses_with: [LicenseUseWhereInput!]
}

input ReleaseEntryOrder {
  direction: OrderDirection!
  field: ReleaseEntryOrderField
}

"""
RepoWhereInput is used for filtering Repo objects.
Input was generated by ent.
"""
input RepoWhereInput {
  not: RepoWhereInput
  and: [RepoWhereInput!]
  or: [RepoWhereInput!]
  
  """name field predicates"""
  name: String
  name_neq: String
  name_in: [String!]
  name_not_in: [String!]
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_contains: String
  name_has_prefix: String
  name_has_suffix: String
  name_equal_fold: String
  name_contains_fold: String
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """project edge predicates"""
  has_project: Boolean
  has_project_with: [ProjectWhereInput!]
  
  """commits edge predicates"""
  has_commits: Boolean
  has_commits_with: [GitCommitWhereInput!]
  
  """cve_rules edge predicates"""
  has_cve_rules: Boolean
  has_cve_rules_with: [CVERuleWhereInput!]
}

input TestCaseOrder {
  direction: OrderDirection!
  field: TestCaseOrderField
}

input CVERuleOrder {
  direction: OrderDirection!
  field: CVERuleOrderField
}

"""
CVEWhereInput is used for filtering CVE objects.
Input was generated by ent.
"""
input CVEWhereInput {
  not: CVEWhereInput
  and: [CVEWhereInput!]
  or: [CVEWhereInput!]
  
  """cve_id field predicates"""
  cve_id: String
  cve_id_neq: String
  cve_id_in: [String!]
  cve_id_not_in: [String!]
  cve_id_gt: String
  cve_id_gte: String
  cve_id_lt: String
  cve_id_lte: String
  cve_id_contains: String
  cve_id_has_prefix: String
  cve_id_has_suffix: String
  cve_id_equal_fold: String
  cve_id_contains_fold: String
  
  """description field predicates"""
  description: String
  description_neq: String
  description_in: [String!]
  description_not_in: [String!]
  description_gt: String
  description_gte: String
  description_lt: String
  description_lte: String
  description_contains: String
  description_has_prefix: String
  description_has_suffix: String
  description_is_nil: Boolean
  description_not_nil: Boolean
  description_equal_fold: String
  description_contains_fold: String
  
  """severity_score field predicates"""
  severity_score: Float
  severity_score_neq: Float
  severity_score_in: [Float!]
  severity_score_not_in: [Float!]
  severity_score_gt: Float
  severity_score_gte: Float
  severity_score_lt: Float
  severity_score_lte: Float
  
  """severity field predicates"""
  severity: CVESeverity
  severity_neq: CVESeverity
  severity_in: [CVESeverity!]
  severity_not_in: [CVESeverity!]
  
  """published_data field predicates"""
  published_data: Time
  published_data_neq: Time
  published_data_in: [Time!]
  published_data_not_in: [Time!]
  published_data_gt: Time
  published_data_gte: Time
  published_data_lt: Time
  published_data_lte: Time
  published_data_is_nil: Boolean
  published_data_not_nil: Boolean
  
  """modified_data field predicates"""
  modified_data: Time
  modified_data_neq: Time
  modified_data_in: [Time!]
  modified_data_not_in: [Time!]
  modified_data_gt: Time
  modified_data_gte: Time
  modified_data_lt: Time
  modified_data_lte: Time
  modified_data_is_nil: Boolean
  modified_data_not_nil: Boolean
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """components edge predicates"""
  has_components: Boolean
  has_components_with: [ComponentWhereInput!]
  
  """vulnerabilities edge predicates"""
  has_vulnerabilities: Boolean
  has_vulnerabilities_with: [VulnerabilityWhereInput!]
  
  """rules edge predicates"""
  has_rules: Boolean
  has_rules_with: [CVERuleWhereInput!]
}

input CodeIssueOrder {
  direction: OrderDirection!
  field: CodeIssueOrderField
}

input ArtifactOrder {
  direction: OrderDirection!
  field: ArtifactOrderField
}

"""
CodeIssueWhereInput is used for filtering CodeIssue objects.
Input was generated by ent.
"""
input CodeIssueWhereInput {
  not: CodeIssueWhereInput
  and: [CodeIssueWhereInput!]
  or: [CodeIssueWhereInput!]
  
  """rule_id field predicates"""
  rule_id: String
  rule_id_neq: String
  rule_id_in: [String!]
  rule_id_not_in: [String!]
  rule_id_gt: String
  rule_id_gte: String
  rule_id_lt: String
  rule_id_lte: String
  rule_id_contains: String
  rule_id_has_prefix: String
  rule_id_has_suffix: String
  rule_id_equal_fold: String
  rule_id_contains_fold: String
  
  """message field predicates"""
  message: String
  message_neq: String
  message_in: [String!]
  message_not_in: [String!]
  message_gt: String
  message_gte: String
  message_lt: String
  message_lte: String
  message_contains: String
  message_has_prefix: String
  message_has_suffix: String
  message_equal_fold: String
  message_contains_fold: String
  
  """severity field predicates"""
  severity: CodeIssueSeverity
  severity_neq: CodeIssueSeverity
  severity_in: [CodeIssueSeverity!]
  severity_not_in: [CodeIssueSeverity!]
  
  """type field predicates"""
  type: CodeIssueType
  type_neq: CodeIssueType
  type_in: [CodeIssueType!]
  type_not_in: [CodeIssueType!]
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """cwe edge predicates"""
  has_cwe: Boolean
  has_cwe_with: [CWEWhereInput!]
  
  """scan edge predicates"""
  has_scan: Boolean
  has_scan_with: [CodeScanWhereInput!]
}

input CodeScanOrder {
  direction: OrderDirection!
  field: CodeScanOrderField
}

"""
ArtifactWhereInput is used for filtering Artifact objects.
Input was generated by ent.
"""
input ArtifactWhereInput {
  not: ArtifactWhereInput
  and: [ArtifactWhereInput!]
  or: [ArtifactWhereInput!]
  
  """name field predicates"""
  name: String
  name_neq: String
  name_in: [String!]
  name_not_in: [String!]
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_contains: String
  name_has_prefix: String
  name_has_suffix: String
  name_equal_fold: String
  name_contains_fold: String
  
  """sha256 field predicates"""
  sha256: String
  sha256_neq: String
  sha256_in: [String!]
  sha256_not_in: [String!]
  sha256_gt: String
  sha256_gte: String
  sha256_lt: String
  sha256_lte: String
  sha256_contains: String
  sha256_has_prefix: String
  sha256_has_suffix: String
  sha256_equal_fold: String
  sha256_contains_fold: String
  
  """type field predicates"""
  type: ArtifactType
  type_neq: ArtifactType
  type_in: [ArtifactType!]
  type_not_in: [ArtifactType!]
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """release edge predicates"""
  has_release: Boolean
  has_release_with: [ReleaseWhereInput!]
  
  """entry edge predicates"""
  has_entry: Boolean
  has_entry_with: [ReleaseEntryWhereInput!]
}

"""
ComponentWhereInput is used for filtering Component objects.
Input was generated by ent.
"""
input ComponentWhereInput {
  not: ComponentWhereInput
  and: [ComponentWhereInput!]
  or: [ComponentWhereInput!]
  
  """name field predicates"""
  name: String
  name_neq: String
  name_in: [String!]
  name_not_in: [String!]
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_contains: String
  name_has_prefix: String
  name_has_suffix: String
  name_equal_fold: String
  name_contains_fold: String
  
  """vendor field predicates"""
  vendor: String
  vendor_neq: String
  vendor_in: [String!]
  vendor_not_in: [String!]
  vendor_gt: String
  vendor_gte: String
  vendor_lt: String
  vendor_lte: String
  vendor_contains: String
  vendor_has_prefix: String
  vendor_has_suffix: String
  vendor_equal_fold: String
  vendor_contains_fold: String
  
  """version field predicates"""
  version: String
  version_neq: String
  version_in: [String!]
  version_not_in: [String!]
  version_gt: String
  version_gte: String
  version_lt: String
  version_lte: String
  version_contains: String
  version_has_prefix: String
  version_has_suffix: String
  version_equal_fold: String
  version_contains_fold: String
  
  """description field predicates"""
  description: String
  description_neq: String
  description_in: [String!]
  description_not_in: [String!]
  description_gt: String
  description_gte: String
  description_lt: String
  description_lte: String
  description_contains: String
  description_has_prefix: String
  description_has_suffix: String
  description_equal_fold: String
  description_contains_fold: String
  
  """url field predicates"""
  url: String
  url_neq: String
  url_in: [String!]
  url_not_in: [String!]
  url_gt: String
  url_gte: String
  url_lt: String
  url_lte: String
  url_contains: String
  url_has_prefix: String
  url_has_suffix: String
  url_equal_fold: String
  url_contains_fold: String
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """cves edge predicates"""
  has_cves: Boolean
  has_cves_with: [CVEWhereInput!]
  
  """licenses edge predicates"""
  has_licenses: Boolean
  has_licenses_with: [LicenseWhereInput!]
  
  """uses edge predicates"""
  has_uses: Boolean
  has_uses_with: [ComponentUseWhereInput!]
}

"""
GitCommitWhereInput is used for filtering GitCommit objects.
Input was generated by ent.
"""
input GitCommitWhereInput {
  not: GitCommitWhereInput
  and: [GitCommitWhereInput!]
  or: [GitCommitWhereInput!]
  
  """hash field predicates"""
  hash: String
  hash_neq: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_gt: String
  hash_gte: String
  hash_lt: String
  hash_lte: String
  hash_contains: String
  hash_has_prefix: String
  hash_has_suffix: String
  hash_equal_fold: String
  hash_contains_fold: String
  
  """branch field predicates"""
  branch: String
  branch_neq: String
  branch_in: [String!]
  branch_not_in: [String!]
  branch_gt: String
  branch_gte: String
  branch_lt: String
  branch_lte: String
  branch_contains: String
  branch_has_prefix: String
  branch_has_suffix: String
  branch_equal_fold: String
  branch_contains_fold: String
  
  """tag field predicates"""
  tag: String
  tag_neq: String
  tag_in: [String!]
  tag_not_in: [String!]
  tag_gt: String
  tag_gte: String
  tag_lt: String
  tag_lte: String
  tag_contains: String
  tag_has_prefix: String
  tag_has_suffix: String
  tag_is_nil: Boolean
  tag_not_nil: Boolean
  tag_equal_fold: String
  tag_contains_fold: String
  
  """time field predicates"""
  time: Time
  time_neq: Time
  time_in: [Time!]
  time_not_in: [Time!]
  time_gt: Time
  time_gte: Time
  time_lt: Time
  time_lte: Time
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """repo edge predicates"""
  has_repo: Boolean
  has_repo_with: [RepoWhereInput!]
  
  """release edge predicates"""
  has_release: Boolean
  has_release_with: [ReleaseWhereInput!]
}

"""
LicenseUseWhereInput is used for filtering LicenseUse objects.
Input was generated by ent.
"""
input LicenseUseWhereInput {
  not: LicenseUseWhereInput
  and: [LicenseUseWhereInput!]
  or: [LicenseUseWhereInput!]
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """license edge predicates"""
  has_license: Boolean
  has_license_with: [LicenseWhereInput!]
}

input ProjectOrder {
  direction: OrderDirection!
  field: ProjectOrderField
}

"""
ProjectWhereInput is used for filtering Project objects.
Input was generated by ent.
"""
input ProjectWhereInput {
  not: ProjectWhereInput
  and: [ProjectWhereInput!]
  or: [ProjectWhereInput!]
  
  """name field predicates"""
  name: String
  name_neq: String
  name_in: [String!]
  name_not_in: [String!]
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_contains: String
  name_has_prefix: String
  name_has_suffix: String
  name_equal_fold: String
  name_contains_fold: String
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """repos edge predicates"""
  has_repos: Boolean
  has_repos_with: [RepoWhereInput!]
  
  """releases edge predicates"""
  has_releases: Boolean
  has_releases_with: [ReleaseWhereInput!]
  
  """cve_rules edge predicates"""
  has_cve_rules: Boolean
  has_cve_rules_with: [CVERuleWhereInput!]
}

"""
ReleaseWhereInput is used for filtering Release objects.
Input was generated by ent.
"""
input ReleaseWhereInput {
  not: ReleaseWhereInput
  and: [ReleaseWhereInput!]
  or: [ReleaseWhereInput!]
  
  """name field predicates"""
  name: String
  name_neq: String
  name_in: [String!]
  name_not_in: [String!]
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_contains: String
  name_has_prefix: String
  name_has_suffix: String
  name_equal_fold: String
  name_contains_fold: String
  
  """version field predicates"""
  version: String
  version_neq: String
  version_in: [String!]
  version_not_in: [String!]
  version_gt: String
  version_gte: String
  version_lt: String
  version_lte: String
  version_contains: String
  version_has_prefix: String
  version_has_suffix: String
  version_equal_fold: String
  version_contains_fold: String
  
  """status field predicates"""
  status: ReleaseStatus
  status_neq: ReleaseStatus
  status_in: [ReleaseStatus!]
  status_not_in: [ReleaseStatus!]
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """subreleases edge predicates"""
  has_subreleases: Boolean
  has_subreleases_with: [ReleaseWhereInput!]
  
  """dependencies edge predicates"""
  has_dependencies: Boolean
  has_dependencies_with: [ReleaseWhereInput!]
  
  """project edge predicates"""
  has_project: Boolean
  has_project_with: [ProjectWhereInput!]
  
  """commit edge predicates"""
  has_commit: Boolean
  has_commit_with: [GitCommitWhereInput!]
  
  """log edge predicates"""
  has_log: Boolean
  has_log_with: [ReleaseEntryWhereInput!]
  
  """artifacts edge predicates"""
  has_artifacts: Boolean
  has_artifacts_with: [ArtifactWhereInput!]
  
  """components edge predicates"""
  has_components: Boolean
  has_components_with: [ComponentUseWhereInput!]
  
  """code_scans edge predicates"""
  has_code_scans: Boolean
  has_code_scans_with: [CodeScanWhereInput!]
  
  """test_runs edge predicates"""
  has_test_runs: Boolean
  has_test_runs_with: [TestRunWhereInput!]
}

input RepoOrder {
  direction: OrderDirection!
  field: RepoOrderField
}

"""
CVERuleWhereInput is used for filtering CVERule objects.
Input was generated by ent.
"""
input CVERuleWhereInput {
  not: CVERuleWhereInput
  and: [CVERuleWhereInput!]
  or: [CVERuleWhereInput!]
  
  """name field predicates"""
  name: String
  name_neq: String
  name_in: [String!]
  name_not_in: [String!]
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_contains: String
  name_has_prefix: String
  name_has_suffix: String
  name_is_nil: Boolean
  name_not_nil: Boolean
  name_equal_fold: String
  name_contains_fold: String
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """cve edge predicates"""
  has_cve: Boolean
  has_cve_with: [CVEWhereInput!]
  
  """project edge predicates"""
  has_project: Boolean
  has_project_with: [ProjectWhereInput!]
  
  """repo edge predicates"""
  has_repo: Boolean
  has_repo_with: [RepoWhereInput!]
}

input TestRunOrder {
  direction: OrderDirection!
  field: TestRunOrderField
}

"""
CWEWhereInput is used for filtering CWE objects.
Input was generated by ent.
"""
input CWEWhereInput {
  not: CWEWhereInput
  and: [CWEWhereInput!]
  or: [CWEWhereInput!]
  
  """cwe_id field predicates"""
  cwe_id: String
  cwe_id_neq: String
  cwe_id_in: [String!]
  cwe_id_not_in: [String!]
  cwe_id_gt: String
  cwe_id_gte: String
  cwe_id_lt: String
  cwe_id_lte: String
  cwe_id_contains: String
  cwe_id_has_prefix: String
  cwe_id_has_suffix: String
  cwe_id_equal_fold: String
  cwe_id_contains_fold: String
  
  """description field predicates"""
  description: String
  description_neq: String
  description_in: [String!]
  description_not_in: [String!]
  description_gt: String
  description_gte: String
  description_lt: String
  description_lte: String
  description_contains: String
  description_has_prefix: String
  description_has_suffix: String
  description_is_nil: Boolean
  description_not_nil: Boolean
  description_equal_fold: String
  description_contains_fold: String
  
  """url field predicates"""
  url: Float
  url_neq: Float
  url_in: [Float!]
  url_not_in: [Float!]
  url_gt: Float
  url_gte: Float
  url_lt: Float
  url_lte: Float
  url_is_nil: Boolean
  url_not_nil: Boolean
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """issues edge predicates"""
  has_issues: Boolean
  has_issues_with: [CodeIssueWhereInput!]
}

input ReleaseOrder {
  direction: OrderDirection!
  field: ReleaseOrderField
}

"""
VulnerabilityWhereInput is used for filtering Vulnerability objects.
Input was generated by ent.
"""
input VulnerabilityWhereInput {
  not: VulnerabilityWhereInput
  and: [VulnerabilityWhereInput!]
  or: [VulnerabilityWhereInput!]
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """cve edge predicates"""
  has_cve: Boolean
  has_cve_with: [CVEWhereInput!]
}

input CWEOrder {
  direction: OrderDirection!
  field: CWEOrderField
}

"""
ReleaseEntryWhereInput is used for filtering ReleaseEntry objects.
Input was generated by ent.
"""
input ReleaseEntryWhereInput {
  not: ReleaseEntryWhereInput
  and: [ReleaseEntryWhereInput!]
  or: [ReleaseEntryWhereInput!]
  
  """type field predicates"""
  type: ReleaseEntryType
  type_neq: ReleaseEntryType
  type_in: [ReleaseEntryType!]
  type_not_in: [ReleaseEntryType!]
  
  """time field predicates"""
  time: Time
  time_neq: Time
  time_in: [Time!]
  time_not_in: [Time!]
  time_gt: Time
  time_gte: Time
  time_lt: Time
  time_lte: Time
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """artifact edge predicates"""
  has_artifact: Boolean
  has_artifact_with: [ArtifactWhereInput!]
  
  """code_scan edge predicates"""
  has_code_scan: Boolean
  has_code_scan_with: [CodeScanWhereInput!]
  
  """test_run edge predicates"""
  has_test_run: Boolean
  has_test_run_with: [TestRunWhereInput!]
  
  """release edge predicates"""
  has_release: Boolean
  has_release_with: [ReleaseWhereInput!]
}

"""
CodeScanWhereInput is used for filtering CodeScan objects.
Input was generated by ent.
"""
input CodeScanWhereInput {
  not: CodeScanWhereInput
  and: [CodeScanWhereInput!]
  or: [CodeScanWhereInput!]
  
  """tool field predicates"""
  tool: String
  tool_neq: String
  tool_in: [String!]
  tool_not_in: [String!]
  tool_gt: String
  tool_gte: String
  tool_lt: String
  tool_lte: String
  tool_contains: String
  tool_has_prefix: String
  tool_has_suffix: String
  tool_equal_fold: String
  tool_contains_fold: String
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """release edge predicates"""
  has_release: Boolean
  has_release_with: [ReleaseWhereInput!]
  
  """entry edge predicates"""
  has_entry: Boolean
  has_entry_with: [ReleaseEntryWhereInput!]
  
  """issues edge predicates"""
  has_issues: Boolean
  has_issues_with: [CodeIssueWhereInput!]
  
  """components edge predicates"""
  has_components: Boolean
  has_components_with: [ComponentUseWhereInput!]
}

input ComponentOrder {
  direction: OrderDirection!
  field: ComponentOrderField
}

input GitCommitOrder {
  direction: OrderDirection!
  field: GitCommitOrderField
}

"""
TestRunWhereInput is used for filtering TestRun objects.
Input was generated by ent.
"""
input TestRunWhereInput {
  not: TestRunWhereInput
  and: [TestRunWhereInput!]
  or: [TestRunWhereInput!]
  
  """tool field predicates"""
  tool: String
  tool_neq: String
  tool_in: [String!]
  tool_not_in: [String!]
  tool_gt: String
  tool_gte: String
  tool_lt: String
  tool_lte: String
  tool_contains: String
  tool_has_prefix: String
  tool_has_suffix: String
  tool_equal_fold: String
  tool_contains_fold: String
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """release edge predicates"""
  has_release: Boolean
  has_release_with: [ReleaseWhereInput!]
  
  """entry edge predicates"""
  has_entry: Boolean
  has_entry_with: [ReleaseEntryWhereInput!]
  
  """tests edge predicates"""
  has_tests: Boolean
  has_tests_with: [TestCaseWhereInput!]
}

input CVEOrder {
  direction: OrderDirection!
  field: CVEOrderField
}

input LicenseOrder {
  direction: OrderDirection!
  field: LicenseOrderField
}

"""
TestCaseWhereInput is used for filtering TestCase objects.
Input was generated by ent.
"""
input TestCaseWhereInput {
  not: TestCaseWhereInput
  and: [TestCaseWhereInput!]
  or: [TestCaseWhereInput!]
  
  """name field predicates"""
  name: String
  name_neq: String
  name_in: [String!]
  name_not_in: [String!]
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_contains: String
  name_has_prefix: String
  name_has_suffix: String
  name_equal_fold: String
  name_contains_fold: String
  
  """result field predicates"""
  result: Boolean
  result_neq: Boolean
  
  """message field predicates"""
  message: String
  message_neq: String
  message_in: [String!]
  message_not_in: [String!]
  message_gt: String
  message_gte: String
  message_lt: String
  message_lte: String
  message_contains: String
  message_has_prefix: String
  message_has_suffix: String
  message_equal_fold: String
  message_contains_fold: String
  
  """elapsed field predicates"""
  elapsed: Float
  elapsed_neq: Float
  elapsed_in: [Float!]
  elapsed_not_in: [Float!]
  elapsed_gt: Float
  elapsed_gte: Float
  elapsed_lt: Float
  elapsed_lte: Float
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """run edge predicates"""
  has_run: Boolean
  has_run_with: [TestRunWhereInput!]
}

"""
ComponentUseWhereInput is used for filtering ComponentUse objects.
Input was generated by ent.
"""
input ComponentUseWhereInput {
  not: ComponentUseWhereInput
  and: [ComponentUseWhereInput!]
  or: [ComponentUseWhereInput!]
  
  """id field predicates"""
  id: Int
  id_neq: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_gt: Int
  id_gte: Int
  id_lt: Int
  id_lte: Int
  
  """release edge predicates"""
  has_release: Boolean
  has_release_with: [ReleaseWhereInput!]
  
  """scans edge predicates"""
  has_scans: Boolean
  has_scans_with: [CodeScanWhereInput!]
  
  """component edge predicates"""
  has_component: Boolean
  has_component_with: [ComponentWhereInput!]
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_CVERule_project_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ProjectWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOProjectWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ProjectOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOProjectOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_CVERule_repo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.RepoWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalORepoWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.RepoOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalORepoOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_CVE_components_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ComponentWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ComponentOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOComponentOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_CVE_rules_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CVERuleWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOCVERuleWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.CVERuleOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOCVERuleOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_CVE_vulnerabilities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.VulnerabilityWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_CWE_issues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CodeIssueWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOCodeIssueWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.CodeIssueOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOCodeIssueOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_CodeIssue_cwe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CWEWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOCWEWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.CWEOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOCWEOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_CodeScan_components_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ComponentUseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOComponentUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_CodeScan_issues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CodeIssueWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOCodeIssueWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.CodeIssueOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOCodeIssueOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_ComponentUse_scans_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CodeScanWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOCodeScanWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.CodeScanOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOCodeScanOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Component_cves_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CVEWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOCVEWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.CVEOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOCVEOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Component_licenses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.LicenseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.LicenseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOLicenseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Component_uses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ComponentUseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOComponentUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_License_components_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ComponentWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ComponentOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOComponentOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_License_uses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.LicenseUseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOLicenseUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Project_cve_rules_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CVERuleWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOCVERuleWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.CVERuleOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOCVERuleOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Project_releases_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ReleaseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOReleaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Project_repos_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.RepoWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalORepoWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.RepoOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalORepoOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_artifact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ArtifactOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOArtifactOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.ArtifactWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOArtifactWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_artifact_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.ArtifactOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalOArtifactOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.ArtifactWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalOArtifactWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_code_issue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CodeIssueOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOCodeIssueOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.CodeIssueWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOCodeIssueWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_code_issue_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.CodeIssueOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalOCodeIssueOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.CodeIssueWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalOCodeIssueWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_code_scan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CodeScanOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOCodeScanOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.CodeScanWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOCodeScanWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_code_scan_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.CodeScanOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalOCodeScanOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.CodeScanWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalOCodeScanWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_commit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.GitCommitOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOGitCommitOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.GitCommitWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOGitCommitWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_commit_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.GitCommitOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalOGitCommitOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.GitCommitWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalOGitCommitWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_component_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ComponentOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOComponentOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.ComponentWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_component_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.ComponentOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalOComponentOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.ComponentWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalOComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_component_use_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ComponentUseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOComponentUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_component_use_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.ComponentUseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOComponentUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_cve_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CVEOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOCVEOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.CVEWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOCVEWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_cve_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.CVEOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalOCVEOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.CVEWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalOCVEWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_cve_rule_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CVERuleOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOCVERuleOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.CVERuleWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOCVERuleWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_cve_rule_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.CVERuleOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalOCVERuleOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.CVERuleWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalOCVERuleWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_cwe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CWEOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOCWEOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.CWEWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOCWEWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_cwe_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.CWEOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalOCWEOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.CWEWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalOCWEWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_license_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.LicenseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOLicenseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.LicenseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_license_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.LicenseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalOLicenseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.LicenseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalOLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_license_use_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.LicenseUseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOLicenseUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_license_use_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.LicenseUseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOLicenseUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_project_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ProjectOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOProjectOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.ProjectWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOProjectWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_project_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.ProjectOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalOProjectOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.ProjectWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalOProjectWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_release_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOReleaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.ReleaseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_release_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.ReleaseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalOReleaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.ReleaseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalOReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_release_entry_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseEntryOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOReleaseEntryOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.ReleaseEntryWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOReleaseEntryWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_release_entry_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.ReleaseEntryOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalOReleaseEntryOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.ReleaseEntryWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalOReleaseEntryWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_repo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.RepoOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalORepoOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.RepoWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalORepoWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_repo_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.RepoOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalORepoOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.RepoWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalORepoWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_test_case_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.TestCaseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOTestCaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.TestCaseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOTestCaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_test_case_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.TestCaseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalOTestCaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.TestCaseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalOTestCaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_test_run_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.TestRunOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg2, err = ec.unmarshalOTestRunOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg2
	var arg3 *ent.TestRunWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOTestRunWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_test_run_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.TestRunOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg4, err = ec.unmarshalOTestRunOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg4
	var arg5 *ent.TestRunWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg5, err = ec.unmarshalOTestRunWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_vulnerability_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.VulnerabilityWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_vulnerability_connection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.Cursor
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *ent.Cursor
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *ent.VulnerabilityWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Release_artifacts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ArtifactWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOArtifactWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ArtifactOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOArtifactOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Release_code_scans_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CodeScanWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOCodeScanWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.CodeScanOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOCodeScanOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Release_components_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ComponentUseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOComponentUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Release_dependencies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ReleaseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOReleaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Release_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseEntryWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseEntryWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ReleaseEntryOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOReleaseEntryOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Release_subreleases_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.ReleaseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.ReleaseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOReleaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Release_test_runs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.TestRunWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOTestRunWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.TestRunOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOTestRunOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Repo_commits_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.GitCommitWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOGitCommitWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.GitCommitOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOGitCommitOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Repo_cve_rules_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.CVERuleWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOCVERuleWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.CVERuleOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOCVERuleOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_TestRun_tests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg1
	var arg2 *ent.TestCaseWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOTestCaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *ent.TestCaseOrder
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOTestCaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Artifact_id(ctx context.Context, field graphql.CollectedField, obj *ent.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_name(ctx context.Context, field graphql.CollectedField, obj *ent.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_sha256(ctx context.Context, field graphql.CollectedField, obj *ent.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sha256, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_type(ctx context.Context, field graphql.CollectedField, obj *ent.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(artifact.Type)
	fc.Result = res
	return ec.marshalOArtifactType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_release(ctx context.Context, field graphql.CollectedField, obj *ent.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalORelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_entry(ctx context.Context, field graphql.CollectedField, obj *ent.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entry(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleaseEntry)
	fc.Result = res
	return ec.marshalOReleaseEntry2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntry(ctx, field.Selections, res)
}

func (ec *executionContext) _ArtifactConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArtifactConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ArtifactConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArtifactConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ArtifactConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArtifactConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ArtifactEdge)
	fc.Result = res
	return ec.marshalOArtifactEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ArtifactEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArtifactEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Artifact)
	fc.Result = res
	return ec.marshalOArtifact2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifact(ctx, field.Selections, res)
}

func (ec *executionContext) _ArtifactEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArtifactEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _CVE_id(ctx context.Context, field graphql.CollectedField, obj *ent.CVE) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CVE_cve_id(ctx context.Context, field graphql.CollectedField, obj *ent.CVE) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CveID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CVE_description(ctx context.Context, field graphql.CollectedField, obj *ent.CVE) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CVE_severity_score(ctx context.Context, field graphql.CollectedField, obj *ent.CVE) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeverityScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _CVE_severity(ctx context.Context, field graphql.CollectedField, obj *ent.CVE) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(cve.Severity)
	fc.Result = res
	return ec.marshalOCVESeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcveᚐSeverity(ctx, field.Selections, res)
}

func (ec *executionContext) _CVE_published_data(ctx context.Context, field graphql.CollectedField, obj *ent.CVE) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublishedData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CVE_modified_data(ctx context.Context, field graphql.CollectedField, obj *ent.CVE) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CVE_components(ctx context.Context, field graphql.CollectedField, obj *ent.CVE) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVE",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CVE_components_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CVE().Components(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ComponentWhereInput), args["order_by"].(*ent.ComponentOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Component)
	fc.Result = res
	return ec.marshalOComponent2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx, field.Selections, res)
}

func (ec *executionContext) _CVE_vulnerabilities(ctx context.Context, field graphql.CollectedField, obj *ent.CVE) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVE",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CVE_vulnerabilities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CVE().Vulnerabilities(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.VulnerabilityWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Vulnerability)
	fc.Result = res
	return ec.marshalOVulnerability2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerability(ctx, field.Selections, res)
}

func (ec *executionContext) _CVE_rules(ctx context.Context, field graphql.CollectedField, obj *ent.CVE) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVE",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CVE_rules_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CVE().Rules(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CVERuleWhereInput), args["order_by"].(*ent.CVERuleOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CVERule)
	fc.Result = res
	return ec.marshalOCVERule2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERule(ctx, field.Selections, res)
}

func (ec *executionContext) _CVEConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.CVEConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVEConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CVEConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.CVEConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVEConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CVEConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.CVEConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVEConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CVEEdge)
	fc.Result = res
	return ec.marshalOCVEEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _CVEEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.CVEEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVEEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CVE)
	fc.Result = res
	return ec.marshalOCVE2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVE(ctx, field.Selections, res)
}

func (ec *executionContext) _CVEEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.CVEEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVEEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _CVERule_id(ctx context.Context, field graphql.CollectedField, obj *ent.CVERule) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVERule",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CVERule_name(ctx context.Context, field graphql.CollectedField, obj *ent.CVERule) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVERule",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CVERule_cve(ctx context.Context, field graphql.CollectedField, obj *ent.CVERule) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVERule",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cve(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CVE)
	fc.Result = res
	return ec.marshalNCVE2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVE(ctx, field.Selections, res)
}

func (ec *executionContext) _CVERule_project(ctx context.Context, field graphql.CollectedField, obj *ent.CVERule) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVERule",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CVERule_project_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CVERule().Project(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ProjectWhereInput), args["order_by"].(*ent.ProjectOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Project)
	fc.Result = res
	return ec.marshalOProject2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) _CVERule_repo(ctx context.Context, field graphql.CollectedField, obj *ent.CVERule) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVERule",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CVERule_repo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CVERule().Repo(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.RepoWhereInput), args["order_by"].(*ent.RepoOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Repo)
	fc.Result = res
	return ec.marshalORepo2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx, field.Selections, res)
}

func (ec *executionContext) _CVERuleConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.CVERuleConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVERuleConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CVERuleConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.CVERuleConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVERuleConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CVERuleConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.CVERuleConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVERuleConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CVERuleEdge)
	fc.Result = res
	return ec.marshalOCVERuleEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _CVERuleEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.CVERuleEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVERuleEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CVERule)
	fc.Result = res
	return ec.marshalOCVERule2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERule(ctx, field.Selections, res)
}

func (ec *executionContext) _CVERuleEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.CVERuleEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVERuleEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _CWE_id(ctx context.Context, field graphql.CollectedField, obj *ent.CWE) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CWE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CWE_cwe_id(ctx context.Context, field graphql.CollectedField, obj *ent.CWE) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CWE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CweID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CWE_description(ctx context.Context, field graphql.CollectedField, obj *ent.CWE) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CWE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CWE_url(ctx context.Context, field graphql.CollectedField, obj *ent.CWE) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CWE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _CWE_issues(ctx context.Context, field graphql.CollectedField, obj *ent.CWE) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CWE",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CWE_issues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CWE().Issues(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CodeIssueWhereInput), args["order_by"].(*ent.CodeIssueOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CodeIssue)
	fc.Result = res
	return ec.marshalOCodeIssue2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _CWEConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.CWEConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CWEConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CWEConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.CWEConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CWEConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CWEConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.CWEConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CWEConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CWEEdge)
	fc.Result = res
	return ec.marshalOCWEEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _CWEEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.CWEEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CWEEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CWE)
	fc.Result = res
	return ec.marshalOCWE2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWE(ctx, field.Selections, res)
}

func (ec *executionContext) _CWEEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.CWEEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CWEEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssue_id(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssue_rule_id(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RuleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssue_message(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssue_severity(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(codeissue.Severity)
	fc.Result = res
	return ec.marshalOCodeIssueSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssue_type(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(codeissue.Type)
	fc.Result = res
	return ec.marshalOCodeIssueType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssue_cwe(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CodeIssue_cwe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CodeIssue().Cwe(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CWEWhereInput), args["order_by"].(*ent.CWEOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CWE)
	fc.Result = res
	return ec.marshalOCWE2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWE(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssue_scan(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scan(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CodeScan)
	fc.Result = res
	return ec.marshalNCodeScan2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssueConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssueConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssueConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssueConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssueConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssueConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssueConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssueConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssueConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CodeIssueEdge)
	fc.Result = res
	return ec.marshalOCodeIssueEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssueEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssueEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssueEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CodeIssue)
	fc.Result = res
	return ec.marshalOCodeIssue2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeIssueEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.CodeIssueEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeIssueEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScan_id(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScan",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScan_tool(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScan",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScan_release(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScan",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalNRelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScan_entry(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScan",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entry(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleaseEntry)
	fc.Result = res
	return ec.marshalOReleaseEntry2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntry(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScan_issues(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScan",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CodeScan_issues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CodeScan().Issues(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CodeIssueWhereInput), args["order_by"].(*ent.CodeIssueOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CodeIssue)
	fc.Result = res
	return ec.marshalOCodeIssue2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScan_components(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScan",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CodeScan_components_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CodeScan().Components(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ComponentUseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ComponentUse)
	fc.Result = res
	return ec.marshalOComponentUse2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUse(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScanConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScanConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScanConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScanConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScanConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScanConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScanConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScanConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScanConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CodeScanEdge)
	fc.Result = res
	return ec.marshalOCodeScanEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScanEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScanEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScanEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CodeScan)
	fc.Result = res
	return ec.marshalOCodeScan2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx, field.Selections, res)
}

func (ec *executionContext) _CodeScanEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.CodeScanEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CodeScanEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_id(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_name(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_vendor(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vendor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_version(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_description(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_url(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_cves(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Component_cves_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Component().Cves(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CVEWhereInput), args["order_by"].(*ent.CVEOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CVE)
	fc.Result = res
	return ec.marshalOCVE2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVE(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_licenses(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Component_licenses_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Component().Licenses(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.LicenseWhereInput), args["order_by"].(*ent.LicenseOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.License)
	fc.Result = res
	return ec.marshalOLicense2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicense(ctx, field.Selections, res)
}

func (ec *executionContext) _Component_uses(ctx context.Context, field graphql.CollectedField, obj *ent.Component) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Component",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Component_uses_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Component().Uses(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ComponentUseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ComponentUse)
	fc.Result = res
	return ec.marshalOComponentUse2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUse(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ComponentEdge)
	fc.Result = res
	return ec.marshalOComponentEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Component)
	fc.Result = res
	return ec.marshalOComponent2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentUse_id(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentUse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentUse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentUse_release(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentUse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentUse",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalNRelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentUse_scans(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentUse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentUse",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ComponentUse_scans_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ComponentUse().Scans(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CodeScanWhereInput), args["order_by"].(*ent.CodeScanOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CodeScan)
	fc.Result = res
	return ec.marshalOCodeScan2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentUse_component(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentUse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentUse",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Component(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Component)
	fc.Result = res
	return ec.marshalNComponent2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentUseConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentUseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentUseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentUseConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentUseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentUseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentUseConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentUseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentUseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ComponentUseEdge)
	fc.Result = res
	return ec.marshalOComponentUseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentUseEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentUseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentUseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ComponentUse)
	fc.Result = res
	return ec.marshalOComponentUse2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUse(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponentUseEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ComponentUseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponentUseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommit_id(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommit_hash(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommit_branch(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Branch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommit_tag(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommit_time(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommit_repo(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommit",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repo(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Repo)
	fc.Result = res
	return ec.marshalNRepo2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommit_release(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommit",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalORelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommitConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommitConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommitConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommitConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommitConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommitConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommitConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommitConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommitConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.GitCommitEdge)
	fc.Result = res
	return ec.marshalOGitCommitEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommitEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommitEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommitEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.GitCommit)
	fc.Result = res
	return ec.marshalOGitCommit2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommit(ctx, field.Selections, res)
}

func (ec *executionContext) _GitCommitEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.GitCommitEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GitCommitEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _License_id(ctx context.Context, field graphql.CollectedField, obj *ent.License) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "License",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _License_spdx_id(ctx context.Context, field graphql.CollectedField, obj *ent.License) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "License",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpdxID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _License_name(ctx context.Context, field graphql.CollectedField, obj *ent.License) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "License",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _License_reference(ctx context.Context, field graphql.CollectedField, obj *ent.License) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "License",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _License_details_url(ctx context.Context, field graphql.CollectedField, obj *ent.License) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "License",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DetailsURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _License_is_osi_approved(ctx context.Context, field graphql.CollectedField, obj *ent.License) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "License",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOsiApproved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _License_components(ctx context.Context, field graphql.CollectedField, obj *ent.License) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "License",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_License_components_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.License().Components(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ComponentWhereInput), args["order_by"].(*ent.ComponentOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Component)
	fc.Result = res
	return ec.marshalOComponent2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx, field.Selections, res)
}

func (ec *executionContext) _License_uses(ctx context.Context, field graphql.CollectedField, obj *ent.License) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "License",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_License_uses_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.License().Uses(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.LicenseUseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.LicenseUse)
	fc.Result = res
	return ec.marshalOLicenseUse2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUse(ctx, field.Selections, res)
}

func (ec *executionContext) _LicenseConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.LicenseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LicenseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LicenseConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.LicenseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LicenseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _LicenseConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.LicenseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LicenseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.LicenseEdge)
	fc.Result = res
	return ec.marshalOLicenseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _LicenseEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.LicenseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LicenseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.License)
	fc.Result = res
	return ec.marshalOLicense2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicense(ctx, field.Selections, res)
}

func (ec *executionContext) _LicenseEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.LicenseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LicenseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _LicenseUse_id(ctx context.Context, field graphql.CollectedField, obj *ent.LicenseUse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LicenseUse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LicenseUse_license(ctx context.Context, field graphql.CollectedField, obj *ent.LicenseUse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LicenseUse",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.License(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.License)
	fc.Result = res
	return ec.marshalNLicense2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicense(ctx, field.Selections, res)
}

func (ec *executionContext) _LicenseUseConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.LicenseUseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LicenseUseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LicenseUseConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.LicenseUseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LicenseUseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _LicenseUseConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.LicenseUseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LicenseUseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.LicenseUseEdge)
	fc.Result = res
	return ec.marshalOLicenseUseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUseEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _LicenseUseEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.LicenseUseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LicenseUseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.LicenseUse)
	fc.Result = res
	return ec.marshalOLicenseUse2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUse(ctx, field.Selections, res)
}

func (ec *executionContext) _LicenseUseEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.LicenseUseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LicenseUseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Cursor)
	fc.Result = res
	return ec.marshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Cursor)
	fc.Result = res
	return ec.marshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_id(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_name(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_repos(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Project_repos_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Project().Repos(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.RepoWhereInput), args["order_by"].(*ent.RepoOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Repo)
	fc.Result = res
	return ec.marshalORepo2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_releases(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Project_releases_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Project().Releases(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseWhereInput), args["order_by"].(*ent.ReleaseOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Release)
	fc.Result = res
	return ec.marshalORelease2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_cve_rules(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Project_cve_rules_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Project().CveRules(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CVERuleWhereInput), args["order_by"].(*ent.CVERuleOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CVERule)
	fc.Result = res
	return ec.marshalOCVERule2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERule(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ProjectEdge)
	fc.Result = res
	return ec.marshalOProjectEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Project)
	fc.Result = res
	return ec.marshalOProject2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_code_issue_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_code_issue_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CodeIssueConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.CodeIssueOrder), args["where"].(*ent.CodeIssueWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CodeIssueConnection)
	fc.Result = res
	return ec.marshalOCodeIssueConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_component_use(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_component_use_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ComponentUse(rctx, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ComponentUseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ComponentUse)
	fc.Result = res
	return ec.marshalOComponentUse2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_license(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_license_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().License(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.LicenseOrder), args["where"].(*ent.LicenseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.License)
	fc.Result = res
	return ec.marshalOLicense2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicense(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_artifact_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_artifact_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ArtifactConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.ArtifactOrder), args["where"].(*ent.ArtifactWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ArtifactConnection)
	fc.Result = res
	return ec.marshalOArtifactConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_cwe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_cwe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Cwe(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.CWEOrder), args["where"].(*ent.CWEWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CWE)
	fc.Result = res
	return ec.marshalOCWE2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWE(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_license_use_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_license_use_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LicenseUseConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["where"].(*ent.LicenseUseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.LicenseUseConnection)
	fc.Result = res
	return ec.marshalOLicenseUseConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUseConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_release_entry_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_release_entry_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ReleaseEntryConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.ReleaseEntryOrder), args["where"].(*ent.ReleaseEntryWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleaseEntryConnection)
	fc.Result = res
	return ec.marshalOReleaseEntryConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_repo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_repo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Repo(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.RepoOrder), args["where"].(*ent.RepoWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Repo)
	fc.Result = res
	return ec.marshalORepo2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_test_case(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_test_case_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TestCase(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.TestCaseOrder), args["where"].(*ent.TestCaseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestCase)
	fc.Result = res
	return ec.marshalOTestCase2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCase(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_license_use(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_license_use_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LicenseUse(rctx, args["first"].(*int), args["last"].(*int), args["where"].(*ent.LicenseUseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.LicenseUse)
	fc.Result = res
	return ec.marshalOLicenseUse2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_release_entry(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_release_entry_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ReleaseEntry(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ReleaseEntryOrder), args["where"].(*ent.ReleaseEntryWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseEntry)
	fc.Result = res
	return ec.marshalOReleaseEntry2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntry(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_repo_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_repo_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RepoConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.RepoOrder), args["where"].(*ent.RepoWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.RepoConnection)
	fc.Result = res
	return ec.marshalORepoConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_artifact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_artifact_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Artifact(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ArtifactOrder), args["where"].(*ent.ArtifactWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Artifact)
	fc.Result = res
	return ec.marshalOArtifact2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifact(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_cve_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_cve_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CveConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.CVEOrder), args["where"].(*ent.CVEWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CVEConnection)
	fc.Result = res
	return ec.marshalOCVEConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_cve(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_cve_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Cve(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.CVEOrder), args["where"].(*ent.CVEWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CVE)
	fc.Result = res
	return ec.marshalOCVE2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVE(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_cwe_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_cwe_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CweConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.CWEOrder), args["where"].(*ent.CWEWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CWEConnection)
	fc.Result = res
	return ec.marshalOCWEConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_release(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_release_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Release(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ReleaseOrder), args["where"].(*ent.ReleaseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Release)
	fc.Result = res
	return ec.marshalORelease2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_license_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_license_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LicenseConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.LicenseOrder), args["where"].(*ent.LicenseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.LicenseConnection)
	fc.Result = res
	return ec.marshalOLicenseConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_project_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_project_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.ProjectOrder), args["where"].(*ent.ProjectWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ProjectConnection)
	fc.Result = res
	return ec.marshalOProjectConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_test_case_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_test_case_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TestCaseConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.TestCaseOrder), args["where"].(*ent.TestCaseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TestCaseConnection)
	fc.Result = res
	return ec.marshalOTestCaseConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_cve_rule(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_cve_rule_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CveRule(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.CVERuleOrder), args["where"].(*ent.CVERuleWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CVERule)
	fc.Result = res
	return ec.marshalOCVERule2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERule(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_component_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_component_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ComponentConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.ComponentOrder), args["where"].(*ent.ComponentWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ComponentConnection)
	fc.Result = res
	return ec.marshalOComponentConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_project(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_project_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Project(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ProjectOrder), args["where"].(*ent.ProjectWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Project)
	fc.Result = res
	return ec.marshalOProject2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_test_run_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_test_run_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TestRunConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.TestRunOrder), args["where"].(*ent.TestRunWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TestRunConnection)
	fc.Result = res
	return ec.marshalOTestRunConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vulnerability(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vulnerability_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Vulnerability(rctx, args["first"].(*int), args["last"].(*int), args["where"].(*ent.VulnerabilityWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Vulnerability)
	fc.Result = res
	return ec.marshalOVulnerability2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerability(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_cve_rule_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_cve_rule_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CveRuleConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.CVERuleOrder), args["where"].(*ent.CVERuleWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CVERuleConnection)
	fc.Result = res
	return ec.marshalOCVERuleConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_code_scan_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_code_scan_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CodeScanConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.CodeScanOrder), args["where"].(*ent.CodeScanWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CodeScanConnection)
	fc.Result = res
	return ec.marshalOCodeScanConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_code_scan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_code_scan_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CodeScan(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.CodeScanOrder), args["where"].(*ent.CodeScanWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CodeScan)
	fc.Result = res
	return ec.marshalOCodeScan2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_component(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_component_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Component(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.ComponentOrder), args["where"].(*ent.ComponentWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Component)
	fc.Result = res
	return ec.marshalOComponent2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vulnerability_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vulnerability_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VulnerabilityConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["where"].(*ent.VulnerabilityWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.VulnerabilityConnection)
	fc.Result = res
	return ec.marshalOVulnerabilityConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_code_issue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_code_issue_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CodeIssue(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.CodeIssueOrder), args["where"].(*ent.CodeIssueWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CodeIssue)
	fc.Result = res
	return ec.marshalOCodeIssue2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_component_use_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_component_use_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ComponentUseConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["where"].(*ent.ComponentUseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ComponentUseConnection)
	fc.Result = res
	return ec.marshalOComponentUseConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_commit_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_commit_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommitConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.GitCommitOrder), args["where"].(*ent.GitCommitWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.GitCommitConnection)
	fc.Result = res
	return ec.marshalOGitCommitConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_commit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_commit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Commit(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.GitCommitOrder), args["where"].(*ent.GitCommitWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.GitCommit)
	fc.Result = res
	return ec.marshalOGitCommit2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommit(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_release_connection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_release_connection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ReleaseConnection(rctx, args["first"].(*int), args["last"].(*int), args["before"].(*ent.Cursor), args["after"].(*ent.Cursor), args["order_by"].(*ent.ReleaseOrder), args["where"].(*ent.ReleaseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleaseConnection)
	fc.Result = res
	return ec.marshalOReleaseConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_test_run(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_test_run_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TestRun(rctx, args["first"].(*int), args["last"].(*int), args["order_by"].(*ent.TestRunOrder), args["where"].(*ent.TestRunWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestRun)
	fc.Result = res
	return ec.marshalOTestRun2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRun(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_id(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_name(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_version(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_status(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(release.Status)
	fc.Result = res
	return ec.marshalOReleaseStatus2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_subreleases(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_subreleases_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().Subreleases(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseWhereInput), args["order_by"].(*ent.ReleaseOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Release)
	fc.Result = res
	return ec.marshalORelease2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_dependencies(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_dependencies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().Dependencies(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseWhereInput), args["order_by"].(*ent.ReleaseOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Release)
	fc.Result = res
	return ec.marshalORelease2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_project(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Project(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Project)
	fc.Result = res
	return ec.marshalNProject2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_commit(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Commit(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.GitCommit)
	fc.Result = res
	return ec.marshalNGitCommit2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommit(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_log(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().Log(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ReleaseEntryWhereInput), args["order_by"].(*ent.ReleaseEntryOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseEntry)
	fc.Result = res
	return ec.marshalOReleaseEntry2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntry(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_artifacts(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_artifacts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().Artifacts(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ArtifactWhereInput), args["order_by"].(*ent.ArtifactOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Artifact)
	fc.Result = res
	return ec.marshalOArtifact2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifact(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_components(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_components_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().Components(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.ComponentUseWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ComponentUse)
	fc.Result = res
	return ec.marshalOComponentUse2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUse(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_code_scans(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_code_scans_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().CodeScans(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CodeScanWhereInput), args["order_by"].(*ent.CodeScanOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CodeScan)
	fc.Result = res
	return ec.marshalOCodeScan2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_test_runs(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Release_test_runs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().TestRuns(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.TestRunWhereInput), args["order_by"].(*ent.TestRunOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestRun)
	fc.Result = res
	return ec.marshalOTestRun2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRun(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_vulnerabilities(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().Vulnerabilities(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CVE)
	fc.Result = res
	return ec.marshalOCVE2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVE(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_licenses(ctx context.Context, field graphql.CollectedField, obj *ent.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Release().Licenses(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.License)
	fc.Result = res
	return ec.marshalOLicense2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicense(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseEdge)
	fc.Result = res
	return ec.marshalOReleaseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalORelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntry_id(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntry_type(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(releaseentry.Type)
	fc.Result = res
	return ec.marshalOReleaseEntryType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntry_time(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntry_artifact(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Artifact(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Artifact)
	fc.Result = res
	return ec.marshalOArtifact2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifact(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntry_code_scan(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CodeScan(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CodeScan)
	fc.Result = res
	return ec.marshalOCodeScan2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntry_test_run(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestRun(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TestRun)
	fc.Result = res
	return ec.marshalOTestRun2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRun(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntry_release(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalNRelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntryConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ReleaseEntryEdge)
	fc.Result = res
	return ec.marshalOReleaseEntryEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntryEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntryEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleaseEntry)
	fc.Result = res
	return ec.marshalOReleaseEntry2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntry(ctx, field.Selections, res)
}

func (ec *executionContext) _ReleaseEntryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ReleaseEntryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReleaseEntryEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _Repo_id(ctx context.Context, field graphql.CollectedField, obj *ent.Repo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Repo_name(ctx context.Context, field graphql.CollectedField, obj *ent.Repo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Repo_project(ctx context.Context, field graphql.CollectedField, obj *ent.Repo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repo",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Project(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Project)
	fc.Result = res
	return ec.marshalOProject2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) _Repo_commits(ctx context.Context, field graphql.CollectedField, obj *ent.Repo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repo",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Repo_commits_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repo().Commits(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.GitCommitWhereInput), args["order_by"].(*ent.GitCommitOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.GitCommit)
	fc.Result = res
	return ec.marshalOGitCommit2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommit(ctx, field.Selections, res)
}

func (ec *executionContext) _Repo_cve_rules(ctx context.Context, field graphql.CollectedField, obj *ent.Repo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repo",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Repo_cve_rules_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repo().CveRules(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.CVERuleWhereInput), args["order_by"].(*ent.CVERuleOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CVERule)
	fc.Result = res
	return ec.marshalOCVERule2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERule(ctx, field.Selections, res)
}

func (ec *executionContext) _RepoConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.RepoConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepoConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RepoConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.RepoConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepoConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _RepoConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.RepoConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepoConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.RepoEdge)
	fc.Result = res
	return ec.marshalORepoEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _RepoEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.RepoEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepoEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Repo)
	fc.Result = res
	return ec.marshalORepo2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx, field.Selections, res)
}

func (ec *executionContext) _RepoEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.RepoEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepoEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCase_id(ctx context.Context, field graphql.CollectedField, obj *ent.TestCase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCase_name(ctx context.Context, field graphql.CollectedField, obj *ent.TestCase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCase_result(ctx context.Context, field graphql.CollectedField, obj *ent.TestCase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCase_message(ctx context.Context, field graphql.CollectedField, obj *ent.TestCase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCase_elapsed(ctx context.Context, field graphql.CollectedField, obj *ent.TestCase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Elapsed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCase_run(ctx context.Context, field graphql.CollectedField, obj *ent.TestCase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCase",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Run(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TestRun)
	fc.Result = res
	return ec.marshalNTestRun2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRun(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCaseConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.TestCaseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCaseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCaseConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.TestCaseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCaseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCaseConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.TestCaseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCaseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestCaseEdge)
	fc.Result = res
	return ec.marshalOTestCaseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCaseEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.TestCaseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCaseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TestCase)
	fc.Result = res
	return ec.marshalOTestCase2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCase(ctx, field.Selections, res)
}

func (ec *executionContext) _TestCaseEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.TestCaseEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestCaseEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRun_id(ctx context.Context, field graphql.CollectedField, obj *ent.TestRun) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRun",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRun_tool(ctx context.Context, field graphql.CollectedField, obj *ent.TestRun) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRun",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRun_release(ctx context.Context, field graphql.CollectedField, obj *ent.TestRun) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRun",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Release)
	fc.Result = res
	return ec.marshalNRelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRun_entry(ctx context.Context, field graphql.CollectedField, obj *ent.TestRun) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRun",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entry(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ReleaseEntry)
	fc.Result = res
	return ec.marshalOReleaseEntry2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntry(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRun_tests(ctx context.Context, field graphql.CollectedField, obj *ent.TestRun) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRun",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_TestRun_tests_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TestRun().Tests(rctx, obj, args["first"].(*int), args["last"].(*int), args["where"].(*ent.TestCaseWhereInput), args["order_by"].(*ent.TestCaseOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestCase)
	fc.Result = res
	return ec.marshalOTestCase2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCase(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRunConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.TestRunConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRunConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRunConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.TestRunConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRunConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRunConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.TestRunConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRunConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestRunEdge)
	fc.Result = res
	return ec.marshalOTestRunEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRunEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.TestRunEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRunEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TestRun)
	fc.Result = res
	return ec.marshalOTestRun2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRun(ctx, field.Selections, res)
}

func (ec *executionContext) _TestRunEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.TestRunEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestRunEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) _Vulnerability_id(ctx context.Context, field graphql.CollectedField, obj *ent.Vulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Vulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Vulnerability_cve(ctx context.Context, field graphql.CollectedField, obj *ent.Vulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Vulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cve(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CVE)
	fc.Result = res
	return ec.marshalNCVE2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVE(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.VulnerabilityEdge)
	fc.Result = res
	return ec.marshalOVulnerabilityEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Vulnerability)
	fc.Result = res
	return ec.marshalOVulnerability2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerability(ctx, field.Selections, res)
}

func (ec *executionContext) _VulnerabilityEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.VulnerabilityEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VulnerabilityEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputArtifactOrder(ctx context.Context, obj interface{}) (ent.ArtifactOrder, error) {
	var it ent.ArtifactOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOArtifactOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputArtifactWhereInput(ctx context.Context, obj interface{}) (ent.ArtifactWhereInput, error) {
	var it ent.ArtifactWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOArtifactWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOArtifactWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOArtifactWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_neq"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_in"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_has_prefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_has_suffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_equal_fold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains_fold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256"))
			it.Sha256, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256_neq"))
			it.Sha256NEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256_in"))
			it.Sha256In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256_not_in"))
			it.Sha256NotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256_gt"))
			it.Sha256GT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256_gte"))
			it.Sha256GTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256_lt"))
			it.Sha256LT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256_lte"))
			it.Sha256LTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256_contains"))
			it.Sha256Contains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256_has_prefix"))
			it.Sha256HasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256_has_suffix"))
			it.Sha256HasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256_equal_fold"))
			it.Sha256EqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sha256_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256_contains_fold"))
			it.Sha256ContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOArtifactType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_neq"))
			it.TypeNEQ, err = ec.unmarshalOArtifactType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_in"))
			it.TypeIn, err = ec.unmarshalOArtifactType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_not_in"))
			it.TypeNotIn, err = ec.unmarshalOArtifactType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_release":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_release"))
			it.HasRelease, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_release_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_release_with"))
			it.HasReleaseWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_entry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_entry"))
			it.HasEntry, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_entry_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_entry_with"))
			it.HasEntryWith, err = ec.unmarshalOReleaseEntryWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCVEOrder(ctx context.Context, obj interface{}) (ent.CVEOrder, error) {
	var it ent.CVEOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOCVEOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCVERuleOrder(ctx context.Context, obj interface{}) (ent.CVERuleOrder, error) {
	var it ent.CVERuleOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOCVERuleOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCVERuleWhereInput(ctx context.Context, obj interface{}) (ent.CVERuleWhereInput, error) {
	var it ent.CVERuleWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCVERuleWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCVERuleWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCVERuleWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_neq"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_in"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_has_prefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_has_suffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_is_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_is_nil"))
			it.NameIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_nil"))
			it.NameNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_equal_fold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains_fold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_cve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_cve"))
			it.HasCve, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_cve_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_cve_with"))
			it.HasCveWith, err = ec.unmarshalOCVEWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_project":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_project"))
			it.HasProject, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_project_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_project_with"))
			it.HasProjectWith, err = ec.unmarshalOProjectWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_repo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_repo"))
			it.HasRepo, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_repo_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_repo_with"))
			it.HasRepoWith, err = ec.unmarshalORepoWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCVEWhereInput(ctx context.Context, obj interface{}) (ent.CVEWhereInput, error) {
	var it ent.CVEWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCVEWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCVEWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCVEWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "cve_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cve_id"))
			it.CveID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cve_id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cve_id_neq"))
			it.CveIDNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cve_id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cve_id_in"))
			it.CveIDIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "cve_id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cve_id_not_in"))
			it.CveIDNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "cve_id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cve_id_gt"))
			it.CveIDGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cve_id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cve_id_gte"))
			it.CveIDGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cve_id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cve_id_lt"))
			it.CveIDLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cve_id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cve_id_lte"))
			it.CveIDLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cve_id_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cve_id_contains"))
			it.CveIDContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cve_id_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cve_id_has_prefix"))
			it.CveIDHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cve_id_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cve_id_has_suffix"))
			it.CveIDHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cve_id_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cve_id_equal_fold"))
			it.CveIDEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cve_id_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cve_id_contains_fold"))
			it.CveIDContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_neq"))
			it.DescriptionNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_in"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_not_in"))
			it.DescriptionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gt"))
			it.DescriptionGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gte"))
			it.DescriptionGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lt"))
			it.DescriptionLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lte"))
			it.DescriptionLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_contains"))
			it.DescriptionContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_has_prefix"))
			it.DescriptionHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_has_suffix"))
			it.DescriptionHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_is_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_is_nil"))
			it.DescriptionIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_not_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_not_nil"))
			it.DescriptionNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_equal_fold"))
			it.DescriptionEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_contains_fold"))
			it.DescriptionContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity_score"))
			it.SeverityScore, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity_score_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity_score_neq"))
			it.SeverityScoreNEQ, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity_score_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity_score_in"))
			it.SeverityScoreIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity_score_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity_score_not_in"))
			it.SeverityScoreNotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity_score_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity_score_gt"))
			it.SeverityScoreGT, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity_score_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity_score_gte"))
			it.SeverityScoreGTE, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity_score_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity_score_lt"))
			it.SeverityScoreLT, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity_score_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity_score_lte"))
			it.SeverityScoreLTE, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity"))
			it.Severity, err = ec.unmarshalOCVESeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcveᚐSeverity(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity_neq"))
			it.SeverityNEQ, err = ec.unmarshalOCVESeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcveᚐSeverity(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity_in"))
			it.SeverityIn, err = ec.unmarshalOCVESeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcveᚐSeverityᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity_not_in"))
			it.SeverityNotIn, err = ec.unmarshalOCVESeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcveᚐSeverityᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "published_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published_data"))
			it.PublishedData, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "published_data_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published_data_neq"))
			it.PublishedDataNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "published_data_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published_data_in"))
			it.PublishedDataIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "published_data_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published_data_not_in"))
			it.PublishedDataNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "published_data_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published_data_gt"))
			it.PublishedDataGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "published_data_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published_data_gte"))
			it.PublishedDataGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "published_data_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published_data_lt"))
			it.PublishedDataLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "published_data_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published_data_lte"))
			it.PublishedDataLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "published_data_is_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published_data_is_nil"))
			it.PublishedDataIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "published_data_not_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published_data_not_nil"))
			it.PublishedDataNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "modified_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modified_data"))
			it.ModifiedData, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "modified_data_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modified_data_neq"))
			it.ModifiedDataNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "modified_data_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modified_data_in"))
			it.ModifiedDataIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "modified_data_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modified_data_not_in"))
			it.ModifiedDataNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "modified_data_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modified_data_gt"))
			it.ModifiedDataGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "modified_data_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modified_data_gte"))
			it.ModifiedDataGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "modified_data_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modified_data_lt"))
			it.ModifiedDataLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "modified_data_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modified_data_lte"))
			it.ModifiedDataLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "modified_data_is_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modified_data_is_nil"))
			it.ModifiedDataIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "modified_data_not_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modified_data_not_nil"))
			it.ModifiedDataNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_components":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_components"))
			it.HasComponents, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_components_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_components_with"))
			it.HasComponentsWith, err = ec.unmarshalOComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_vulnerabilities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_vulnerabilities"))
			it.HasVulnerabilities, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_vulnerabilities_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_vulnerabilities_with"))
			it.HasVulnerabilitiesWith, err = ec.unmarshalOVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_rules":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_rules"))
			it.HasRules, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_rules_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_rules_with"))
			it.HasRulesWith, err = ec.unmarshalOCVERuleWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCWEOrder(ctx context.Context, obj interface{}) (ent.CWEOrder, error) {
	var it ent.CWEOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOCWEOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCWEWhereInput(ctx context.Context, obj interface{}) (ent.CWEWhereInput, error) {
	var it ent.CWEWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCWEWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCWEWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCWEWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "cwe_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cwe_id"))
			it.CweID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cwe_id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cwe_id_neq"))
			it.CweIDNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cwe_id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cwe_id_in"))
			it.CweIDIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "cwe_id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cwe_id_not_in"))
			it.CweIDNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "cwe_id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cwe_id_gt"))
			it.CweIDGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cwe_id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cwe_id_gte"))
			it.CweIDGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cwe_id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cwe_id_lt"))
			it.CweIDLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cwe_id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cwe_id_lte"))
			it.CweIDLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cwe_id_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cwe_id_contains"))
			it.CweIDContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cwe_id_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cwe_id_has_prefix"))
			it.CweIDHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cwe_id_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cwe_id_has_suffix"))
			it.CweIDHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cwe_id_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cwe_id_equal_fold"))
			it.CweIDEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cwe_id_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cwe_id_contains_fold"))
			it.CweIDContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_neq"))
			it.DescriptionNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_in"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_not_in"))
			it.DescriptionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gt"))
			it.DescriptionGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gte"))
			it.DescriptionGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lt"))
			it.DescriptionLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lte"))
			it.DescriptionLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_contains"))
			it.DescriptionContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_has_prefix"))
			it.DescriptionHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_has_suffix"))
			it.DescriptionHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_is_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_is_nil"))
			it.DescriptionIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_not_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_not_nil"))
			it.DescriptionNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_equal_fold"))
			it.DescriptionEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_contains_fold"))
			it.DescriptionContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_neq"))
			it.URLNEQ, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_in"))
			it.URLIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_not_in"))
			it.URLNotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_gt"))
			it.URLGT, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_gte"))
			it.URLGTE, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_lt"))
			it.URLLT, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_lte"))
			it.URLLTE, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_is_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_is_nil"))
			it.URLIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_not_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_not_nil"))
			it.URLNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_issues":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_issues"))
			it.HasIssues, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_issues_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_issues_with"))
			it.HasIssuesWith, err = ec.unmarshalOCodeIssueWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCodeIssueOrder(ctx context.Context, obj interface{}) (ent.CodeIssueOrder, error) {
	var it ent.CodeIssueOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOCodeIssueOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCodeIssueWhereInput(ctx context.Context, obj interface{}) (ent.CodeIssueWhereInput, error) {
	var it ent.CodeIssueWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCodeIssueWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCodeIssueWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCodeIssueWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "rule_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rule_id"))
			it.RuleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rule_id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rule_id_neq"))
			it.RuleIDNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rule_id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rule_id_in"))
			it.RuleIDIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "rule_id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rule_id_not_in"))
			it.RuleIDNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "rule_id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rule_id_gt"))
			it.RuleIDGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rule_id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rule_id_gte"))
			it.RuleIDGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rule_id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rule_id_lt"))
			it.RuleIDLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rule_id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rule_id_lte"))
			it.RuleIDLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rule_id_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rule_id_contains"))
			it.RuleIDContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rule_id_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rule_id_has_prefix"))
			it.RuleIDHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rule_id_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rule_id_has_suffix"))
			it.RuleIDHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rule_id_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rule_id_equal_fold"))
			it.RuleIDEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rule_id_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rule_id_contains_fold"))
			it.RuleIDContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_neq"))
			it.MessageNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_in"))
			it.MessageIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_not_in"))
			it.MessageNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_gt"))
			it.MessageGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_gte"))
			it.MessageGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_lt"))
			it.MessageLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_lte"))
			it.MessageLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_contains"))
			it.MessageContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_has_prefix"))
			it.MessageHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_has_suffix"))
			it.MessageHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_equal_fold"))
			it.MessageEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_contains_fold"))
			it.MessageContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity"))
			it.Severity, err = ec.unmarshalOCodeIssueSeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity_neq"))
			it.SeverityNEQ, err = ec.unmarshalOCodeIssueSeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity_in"))
			it.SeverityIn, err = ec.unmarshalOCodeIssueSeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverityᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity_not_in"))
			it.SeverityNotIn, err = ec.unmarshalOCodeIssueSeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverityᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOCodeIssueType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_neq"))
			it.TypeNEQ, err = ec.unmarshalOCodeIssueType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_in"))
			it.TypeIn, err = ec.unmarshalOCodeIssueType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_not_in"))
			it.TypeNotIn, err = ec.unmarshalOCodeIssueType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_cwe":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_cwe"))
			it.HasCwe, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_cwe_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_cwe_with"))
			it.HasCweWith, err = ec.unmarshalOCWEWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_scan":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_scan"))
			it.HasScan, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_scan_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_scan_with"))
			it.HasScanWith, err = ec.unmarshalOCodeScanWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCodeScanOrder(ctx context.Context, obj interface{}) (ent.CodeScanOrder, error) {
	var it ent.CodeScanOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOCodeScanOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCodeScanWhereInput(ctx context.Context, obj interface{}) (ent.CodeScanWhereInput, error) {
	var it ent.CodeScanWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCodeScanWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCodeScanWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCodeScanWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool"))
			it.Tool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_neq"))
			it.ToolNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_in"))
			it.ToolIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_not_in"))
			it.ToolNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_gt"))
			it.ToolGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_gte"))
			it.ToolGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_lt"))
			it.ToolLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_lte"))
			it.ToolLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_contains"))
			it.ToolContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_has_prefix"))
			it.ToolHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_has_suffix"))
			it.ToolHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_equal_fold"))
			it.ToolEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_contains_fold"))
			it.ToolContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_release":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_release"))
			it.HasRelease, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_release_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_release_with"))
			it.HasReleaseWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_entry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_entry"))
			it.HasEntry, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_entry_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_entry_with"))
			it.HasEntryWith, err = ec.unmarshalOReleaseEntryWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_issues":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_issues"))
			it.HasIssues, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_issues_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_issues_with"))
			it.HasIssuesWith, err = ec.unmarshalOCodeIssueWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_components":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_components"))
			it.HasComponents, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_components_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_components_with"))
			it.HasComponentsWith, err = ec.unmarshalOComponentUseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputComponentOrder(ctx context.Context, obj interface{}) (ent.ComponentOrder, error) {
	var it ent.ComponentOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOComponentOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputComponentUseWhereInput(ctx context.Context, obj interface{}) (ent.ComponentUseWhereInput, error) {
	var it ent.ComponentUseWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOComponentUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOComponentUseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOComponentUseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_release":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_release"))
			it.HasRelease, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_release_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_release_with"))
			it.HasReleaseWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_scans":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_scans"))
			it.HasScans, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_scans_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_scans_with"))
			it.HasScansWith, err = ec.unmarshalOCodeScanWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_component":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_component"))
			it.HasComponent, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_component_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_component_with"))
			it.HasComponentWith, err = ec.unmarshalOComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputComponentWhereInput(ctx context.Context, obj interface{}) (ent.ComponentWhereInput, error) {
	var it ent.ComponentWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_neq"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_in"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_has_prefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_has_suffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_equal_fold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains_fold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor"))
			it.Vendor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_neq"))
			it.VendorNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_in"))
			it.VendorIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_not_in"))
			it.VendorNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_gt"))
			it.VendorGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_gte"))
			it.VendorGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_lt"))
			it.VendorLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_lte"))
			it.VendorLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_contains"))
			it.VendorContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_has_prefix"))
			it.VendorHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_has_suffix"))
			it.VendorHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_equal_fold"))
			it.VendorEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_contains_fold"))
			it.VendorContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_neq"))
			it.VersionNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_in"))
			it.VersionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_not_in"))
			it.VersionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_gt"))
			it.VersionGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_gte"))
			it.VersionGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_lt"))
			it.VersionLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_lte"))
			it.VersionLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_contains"))
			it.VersionContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_has_prefix"))
			it.VersionHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_has_suffix"))
			it.VersionHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_equal_fold"))
			it.VersionEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_contains_fold"))
			it.VersionContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_neq"))
			it.DescriptionNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_in"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_not_in"))
			it.DescriptionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gt"))
			it.DescriptionGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gte"))
			it.DescriptionGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lt"))
			it.DescriptionLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lte"))
			it.DescriptionLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_contains"))
			it.DescriptionContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_has_prefix"))
			it.DescriptionHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_has_suffix"))
			it.DescriptionHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_equal_fold"))
			it.DescriptionEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_contains_fold"))
			it.DescriptionContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_neq"))
			it.URLNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_in"))
			it.URLIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_not_in"))
			it.URLNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_gt"))
			it.URLGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_gte"))
			it.URLGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_lt"))
			it.URLLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_lte"))
			it.URLLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_contains"))
			it.URLContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_has_prefix"))
			it.URLHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_has_suffix"))
			it.URLHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_equal_fold"))
			it.URLEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_contains_fold"))
			it.URLContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_cves":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_cves"))
			it.HasCves, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_cves_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_cves_with"))
			it.HasCvesWith, err = ec.unmarshalOCVEWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_licenses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_licenses"))
			it.HasLicenses, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_licenses_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_licenses_with"))
			it.HasLicensesWith, err = ec.unmarshalOLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_uses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_uses"))
			it.HasUses, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_uses_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_uses_with"))
			it.HasUsesWith, err = ec.unmarshalOComponentUseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGitCommitOrder(ctx context.Context, obj interface{}) (ent.GitCommitOrder, error) {
	var it ent.GitCommitOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOGitCommitOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGitCommitWhereInput(ctx context.Context, obj interface{}) (ent.GitCommitWhereInput, error) {
	var it ent.GitCommitWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOGitCommitWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOGitCommitWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOGitCommitWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hash":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hash"))
			it.Hash, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hash_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hash_neq"))
			it.HashNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hash_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hash_in"))
			it.HashIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hash_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hash_not_in"))
			it.HashNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "hash_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hash_gt"))
			it.HashGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hash_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hash_gte"))
			it.HashGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hash_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hash_lt"))
			it.HashLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hash_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hash_lte"))
			it.HashLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hash_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hash_contains"))
			it.HashContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hash_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hash_has_prefix"))
			it.HashHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hash_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hash_has_suffix"))
			it.HashHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hash_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hash_equal_fold"))
			it.HashEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hash_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hash_contains_fold"))
			it.HashContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branch"))
			it.Branch, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branch_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branch_neq"))
			it.BranchNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branch_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branch_in"))
			it.BranchIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "branch_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branch_not_in"))
			it.BranchNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "branch_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branch_gt"))
			it.BranchGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branch_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branch_gte"))
			it.BranchGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branch_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branch_lt"))
			it.BranchLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branch_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branch_lte"))
			it.BranchLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branch_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branch_contains"))
			it.BranchContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branch_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branch_has_prefix"))
			it.BranchHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branch_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branch_has_suffix"))
			it.BranchHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branch_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branch_equal_fold"))
			it.BranchEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branch_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branch_contains_fold"))
			it.BranchContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_neq"))
			it.TagNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_in"))
			it.TagIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_not_in"))
			it.TagNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_gt"))
			it.TagGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_gte"))
			it.TagGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_lt"))
			it.TagLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_lte"))
			it.TagLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_contains"))
			it.TagContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_has_prefix"))
			it.TagHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_has_suffix"))
			it.TagHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_is_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_is_nil"))
			it.TagIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_not_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_not_nil"))
			it.TagNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_equal_fold"))
			it.TagEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_contains_fold"))
			it.TagContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time"))
			it.Time, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "time_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time_neq"))
			it.TimeNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time_in"))
			it.TimeIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "time_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time_not_in"))
			it.TimeNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "time_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time_gt"))
			it.TimeGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "time_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time_gte"))
			it.TimeGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "time_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time_lt"))
			it.TimeLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "time_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time_lte"))
			it.TimeLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_repo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_repo"))
			it.HasRepo, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_repo_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_repo_with"))
			it.HasRepoWith, err = ec.unmarshalORepoWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_release":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_release"))
			it.HasRelease, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_release_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_release_with"))
			it.HasReleaseWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLicenseOrder(ctx context.Context, obj interface{}) (ent.LicenseOrder, error) {
	var it ent.LicenseOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOLicenseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLicenseUseWhereInput(ctx context.Context, obj interface{}) (ent.LicenseUseWhereInput, error) {
	var it ent.LicenseUseWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOLicenseUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUseWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOLicenseUseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOLicenseUseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_license"))
			it.HasLicense, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_license_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_license_with"))
			it.HasLicenseWith, err = ec.unmarshalOLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLicenseWhereInput(ctx context.Context, obj interface{}) (ent.LicenseWhereInput, error) {
	var it ent.LicenseWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "spdx_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spdx_id"))
			it.SpdxID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "spdx_id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spdx_id_neq"))
			it.SpdxIDNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "spdx_id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spdx_id_in"))
			it.SpdxIDIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "spdx_id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spdx_id_not_in"))
			it.SpdxIDNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "spdx_id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spdx_id_gt"))
			it.SpdxIDGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "spdx_id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spdx_id_gte"))
			it.SpdxIDGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "spdx_id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spdx_id_lt"))
			it.SpdxIDLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "spdx_id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spdx_id_lte"))
			it.SpdxIDLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "spdx_id_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spdx_id_contains"))
			it.SpdxIDContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "spdx_id_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spdx_id_has_prefix"))
			it.SpdxIDHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "spdx_id_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spdx_id_has_suffix"))
			it.SpdxIDHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "spdx_id_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spdx_id_equal_fold"))
			it.SpdxIDEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "spdx_id_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spdx_id_contains_fold"))
			it.SpdxIDContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_neq"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_in"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_has_prefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_has_suffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_equal_fold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains_fold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference"))
			it.Reference, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_neq"))
			it.ReferenceNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_in"))
			it.ReferenceIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_not_in"))
			it.ReferenceNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_gt"))
			it.ReferenceGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_gte"))
			it.ReferenceGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_lt"))
			it.ReferenceLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_lte"))
			it.ReferenceLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_contains"))
			it.ReferenceContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_has_prefix"))
			it.ReferenceHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_has_suffix"))
			it.ReferenceHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_is_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_is_nil"))
			it.ReferenceIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_not_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_not_nil"))
			it.ReferenceNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_equal_fold"))
			it.ReferenceEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_contains_fold"))
			it.ReferenceContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details_url"))
			it.DetailsURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details_url_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details_url_neq"))
			it.DetailsURLNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details_url_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details_url_in"))
			it.DetailsURLIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "details_url_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details_url_not_in"))
			it.DetailsURLNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "details_url_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details_url_gt"))
			it.DetailsURLGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details_url_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details_url_gte"))
			it.DetailsURLGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details_url_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details_url_lt"))
			it.DetailsURLLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details_url_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details_url_lte"))
			it.DetailsURLLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details_url_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details_url_contains"))
			it.DetailsURLContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details_url_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details_url_has_prefix"))
			it.DetailsURLHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details_url_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details_url_has_suffix"))
			it.DetailsURLHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details_url_is_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details_url_is_nil"))
			it.DetailsURLIsNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "details_url_not_nil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details_url_not_nil"))
			it.DetailsURLNotNil, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "details_url_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details_url_equal_fold"))
			it.DetailsURLEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details_url_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details_url_contains_fold"))
			it.DetailsURLContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_osi_approved":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_osi_approved"))
			it.IsOsiApproved, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_osi_approved_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_osi_approved_neq"))
			it.IsOsiApprovedNEQ, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_components":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_components"))
			it.HasComponents, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_components_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_components_with"))
			it.HasComponentsWith, err = ec.unmarshalOComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_uses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_uses"))
			it.HasUses, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_uses_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_uses_with"))
			it.HasUsesWith, err = ec.unmarshalOLicenseUseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectOrder(ctx context.Context, obj interface{}) (ent.ProjectOrder, error) {
	var it ent.ProjectOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOProjectOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectWhereInput(ctx context.Context, obj interface{}) (ent.ProjectWhereInput, error) {
	var it ent.ProjectWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOProjectWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOProjectWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOProjectWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_neq"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_in"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_has_prefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_has_suffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_equal_fold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains_fold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_repos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_repos"))
			it.HasRepos, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_repos_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_repos_with"))
			it.HasReposWith, err = ec.unmarshalORepoWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_releases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_releases"))
			it.HasReleases, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_releases_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_releases_with"))
			it.HasReleasesWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_cve_rules":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_cve_rules"))
			it.HasCveRules, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_cve_rules_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_cve_rules_with"))
			it.HasCveRulesWith, err = ec.unmarshalOCVERuleWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReleaseEntryOrder(ctx context.Context, obj interface{}) (ent.ReleaseEntryOrder, error) {
	var it ent.ReleaseEntryOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOReleaseEntryOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReleaseEntryWhereInput(ctx context.Context, obj interface{}) (ent.ReleaseEntryWhereInput, error) {
	var it ent.ReleaseEntryWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOReleaseEntryWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOReleaseEntryWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOReleaseEntryWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOReleaseEntryType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_neq"))
			it.TypeNEQ, err = ec.unmarshalOReleaseEntryType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_in"))
			it.TypeIn, err = ec.unmarshalOReleaseEntryType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_not_in"))
			it.TypeNotIn, err = ec.unmarshalOReleaseEntryType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time"))
			it.Time, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "time_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time_neq"))
			it.TimeNEQ, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time_in"))
			it.TimeIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "time_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time_not_in"))
			it.TimeNotIn, err = ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "time_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time_gt"))
			it.TimeGT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "time_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time_gte"))
			it.TimeGTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "time_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time_lt"))
			it.TimeLT, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "time_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time_lte"))
			it.TimeLTE, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_artifact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_artifact"))
			it.HasArtifact, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_artifact_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_artifact_with"))
			it.HasArtifactWith, err = ec.unmarshalOArtifactWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_code_scan":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_code_scan"))
			it.HasCodeScan, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_code_scan_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_code_scan_with"))
			it.HasCodeScanWith, err = ec.unmarshalOCodeScanWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_test_run":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_test_run"))
			it.HasTestRun, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_test_run_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_test_run_with"))
			it.HasTestRunWith, err = ec.unmarshalOTestRunWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_release":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_release"))
			it.HasRelease, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_release_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_release_with"))
			it.HasReleaseWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReleaseOrder(ctx context.Context, obj interface{}) (ent.ReleaseOrder, error) {
	var it ent.ReleaseOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOReleaseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReleaseWhereInput(ctx context.Context, obj interface{}) (ent.ReleaseWhereInput, error) {
	var it ent.ReleaseWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_neq"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_in"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_has_prefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_has_suffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_equal_fold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains_fold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_neq"))
			it.VersionNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_in"))
			it.VersionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_not_in"))
			it.VersionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_gt"))
			it.VersionGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_gte"))
			it.VersionGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_lt"))
			it.VersionLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_lte"))
			it.VersionLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_contains"))
			it.VersionContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_has_prefix"))
			it.VersionHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_has_suffix"))
			it.VersionHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_equal_fold"))
			it.VersionEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_contains_fold"))
			it.VersionContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOReleaseStatus2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_neq"))
			it.StatusNEQ, err = ec.unmarshalOReleaseStatus2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_in"))
			it.StatusIn, err = ec.unmarshalOReleaseStatus2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_not_in"))
			it.StatusNotIn, err = ec.unmarshalOReleaseStatus2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_subreleases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_subreleases"))
			it.HasSubreleases, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_subreleases_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_subreleases_with"))
			it.HasSubreleasesWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_dependencies":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_dependencies"))
			it.HasDependencies, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_dependencies_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_dependencies_with"))
			it.HasDependenciesWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_project":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_project"))
			it.HasProject, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_project_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_project_with"))
			it.HasProjectWith, err = ec.unmarshalOProjectWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_commit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_commit"))
			it.HasCommit, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_commit_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_commit_with"))
			it.HasCommitWith, err = ec.unmarshalOGitCommitWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_log":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_log"))
			it.HasLog, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_log_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_log_with"))
			it.HasLogWith, err = ec.unmarshalOReleaseEntryWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_artifacts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_artifacts"))
			it.HasArtifacts, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_artifacts_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_artifacts_with"))
			it.HasArtifactsWith, err = ec.unmarshalOArtifactWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_components":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_components"))
			it.HasComponents, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_components_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_components_with"))
			it.HasComponentsWith, err = ec.unmarshalOComponentUseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_code_scans":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_code_scans"))
			it.HasCodeScans, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_code_scans_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_code_scans_with"))
			it.HasCodeScansWith, err = ec.unmarshalOCodeScanWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_test_runs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_test_runs"))
			it.HasTestRuns, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_test_runs_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_test_runs_with"))
			it.HasTestRunsWith, err = ec.unmarshalOTestRunWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRepoOrder(ctx context.Context, obj interface{}) (ent.RepoOrder, error) {
	var it ent.RepoOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalORepoOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRepoWhereInput(ctx context.Context, obj interface{}) (ent.RepoWhereInput, error) {
	var it ent.RepoWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalORepoWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORepoWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORepoWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_neq"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_in"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_has_prefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_has_suffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_equal_fold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains_fold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_project":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_project"))
			it.HasProject, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_project_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_project_with"))
			it.HasProjectWith, err = ec.unmarshalOProjectWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_commits":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_commits"))
			it.HasCommits, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_commits_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_commits_with"))
			it.HasCommitsWith, err = ec.unmarshalOGitCommitWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_cve_rules":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_cve_rules"))
			it.HasCveRules, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_cve_rules_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_cve_rules_with"))
			it.HasCveRulesWith, err = ec.unmarshalOCVERuleWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestCaseOrder(ctx context.Context, obj interface{}) (ent.TestCaseOrder, error) {
	var it ent.TestCaseOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOTestCaseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestCaseWhereInput(ctx context.Context, obj interface{}) (ent.TestCaseWhereInput, error) {
	var it ent.TestCaseWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOTestCaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOTestCaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOTestCaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_neq"))
			it.NameNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_in"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_has_prefix"))
			it.NameHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_has_suffix"))
			it.NameHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_equal_fold"))
			it.NameEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_contains_fold"))
			it.NameContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("result"))
			it.Result, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "result_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("result_neq"))
			it.ResultNEQ, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_neq"))
			it.MessageNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_in"))
			it.MessageIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_not_in"))
			it.MessageNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_gt"))
			it.MessageGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_gte"))
			it.MessageGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_lt"))
			it.MessageLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_lte"))
			it.MessageLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_contains"))
			it.MessageContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_has_prefix"))
			it.MessageHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_has_suffix"))
			it.MessageHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_equal_fold"))
			it.MessageEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message_contains_fold"))
			it.MessageContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsed"))
			it.Elapsed, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsed_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsed_neq"))
			it.ElapsedNEQ, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsed_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsed_in"))
			it.ElapsedIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsed_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsed_not_in"))
			it.ElapsedNotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsed_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsed_gt"))
			it.ElapsedGT, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsed_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsed_gte"))
			it.ElapsedGTE, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsed_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsed_lt"))
			it.ElapsedLT, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsed_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsed_lte"))
			it.ElapsedLTE, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_run":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_run"))
			it.HasRun, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_run_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_run_with"))
			it.HasRunWith, err = ec.unmarshalOTestRunWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestRunOrder(ctx context.Context, obj interface{}) (ent.TestRunOrder, error) {
	var it ent.TestRunOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOTestRunOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestRunWhereInput(ctx context.Context, obj interface{}) (ent.TestRunWhereInput, error) {
	var it ent.TestRunWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOTestRunWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOTestRunWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOTestRunWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool"))
			it.Tool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_neq"))
			it.ToolNEQ, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_in"))
			it.ToolIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_not_in"))
			it.ToolNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_gt"))
			it.ToolGT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_gte"))
			it.ToolGTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_lt"))
			it.ToolLT, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_lte"))
			it.ToolLTE, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_contains"))
			it.ToolContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_has_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_has_prefix"))
			it.ToolHasPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_has_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_has_suffix"))
			it.ToolHasSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_equal_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_equal_fold"))
			it.ToolEqualFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tool_contains_fold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tool_contains_fold"))
			it.ToolContainsFold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_release":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_release"))
			it.HasRelease, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_release_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_release_with"))
			it.HasReleaseWith, err = ec.unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_entry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_entry"))
			it.HasEntry, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_entry_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_entry_with"))
			it.HasEntryWith, err = ec.unmarshalOReleaseEntryWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_tests":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_tests"))
			it.HasTests, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_tests_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_tests_with"))
			it.HasTestsWith, err = ec.unmarshalOTestCaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVulnerabilityWhereInput(ctx context.Context, obj interface{}) (ent.VulnerabilityWhereInput, error) {
	var it ent.VulnerabilityWhereInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_neq"))
			it.IDNEQ, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLT, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLTE, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_cve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_cve"))
			it.HasCve, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_cve_with":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_cve_with"))
			it.HasCveWith, err = ec.unmarshalOCVEWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj ent.Noder) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *ent.Release:
		if obj == nil {
			return graphql.Null
		}
		return ec._Release(ctx, sel, obj)
	case *ent.Artifact:
		if obj == nil {
			return graphql.Null
		}
		return ec._Artifact(ctx, sel, obj)
	case *ent.TestRun:
		if obj == nil {
			return graphql.Null
		}
		return ec._TestRun(ctx, sel, obj)
	case *ent.Project:
		if obj == nil {
			return graphql.Null
		}
		return ec._Project(ctx, sel, obj)
	case *ent.CVERule:
		if obj == nil {
			return graphql.Null
		}
		return ec._CVERule(ctx, sel, obj)
	case *ent.GitCommit:
		if obj == nil {
			return graphql.Null
		}
		return ec._GitCommit(ctx, sel, obj)
	case *ent.Component:
		if obj == nil {
			return graphql.Null
		}
		return ec._Component(ctx, sel, obj)
	case *ent.CodeIssue:
		if obj == nil {
			return graphql.Null
		}
		return ec._CodeIssue(ctx, sel, obj)
	case *ent.Repo:
		if obj == nil {
			return graphql.Null
		}
		return ec._Repo(ctx, sel, obj)
	case *ent.CVE:
		if obj == nil {
			return graphql.Null
		}
		return ec._CVE(ctx, sel, obj)
	case *ent.ComponentUse:
		if obj == nil {
			return graphql.Null
		}
		return ec._ComponentUse(ctx, sel, obj)
	case *ent.License:
		if obj == nil {
			return graphql.Null
		}
		return ec._License(ctx, sel, obj)
	case *ent.CWE:
		if obj == nil {
			return graphql.Null
		}
		return ec._CWE(ctx, sel, obj)
	case *ent.LicenseUse:
		if obj == nil {
			return graphql.Null
		}
		return ec._LicenseUse(ctx, sel, obj)
	case *ent.ReleaseEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ReleaseEntry(ctx, sel, obj)
	case *ent.CodeScan:
		if obj == nil {
			return graphql.Null
		}
		return ec._CodeScan(ctx, sel, obj)
	case *ent.TestCase:
		if obj == nil {
			return graphql.Null
		}
		return ec._TestCase(ctx, sel, obj)
	case *ent.Vulnerability:
		if obj == nil {
			return graphql.Null
		}
		return ec._Vulnerability(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var artifactImplementors = []string{"Artifact", "Node"}

func (ec *executionContext) _Artifact(ctx context.Context, sel ast.SelectionSet, obj *ent.Artifact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, artifactImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Artifact")
		case "id":
			out.Values[i] = ec._Artifact_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Artifact_name(ctx, field, obj)
		case "sha256":
			out.Values[i] = ec._Artifact_sha256(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Artifact_type(ctx, field, obj)
		case "release":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Artifact_release(ctx, field, obj)
				return res
			})
		case "entry":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Artifact_entry(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var artifactConnectionImplementors = []string{"ArtifactConnection"}

func (ec *executionContext) _ArtifactConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ArtifactConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, artifactConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArtifactConnection")
		case "totalCount":
			out.Values[i] = ec._ArtifactConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ArtifactConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ArtifactConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var artifactEdgeImplementors = []string{"ArtifactEdge"}

func (ec *executionContext) _ArtifactEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ArtifactEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, artifactEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArtifactEdge")
		case "node":
			out.Values[i] = ec._ArtifactEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ArtifactEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cVEImplementors = []string{"CVE", "Node"}

func (ec *executionContext) _CVE(ctx context.Context, sel ast.SelectionSet, obj *ent.CVE) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cVEImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CVE")
		case "id":
			out.Values[i] = ec._CVE_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "cve_id":
			out.Values[i] = ec._CVE_cve_id(ctx, field, obj)
		case "description":
			out.Values[i] = ec._CVE_description(ctx, field, obj)
		case "severity_score":
			out.Values[i] = ec._CVE_severity_score(ctx, field, obj)
		case "severity":
			out.Values[i] = ec._CVE_severity(ctx, field, obj)
		case "published_data":
			out.Values[i] = ec._CVE_published_data(ctx, field, obj)
		case "modified_data":
			out.Values[i] = ec._CVE_modified_data(ctx, field, obj)
		case "components":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CVE_components(ctx, field, obj)
				return res
			})
		case "vulnerabilities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CVE_vulnerabilities(ctx, field, obj)
				return res
			})
		case "rules":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CVE_rules(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cVEConnectionImplementors = []string{"CVEConnection"}

func (ec *executionContext) _CVEConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.CVEConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cVEConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CVEConnection")
		case "totalCount":
			out.Values[i] = ec._CVEConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._CVEConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._CVEConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cVEEdgeImplementors = []string{"CVEEdge"}

func (ec *executionContext) _CVEEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.CVEEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cVEEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CVEEdge")
		case "node":
			out.Values[i] = ec._CVEEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CVEEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cVERuleImplementors = []string{"CVERule", "Node"}

func (ec *executionContext) _CVERule(ctx context.Context, sel ast.SelectionSet, obj *ent.CVERule) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cVERuleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CVERule")
		case "id":
			out.Values[i] = ec._CVERule_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._CVERule_name(ctx, field, obj)
		case "cve":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CVERule_cve(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "project":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CVERule_project(ctx, field, obj)
				return res
			})
		case "repo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CVERule_repo(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cVERuleConnectionImplementors = []string{"CVERuleConnection"}

func (ec *executionContext) _CVERuleConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.CVERuleConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cVERuleConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CVERuleConnection")
		case "totalCount":
			out.Values[i] = ec._CVERuleConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._CVERuleConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._CVERuleConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cVERuleEdgeImplementors = []string{"CVERuleEdge"}

func (ec *executionContext) _CVERuleEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.CVERuleEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cVERuleEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CVERuleEdge")
		case "node":
			out.Values[i] = ec._CVERuleEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CVERuleEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cWEImplementors = []string{"CWE", "Node"}

func (ec *executionContext) _CWE(ctx context.Context, sel ast.SelectionSet, obj *ent.CWE) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cWEImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CWE")
		case "id":
			out.Values[i] = ec._CWE_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "cwe_id":
			out.Values[i] = ec._CWE_cwe_id(ctx, field, obj)
		case "description":
			out.Values[i] = ec._CWE_description(ctx, field, obj)
		case "url":
			out.Values[i] = ec._CWE_url(ctx, field, obj)
		case "issues":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CWE_issues(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cWEConnectionImplementors = []string{"CWEConnection"}

func (ec *executionContext) _CWEConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.CWEConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cWEConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CWEConnection")
		case "totalCount":
			out.Values[i] = ec._CWEConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._CWEConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._CWEConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cWEEdgeImplementors = []string{"CWEEdge"}

func (ec *executionContext) _CWEEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.CWEEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cWEEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CWEEdge")
		case "node":
			out.Values[i] = ec._CWEEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CWEEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var codeIssueImplementors = []string{"CodeIssue", "Node"}

func (ec *executionContext) _CodeIssue(ctx context.Context, sel ast.SelectionSet, obj *ent.CodeIssue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, codeIssueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CodeIssue")
		case "id":
			out.Values[i] = ec._CodeIssue_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "rule_id":
			out.Values[i] = ec._CodeIssue_rule_id(ctx, field, obj)
		case "message":
			out.Values[i] = ec._CodeIssue_message(ctx, field, obj)
		case "severity":
			out.Values[i] = ec._CodeIssue_severity(ctx, field, obj)
		case "type":
			out.Values[i] = ec._CodeIssue_type(ctx, field, obj)
		case "cwe":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CodeIssue_cwe(ctx, field, obj)
				return res
			})
		case "scan":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CodeIssue_scan(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var codeIssueConnectionImplementors = []string{"CodeIssueConnection"}

func (ec *executionContext) _CodeIssueConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.CodeIssueConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, codeIssueConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CodeIssueConnection")
		case "totalCount":
			out.Values[i] = ec._CodeIssueConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._CodeIssueConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._CodeIssueConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var codeIssueEdgeImplementors = []string{"CodeIssueEdge"}

func (ec *executionContext) _CodeIssueEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.CodeIssueEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, codeIssueEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CodeIssueEdge")
		case "node":
			out.Values[i] = ec._CodeIssueEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CodeIssueEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var codeScanImplementors = []string{"CodeScan", "Node"}

func (ec *executionContext) _CodeScan(ctx context.Context, sel ast.SelectionSet, obj *ent.CodeScan) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, codeScanImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CodeScan")
		case "id":
			out.Values[i] = ec._CodeScan_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "tool":
			out.Values[i] = ec._CodeScan_tool(ctx, field, obj)
		case "release":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CodeScan_release(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "entry":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CodeScan_entry(ctx, field, obj)
				return res
			})
		case "issues":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CodeScan_issues(ctx, field, obj)
				return res
			})
		case "components":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CodeScan_components(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var codeScanConnectionImplementors = []string{"CodeScanConnection"}

func (ec *executionContext) _CodeScanConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.CodeScanConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, codeScanConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CodeScanConnection")
		case "totalCount":
			out.Values[i] = ec._CodeScanConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._CodeScanConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._CodeScanConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var codeScanEdgeImplementors = []string{"CodeScanEdge"}

func (ec *executionContext) _CodeScanEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.CodeScanEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, codeScanEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CodeScanEdge")
		case "node":
			out.Values[i] = ec._CodeScanEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CodeScanEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var componentImplementors = []string{"Component", "Node"}

func (ec *executionContext) _Component(ctx context.Context, sel ast.SelectionSet, obj *ent.Component) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, componentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Component")
		case "id":
			out.Values[i] = ec._Component_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Component_name(ctx, field, obj)
		case "vendor":
			out.Values[i] = ec._Component_vendor(ctx, field, obj)
		case "version":
			out.Values[i] = ec._Component_version(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Component_description(ctx, field, obj)
		case "url":
			out.Values[i] = ec._Component_url(ctx, field, obj)
		case "cves":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Component_cves(ctx, field, obj)
				return res
			})
		case "licenses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Component_licenses(ctx, field, obj)
				return res
			})
		case "uses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Component_uses(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var componentConnectionImplementors = []string{"ComponentConnection"}

func (ec *executionContext) _ComponentConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ComponentConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, componentConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComponentConnection")
		case "totalCount":
			out.Values[i] = ec._ComponentConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ComponentConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ComponentConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var componentEdgeImplementors = []string{"ComponentEdge"}

func (ec *executionContext) _ComponentEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ComponentEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, componentEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComponentEdge")
		case "node":
			out.Values[i] = ec._ComponentEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ComponentEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var componentUseImplementors = []string{"ComponentUse", "Node"}

func (ec *executionContext) _ComponentUse(ctx context.Context, sel ast.SelectionSet, obj *ent.ComponentUse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, componentUseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComponentUse")
		case "id":
			out.Values[i] = ec._ComponentUse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "release":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ComponentUse_release(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "scans":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ComponentUse_scans(ctx, field, obj)
				return res
			})
		case "component":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ComponentUse_component(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var componentUseConnectionImplementors = []string{"ComponentUseConnection"}

func (ec *executionContext) _ComponentUseConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ComponentUseConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, componentUseConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComponentUseConnection")
		case "totalCount":
			out.Values[i] = ec._ComponentUseConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ComponentUseConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ComponentUseConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var componentUseEdgeImplementors = []string{"ComponentUseEdge"}

func (ec *executionContext) _ComponentUseEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ComponentUseEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, componentUseEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComponentUseEdge")
		case "node":
			out.Values[i] = ec._ComponentUseEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ComponentUseEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gitCommitImplementors = []string{"GitCommit", "Node"}

func (ec *executionContext) _GitCommit(ctx context.Context, sel ast.SelectionSet, obj *ent.GitCommit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gitCommitImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GitCommit")
		case "id":
			out.Values[i] = ec._GitCommit_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "hash":
			out.Values[i] = ec._GitCommit_hash(ctx, field, obj)
		case "branch":
			out.Values[i] = ec._GitCommit_branch(ctx, field, obj)
		case "tag":
			out.Values[i] = ec._GitCommit_tag(ctx, field, obj)
		case "time":
			out.Values[i] = ec._GitCommit_time(ctx, field, obj)
		case "repo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GitCommit_repo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "release":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GitCommit_release(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gitCommitConnectionImplementors = []string{"GitCommitConnection"}

func (ec *executionContext) _GitCommitConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.GitCommitConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gitCommitConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GitCommitConnection")
		case "totalCount":
			out.Values[i] = ec._GitCommitConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._GitCommitConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._GitCommitConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gitCommitEdgeImplementors = []string{"GitCommitEdge"}

func (ec *executionContext) _GitCommitEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.GitCommitEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gitCommitEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GitCommitEdge")
		case "node":
			out.Values[i] = ec._GitCommitEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._GitCommitEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var licenseImplementors = []string{"License", "Node"}

func (ec *executionContext) _License(ctx context.Context, sel ast.SelectionSet, obj *ent.License) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, licenseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("License")
		case "id":
			out.Values[i] = ec._License_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "spdx_id":
			out.Values[i] = ec._License_spdx_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._License_name(ctx, field, obj)
		case "reference":
			out.Values[i] = ec._License_reference(ctx, field, obj)
		case "details_url":
			out.Values[i] = ec._License_details_url(ctx, field, obj)
		case "is_osi_approved":
			out.Values[i] = ec._License_is_osi_approved(ctx, field, obj)
		case "components":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._License_components(ctx, field, obj)
				return res
			})
		case "uses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._License_uses(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var licenseConnectionImplementors = []string{"LicenseConnection"}

func (ec *executionContext) _LicenseConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.LicenseConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, licenseConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LicenseConnection")
		case "totalCount":
			out.Values[i] = ec._LicenseConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._LicenseConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._LicenseConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var licenseEdgeImplementors = []string{"LicenseEdge"}

func (ec *executionContext) _LicenseEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.LicenseEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, licenseEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LicenseEdge")
		case "node":
			out.Values[i] = ec._LicenseEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._LicenseEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var licenseUseImplementors = []string{"LicenseUse", "Node"}

func (ec *executionContext) _LicenseUse(ctx context.Context, sel ast.SelectionSet, obj *ent.LicenseUse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, licenseUseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LicenseUse")
		case "id":
			out.Values[i] = ec._LicenseUse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "license":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._LicenseUse_license(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var licenseUseConnectionImplementors = []string{"LicenseUseConnection"}

func (ec *executionContext) _LicenseUseConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.LicenseUseConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, licenseUseConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LicenseUseConnection")
		case "totalCount":
			out.Values[i] = ec._LicenseUseConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._LicenseUseConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._LicenseUseConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var licenseUseEdgeImplementors = []string{"LicenseUseEdge"}

func (ec *executionContext) _LicenseUseEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.LicenseUseEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, licenseUseEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LicenseUseEdge")
		case "node":
			out.Values[i] = ec._LicenseUseEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._LicenseUseEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *ent.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectImplementors = []string{"Project", "Node"}

func (ec *executionContext) _Project(ctx context.Context, sel ast.SelectionSet, obj *ent.Project) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Project")
		case "id":
			out.Values[i] = ec._Project_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Project_name(ctx, field, obj)
		case "repos":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Project_repos(ctx, field, obj)
				return res
			})
		case "releases":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Project_releases(ctx, field, obj)
				return res
			})
		case "cve_rules":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Project_cve_rules(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectConnectionImplementors = []string{"ProjectConnection"}

func (ec *executionContext) _ProjectConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ProjectConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectConnection")
		case "totalCount":
			out.Values[i] = ec._ProjectConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ProjectConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ProjectConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectEdgeImplementors = []string{"ProjectEdge"}

func (ec *executionContext) _ProjectEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ProjectEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectEdge")
		case "node":
			out.Values[i] = ec._ProjectEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ProjectEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "code_issue_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_code_issue_connection(ctx, field)
				return res
			})
		case "component_use":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_component_use(ctx, field)
				return res
			})
		case "license":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_license(ctx, field)
				return res
			})
		case "artifact_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_artifact_connection(ctx, field)
				return res
			})
		case "cwe":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cwe(ctx, field)
				return res
			})
		case "license_use_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_license_use_connection(ctx, field)
				return res
			})
		case "release_entry_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_release_entry_connection(ctx, field)
				return res
			})
		case "repo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_repo(ctx, field)
				return res
			})
		case "test_case":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_test_case(ctx, field)
				return res
			})
		case "license_use":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_license_use(ctx, field)
				return res
			})
		case "release_entry":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_release_entry(ctx, field)
				return res
			})
		case "repo_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_repo_connection(ctx, field)
				return res
			})
		case "artifact":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_artifact(ctx, field)
				return res
			})
		case "cve_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cve_connection(ctx, field)
				return res
			})
		case "cve":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cve(ctx, field)
				return res
			})
		case "cwe_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cwe_connection(ctx, field)
				return res
			})
		case "release":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_release(ctx, field)
				return res
			})
		case "license_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_license_connection(ctx, field)
				return res
			})
		case "project_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_project_connection(ctx, field)
				return res
			})
		case "test_case_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_test_case_connection(ctx, field)
				return res
			})
		case "cve_rule":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cve_rule(ctx, field)
				return res
			})
		case "component_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_component_connection(ctx, field)
				return res
			})
		case "project":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_project(ctx, field)
				return res
			})
		case "test_run_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_test_run_connection(ctx, field)
				return res
			})
		case "vulnerability":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vulnerability(ctx, field)
				return res
			})
		case "cve_rule_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cve_rule_connection(ctx, field)
				return res
			})
		case "code_scan_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_code_scan_connection(ctx, field)
				return res
			})
		case "code_scan":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_code_scan(ctx, field)
				return res
			})
		case "component":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_component(ctx, field)
				return res
			})
		case "vulnerability_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vulnerability_connection(ctx, field)
				return res
			})
		case "code_issue":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_code_issue(ctx, field)
				return res
			})
		case "component_use_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_component_use_connection(ctx, field)
				return res
			})
		case "commit_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_commit_connection(ctx, field)
				return res
			})
		case "commit":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_commit(ctx, field)
				return res
			})
		case "release_connection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_release_connection(ctx, field)
				return res
			})
		case "test_run":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_test_run(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseImplementors = []string{"Release", "Node"}

func (ec *executionContext) _Release(ctx context.Context, sel ast.SelectionSet, obj *ent.Release) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Release")
		case "id":
			out.Values[i] = ec._Release_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Release_name(ctx, field, obj)
		case "version":
			out.Values[i] = ec._Release_version(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Release_status(ctx, field, obj)
		case "subreleases":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_subreleases(ctx, field, obj)
				return res
			})
		case "dependencies":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_dependencies(ctx, field, obj)
				return res
			})
		case "project":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_project(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "commit":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_commit(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "log":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_log(ctx, field, obj)
				return res
			})
		case "artifacts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_artifacts(ctx, field, obj)
				return res
			})
		case "components":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_components(ctx, field, obj)
				return res
			})
		case "code_scans":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_code_scans(ctx, field, obj)
				return res
			})
		case "test_runs":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_test_runs(ctx, field, obj)
				return res
			})
		case "vulnerabilities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_vulnerabilities(ctx, field, obj)
				return res
			})
		case "licenses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Release_licenses(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseConnectionImplementors = []string{"ReleaseConnection"}

func (ec *executionContext) _ReleaseConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseConnection")
		case "totalCount":
			out.Values[i] = ec._ReleaseConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ReleaseConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ReleaseConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseEdgeImplementors = []string{"ReleaseEdge"}

func (ec *executionContext) _ReleaseEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseEdge")
		case "node":
			out.Values[i] = ec._ReleaseEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ReleaseEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseEntryImplementors = []string{"ReleaseEntry", "Node"}

func (ec *executionContext) _ReleaseEntry(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseEntryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseEntry")
		case "id":
			out.Values[i] = ec._ReleaseEntry_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._ReleaseEntry_type(ctx, field, obj)
		case "time":
			out.Values[i] = ec._ReleaseEntry_time(ctx, field, obj)
		case "artifact":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseEntry_artifact(ctx, field, obj)
				return res
			})
		case "code_scan":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseEntry_code_scan(ctx, field, obj)
				return res
			})
		case "test_run":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseEntry_test_run(ctx, field, obj)
				return res
			})
		case "release":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReleaseEntry_release(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseEntryConnectionImplementors = []string{"ReleaseEntryConnection"}

func (ec *executionContext) _ReleaseEntryConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseEntryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseEntryConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseEntryConnection")
		case "totalCount":
			out.Values[i] = ec._ReleaseEntryConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ReleaseEntryConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ReleaseEntryConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseEntryEdgeImplementors = []string{"ReleaseEntryEdge"}

func (ec *executionContext) _ReleaseEntryEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ReleaseEntryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseEntryEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReleaseEntryEdge")
		case "node":
			out.Values[i] = ec._ReleaseEntryEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ReleaseEntryEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repoImplementors = []string{"Repo", "Node"}

func (ec *executionContext) _Repo(ctx context.Context, sel ast.SelectionSet, obj *ent.Repo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Repo")
		case "id":
			out.Values[i] = ec._Repo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Repo_name(ctx, field, obj)
		case "project":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repo_project(ctx, field, obj)
				return res
			})
		case "commits":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repo_commits(ctx, field, obj)
				return res
			})
		case "cve_rules":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repo_cve_rules(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repoConnectionImplementors = []string{"RepoConnection"}

func (ec *executionContext) _RepoConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.RepoConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repoConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepoConnection")
		case "totalCount":
			out.Values[i] = ec._RepoConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._RepoConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._RepoConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repoEdgeImplementors = []string{"RepoEdge"}

func (ec *executionContext) _RepoEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.RepoEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repoEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepoEdge")
		case "node":
			out.Values[i] = ec._RepoEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._RepoEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var testCaseImplementors = []string{"TestCase", "Node"}

func (ec *executionContext) _TestCase(ctx context.Context, sel ast.SelectionSet, obj *ent.TestCase) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testCaseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestCase")
		case "id":
			out.Values[i] = ec._TestCase_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._TestCase_name(ctx, field, obj)
		case "result":
			out.Values[i] = ec._TestCase_result(ctx, field, obj)
		case "message":
			out.Values[i] = ec._TestCase_message(ctx, field, obj)
		case "elapsed":
			out.Values[i] = ec._TestCase_elapsed(ctx, field, obj)
		case "run":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestCase_run(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var testCaseConnectionImplementors = []string{"TestCaseConnection"}

func (ec *executionContext) _TestCaseConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.TestCaseConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testCaseConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestCaseConnection")
		case "totalCount":
			out.Values[i] = ec._TestCaseConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._TestCaseConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._TestCaseConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var testCaseEdgeImplementors = []string{"TestCaseEdge"}

func (ec *executionContext) _TestCaseEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.TestCaseEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testCaseEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestCaseEdge")
		case "node":
			out.Values[i] = ec._TestCaseEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._TestCaseEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var testRunImplementors = []string{"TestRun", "Node"}

func (ec *executionContext) _TestRun(ctx context.Context, sel ast.SelectionSet, obj *ent.TestRun) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testRunImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestRun")
		case "id":
			out.Values[i] = ec._TestRun_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "tool":
			out.Values[i] = ec._TestRun_tool(ctx, field, obj)
		case "release":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestRun_release(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "entry":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestRun_entry(ctx, field, obj)
				return res
			})
		case "tests":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestRun_tests(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var testRunConnectionImplementors = []string{"TestRunConnection"}

func (ec *executionContext) _TestRunConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.TestRunConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testRunConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestRunConnection")
		case "totalCount":
			out.Values[i] = ec._TestRunConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._TestRunConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._TestRunConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var testRunEdgeImplementors = []string{"TestRunEdge"}

func (ec *executionContext) _TestRunEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.TestRunEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testRunEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestRunEdge")
		case "node":
			out.Values[i] = ec._TestRunEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._TestRunEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vulnerabilityImplementors = []string{"Vulnerability", "Node"}

func (ec *executionContext) _Vulnerability(ctx context.Context, sel ast.SelectionSet, obj *ent.Vulnerability) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vulnerabilityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Vulnerability")
		case "id":
			out.Values[i] = ec._Vulnerability_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "cve":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Vulnerability_cve(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vulnerabilityConnectionImplementors = []string{"VulnerabilityConnection"}

func (ec *executionContext) _VulnerabilityConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.VulnerabilityConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vulnerabilityConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VulnerabilityConnection")
		case "totalCount":
			out.Values[i] = ec._VulnerabilityConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._VulnerabilityConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._VulnerabilityConnection_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vulnerabilityEdgeImplementors = []string{"VulnerabilityEdge"}

func (ec *executionContext) _VulnerabilityEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.VulnerabilityEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vulnerabilityEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VulnerabilityEdge")
		case "node":
			out.Values[i] = ec._VulnerabilityEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._VulnerabilityEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNArtifactType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx context.Context, v interface{}) (artifact.Type, error) {
	var res artifact.Type
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNArtifactType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx context.Context, sel ast.SelectionSet, v artifact.Type) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNArtifactWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInput(ctx context.Context, v interface{}) (*ent.ArtifactWhereInput, error) {
	res, err := ec.unmarshalInputArtifactWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNCVE2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVE(ctx context.Context, sel ast.SelectionSet, v *ent.CVE) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CVE(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCVERuleWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleWhereInput(ctx context.Context, v interface{}) (*ent.CVERuleWhereInput, error) {
	res, err := ec.unmarshalInputCVERuleWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCVESeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcveᚐSeverity(ctx context.Context, v interface{}) (cve.Severity, error) {
	var res cve.Severity
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCVESeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcveᚐSeverity(ctx context.Context, sel ast.SelectionSet, v cve.Severity) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCVEWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEWhereInput(ctx context.Context, v interface{}) (*ent.CVEWhereInput, error) {
	res, err := ec.unmarshalInputCVEWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCWEWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEWhereInput(ctx context.Context, v interface{}) (*ent.CWEWhereInput, error) {
	res, err := ec.unmarshalInputCWEWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCodeIssueSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx context.Context, v interface{}) (codeissue.Severity, error) {
	var res codeissue.Severity
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCodeIssueSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx context.Context, sel ast.SelectionSet, v codeissue.Severity) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCodeIssueType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx context.Context, v interface{}) (codeissue.Type, error) {
	var res codeissue.Type
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCodeIssueType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx context.Context, sel ast.SelectionSet, v codeissue.Type) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCodeIssueWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInput(ctx context.Context, v interface{}) (*ent.CodeIssueWhereInput, error) {
	res, err := ec.unmarshalInputCodeIssueWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCodeScan2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx context.Context, sel ast.SelectionSet, v *ent.CodeScan) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CodeScan(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCodeScanWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInput(ctx context.Context, v interface{}) (*ent.CodeScanWhereInput, error) {
	res, err := ec.unmarshalInputCodeScanWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNComponent2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx context.Context, sel ast.SelectionSet, v *ent.Component) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Component(ctx, sel, v)
}

func (ec *executionContext) unmarshalNComponentUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseWhereInput(ctx context.Context, v interface{}) (*ent.ComponentUseWhereInput, error) {
	res, err := ec.unmarshalInputComponentUseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInput(ctx context.Context, v interface{}) (*ent.ComponentWhereInput, error) {
	res, err := ec.unmarshalInputComponentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx context.Context, v interface{}) (ent.Cursor, error) {
	var res ent.Cursor
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCursor2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx context.Context, sel ast.SelectionSet, v ent.Cursor) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNGitCommit2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommit(ctx context.Context, sel ast.SelectionSet, v *ent.GitCommit) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GitCommit(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGitCommitWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInput(ctx context.Context, v interface{}) (*ent.GitCommitWhereInput, error) {
	res, err := ec.unmarshalInputGitCommitWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNID2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalIntID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalIntID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNLicense2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicense(ctx context.Context, sel ast.SelectionSet, v *ent.License) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._License(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLicenseUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUseWhereInput(ctx context.Context, v interface{}) (*ent.LicenseUseWhereInput, error) {
	res, err := ec.unmarshalInputLicenseUseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInput(ctx context.Context, v interface{}) (*ent.LicenseWhereInput, error) {
	res, err := ec.unmarshalInputLicenseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx context.Context, v interface{}) (ent.OrderDirection, error) {
	var res ent.OrderDirection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderDirection2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐOrderDirection(ctx context.Context, sel ast.SelectionSet, v ent.OrderDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPageInfo2githubᚗcomᚋvalocodeᚋbubblyᚋentᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v ent.PageInfo) graphql.Marshaler {
	return ec._PageInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNProject2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx context.Context, sel ast.SelectionSet, v *ent.Project) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Project(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInput(ctx context.Context, v interface{}) (*ent.ProjectWhereInput, error) {
	res, err := ec.unmarshalInputProjectWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx context.Context, sel ast.SelectionSet, v *ent.Release) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Release(ctx, sel, v)
}

func (ec *executionContext) unmarshalNReleaseEntryType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx context.Context, v interface{}) (releaseentry.Type, error) {
	var res releaseentry.Type
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReleaseEntryType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx context.Context, sel ast.SelectionSet, v releaseentry.Type) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNReleaseEntryWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInput(ctx context.Context, v interface{}) (*ent.ReleaseEntryWhereInput, error) {
	res, err := ec.unmarshalInputReleaseEntryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNReleaseStatus2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx context.Context, v interface{}) (release.Status, error) {
	var res release.Status
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReleaseStatus2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx context.Context, sel ast.SelectionSet, v release.Status) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx context.Context, v interface{}) (*ent.ReleaseWhereInput, error) {
	res, err := ec.unmarshalInputReleaseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRepo2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx context.Context, sel ast.SelectionSet, v *ent.Repo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Repo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRepoWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInput(ctx context.Context, v interface{}) (*ent.RepoWhereInput, error) {
	res, err := ec.unmarshalInputRepoWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTestCaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInput(ctx context.Context, v interface{}) (*ent.TestCaseWhereInput, error) {
	res, err := ec.unmarshalInputTestCaseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTestRun2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRun(ctx context.Context, sel ast.SelectionSet, v *ent.TestRun) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TestRun(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTestRunWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInput(ctx context.Context, v interface{}) (*ent.TestRunWhereInput, error) {
	res, err := ec.unmarshalInputTestRunWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInput(ctx context.Context, v interface{}) (*ent.VulnerabilityWhereInput, error) {
	res, err := ec.unmarshalInputVulnerabilityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOArtifact2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifact(ctx context.Context, sel ast.SelectionSet, v []*ent.Artifact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOArtifact2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifact(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOArtifact2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifact(ctx context.Context, sel ast.SelectionSet, v *ent.Artifact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Artifact(ctx, sel, v)
}

func (ec *executionContext) marshalOArtifactConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactConnection(ctx context.Context, sel ast.SelectionSet, v *ent.ArtifactConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ArtifactConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOArtifactEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ArtifactEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOArtifactEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOArtifactEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ArtifactEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ArtifactEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOArtifactOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactOrder(ctx context.Context, v interface{}) (*ent.ArtifactOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputArtifactOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOArtifactOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactOrderField(ctx context.Context, v interface{}) (*ent.ArtifactOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.ArtifactOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOArtifactOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.ArtifactOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOArtifactType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx context.Context, v interface{}) (artifact.Type, error) {
	var res artifact.Type
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOArtifactType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx context.Context, sel ast.SelectionSet, v artifact.Type) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOArtifactType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐTypeᚄ(ctx context.Context, v interface{}) ([]artifact.Type, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]artifact.Type, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNArtifactType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOArtifactType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []artifact.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNArtifactType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOArtifactType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx context.Context, v interface{}) (*artifact.Type, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(artifact.Type)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOArtifactType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋartifactᚐType(ctx context.Context, sel ast.SelectionSet, v *artifact.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOArtifactWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ArtifactWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.ArtifactWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNArtifactWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOArtifactWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐArtifactWhereInput(ctx context.Context, v interface{}) (*ent.ArtifactWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputArtifactWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOCVE2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVE(ctx context.Context, sel ast.SelectionSet, v []*ent.CVE) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCVE2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVE(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCVE2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVE(ctx context.Context, sel ast.SelectionSet, v *ent.CVE) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CVE(ctx, sel, v)
}

func (ec *executionContext) marshalOCVEConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEConnection(ctx context.Context, sel ast.SelectionSet, v *ent.CVEConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CVEConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOCVEEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.CVEEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCVEEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCVEEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEEdge(ctx context.Context, sel ast.SelectionSet, v *ent.CVEEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CVEEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCVEOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEOrder(ctx context.Context, v interface{}) (*ent.CVEOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCVEOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCVEOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEOrderField(ctx context.Context, v interface{}) (*ent.CVEOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.CVEOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCVEOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.CVEOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCVERule2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERule(ctx context.Context, sel ast.SelectionSet, v []*ent.CVERule) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCVERule2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERule(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCVERule2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERule(ctx context.Context, sel ast.SelectionSet, v *ent.CVERule) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CVERule(ctx, sel, v)
}

func (ec *executionContext) marshalOCVERuleConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleConnection(ctx context.Context, sel ast.SelectionSet, v *ent.CVERuleConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CVERuleConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOCVERuleEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.CVERuleEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCVERuleEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCVERuleEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleEdge(ctx context.Context, sel ast.SelectionSet, v *ent.CVERuleEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CVERuleEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCVERuleOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleOrder(ctx context.Context, v interface{}) (*ent.CVERuleOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCVERuleOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCVERuleOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleOrderField(ctx context.Context, v interface{}) (*ent.CVERuleOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.CVERuleOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCVERuleOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.CVERuleOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCVERuleWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.CVERuleWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.CVERuleWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCVERuleWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCVERuleWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVERuleWhereInput(ctx context.Context, v interface{}) (*ent.CVERuleWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCVERuleWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCVESeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcveᚐSeverity(ctx context.Context, v interface{}) (cve.Severity, error) {
	var res cve.Severity
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCVESeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcveᚐSeverity(ctx context.Context, sel ast.SelectionSet, v cve.Severity) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOCVESeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcveᚐSeverityᚄ(ctx context.Context, v interface{}) ([]cve.Severity, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]cve.Severity, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCVESeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcveᚐSeverity(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCVESeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcveᚐSeverityᚄ(ctx context.Context, sel ast.SelectionSet, v []cve.Severity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCVESeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcveᚐSeverity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOCVESeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcveᚐSeverity(ctx context.Context, v interface{}) (*cve.Severity, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(cve.Severity)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCVESeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcveᚐSeverity(ctx context.Context, sel ast.SelectionSet, v *cve.Severity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCVEWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.CVEWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.CVEWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCVEWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCVEWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCVEWhereInput(ctx context.Context, v interface{}) (*ent.CVEWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCVEWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCWE2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWE(ctx context.Context, sel ast.SelectionSet, v []*ent.CWE) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCWE2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWE(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCWE2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWE(ctx context.Context, sel ast.SelectionSet, v *ent.CWE) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CWE(ctx, sel, v)
}

func (ec *executionContext) marshalOCWEConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEConnection(ctx context.Context, sel ast.SelectionSet, v *ent.CWEConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CWEConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOCWEEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.CWEEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCWEEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCWEEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEEdge(ctx context.Context, sel ast.SelectionSet, v *ent.CWEEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CWEEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCWEOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEOrder(ctx context.Context, v interface{}) (*ent.CWEOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCWEOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCWEOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEOrderField(ctx context.Context, v interface{}) (*ent.CWEOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.CWEOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCWEOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.CWEOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCWEWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.CWEWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.CWEWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCWEWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCWEWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCWEWhereInput(ctx context.Context, v interface{}) (*ent.CWEWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCWEWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCodeIssue2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssue(ctx context.Context, sel ast.SelectionSet, v []*ent.CodeIssue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCodeIssue2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCodeIssue2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssue(ctx context.Context, sel ast.SelectionSet, v *ent.CodeIssue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CodeIssue(ctx, sel, v)
}

func (ec *executionContext) marshalOCodeIssueConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueConnection(ctx context.Context, sel ast.SelectionSet, v *ent.CodeIssueConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CodeIssueConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOCodeIssueEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.CodeIssueEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCodeIssueEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCodeIssueEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueEdge(ctx context.Context, sel ast.SelectionSet, v *ent.CodeIssueEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CodeIssueEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCodeIssueOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueOrder(ctx context.Context, v interface{}) (*ent.CodeIssueOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCodeIssueOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCodeIssueOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueOrderField(ctx context.Context, v interface{}) (*ent.CodeIssueOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.CodeIssueOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCodeIssueOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.CodeIssueOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCodeIssueSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx context.Context, v interface{}) (codeissue.Severity, error) {
	var res codeissue.Severity
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCodeIssueSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx context.Context, sel ast.SelectionSet, v codeissue.Severity) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOCodeIssueSeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverityᚄ(ctx context.Context, v interface{}) ([]codeissue.Severity, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]codeissue.Severity, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCodeIssueSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCodeIssueSeverity2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverityᚄ(ctx context.Context, sel ast.SelectionSet, v []codeissue.Severity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCodeIssueSeverity2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOCodeIssueSeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx context.Context, v interface{}) (*codeissue.Severity, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(codeissue.Severity)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCodeIssueSeverity2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐSeverity(ctx context.Context, sel ast.SelectionSet, v *codeissue.Severity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCodeIssueType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx context.Context, v interface{}) (codeissue.Type, error) {
	var res codeissue.Type
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCodeIssueType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx context.Context, sel ast.SelectionSet, v codeissue.Type) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOCodeIssueType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐTypeᚄ(ctx context.Context, v interface{}) ([]codeissue.Type, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]codeissue.Type, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCodeIssueType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCodeIssueType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []codeissue.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCodeIssueType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOCodeIssueType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx context.Context, v interface{}) (*codeissue.Type, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(codeissue.Type)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCodeIssueType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋcodeissueᚐType(ctx context.Context, sel ast.SelectionSet, v *codeissue.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCodeIssueWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.CodeIssueWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.CodeIssueWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCodeIssueWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCodeIssueWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeIssueWhereInput(ctx context.Context, v interface{}) (*ent.CodeIssueWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCodeIssueWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCodeScan2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx context.Context, sel ast.SelectionSet, v []*ent.CodeScan) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCodeScan2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCodeScan2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.CodeScan) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCodeScan2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCodeScan2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScan(ctx context.Context, sel ast.SelectionSet, v *ent.CodeScan) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CodeScan(ctx, sel, v)
}

func (ec *executionContext) marshalOCodeScanConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanConnection(ctx context.Context, sel ast.SelectionSet, v *ent.CodeScanConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CodeScanConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOCodeScanEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.CodeScanEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCodeScanEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCodeScanEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanEdge(ctx context.Context, sel ast.SelectionSet, v *ent.CodeScanEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CodeScanEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCodeScanOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanOrder(ctx context.Context, v interface{}) (*ent.CodeScanOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCodeScanOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCodeScanOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanOrderField(ctx context.Context, v interface{}) (*ent.CodeScanOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.CodeScanOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCodeScanOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.CodeScanOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCodeScanWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.CodeScanWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.CodeScanWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCodeScanWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCodeScanWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCodeScanWhereInput(ctx context.Context, v interface{}) (*ent.CodeScanWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCodeScanWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOComponent2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx context.Context, sel ast.SelectionSet, v []*ent.Component) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOComponent2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOComponent2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponent(ctx context.Context, sel ast.SelectionSet, v *ent.Component) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Component(ctx, sel, v)
}

func (ec *executionContext) marshalOComponentConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentConnection(ctx context.Context, sel ast.SelectionSet, v *ent.ComponentConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComponentConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOComponentEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ComponentEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOComponentEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOComponentEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ComponentEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComponentEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOComponentOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentOrder(ctx context.Context, v interface{}) (*ent.ComponentOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputComponentOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOComponentOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentOrderField(ctx context.Context, v interface{}) (*ent.ComponentOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.ComponentOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOComponentOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.ComponentOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOComponentUse2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUse(ctx context.Context, sel ast.SelectionSet, v []*ent.ComponentUse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOComponentUse2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOComponentUse2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUse(ctx context.Context, sel ast.SelectionSet, v *ent.ComponentUse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComponentUse(ctx, sel, v)
}

func (ec *executionContext) marshalOComponentUseConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseConnection(ctx context.Context, sel ast.SelectionSet, v *ent.ComponentUseConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComponentUseConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOComponentUseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ComponentUseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOComponentUseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOComponentUseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ComponentUseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComponentUseEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOComponentUseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ComponentUseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.ComponentUseWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNComponentUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOComponentUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentUseWhereInput(ctx context.Context, v interface{}) (*ent.ComponentUseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputComponentUseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOComponentWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ComponentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.ComponentWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOComponentWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐComponentWhereInput(ctx context.Context, v interface{}) (*ent.ComponentWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputComponentWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx context.Context, v interface{}) (*ent.Cursor, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.Cursor)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCursor2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐCursor(ctx context.Context, sel ast.SelectionSet, v *ent.Cursor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	return graphql.MarshalFloat(v)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) marshalOGitCommit2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommit(ctx context.Context, sel ast.SelectionSet, v []*ent.GitCommit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGitCommit2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOGitCommit2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommit(ctx context.Context, sel ast.SelectionSet, v *ent.GitCommit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GitCommit(ctx, sel, v)
}

func (ec *executionContext) marshalOGitCommitConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitConnection(ctx context.Context, sel ast.SelectionSet, v *ent.GitCommitConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GitCommitConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOGitCommitEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.GitCommitEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGitCommitEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOGitCommitEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitEdge(ctx context.Context, sel ast.SelectionSet, v *ent.GitCommitEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GitCommitEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOGitCommitOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitOrder(ctx context.Context, v interface{}) (*ent.GitCommitOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGitCommitOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGitCommitOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitOrderField(ctx context.Context, v interface{}) (*ent.GitCommitOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.GitCommitOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGitCommitOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.GitCommitOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOGitCommitWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.GitCommitWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.GitCommitWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGitCommitWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOGitCommitWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐGitCommitWhereInput(ctx context.Context, v interface{}) (*ent.GitCommitWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGitCommitWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) marshalOLicense2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicense(ctx context.Context, sel ast.SelectionSet, v []*ent.License) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLicense2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicense(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLicense2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicense(ctx context.Context, sel ast.SelectionSet, v *ent.License) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._License(ctx, sel, v)
}

func (ec *executionContext) marshalOLicenseConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseConnection(ctx context.Context, sel ast.SelectionSet, v *ent.LicenseConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LicenseConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOLicenseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.LicenseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLicenseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLicenseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseEdge(ctx context.Context, sel ast.SelectionSet, v *ent.LicenseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LicenseEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLicenseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseOrder(ctx context.Context, v interface{}) (*ent.LicenseOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLicenseOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLicenseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseOrderField(ctx context.Context, v interface{}) (*ent.LicenseOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.LicenseOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLicenseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.LicenseOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOLicenseUse2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUse(ctx context.Context, sel ast.SelectionSet, v []*ent.LicenseUse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLicenseUse2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLicenseUse2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUse(ctx context.Context, sel ast.SelectionSet, v *ent.LicenseUse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LicenseUse(ctx, sel, v)
}

func (ec *executionContext) marshalOLicenseUseConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUseConnection(ctx context.Context, sel ast.SelectionSet, v *ent.LicenseUseConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LicenseUseConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOLicenseUseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUseEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.LicenseUseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLicenseUseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUseEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLicenseUseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUseEdge(ctx context.Context, sel ast.SelectionSet, v *ent.LicenseUseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LicenseUseEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLicenseUseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUseWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.LicenseUseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.LicenseUseWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLicenseUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUseWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLicenseUseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseUseWhereInput(ctx context.Context, v interface{}) (*ent.LicenseUseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLicenseUseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLicenseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.LicenseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.LicenseWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLicenseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐLicenseWhereInput(ctx context.Context, v interface{}) (*ent.LicenseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLicenseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProject2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx context.Context, sel ast.SelectionSet, v []*ent.Project) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProject2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOProject2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProject(ctx context.Context, sel ast.SelectionSet, v *ent.Project) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Project(ctx, sel, v)
}

func (ec *executionContext) marshalOProjectConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectConnection(ctx context.Context, sel ast.SelectionSet, v *ent.ProjectConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOProjectEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ProjectEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProjectEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOProjectEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ProjectEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProjectOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectOrder(ctx context.Context, v interface{}) (*ent.ProjectOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProjectOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectOrderField(ctx context.Context, v interface{}) (*ent.ProjectOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.ProjectOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProjectOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.ProjectOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOProjectWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ProjectWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.ProjectWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐProjectWhereInput(ctx context.Context, v interface{}) (*ent.ProjectWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORelease2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx context.Context, sel ast.SelectionSet, v []*ent.Release) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORelease2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRelease(ctx context.Context, sel ast.SelectionSet, v *ent.Release) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Release(ctx, sel, v)
}

func (ec *executionContext) marshalOReleaseConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseConnection(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleaseConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOReleaseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ReleaseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReleaseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOReleaseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleaseEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOReleaseEntry2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntry(ctx context.Context, sel ast.SelectionSet, v []*ent.ReleaseEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReleaseEntry2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOReleaseEntry2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntry(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleaseEntry(ctx, sel, v)
}

func (ec *executionContext) marshalOReleaseEntryConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryConnection(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseEntryConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleaseEntryConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOReleaseEntryEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ReleaseEntryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReleaseEntryEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOReleaseEntryEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseEntryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReleaseEntryEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOReleaseEntryOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryOrder(ctx context.Context, v interface{}) (*ent.ReleaseEntryOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReleaseEntryOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOReleaseEntryOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryOrderField(ctx context.Context, v interface{}) (*ent.ReleaseEntryOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.ReleaseEntryOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleaseEntryOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseEntryOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOReleaseEntryType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx context.Context, v interface{}) (releaseentry.Type, error) {
	var res releaseentry.Type
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleaseEntryType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx context.Context, sel ast.SelectionSet, v releaseentry.Type) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOReleaseEntryType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐTypeᚄ(ctx context.Context, v interface{}) ([]releaseentry.Type, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]releaseentry.Type, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReleaseEntryType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOReleaseEntryType2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []releaseentry.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReleaseEntryType2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOReleaseEntryType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx context.Context, v interface{}) (*releaseentry.Type, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(releaseentry.Type)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleaseEntryType2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseentryᚐType(ctx context.Context, sel ast.SelectionSet, v *releaseentry.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOReleaseEntryWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ReleaseEntryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.ReleaseEntryWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReleaseEntryWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOReleaseEntryWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseEntryWhereInput(ctx context.Context, v interface{}) (*ent.ReleaseEntryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReleaseEntryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOReleaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrder(ctx context.Context, v interface{}) (*ent.ReleaseOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReleaseOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOReleaseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrderField(ctx context.Context, v interface{}) (*ent.ReleaseOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.ReleaseOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleaseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.ReleaseOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOReleaseStatus2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx context.Context, v interface{}) (release.Status, error) {
	var res release.Status
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleaseStatus2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx context.Context, sel ast.SelectionSet, v release.Status) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOReleaseStatus2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatusᚄ(ctx context.Context, v interface{}) ([]release.Status, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]release.Status, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReleaseStatus2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOReleaseStatus2ᚕgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []release.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReleaseStatus2githubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOReleaseStatus2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx context.Context, v interface{}) (*release.Status, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(release.Status)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReleaseStatus2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚋreleaseᚐStatus(ctx context.Context, sel ast.SelectionSet, v *release.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOReleaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ReleaseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.ReleaseWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOReleaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐReleaseWhereInput(ctx context.Context, v interface{}) (*ent.ReleaseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReleaseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORepo2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx context.Context, sel ast.SelectionSet, v []*ent.Repo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORepo2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORepo2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepo(ctx context.Context, sel ast.SelectionSet, v *ent.Repo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Repo(ctx, sel, v)
}

func (ec *executionContext) marshalORepoConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoConnection(ctx context.Context, sel ast.SelectionSet, v *ent.RepoConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RepoConnection(ctx, sel, v)
}

func (ec *executionContext) marshalORepoEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.RepoEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORepoEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORepoEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoEdge(ctx context.Context, sel ast.SelectionSet, v *ent.RepoEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RepoEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalORepoOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoOrder(ctx context.Context, v interface{}) (*ent.RepoOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRepoOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORepoOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoOrderField(ctx context.Context, v interface{}) (*ent.RepoOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.RepoOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORepoOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.RepoOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalORepoWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.RepoWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.RepoWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRepoWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORepoWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐRepoWhereInput(ctx context.Context, v interface{}) (*ent.RepoWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRepoWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOTestCase2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCase(ctx context.Context, sel ast.SelectionSet, v []*ent.TestCase) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTestCase2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCase(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTestCase2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCase(ctx context.Context, sel ast.SelectionSet, v *ent.TestCase) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestCase(ctx, sel, v)
}

func (ec *executionContext) marshalOTestCaseConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseConnection(ctx context.Context, sel ast.SelectionSet, v *ent.TestCaseConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestCaseConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOTestCaseEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.TestCaseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTestCaseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTestCaseEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseEdge(ctx context.Context, sel ast.SelectionSet, v *ent.TestCaseEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestCaseEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTestCaseOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseOrder(ctx context.Context, v interface{}) (*ent.TestCaseOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestCaseOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTestCaseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseOrderField(ctx context.Context, v interface{}) (*ent.TestCaseOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.TestCaseOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestCaseOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.TestCaseOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTestCaseWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.TestCaseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.TestCaseWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTestCaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTestCaseWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestCaseWhereInput(ctx context.Context, v interface{}) (*ent.TestCaseWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestCaseWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestRun2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRun(ctx context.Context, sel ast.SelectionSet, v []*ent.TestRun) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTestRun2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRun(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTestRun2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRun(ctx context.Context, sel ast.SelectionSet, v *ent.TestRun) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestRun(ctx, sel, v)
}

func (ec *executionContext) marshalOTestRunConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunConnection(ctx context.Context, sel ast.SelectionSet, v *ent.TestRunConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestRunConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOTestRunEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.TestRunEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTestRunEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTestRunEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunEdge(ctx context.Context, sel ast.SelectionSet, v *ent.TestRunEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestRunEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTestRunOrder2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunOrder(ctx context.Context, v interface{}) (*ent.TestRunOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestRunOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTestRunOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunOrderField(ctx context.Context, v interface{}) (*ent.TestRunOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.TestRunOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestRunOrderField2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.TestRunOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTestRunWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.TestRunWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.TestRunWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTestRunWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTestRunWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐTestRunWhereInput(ctx context.Context, v interface{}) (*ent.TestRunWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestRunWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	return graphql.MarshalTime(v)
}

func (ec *executionContext) unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTime2timeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTime2ᚕtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTime2timeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*v)
}

func (ec *executionContext) marshalOVulnerability2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerability(ctx context.Context, sel ast.SelectionSet, v []*ent.Vulnerability) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVulnerability2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerability(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOVulnerability2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerability(ctx context.Context, sel ast.SelectionSet, v *ent.Vulnerability) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Vulnerability(ctx, sel, v)
}

func (ec *executionContext) marshalOVulnerabilityConnection2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityConnection(ctx context.Context, sel ast.SelectionSet, v *ent.VulnerabilityConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VulnerabilityConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOVulnerabilityEdge2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.VulnerabilityEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVulnerabilityEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOVulnerabilityEdge2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityEdge(ctx context.Context, sel ast.SelectionSet, v *ent.VulnerabilityEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VulnerabilityEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVulnerabilityWhereInput2ᚕᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.VulnerabilityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ent.VulnerabilityWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVulnerabilityWhereInput2ᚖgithubᚗcomᚋvalocodeᚋbubblyᚋentᚐVulnerabilityWhereInput(ctx context.Context, v interface{}) (*ent.VulnerabilityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVulnerabilityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
