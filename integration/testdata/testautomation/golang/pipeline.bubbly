
resource "extract" "gotest" {
    // this is an input to the extract to make it reusable
    spec {
        input "file" {}
        type = "json"
        source {
            file = self.input.file
            format = list(
                object({
                    Time = string,
                    Action = string,
                    Package = string,
                    Test = string,
                    Elapsed = number,
                })
            )
        }
    }
}

resource "transform" "gotest" {
    spec {
        input "data" {}

        data "repo_version" {
            fields = {
                "commit": "madeupcommit54321"
            }
        }

        data "test_run" {
            joins = ["repo_version"]
            fields = {
                "name": "testrun123"
                "description": "Golang unit tests in CI"
            }
        }

        data "test_set" {
            joins = ["test_run"]
            fields = {
                "name": "golang_unit_tests"
            }
        }

        dynamic "data" {
            for_each = [for i in self.input.data: i if i.Test != null && i.Package != null && i.Elapsed != null]
            iterator = it
            labels = ["test_case"]
            content {
                joins = ["test_set"]
                fields = {
                    "name": "${it.value.Package}/${it.value.Test}"
                    "status": it.value.Action
                }
            }
        }
    }
}

resource "load" "gotest" {
    spec {
        input "data" {}
        data = self.input.data
    }
}

resource "pipeline" "gotest" {
    spec {
        input "file" {}
        // Each task in a pipeline has an output, similar to resources,
        // so that task outputs can be referenced
        task "extract" {
            resource = "extract/gotest"
            input "file" {
                value = self.input.file
            }
        }
        task "transform" {
            resource = "transform/gotest"
            input "data" {
                value = self.task.extract.value
            }
        }
        task "load" {
            resource = "load/gotest"
            input "data" {
                value = self.task.transform.value
            }
        }
    }
}

resource "run" "gotest" {
    spec {
        // specify the name of the pipeline resource to execute
        resource = "pipeline/gotest"
        // specify the pipeline input(s) required
        input "file" {
            value = "./testdata/testautomation/golang/test-report.json"
        }
    }
}
