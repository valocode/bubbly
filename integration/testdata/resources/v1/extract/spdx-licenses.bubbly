resource "extract" "spdx_list" {
    api_version = "v1"

    spec {
        input url {}
        type = "rest"

        source {
            url = self.input.url
            decoder = "json"
            
            headers = {
                "Accept": "application/vnd.github.v3+json"
            }
            timeout = 5

            format = object({
                licenseListVersion: string,
                licenses: list(object({
                    reference: string,
                    isDeprecatedLicenseId: bool,
                    detailsUrl: string,
                    referenceNumber: string,
                    name: string,
                    licenseId: string,
                    seeAlso: list(string),
                    isOsiApproved: bool
                })),
                releaseDate: string
            })
        }
    }
}

resource "extract" "spdx_licenses" {
    api_version = "v1"
    
    spec {
        input spdx_list {}
        type = "rest"

        dynamic "source" {
        
            for_each = slice(self.input.spdx_list.licenses, 0, 5)
            iterator = it

            content {
                # The original URLs refer to the spdx.org website which has stopped accepting connections
                # from GitHub Actions. The license details files though are also available from the same
                # repo from which the list of licenses is pulled from. Thus, rewrite the URLs in the license
                # list to refer to the GitHub repo, which is not blocked from being accessed via GitHub Actions.
                url = replace(
                    it.value.detailsUrl,
                    "http://spdx.org/licenses/",
                    "https://raw.githubusercontent.com/spdx/license-list-data/v3.5/json/details/"
                )

                # The replacement URLs point to GitHub, so set the MIME type recommended for it.
                headers = {
                    "Accept": "application/vnd.github.v3+json"
                }

                # HTTP request timeout in seconds
                timeout = 5

                # The only fields which MUST be specified in the format are the ones
                # which MUST be present, otherwise an error is raised by Bubbly.
                # Other (optional) fields may be accessed regardless of being defined here,
                # by checking their presence using HCL `lookup` or `contain` functions at their point of use.
                format = object({
                    name: string,
                    licenseId: string,
                })
            }
        }
    }
}

resource "transform" "license_data" {
    api_version = "v1"

    spec {
        input "spdx_licenses" {}

        dynamic "data" {
            for_each = self.input.spdx_licenses
            iterator = it
            labels = ["spdx_license"]

            # The crossref_count field is optional and may not be present
            # in every license data file. Therefore, before using it,
            # we must check if it is available. If it's not available,
            # this is interpreted as the absence of cross reference
            # information for this license, and thus the `length` function
            # is provided an empty list to count instead.
            content {
                fields = {
                    "id": it.value.licenseId
                    "name": it.value.name
                    "crossref_count": length(lookup(it.value, "crossRef", []))
                }
            }
        }
    }
}

resource "load" "upload_license_data" {
    api_version = "v1"

    spec {
        input "data" {}
        data = self.input.data
    }
}

resource "pipeline" "licenses" {
    api_version = "v1"

    spec {

        task "extract_spdx_list" {
            resource = "extract/spdx_list"
            input "url" {
                # TODO: update from tag v3.7 to master after failure handlers had been added to extract
                value = "https://raw.githubusercontent.com/spdx/license-list-data/v3.5/json/licenses.json"
            }
        }

        task "extract_spdx_licenses" {
            resource = "extract/spdx_licenses"
            input "spdx_list" {
                value = self.task.extract_spdx_list.value
            }
        }

        task "transform_license_data" {
            resource = "transform/license_data"
            input "spdx_licenses" {
                value = self.task.extract_spdx_licenses.value
            }
        }

        task "load" {
            resource = "load/upload_license_data"
            input "data" {
                value = self.task.transform_license_data.value
            }
        }
    }
}

resource "run" "licenses" {
    api_version = "v1"
    spec {
        resource = "pipeline/licenses"
    }
}
