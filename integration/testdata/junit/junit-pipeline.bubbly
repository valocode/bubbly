
// Everything is a resource, and all resources have an output.
// The output can be something like:
// output:
//   - status: sucess
//   - value: <the value from the extract>
resource "extract" "junit" {
    // this is an input to the extract to make it reusable
    spec {
        input "file" {}
        type = "xml"
        source {
            file = self.input.file
            format = object({
                testsuites: object({
                    duration: number,
                    testsuite: list(object({
                        failures: number,
                        name: string,
                        package: string,
                        tests: number,
                        time: number,
                        testcase: list(object({
                            classname: string
                            name: string
                            time: number
                        }))
                    }))
                })
            })
        }
    }
}

resource "transform" "junit" {
    spec {
        input "data" {}
        // this is some crazy dynamic HCL stuff to create the "data" blocks
        // TODO
        dynamic "data" {
            for_each = self.input.data
            iterator = it
            labels = ["test_case"]
            content {
                fields = {
                    "name": "This field exists in table_${it.value}"
                }
            }
        }
    }
}

// This is the upload step, just renamed to load...
resource "load" "junit" {
    spec {
        input "data" {}
        // what do we need here?!
        data = self.input.data
    }
}

// How do we tie all the above resources together...? In a pipeline!
// A pipeline is just another reusable resource, and only a pipelineRun
// actually triggers a pipeline to run
resource "pipeline" "junit" {
    spec {
        input "file" {}
        // Each task in a pipeline has an output, similar to resources,
        // so that task outputs can be referenced
        task "extract" {
            resource = "extract.junit"
            input "xml_file" {
                value = self.input.file
            }
        }
        task "transform" {
            resource = "transform.junit"
            input "results" {
                // here we reference the output of the task "extract"
                value = self.task.extract.value
            }
        }
        task "load" {
            resource = "load.junit"
            input "data" {
                value = self.task.transform.value
            }
        }
    }
}

resource "run" "junit" {
    spec {
        // specify the name of the pipeline resource to execute
        resource = "junit"
        // specify the pipeline input(s) required
        input "file" {
            value = "./testdata/junit/junit.xml"
        }
    }
}
