package save

import (
	"errors"
	"fmt"

	"github.com/valocode/bubbly/client"
	"github.com/valocode/bubbly/config"
	"github.com/valocode/bubbly/ent"
	"github.com/valocode/bubbly/ent/vulnerabilityreview"
	"github.com/valocode/bubbly/store/api"

	"github.com/spf13/cobra"

	cmdutil "github.com/valocode/bubbly/cmd/util"
)

var (
	cmdLong = cmdutil.LongDesc(
		`
		Save a Bubbly vulnerability review to the bubbly server
		`,
	)

	cmdExamples = cmdutil.Examples(
		`
		# Save a Bubbly vulnerability review to the bubbly server

		bubbly vulnerabilityreview save

		bubbly vr save
		`,
	)
)

func New(bCtx *config.BubblyConfig) *cobra.Command {
	var (
		note           string
		decision       string
		setProjects    []string
		notSetProjects []string
		setRepos       []string
		notSetRepos    []string
		setCommits     []string
		notSetCommits  []string
	)
	cmd := &cobra.Command{
		Use:     "save <vulnerability-id> [flags]",
		Short:   "Save a Bubbly vulnerability review for a vulnerability",
		Long:    cmdLong + "\n\n",
		Example: cmdExamples,
		Args:    cobra.ExactArgs(1),
		RunE: func(cmd *cobra.Command, args []string) error {
			vulnID := args[0]
			if note == "" {
				return errors.New("note must be provided")
			}
			if decision == "" {
				return errors.New("decision must be provided")
			}
			if err := vulnerabilityreview.DecisionValidator(vulnerabilityreview.Decision(decision)); err != nil {
				return fmt.Errorf("invalid decision: %w", err)
			}
			// TODO: use args for note, decision
			if err := client.SaveVulnerabilityReview(bCtx, &api.VulnerabilityReviewSaveRequest{
				Review: ent.NewVulnerabilityReviewModelCreate().
					SetNote(note).SetDecision(vulnerabilityreview.Decision(decision)),
				VulnerabilityID: &vulnID,
				Affects: &api.VulnerabilityReviewAffects{
					Projects:    setProjects,
					NotProjects: notSetProjects,
					Repos:       setRepos,
					NotRepos:    notSetRepos,
					Commits:     setCommits,
					NotCommits:  notSetCommits,
				},
			}); err != nil {
				return err
			}
			return nil
		},
	}

	f := cmd.PersistentFlags()
	f.StringVarP(&note, "note", "n", "", "Note that gets added to the vulnerability review")
	f.StringVarP(&decision, "decision", "d", "", "Decision that gets added to the vulnerability review")
	f.StringSliceVar(&setProjects, "set-projects", nil, "List of project (names) to associate the vulnerability review with")
	f.StringSliceVar(&notSetProjects, "not-set-projects", nil, "List of project (names) to disassociate the vulnerability review with")
	f.StringSliceVar(&setRepos, "set-repos", nil, "List of repo (names) to associate the vulnerability review with")
	f.StringSliceVar(&notSetRepos, "not-set-repos", nil, "List of repo (names) to disassociate the vulnerability review with")
	f.StringSliceVar(&setCommits, "set-commits", nil, "List of commits (hashes, which require a release) to associate the vulnerability review with")
	f.StringSliceVar(&notSetCommits, "not-set-commits", nil, "List of commits (hashes, which require a release) to disassociate the vulnerability review with")
	return cmd
}
