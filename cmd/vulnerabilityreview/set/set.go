package set

import (
	"fmt"
	"strconv"

	"github.com/valocode/bubbly/client"
	"github.com/valocode/bubbly/config"
	"github.com/valocode/bubbly/ent"
	"github.com/valocode/bubbly/ent/vulnerabilityreview"
	"github.com/valocode/bubbly/store/api"

	"github.com/spf13/cobra"

	cmdutil "github.com/valocode/bubbly/cmd/util"
)

var (
	cmdLong = cmdutil.LongDesc(
		`
		Set a Bubbly vulnerability review to a repo or project
		`,
	)

	cmdExamples = cmdutil.Examples(
		`
		# Set a Bubbly vulnerability review to a repo or project

		bubbly vulnerabilityreview set

		bubbly vr set
		`,
	)
)

func New(bCtx *config.BubblyConfig) *cobra.Command {
	var (
		note           string
		decision       string
		setProjects    []string
		notSetProjects []string
		setRepos       []string
		notSetRepos    []string
		setCommits     []string
		notSetCommits  []string
	)
	cmd := &cobra.Command{
		Use:     "set <review-id> [flags]",
		Short:   "Set a Bubbly vulnerability review to a repo or project",
		Long:    cmdLong + "\n\n",
		Example: cmdExamples,
		Args:    cobra.ExactArgs(1),
		RunE: func(cmd *cobra.Command, args []string) error {
			reviewID, err := strconv.Atoi(args[0])
			if err != nil {
				return fmt.Errorf("review-id must be a number")
			}
			review := ent.NewVulnerabilityReviewModelUpdate()
			if note != "" {
				review.SetNote(note)
			}
			if decision != "" {
				if err := vulnerabilityreview.DecisionValidator(vulnerabilityreview.Decision(decision)); err != nil {
					return fmt.Errorf("invalid decision: %w", err)
				}
				review.SetDecision(vulnerabilityreview.Decision(decision))
			}

			// TODO: use args for note, decision
			if err := client.UpdateVulnerabilityReview(bCtx, &api.VulnerabilityReviewUpdateRequest{
				ID:     &reviewID,
				Review: review,
				Affects: &api.VulnerabilityReviewAffects{
					Projects:    setProjects,
					NotProjects: notSetProjects,
					Repos:       setRepos,
					NotRepos:    notSetRepos,
					Commits:     setCommits,
					NotCommits:  notSetCommits,
				},
			}); err != nil {
				return err
			}
			return nil
		},
	}

	f := cmd.PersistentFlags()
	f.StringVarP(&note, "note", "n", "", "Note that gets added to the vulnerability review")
	f.StringVarP(&decision, "decision", "d", "", "Decision that gets added to the vulnerability review")
	f.StringSliceVar(&setProjects, "set-projects", nil, "List of project (names) to associate the vulnerability review with")
	f.StringSliceVar(&notSetProjects, "not-set-projects", nil, "List of project (names) to disassociate the vulnerability review with")
	f.StringSliceVar(&setRepos, "set-repos", nil, "List of repo (names) to associate the vulnerability review with")
	f.StringSliceVar(&notSetRepos, "not-set-repos", nil, "List of repo (names) to disassociate the vulnerability review with")
	f.StringSliceVar(&setCommits, "set-commits", nil, "List of commits (hashes, which require a release) to associate the vulnerability review with")
	f.StringSliceVar(&notSetCommits, "not-set-commits", nil, "List of commits (hashes, which require a release) to disassociate the vulnerability review with")
	return cmd
}
